
nucleo-446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08008f48  08008f48  00009f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009390  08009390  0000b470  2**0
                  CONTENTS
  4 .ARM          00000008  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009398  08009398  0000b470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009398  08009398  0000a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  080093a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000470  08009810  0000b470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cdc  08009810  0000bcdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b470  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f68  00000000  00000000  0000b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf1  00000000  00000000  0001f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00022100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  000231f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002458c  00000000  00000000  00023f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f8d  00000000  00000000  000484cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b1c  00000000  00000000  0005e45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  00134fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000470 	.word	0x20000470
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008f30 	.word	0x08008f30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000474 	.word	0x20000474
 800020c:	08008f30 	.word	0x08008f30

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <ad717x_set_channel_status>:
 *			    	and False in case of Disable
 * @return Returns 0 for success or negative error code in case of failure.
*******************************************************************************/
int ad717x_set_channel_status(ad717x_dev *device, uint8_t channel_id,
			      bool channel_status)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *chn_register;
	int ret;

	if (!device)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <ad717x_set_channel_status+0x1a>
		return -EINVAL;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f10:	e031      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	/* Point to the Channel register */
	chn_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	3310      	adds	r3, #16
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fa40 	bl	80013a0 <AD717X_GetReg>
 8000f20:	60f8      	str	r0, [r7, #12]
	if (!chn_register)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <ad717x_set_channel_status+0x34>
		return -EINVAL;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f2a:	e024      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	if (channel_status)
 8000f2c:	78bb      	ldrb	r3, [r7, #2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <ad717x_set_channel_status+0x48>
		/* Assign the Channel enable bit and write to channel register */
		chn_register->value |= AD717X_CHMAP_REG_CH_EN;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	e005      	b.n	8000f4c <ad717x_set_channel_status+0x54>
	else
		chn_register->value &= ~(AD717X_CHMAP_REG_CH_EN);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id);
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fa93 	bl	8001480 <AD717X_WriteRegister>
 8000f5a:	60b8      	str	r0, [r7, #8]
	if (ret < 0)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da01      	bge.n	8000f66 <ad717x_set_channel_status+0x6e>
		return ret;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	e007      	b.n	8000f76 <ad717x_set_channel_status+0x7e>
	device->chan_map[channel_id].channel_enable = channel_status;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	330a      	adds	r3, #10
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	78ba      	ldrb	r2, [r7, #2]
 8000f72:	719a      	strb	r2, [r3, #6]

	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	ffffd929 	.word	0xffffd929

08000f84 <ad717x_set_adc_mode>:
 * @param device - AD717x Device Descriptor
 * @param adc_mode - ADC Mode to be configured
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_adc_mode(ad717x_dev *device, enum ad717x_mode adc_mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <ad717x_set_adc_mode+0x16>
		return -EINVAL;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000f98:	e026      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Retrieve the ADC Mode reigster */
	adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f9ff 	bl	80013a0 <AD717X_GetReg>
 8000fa2:	60f8      	str	r0, [r7, #12]
	if (!adc_mode_reg)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <ad717x_set_adc_mode+0x2a>
		return -EINVAL;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fac:	e01c      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Clear the Mode[6:4] bits in the ADC Mode Register */
	adc_mode_reg->value &= ~(AD717X_ADCMODE_REG_MODE_MSK);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	605a      	str	r2, [r3, #4]

	/* Set the required conversion mode, write to register */
	adc_mode_reg->value |= AD717X_ADCMODE_REG_MODE(adc_mode);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	605a      	str	r2, [r3, #4]
	if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fa56 	bl	8001480 <AD717X_WriteRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da01      	bge.n	8000fde <ad717x_set_adc_mode+0x5a>
		return -EINVAL;
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fdc:	e004      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>
	device->mode = adc_mode;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffd929 	.word	0xffffd929

08000ff4 <ad717x_connect_analog_input>:
 * @param analog_input - Analog Inputs to the Channel
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_connect_analog_input(ad717x_dev *device, uint8_t channel_id,
				union ad717x_analog_inputs analog_input)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803a      	strh	r2, [r7, #0]
 8001000:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *channel_reg;

	if (!device)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <ad717x_connect_analog_input+0x18>
		return -EINVAL;
 8001008:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 800100a:	e079      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	/* Retrieve the channel register */
	channel_reg = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	3310      	adds	r3, #16
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f9c3 	bl	80013a0 <AD717X_GetReg>
 800101a:	60f8      	str	r0, [r7, #12]
	if (!channel_reg)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <ad717x_connect_analog_input+0x32>
		return -EINVAL;
 8001022:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001024:	e06c      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	switch ((uint8_t)device->active_device) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	2b04      	cmp	r3, #4
 800102c:	dc02      	bgt.n	8001034 <ad717x_connect_analog_input+0x40>
 800102e:	2b00      	cmp	r3, #0
 8001030:	da04      	bge.n	800103c <ad717x_connect_analog_input+0x48>
 8001032:	e062      	b.n	80010fa <ad717x_connect_analog_input+0x106>
 8001034:	3b05      	subs	r3, #5
 8001036:	2b06      	cmp	r3, #6
 8001038:	d85f      	bhi.n	80010fa <ad717x_connect_analog_input+0x106>
 800103a:	e024      	b.n	8001086 <ad717x_connect_analog_input+0x92>
	case ID_AD4112 :
	case ID_AD4114 :
	case ID_AD4115 :
	case ID_AD4116 :
		/* Clear and Set the required analog input pair to channel */
		channel_reg->value  &= ~AD717x_CHANNEL_INPUT_MASK;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	6053      	str	r3, [r2, #4]
		channel_reg->value |= AD4111_CHMAP_REG_INPUT(analog_input.analog_input_pairs);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001056:	431a      	orrs	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3310      	adds	r3, #16
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fa0b 	bl	8001480 <AD717X_WriteRegister>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da01      	bge.n	8001074 <ad717x_connect_analog_input+0x80>
			return -EINVAL;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001072:	e045      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001074:	78fb      	ldrb	r3, [r7, #3]
			analog_input.analog_input_pairs;
 8001076:	8839      	ldrh	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	330a      	adds	r3, #10
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	460a      	mov	r2, r1
 8001082:	811a      	strh	r2, [r3, #8]
		break;
 8001084:	e03b      	b.n	80010fe <ad717x_connect_analog_input+0x10a>
	case ID_AD7175_8:
	case ID_AD7176_2:
	case ID_AD7177_2:
	case ID_AD7172_2:
		/* Select the Positive Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINPOS_MSK;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]
		channel_reg->value |=  AD717X_CHMAP_REG_AINPOS(
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	783b      	ldrb	r3, [r7, #0]
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
					       analog_input.ainp.pos_analog_input);

		/* Select the Negative Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINNEG_MSK;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 021f 	bic.w	r2, r3, #31
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	605a      	str	r2, [r3, #4]
		channel_reg->value |= AD717X_CHMAP_REG_AINNEG(
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	431a      	orrs	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	605a      	str	r2, [r3, #4]
					      analog_input.ainp.neg_analog_input);
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	3310      	adds	r3, #16
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f9d9 	bl	8001480 <AD717X_WriteRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da01      	bge.n	80010d8 <ad717x_connect_analog_input+0xe4>
			return -EINVAL;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010d6:	e013      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010d8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.pos_analog_input;
 80010da:	7839      	ldrb	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	330a      	adds	r3, #10
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	460a      	mov	r2, r1
 80010e6:	721a      	strb	r2, [r3, #8]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010e8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.neg_analog_input;
 80010ea:	7879      	ldrb	r1, [r7, #1]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	330a      	adds	r3, #10
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	725a      	strb	r2, [r3, #9]
		break;
 80010f8:	e001      	b.n	80010fe <ad717x_connect_analog_input+0x10a>

	default :
		return -EINVAL;
 80010fa:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010fc:	e000      	b.n	8001100 <ad717x_connect_analog_input+0x10c>
	}

	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	ffffd929 	.word	0xffffd929

0800110c <ad717x_assign_setup>:
 * @param channel_id - Channel ID (number)
 * @param setup - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_assign_setup(ad717x_dev *device, uint8_t channel_id, uint8_t setup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *p_register;

	if (!device)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <ad717x_assign_setup+0x1a>
		return -EINVAL;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001124:	e02f      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Retrieve the Channel Register */
	p_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	3310      	adds	r3, #16
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f936 	bl	80013a0 <AD717X_GetReg>
 8001134:	60f8      	str	r0, [r7, #12]
	if (!p_register)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <ad717x_assign_setup+0x34>
		return -EINVAL;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <ad717x_assign_setup+0x84>)
 800113e:	e022      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Assign set up to the chosen channel */
	p_register->value &= ~AD717X_CHMAP_REG_SETUP_SEL_MSK;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
	p_register->value |= AD717X_CHMAP_REG_SETUP_SEL(setup);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	78bb      	ldrb	r3, [r7, #2]
 8001152:	031b      	lsls	r3, r3, #12
 8001154:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	3310      	adds	r3, #16
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f98a 	bl	8001480 <AD717X_WriteRegister>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <ad717x_assign_setup+0x6a>
		return -EINVAL;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001174:	e007      	b.n	8001186 <ad717x_assign_setup+0x7a>
	device->chan_map[channel_id].setup_sel = setup;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	330a      	adds	r3, #10
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	78ba      	ldrb	r2, [r7, #2]
 8001182:	71da      	strb	r2, [r3, #7]

	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	ffffd929 	.word	0xffffd929

08001194 <ad717x_set_polarity>:
 * @param bipolar - Polarity Select:True in case of Bipolar, False in case of Unipolar
 * @param setup_id - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_set_polarity(ad717x_dev* device, bool bipolar, uint8_t setup_id)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;

	if (!device)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <ad717x_set_polarity+0x1a>
		return -EINVAL;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011ac:	e030      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	3320      	adds	r3, #32
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8f2 	bl	80013a0 <AD717X_GetReg>
 80011bc:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <ad717x_set_polarity+0x34>
		return -EINVAL;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011c6:	e023      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Set the BI_UNIPOLAR bit in case of BIPOLAR operation */
	if (bipolar)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <ad717x_set_polarity+0x48>
		setup_reg->value |= AD717X_SETUP_CONF_REG_BI_UNIPOLAR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e005      	b.n	80011e8 <ad717x_set_polarity+0x54>
	else
		setup_reg->value &= ~(AD717X_SETUP_CONF_REG_BI_UNIPOLAR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	3320      	adds	r3, #32
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f945 	bl	8001480 <AD717X_WriteRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da01      	bge.n	8001200 <ad717x_set_polarity+0x6c>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011fe:	e007      	b.n	8001210 <ad717x_set_polarity+0x7c>
	device->setups[setup_id].bi_unipolar = bipolar;
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	3302      	adds	r3, #2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	715a      	strb	r2, [r3, #5]

	return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	ffffd929 	.word	0xffffd929

0800121c <ad717x_set_reference_source>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_reference_source(ad717x_dev* device,
				enum ad717x_reference_source ref_source, uint8_t setup_id)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <ad717x_set_reference_source+0x1a>
		return -EINVAL;
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001234:	e04e      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	3320      	adds	r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8ae 	bl	80013a0 <AD717X_GetReg>
 8001244:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <ad717x_set_reference_source+0x34>
		return -EINVAL;
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 800124e:	e041      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Choose the reference source for the selected setup */
	setup_reg->value &= ~AD717X_SETUP_CONF_REG_REF_SEL_MSK;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
	setup_reg->value |= (AD717X_SETUP_CONF_REG_REF_SEL(ref_source));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	3320      	adds	r3, #32
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f902 	bl	8001480 <AD717X_WriteRegister>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	da01      	bge.n	8001286 <ad717x_set_reference_source+0x6a>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001284:	e026      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
	device->setups[setup_id].ref_source = ref_source;
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	721a      	strb	r2, [r3, #8]

	/* Enable the REF_EN Bit in case of Internal reference */
	if (ref_source == INTERNAL_REF) {
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d11b      	bne.n	80012d2 <ad717x_set_reference_source+0xb6>
		/* Retrieve the ADC Mode reigster */
		adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f87f 	bl	80013a0 <AD717X_GetReg>
 80012a2:	60b8      	str	r0, [r7, #8]
		if (!adc_mode_reg)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <ad717x_set_reference_source+0x92>
			return -EINVAL;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ac:	e012      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

		/* Set the REF_EN Bit */
		adc_mode_reg->value |= AD717X_ADCMODE_REG_REF_EN;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f8df 	bl	8001480 <AD717X_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da01      	bge.n	80012cc <ad717x_set_reference_source+0xb0>
			return -EINVAL;
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ca:	e003      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
		device->ref_en = true;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	72da      	strb	r2, [r3, #11]
	}

	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	ffffd929 	.word	0xffffd929

080012e0 <ad717x_enable_input_buffer>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_enable_input_buffer(ad717x_dev* device,
			       bool inbuf_en, bool refbuf_en, uint8_t setup_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	70fb      	strb	r3, [r7, #3]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70bb      	strb	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	707b      	strb	r3, [r7, #1]
	ad717x_st_reg* setup_reg;

	if (!device)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <ad717x_enable_input_buffer+0x24>
		return -EINVAL;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001302:	e047      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	3320      	adds	r3, #32
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f847 	bl	80013a0 <AD717X_GetReg>
 8001312:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <ad717x_enable_input_buffer+0x3e>
		return -EINVAL;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 800131c:	e03a      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	if (inbuf_en)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <ad717x_enable_input_buffer+0x52>
		/* Enable input buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_AINBUF_P |
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	e005      	b.n	800133e <ad717x_enable_input_buffer+0x5e>
				     AD717X_SETUP_CONF_REG_AINBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_AINBUF_P |
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_AINBUF_N));
	if (refbuf_en)
 800133e:	78bb      	ldrb	r3, [r7, #2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <ad717x_enable_input_buffer+0x72>
		/* Enable reference buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_REFBUF_P |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f443 6240 	orr.w	r2, r3, #3072	@ 0xc00
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	e005      	b.n	800135e <ad717x_enable_input_buffer+0x7e>
				     AD717X_SETUP_CONF_REG_REFBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_REFBUF_P |
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_REFBUF_N));

	if (AD717X_WriteRegister(device,
 800135e:	787b      	ldrb	r3, [r7, #1]
 8001360:	3320      	adds	r3, #32
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f88a 	bl	8001480 <AD717X_WriteRegister>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	da01      	bge.n	8001376 <ad717x_enable_input_buffer+0x96>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001374:	e00e      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>
	device->setups[setup_id].input_buff = inbuf_en;
 8001376:	787b      	ldrb	r3, [r7, #1]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	71da      	strb	r2, [r3, #7]
	device->setups[setup_id].ref_buff = refbuf_en;
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	78ba      	ldrb	r2, [r7, #2]
 8001390:	719a      	strb	r2, [r3, #6]

	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	ffffd929 	.word	0xffffd929

080013a0 <AD717X_GetReg>:
*
* @return A pointer to the register if found or 0.
*******************************************************************************/
ad717x_st_reg *AD717X_GetReg(ad717x_dev *device,
			     uint8_t reg_address)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	ad717x_st_reg *reg = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]

	if (!device || !device->regs)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <AD717X_GetReg+0x1e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <AD717X_GetReg+0x22>
		return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e021      	b.n	8001406 <AD717X_GetReg+0x66>

	for (i = 0; i < device->num_regs; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e018      	b.n	80013fa <AD717X_GetReg+0x5a>
		if (device->regs[i].addr == reg_address) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d109      	bne.n	80013f4 <AD717X_GetReg+0x54>
			reg = &device->regs[i];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	60bb      	str	r3, [r7, #8]
			break;
 80013f2:	e007      	b.n	8001404 <AD717X_GetReg+0x64>
	for (i = 0; i < device->num_regs; i++) {
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a1b      	ldrb	r3, [r3, #8]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3e1      	bcc.n	80013c8 <AD717X_GetReg+0x28>
		}
	}

	return reg;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <AD717X_ReadRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_ReadRegister(ad717x_dev *device,
			    uint8_t addr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	int32_t ret       = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
//	uint8_t i         = 0;
//	uint8_t check8    = 0;
//	uint8_t msgBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	ad717x_st_reg *pReg;

	if(!device)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <AD717X_ReadRegister+0x1c>
		return INVALID_VAL;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e01e      	b.n	800146e <AD717X_ReadRegister+0x5a>

	pReg = AD717X_GetReg(device, addr);
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffb3 	bl	80013a0 <AD717X_GetReg>
 800143a:	60b8      	str	r0, [r7, #8]
	if (!pReg)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <AD717X_ReadRegister+0x34>
		return INVALID_VAL;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e012      	b.n	800146e <AD717X_ReadRegister+0x5a>

	/* Build the Command word */
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
		    AD717X_COMM_REG_RA(pReg->addr);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001452:	b25b      	sxtb	r3, r3
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
 8001454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001458:	b25b      	sxtb	r3, r3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <AD717X_ReadRegister+0x64>)
 800145e:	701a      	strb	r2, [r3, #0]
	spi_read_reg.pReg = pReg;
 8001460:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <AD717X_ReadRegister+0x64>)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	6053      	str	r3, [r2, #4]
//	spi_read_reg.size = pReg->size;

	/* Read data from the device */

	spi_status = READING;
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <AD717X_ReadRegister+0x68>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
//	for(i = 0; i < pReg->size; i++) {
//		pReg->value <<= 8;
//		pReg->value += Rx[i];
//	}

	return ret;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000b70 	.word	0x20000b70
 800147c:	20000b6c 	.word	0x20000b6c

08001480 <AD717X_WriteRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_WriteRegister(ad717x_dev *device,
			     uint8_t addr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
	int32_t ret      = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
	int32_t regValue = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
	uint8_t wrBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001494:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <AD717X_WriteRegister+0xb8>)
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i        = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	76fb      	strb	r3, [r7, #27]
//	uint8_t crc8     = 0;
	ad717x_st_reg *preg;

	if(!device)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <AD717X_WriteRegister+0x32>
		return INVALID_VAL;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	e03e      	b.n	8001530 <AD717X_WriteRegister+0xb0>

	preg = AD717X_GetReg(device, addr);
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff72 	bl	80013a0 <AD717X_GetReg>
 80014bc:	6138      	str	r0, [r7, #16]
	if (!preg)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <AD717X_WriteRegister+0x4a>
		return INVALID_VAL;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	e032      	b.n	8001530 <AD717X_WriteRegister+0xb0>

	/* Build the Command word */
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
		   AD717X_COMM_REG_RA(preg->addr);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	681b      	ldr	r3, [r3, #0]
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	723b      	strb	r3, [r7, #8]

	/* Fill the write buffer */
	regValue = preg->value;
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	76fb      	strb	r3, [r7, #27]
 80014e2:	e00f      	b.n	8001504 <AD717X_WriteRegister+0x84>
		wrBuf[preg->size - i] = regValue & 0xFF;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	7efb      	ldrb	r3, [r7, #27]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	3320      	adds	r3, #32
 80014f2:	443b      	add	r3, r7
 80014f4:	f803 2c18 	strb.w	r2, [r3, #-24]
		regValue >>= 8;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 80014fe:	7efb      	ldrb	r3, [r7, #27]
 8001500:	3301      	adds	r3, #1
 8001502:	76fb      	strb	r3, [r7, #27]
 8001504:	7efa      	ldrb	r2, [r7, #27]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbea      	blt.n	80014e4 <AD717X_WriteRegister+0x64>
	/* Write data to the device */
//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       (device->useCRC != AD717X_DISABLE) ?
//				       preg->size + 2 : preg->size + 1);
	memcpy(spi_write_reg.Tx, wrBuf, 8);
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <AD717X_WriteRegister+0xbc>)
 8001510:	461a      	mov	r2, r3
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	e893 0003 	ldmia.w	r3, {r0, r1}
 800151a:	e882 0003 	stmia.w	r2, {r0, r1}
	spi_write_reg.pReg = preg;
 800151e:	4a07      	ldr	r2, [pc, #28]	@ (800153c <AD717X_WriteRegister+0xbc>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	60d3      	str	r3, [r2, #12]
	spi_status = WRITING;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <AD717X_WriteRegister+0xc0>)
 8001526:	2203      	movs	r2, #3
 8001528:	701a      	strb	r2, [r3, #0]
//	ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
	ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
	return ret;
 800152e:	697b      	ldr	r3, [r7, #20]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08008f48 	.word	0x08008f48
 800153c:	20000b78 	.word	0x20000b78
 8001540:	20000b6c 	.word	0x20000b6c

08001544 <AD717X_Reset>:
* @param device - The handler of the instance of the driver.
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Reset(ad717x_dev *device)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
	uint8_t wrBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001550:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <AD717X_Reset+0x40>)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155a:	e883 0003 	stmia.w	r3, {r0, r1}

	if(!device)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <AD717X_Reset+0x26>
		return INVALID_VAL;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e007      	b.n	800157a <AD717X_Reset+0x36>

//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       8);
	HAL_SPI_Transmit(SPI, wrBuf, 8, 100);
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	2364      	movs	r3, #100	@ 0x64
 8001570:	2208      	movs	r2, #8
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <AD717X_Reset+0x44>)
 8001574:	f002 fed1 	bl	800431a <HAL_SPI_Transmit>
	return ret;
 8001578:	697b      	ldr	r3, [r7, #20]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	08008f50 	.word	0x08008f50
 8001588:	2000048c 	.word	0x2000048c

0800158c <ad717x_configure_device_odr>:
 * @return 0 in case of success, negative error code otherwise
 */
int32_t ad717x_configure_device_odr(ad717x_dev *dev,
				    uint8_t filtcon_id,
				    uint8_t odr_sel)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *filtcon_reg;
	int32_t ret;

	/* Retrieve the FILTCON register */
	filtcon_reg = AD717X_GetReg(dev,
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	3328      	adds	r3, #40	@ 0x28
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fefb 	bl	80013a0 <AD717X_GetReg>
 80015aa:	60f8      	str	r0, [r7, #12]
				    AD717X_FILTCON0_REG + filtcon_id);
	if (!filtcon_reg) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <ad717x_configure_device_odr+0x2a>
		return -EINVAL;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <ad717x_configure_device_odr+0x6c>)
 80015b4:	e01b      	b.n	80015ee <ad717x_configure_device_odr+0x62>
	}

	/* Clear the ODR bits, configure the requested ODR */
	filtcon_reg->value &= ~(AD717x_ODR_MSK);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f023 021f 	bic.w	r2, r3, #31
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]
	filtcon_reg->value |= AD717X_FILT_CONF_REG_ODR(odr_sel);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(dev, AD717X_FILTCON0_REG + filtcon_id);
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	3328      	adds	r3, #40	@ 0x28
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff50 	bl	8001480 <AD717X_WriteRegister>
 80015e0:	60b8      	str	r0, [r7, #8]
	if (ret) {
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <ad717x_configure_device_odr+0x60>
		return ret;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	e000      	b.n	80015ee <ad717x_configure_device_odr+0x62>
	}

	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	ffffd929 	.word	0xffffd929

080015fc <AD717X_Init>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Init(ad717x_dev **device,
		    ad717x_init_param init_param)
{
 80015fc:	b084      	sub	sp, #16
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800160a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;
	ad717x_st_reg *preg;
	uint8_t setup_index;
	uint8_t ch_index;

	dev = (ad717x_dev *)malloc(sizeof(*dev));
 800160e:	20bc      	movs	r0, #188	@ 0xbc
 8001610:	f004 fda8 	bl	8006164 <malloc>
 8001614:	4603      	mov	r3, r0
 8001616:	613b      	str	r3, [r7, #16]
	if (!dev)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <AD717X_Init+0x28>
		return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e07d      	b.n	8001720 <AD717X_Init+0x124>

	dev->regs = init_param.regs;
 8001624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	605a      	str	r2, [r3, #4]
	dev->num_regs = init_param.num_regs;
 800162a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	721a      	strb	r2, [r3, #8]
//	ret = no_os_spi_init(&dev->spi_desc, &init_param.spi_init);
//	if (ret < 0)
//		return ret;

	/*  Reset the device interface.*/
	ret = AD717X_Reset(dev);
 8001632:	6938      	ldr	r0, [r7, #16]
 8001634:	f7ff ff86 	bl	8001544 <AD717X_Reset>
 8001638:	60f8      	str	r0, [r7, #12]
	if (ret < 0)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da01      	bge.n	8001644 <AD717X_Init+0x48>
		return ret;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e06d      	b.n	8001720 <AD717X_Init+0x124>

	/* Initialize ADC mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
	if(ret < 0)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da01      	bge.n	800164e <AD717X_Init+0x52>
		return ret;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	e068      	b.n	8001720 <AD717X_Init+0x124>

	/* Initialize Interface mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
	if(ret < 0)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da01      	bge.n	8001658 <AD717X_Init+0x5c>
		return ret;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	e063      	b.n	8001720 <AD717X_Init+0x124>

	/* Get CRC State */
//	ret = AD717X_UpdateCRCSetting(dev);
	if(ret < 0)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da01      	bge.n	8001662 <AD717X_Init+0x66>
		return ret;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	e05e      	b.n	8001720 <AD717X_Init+0x124>

	/* Initialize registers AD717X_GPIOCON_REG through AD717X_OFFSET0_REG */
	preg = AD717X_GetReg(dev, AD717X_GPIOCON_REG);
 8001662:	2106      	movs	r1, #6
 8001664:	6938      	ldr	r0, [r7, #16]
 8001666:	f7ff fe9b 	bl	80013a0 <AD717X_GetReg>
 800166a:	60b8      	str	r0, [r7, #8]
	if (!preg)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <AD717X_Init+0x7c>
		return INVALID_VAL;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e053      	b.n	8001720 <AD717X_Init+0x124>
//			break;
//		preg ++;
//	}

	/* Read ID register to identify the part */
	ret = AD717X_ReadRegister(dev, AD717X_ID_REG);
 8001678:	2107      	movs	r1, #7
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff feca 	bl	8001414 <AD717X_ReadRegister>
 8001680:	60f8      	str	r0, [r7, #12]
	if(ret < 0)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da01      	bge.n	800168c <AD717X_Init+0x90>
		return ret;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	e049      	b.n	8001720 <AD717X_Init+0x124>
	dev->active_device = init_param.active_device;
 800168c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	729a      	strb	r2, [r3, #10]
	dev->num_channels = init_param.num_channels;
 8001694:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	731a      	strb	r2, [r3, #12]

	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 800169c:	2300      	movs	r3, #0
 800169e:	75fb      	strb	r3, [r7, #23]
 80016a0:	e016      	b.n	80016d0 <AD717X_Init+0xd4>
		/* Set Polarity */
//		ret = ad717x_set_polarity(dev, init_param.setups[setup_index].bi_unipolar,
//					  setup_index);
		if (ret < 0)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da01      	bge.n	80016ac <AD717X_Init+0xb0>
			return ret;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	e039      	b.n	8001720 <AD717X_Init+0x124>

		/* Select the reference source */
//		ret = ad717x_set_reference_source(dev,
//						  init_param.setups[setup_index].ref_source, setup_index);
		if (ret < 0)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da01      	bge.n	80016b6 <AD717X_Init+0xba>
			return ret;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	e034      	b.n	8001720 <AD717X_Init+0x124>
		/* Enable reference and input buffers */
//		ret = ad717x_enable_input_buffer(dev,
//						 init_param.setups[setup_index].input_buff,
//						 init_param.setups[setup_index].ref_buff,
//						 setup_index);
		if (ret < 0)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da01      	bge.n	80016c0 <AD717X_Init+0xc4>
			return ret;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	e02f      	b.n	8001720 <AD717X_Init+0x124>

//		ret = ad717x_configure_device_odr(dev, setup_index,
//						  init_param.filter_configuration[setup_index].odr);
		if (ret < 0)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da01      	bge.n	80016ca <AD717X_Init+0xce>
			return ret;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	e02a      	b.n	8001720 <AD717X_Init+0x124>
	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	3301      	adds	r3, #1
 80016ce:	75fb      	strb	r3, [r7, #23]
 80016d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016d4:	7dfa      	ldrb	r2, [r7, #23]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3e3      	bcc.n	80016a2 <AD717X_Init+0xa6>
	}

	/* Set Conversion Mode */
//	ret = ad717x_set_adc_mode(dev, init_param.mode);
	if (ret < 0)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da01      	bge.n	80016e4 <AD717X_Init+0xe8>
		return ret;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	e01d      	b.n	8001720 <AD717X_Init+0x124>

	/*  Connect Analog Inputs, Assign Setup, Disable all channels */
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	75bb      	strb	r3, [r7, #22]
 80016e8:	e011      	b.n	800170e <AD717X_Init+0x112>
//		ret = ad717x_connect_analog_input(dev, ch_index,
//						  init_param.chan_map[ch_index].analog_inputs);
		if (ret < 0)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da01      	bge.n	80016f4 <AD717X_Init+0xf8>
			return ret;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	e015      	b.n	8001720 <AD717X_Init+0x124>

//		ret = ad717x_assign_setup(dev, ch_index,
//					  init_param.chan_map[ch_index].setup_sel);
		if (ret < 0)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da01      	bge.n	80016fe <AD717X_Init+0x102>
			return ret;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	e010      	b.n	8001720 <AD717X_Init+0x124>

//		ret = ad717x_set_channel_status(dev,ch_index,
//						init_param.chan_map[ch_index].channel_enable);
		if (ret < 0)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	da01      	bge.n	8001708 <AD717X_Init+0x10c>
			return ret;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	e00b      	b.n	8001720 <AD717X_Init+0x124>
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 8001708:	7dbb      	ldrb	r3, [r7, #22]
 800170a:	3301      	adds	r3, #1
 800170c:	75bb      	strb	r3, [r7, #22]
 800170e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001712:	7dba      	ldrb	r2, [r7, #22]
 8001714:	429a      	cmp	r2, r3
 8001716:	d3e8      	bcc.n	80016ea <AD717X_Init+0xee>
	}
	*device = dev;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	601a      	str	r2, [r3, #0]

	return ret;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800172a:	b004      	add	sp, #16
 800172c:	4770      	bx	lr
	...

08001730 <adc_to_buf>:
#include "ad717x.h"

void send_adc_data();

void adc_to_buf(uint32_t new_val)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	time_buff[adc_buff_idx] = TIM.Instance->CNT;
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <adc_to_buf+0x4c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <adc_to_buf+0x50>)
 800173e:	8812      	ldrh	r2, [r2, #0]
 8001740:	4611      	mov	r1, r2
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <adc_to_buf+0x54>)
 8001746:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adc_buff[adc_buff_idx++] = new_val;
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <adc_to_buf+0x50>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	b291      	uxth	r1, r2
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <adc_to_buf+0x50>)
 8001754:	8011      	strh	r1, [r2, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <adc_to_buf+0x58>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(adc_buff_idx >= ADC_BUFFER_SIZE)
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <adc_to_buf+0x50>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	d904      	bls.n	8001772 <adc_to_buf+0x42>
	{
		send_adc_data();
 8001768:	f000 f810 	bl	800178c <send_adc_data>
		adc_buff_idx = 0;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <adc_to_buf+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	801a      	strh	r2, [r3, #0]
//		TIM.Instance->CNT = 0;
	}
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200004e4 	.word	0x200004e4
 8001780:	20000b64 	.word	0x20000b64
 8001784:	200009d4 	.word	0x200009d4
 8001788:	20000a9c 	.word	0x20000a9c

0800178c <send_adc_data>:

void send_adc_data()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(PC_UART, (uint8_t*)"{fb,", 4, 10);
 8001790:	230a      	movs	r3, #10
 8001792:	2204      	movs	r2, #4
 8001794:	490b      	ldr	r1, [pc, #44]	@ (80017c4 <send_adc_data+0x38>)
 8001796:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <send_adc_data+0x3c>)
 8001798:	f003 fe9a 	bl	80054d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(PC_UART, (uint8_t*)adc_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
 800179c:	2364      	movs	r3, #100	@ 0x64
 800179e:	22c8      	movs	r2, #200	@ 0xc8
 80017a0:	490a      	ldr	r1, [pc, #40]	@ (80017cc <send_adc_data+0x40>)
 80017a2:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <send_adc_data+0x3c>)
 80017a4:	f003 fe94 	bl	80054d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(PC_UART, (uint8_t*)time_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	22c8      	movs	r2, #200	@ 0xc8
 80017ac:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <send_adc_data+0x44>)
 80017ae:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <send_adc_data+0x3c>)
 80017b0:	f003 fe8e 	bl	80054d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(PC_UART, (uint8_t*)",end} \r\n", 8, 10);
 80017b4:	230a      	movs	r3, #10
 80017b6:	2208      	movs	r2, #8
 80017b8:	4906      	ldr	r1, [pc, #24]	@ (80017d4 <send_adc_data+0x48>)
 80017ba:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <send_adc_data+0x3c>)
 80017bc:	f003 fe88 	bl	80054d0 <HAL_UART_Transmit>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	08008f58 	.word	0x08008f58
 80017c8:	2000052c 	.word	0x2000052c
 80017cc:	20000a9c 	.word	0x20000a9c
 80017d0:	200009d4 	.word	0x200009d4
 80017d4:	08008f60 	.word	0x08008f60

080017d8 <check_command>:
extern struct spi_write spi_write_reg;

extern ad717x_dev *pad717x_dev;
//extern enum SPI_STATUS spi_status;
extern int check_command(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

	if(strchr((char*)uart_buffer, ',') != NULL)
 80017de:	212c      	movs	r1, #44	@ 0x2c
 80017e0:	481a      	ldr	r0, [pc, #104]	@ (800184c <check_command+0x74>)
 80017e2:	f005 fb7a 	bl	8006eda <strchr>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <check_command+0x5a>
	{
		char *command;
		char *endptr = strchr((char*)uart_buffer, ',');
 80017ec:	212c      	movs	r1, #44	@ 0x2c
 80017ee:	4817      	ldr	r0, [pc, #92]	@ (800184c <check_command+0x74>)
 80017f0:	f005 fb73 	bl	8006eda <strchr>
 80017f4:	60f8      	str	r0, [r7, #12]
		int length = endptr - (char*)uart_buffer;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <check_command+0x74>)
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
		command = (char*) malloc(length);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f004 fcaf 	bl	8006164 <malloc>
 8001806:	4603      	mov	r3, r0
 8001808:	607b      	str	r3, [r7, #4]
		strncpy(command, (char*) (uart_buffer+1), length);
 800180a:	4911      	ldr	r1, [pc, #68]	@ (8001850 <check_command+0x78>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	461a      	mov	r2, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f005 fb6f 	bl	8006ef4 <strncpy>
		command[length-1] = '\0';
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3b01      	subs	r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
		handle_command(command);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f844 	bl	80018b0 <handle_command>
		free(command);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f004 fca3 	bl	8006174 <free>
		return 1;
 800182e:	2301      	movs	r3, #1
 8001830:	e008      	b.n	8001844 <check_command+0x6c>
	}
	else if(strlen((char*) uart_buffer) > 200){
 8001832:	4806      	ldr	r0, [pc, #24]	@ (800184c <check_command+0x74>)
 8001834:	f7fe fd4c 	bl	80002d0 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	2bc8      	cmp	r3, #200	@ 0xc8
 800183c:	d901      	bls.n	8001842 <check_command+0x6a>
		reset_uart();
 800183e:	f000 f81d 	bl	800187c <reset_uart>
	}
	return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200005d4 	.word	0x200005d4
 8001850:	200005d5 	.word	0x200005d5

08001854 <send_string>:

extern void send_string(const char *msg)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(PC_UART, (uint8_t *)msg, strlen(msg), 10);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe fd37 	bl	80002d0 <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	230a      	movs	r3, #10
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <send_string+0x24>)
 800186c:	f003 fe30 	bl	80054d0 <HAL_UART_Transmit>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000052c 	.word	0x2000052c

0800187c <reset_uart>:

extern void reset_uart(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	strncpy((char*)uart_buffer, "", UART_BUFFER_SIZE);
 8001880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001884:	4907      	ldr	r1, [pc, #28]	@ (80018a4 <reset_uart+0x28>)
 8001886:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <reset_uart+0x2c>)
 8001888:	f005 fb34 	bl	8006ef4 <strncpy>
	HAL_UART_DMAStop(PC_UART);
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <reset_uart+0x30>)
 800188e:	f003 fecf 	bl	8005630 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 8001892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001896:	4904      	ldr	r1, [pc, #16]	@ (80018a8 <reset_uart+0x2c>)
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <reset_uart+0x30>)
 800189a:	f003 fea4 	bl	80055e6 <HAL_UART_Receive_DMA>
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08008f6c 	.word	0x08008f6c
 80018a8:	200005d4 	.word	0x200005d4
 80018ac:	2000052c 	.word	0x2000052c

080018b0 <handle_command>:


extern void handle_command(char* txt_in)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b090      	sub	sp, #64	@ 0x40
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	char *command = txt_in;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char *addr_str = (char*)uart_buffer + strlen(command) + 2;
 80018bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018be:	f7fe fd07 	bl	80002d0 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	3302      	adds	r3, #2
 80018c6:	4a69      	ldr	r2, [pc, #420]	@ (8001a6c <handle_command+0x1bc>)
 80018c8:	4413      	add	r3, r2
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(!strcmp(command, "get_id")){
 80018cc:	4968      	ldr	r1, [pc, #416]	@ (8001a70 <handle_command+0x1c0>)
 80018ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018d0:	f7fe fc9e 	bl	8000210 <strcmp>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <handle_command+0x32>
		spi_status = GETID;
 80018da:	4b66      	ldr	r3, [pc, #408]	@ (8001a74 <handle_command+0x1c4>)
 80018dc:	2204      	movs	r2, #4
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e0b9      	b.n	8001a56 <handle_command+0x1a6>

	}
	else if(!strcmp(command, "getid"))
 80018e2:	4965      	ldr	r1, [pc, #404]	@ (8001a78 <handle_command+0x1c8>)
 80018e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018e6:	f7fe fc93 	bl	8000210 <strcmp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d123      	bne.n	8001938 <handle_command+0x88>
	{
		while(HAL_GPIO_ReadPin(DRY_GPIO_Port, DRY_Pin) == GPIO_PIN_SET);
 80018f0:	bf00      	nop
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	4861      	ldr	r0, [pc, #388]	@ (8001a7c <handle_command+0x1cc>)
 80018f6:	f001 fe05 	bl	8003504 <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d0f8      	beq.n	80018f2 <handle_command+0x42>
		ad717x_st_reg *pReg;
//		ad717x_dev *pad717x_dev1 = NULL;
		AD717X_ReadRegister(pad717x_dev, 0x07);
 8001900:	4b5f      	ldr	r3, [pc, #380]	@ (8001a80 <handle_command+0x1d0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2107      	movs	r1, #7
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fd84 	bl	8001414 <AD717X_ReadRegister>
		pReg = AD717X_GetReg(pad717x_dev, 0x07);
 800190c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a80 <handle_command+0x1d0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2107      	movs	r1, #7
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fd44 	bl	80013a0 <AD717X_GetReg>
 8001918:	61b8      	str	r0, [r7, #24]
		char hexString[9];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "0x%04x\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4957      	ldr	r1, [pc, #348]	@ (8001a84 <handle_command+0x1d4>)
 8001926:	4618      	mov	r0, r3
 8001928:	f005 fa6c 	bl	8006e04 <siprintf>
		send_string(hexString);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff8f 	bl	8001854 <send_string>
 8001936:	e08e      	b.n	8001a56 <handle_command+0x1a6>
	}
	else if(!strcmp(command, "getreg"))
 8001938:	4953      	ldr	r1, [pc, #332]	@ (8001a88 <handle_command+0x1d8>)
 800193a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800193c:	f7fe fc68 	bl	8000210 <strcmp>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <handle_command+0xc4>
	{
		if(strchr((char*)uart_buffer, '}') != NULL)
 8001946:	217d      	movs	r1, #125	@ 0x7d
 8001948:	4848      	ldr	r0, [pc, #288]	@ (8001a6c <handle_command+0x1bc>)
 800194a:	f005 fac6 	bl	8006eda <strchr>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8083 	beq.w	8001a5c <handle_command+0x1ac>
		{
			uint8_t addr = (uint8_t)strtoul(addr_str, NULL, 16);
 8001956:	2210      	movs	r2, #16
 8001958:	2100      	movs	r1, #0
 800195a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800195c:	f004 fd2e 	bl	80063bc <strtoul>
 8001960:	4603      	mov	r3, r0
 8001962:	77fb      	strb	r3, [r7, #31]
//				ad717x_dev *pad717x_dev1 = NULL;
//				ad717x_st_reg *pReg;
			AD717X_ReadRegister(pad717x_dev, addr);
 8001964:	4b46      	ldr	r3, [pc, #280]	@ (8001a80 <handle_command+0x1d0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	7ffa      	ldrb	r2, [r7, #31]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd51 	bl	8001414 <AD717X_ReadRegister>
 8001972:	e070      	b.n	8001a56 <handle_command+0x1a6>
//				send_string(hexString);

		} else return;

	}
	else if(!strcmp(command, "writereg"))
 8001974:	4945      	ldr	r1, [pc, #276]	@ (8001a8c <handle_command+0x1dc>)
 8001976:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001978:	f7fe fc4a 	bl	8000210 <strcmp>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d13a      	bne.n	80019f8 <handle_command+0x148>
	{
		char *endptr = strchr((char*)addr_str, ',');
 8001982:	212c      	movs	r1, #44	@ 0x2c
 8001984:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001986:	f005 faa8 	bl	8006eda <strchr>
 800198a:	6378      	str	r0, [r7, #52]	@ 0x34
		int length = endptr - (char*)addr_str;
 800198c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800198e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
		char *value_str = (char*)addr_str + length + 1;
 8001994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001996:	3301      	adds	r3, #1
 8001998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800199a:	4413      	add	r3, r2
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(strchr((char*)uart_buffer, '}') != NULL)
 800199e:	217d      	movs	r1, #125	@ 0x7d
 80019a0:	4832      	ldr	r0, [pc, #200]	@ (8001a6c <handle_command+0x1bc>)
 80019a2:	f005 fa9a 	bl	8006eda <strchr>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d059      	beq.n	8001a60 <handle_command+0x1b0>
		{
			uint8_t addr = (uint8_t)strtoul(addr_str, NULL, 16);
 80019ac:	2210      	movs	r2, #16
 80019ae:	2100      	movs	r1, #0
 80019b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019b2:	f004 fd03 	bl	80063bc <strtoul>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			uint32_t value = (uint32_t)strtoul(value_str, NULL, 16);
 80019bc:	2210      	movs	r2, #16
 80019be:	2100      	movs	r1, #0
 80019c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019c2:	f004 fcfb 	bl	80063bc <strtoul>
 80019c6:	6278      	str	r0, [r7, #36]	@ 0x24

			ad717x_st_reg *pReg = AD717X_GetReg(pad717x_dev, addr);
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <handle_command+0x1d0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fce4 	bl	80013a0 <AD717X_GetReg>
 80019d8:	6238      	str	r0, [r7, #32]
			pReg->value = value;
 80019da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	605a      	str	r2, [r3, #4]
			spi_write_reg.value = value;
 80019e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a90 <handle_command+0x1e0>)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	6093      	str	r3, [r2, #8]
			AD717X_WriteRegister(pad717x_dev, addr);
 80019e6:	4b26      	ldr	r3, [pc, #152]	@ (8001a80 <handle_command+0x1d0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fd45 	bl	8001480 <AD717X_WriteRegister>
 80019f6:	e02e      	b.n	8001a56 <handle_command+0x1a6>
		} else return;
	}
	else if(!strcmp(command, "send"))
 80019f8:	4926      	ldr	r1, [pc, #152]	@ (8001a94 <handle_command+0x1e4>)
 80019fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019fc:	f7fe fc08 	bl	8000210 <strcmp>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11f      	bne.n	8001a46 <handle_command+0x196>
	{
		if(strchr((char*)uart_buffer, '}') != NULL)
 8001a06:	217d      	movs	r1, #125	@ 0x7d
 8001a08:	4818      	ldr	r0, [pc, #96]	@ (8001a6c <handle_command+0x1bc>)
 8001a0a:	f005 fa66 	bl	8006eda <strchr>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d027      	beq.n	8001a64 <handle_command+0x1b4>
		{
			if(spi_status != SENDING && adc_sm == ADC_IDLE)
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <handle_command+0x1c4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d00f      	beq.n	8001a3e <handle_command+0x18e>
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <handle_command+0x1e8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <handle_command+0x18e>
			{
				spi_status = SENDING;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <handle_command+0x1c4>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	701a      	strb	r2, [r3, #0]
				adc_buff_idx = 0;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <handle_command+0x1ec>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]
				TIM.Instance->CNT = 0;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <handle_command+0x1f0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a3c:	e00b      	b.n	8001a56 <handle_command+0x1a6>
			}
			else
				spi_status = IDLE;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <handle_command+0x1c4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <handle_command+0x1a6>
		} else return;
	}
	else{
		send_string("{Unknown msg,end}\r\n");
 8001a46:	4817      	ldr	r0, [pc, #92]	@ (8001aa4 <handle_command+0x1f4>)
 8001a48:	f7ff ff04 	bl	8001854 <send_string>
		send_string(command);
 8001a4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a4e:	f7ff ff01 	bl	8001854 <send_string>
		reset_uart();
 8001a52:	f7ff ff13 	bl	800187c <reset_uart>
	}
	reset_uart();
 8001a56:	f7ff ff11 	bl	800187c <reset_uart>
 8001a5a:	e004      	b.n	8001a66 <handle_command+0x1b6>
		} else return;
 8001a5c:	bf00      	nop
 8001a5e:	e002      	b.n	8001a66 <handle_command+0x1b6>
		} else return;
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <handle_command+0x1b6>
		} else return;
 8001a64:	bf00      	nop

}
 8001a66:	3740      	adds	r7, #64	@ 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200005d4 	.word	0x200005d4
 8001a70:	08008f70 	.word	0x08008f70
 8001a74:	20000b6c 	.word	0x20000b6c
 8001a78:	08008f78 	.word	0x08008f78
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	20000b68 	.word	0x20000b68
 8001a84:	08008f80 	.word	0x08008f80
 8001a88:	08008f8c 	.word	0x08008f8c
 8001a8c:	08008f94 	.word	0x08008f94
 8001a90:	20000b78 	.word	0x20000b78
 8001a94:	08008fa0 	.word	0x08008fa0
 8001a98:	20000b6d 	.word	0x20000b6d
 8001a9c:	20000b64 	.word	0x20000b64
 8001aa0:	200004e4 	.word	0x200004e4
 8001aa4:	08008fa8 	.word	0x08008fa8

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f000 fe13 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab2:	f000 f8b9 	bl	8001c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab6:	f000 f9f5 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aba:	f000 f9d3 	bl	8001e64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001abe:	f000 f9a7 	bl	8001e10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001ac2:	f000 f923 	bl	8001d0c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001ac6:	f000 f957 	bl	8001d78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ad717x_app_initialize();
 8001aca:	f000 fa69 	bl	8001fa0 <ad717x_app_initialize>

  ad717x_configure_device_odr(pad717x_dev, 0, sps_1007);
 8001ace:	4b4f      	ldr	r3, [pc, #316]	@ (8001c0c <main+0x164>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	220a      	movs	r2, #10
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fd58 	bl	800158c <ad717x_configure_device_odr>
  HAL_Delay(10);
 8001adc:	200a      	movs	r0, #10
 8001ade:	f000 fe67 	bl	80027b0 <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 0, 1);
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c0c <main+0x164>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fa04 	bl	8000ef8 <ad717x_set_channel_status>
  HAL_Delay(10);
 8001af0:	200a      	movs	r0, #10
 8001af2:	f000 fe5d 	bl	80027b0 <HAL_Delay>
  ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
 8001af6:	4b45      	ldr	r3, [pc, #276]	@ (8001c0c <main+0x164>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fa41 	bl	8000f84 <ad717x_set_adc_mode>

  union ad717x_analog_inputs AIN_0;
  AIN_0.analog_input_pairs = VIN0_VIN1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	80bb      	strh	r3, [r7, #4]
  HAL_Delay(10);
 8001b06:	200a      	movs	r0, #10
 8001b08:	f000 fe52 	bl	80027b0 <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 0, AIN_0);
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c0c <main+0x164>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fa6d 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8001b1a:	200a      	movs	r0, #10
 8001b1c:	f000 fe48 	bl	80027b0 <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 0, 0);
 8001b20:	4b3a      	ldr	r3, [pc, #232]	@ (8001c0c <main+0x164>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff faef 	bl	800110c <ad717x_assign_setup>
  HAL_Delay(10);
 8001b2e:	200a      	movs	r0, #10
 8001b30:	f000 fe3e 	bl	80027b0 <HAL_Delay>
  ad717x_set_polarity(pad717x_dev, 1, 0);
 8001b34:	4b35      	ldr	r3, [pc, #212]	@ (8001c0c <main+0x164>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fb29 	bl	8001194 <ad717x_set_polarity>
  HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f000 fe34 	bl	80027b0 <HAL_Delay>
  ad717x_set_reference_source(pad717x_dev, EXTERNAL_REF, 0);
 8001b48:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <main+0x164>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fb63 	bl	800121c <ad717x_set_reference_source>
  HAL_Delay(10);
 8001b56:	200a      	movs	r0, #10
 8001b58:	f000 fe2a 	bl	80027b0 <HAL_Delay>

  HAL_Delay(10);
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f000 fe27 	bl	80027b0 <HAL_Delay>
  ad717x_enable_input_buffer(pad717x_dev, 1, 0, 0);
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <main+0x164>)
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	2300      	movs	r3, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	f7ff fbb8 	bl	80012e0 <ad717x_enable_input_buffer>
  HAL_Delay(10);
 8001b70:	200a      	movs	r0, #10
 8001b72:	f000 fe1d 	bl	80027b0 <HAL_Delay>
  // Initial Message for PC:
  char *init_msg = "Welcome to Pourostad Project\r\n";
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <main+0x168>)
 8001b78:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(PC_UART, (uint8_t*)init_msg, strlen(init_msg), 10);
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f7fe fba8 	bl	80002d0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	230a      	movs	r3, #10
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	4822      	ldr	r0, [pc, #136]	@ (8001c14 <main+0x16c>)
 8001b8a:	f003 fca1 	bl	80054d0 <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 8001b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b92:	4921      	ldr	r1, [pc, #132]	@ (8001c18 <main+0x170>)
 8001b94:	481f      	ldr	r0, [pc, #124]	@ (8001c14 <main+0x16c>)
 8001b96:	f003 fd26 	bl	80055e6 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim2.Instance->CNT = 0;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <main+0x174>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 8001ba2:	481e      	ldr	r0, [pc, #120]	@ (8001c1c <main+0x174>)
 8001ba4:	f003 f952 	bl	8004e4c <HAL_TIM_Base_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uart_buffer[0]!='\0')
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <main+0x170>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <main+0x10c>
	  {
		  check_command();
 8001bb0:	f7ff fe12 	bl	80017d8 <check_command>
	  }
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb8:	4819      	ldr	r0, [pc, #100]	@ (8001c20 <main+0x178>)
 8001bba:	f001 fca3 	bl	8003504 <HAL_GPIO_ReadPin>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f1      	bne.n	8001ba8 <main+0x100>
	  {
		  HAL_Delay(50);
 8001bc4:	2032      	movs	r0, #50	@ 0x32
 8001bc6:	f000 fdf3 	bl	80027b0 <HAL_Delay>
		  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bce:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <main+0x178>)
 8001bd0:	f001 fc98 	bl	8003504 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e6      	bne.n	8001ba8 <main+0x100>
		  {
			  for(int i=0; i<ADC_BUFFER_SIZE; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e00a      	b.n	8001bf6 <main+0x14e>
				  time_buff[i] = 16*i+3;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	3303      	adds	r3, #3
 8001be6:	4619      	mov	r1, r3
 8001be8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c24 <main+0x17c>)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i=0; i<ADC_BUFFER_SIZE; i++)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b31      	cmp	r3, #49	@ 0x31
 8001bfa:	ddf1      	ble.n	8001be0 <main+0x138>
			  HAL_UART_Transmit(&huart2, (uint8_t*)time_buff, ADC_BUFFER_SIZE*4, 100);
 8001bfc:	2364      	movs	r3, #100	@ 0x64
 8001bfe:	22c8      	movs	r2, #200	@ 0xc8
 8001c00:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <main+0x17c>)
 8001c02:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <main+0x16c>)
 8001c04:	f003 fc64 	bl	80054d0 <HAL_UART_Transmit>
	  if(uart_buffer[0]!='\0')
 8001c08:	e7ce      	b.n	8001ba8 <main+0x100>
 8001c0a:	bf00      	nop
 8001c0c:	20000b68 	.word	0x20000b68
 8001c10:	08008fbc 	.word	0x08008fbc
 8001c14:	2000052c 	.word	0x2000052c
 8001c18:	200005d4 	.word	0x200005d4
 8001c1c:	200004e4 	.word	0x200004e4
 8001c20:	40020800 	.word	0x40020800
 8001c24:	200009d4 	.word	0x200009d4

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	@ 0x50
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	2234      	movs	r2, #52	@ 0x34
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 f947 	bl	8006eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	4b2c      	ldr	r3, [pc, #176]	@ (8001d04 <SystemClock_Config+0xdc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a2b      	ldr	r2, [pc, #172]	@ (8001d04 <SystemClock_Config+0xdc>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <SystemClock_Config+0xdc>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <SystemClock_Config+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	@ (8001d08 <SystemClock_Config+0xe0>)
 8001c72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <SystemClock_Config+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c9c:	23b4      	movs	r3, #180	@ 0xb4
 8001c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 f80b 	bl	8003ccc <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cbc:	f000 faae 	bl	800221c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cc0:	f001 fc6a 	bl	8003598 <HAL_PWREx_EnableOverDrive>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cca:	f000 faa7 	bl	800221c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cce:	230f      	movs	r3, #15
 8001cd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2105      	movs	r1, #5
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fca3 	bl	8003638 <HAL_RCC_ClockConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001cf8:	f000 fa90 	bl	800221c <Error_Handler>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3750      	adds	r7, #80	@ 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <MX_SPI1_Init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d40:	2228      	movs	r2, #40	@ 0x28
 8001d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d58:	220a      	movs	r2, #10
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_SPI1_Init+0x64>)
 8001d5e:	f002 fa53 	bl	8004208 <HAL_SPI_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d68:	f000 fa58 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000048c 	.word	0x2000048c
 8001d74:	40013000 	.word	0x40013000

08001d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001d96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001d9e:	2259      	movs	r2, #89	@ 0x59
 8001da0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001db8:	2280      	movs	r2, #128	@ 0x80
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dbc:	4813      	ldr	r0, [pc, #76]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001dbe:	f002 fff5 	bl	8004dac <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dc8:	f000 fa28 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001dda:	f003 f89f 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001de4:	f000 fa1a 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_TIM2_Init+0x94>)
 8001df6:	f003 fa9f 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e00:	f000 fa0c 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200004e4 	.word	0x200004e4

08001e10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e48:	f003 faf2 	bl	8005430 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e52:	f000 f9e3 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000052c 	.word	0x2000052c
 8001e60:	40004400 	.word	0x40004400

08001e64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <MX_DMA_Init+0x3c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <MX_DMA_Init+0x3c>)
 8001e74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <MX_DMA_Init+0x3c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2010      	movs	r0, #16
 8001e8c:	f000 fd8f 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e90:	2010      	movs	r0, #16
 8001e92:	f000 fda8 	bl	80029e6 <HAL_NVIC_EnableIRQ>

}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a34      	ldr	r2, [pc, #208]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a2d      	ldr	r2, [pc, #180]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a26      	ldr	r2, [pc, #152]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a1f      	ldr	r2, [pc, #124]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <MX_GPIO_Init+0xf0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2140      	movs	r1, #64	@ 0x40
 8001f2e:	481a      	ldr	r0, [pc, #104]	@ (8001f98 <MX_GPIO_Init+0xf4>)
 8001f30:	f001 fb00 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin DRY_Pin */
  GPIO_InitStruct.Pin = B1_Pin|DRY_Pin;
 8001f34:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <MX_GPIO_Init+0xf8>)
 8001f4c:	f001 f946 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001f50:	2340      	movs	r3, #64	@ 0x40
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <MX_GPIO_Init+0xf4>)
 8001f68:	f001 f938 	bl	80031dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2017      	movs	r0, #23
 8001f72:	f000 fd1c 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f76:	2017      	movs	r0, #23
 8001f78:	f000 fd35 	bl	80029e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2028      	movs	r0, #40	@ 0x28
 8001f82:	f000 fd14 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f86:	2028      	movs	r0, #40	@ 0x28
 8001f88:	f000 fd2d 	bl	80029e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800

08001fa0 <ad717x_app_initialize>:

/* USER CODE BEGIN 4 */
int32_t ad717x_app_initialize(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0dc      	sub	sp, #368	@ 0x170
 8001fa4:	af2c      	add	r7, sp, #176	@ 0xb0
	// Used to create the ad717x device
	ad717x_init_param ad717x_init = {
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	22bc      	movs	r2, #188	@ 0xbc
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 ff8c 	bl	8006eca <memset>
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <ad717x_app_initialize+0x50>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <ad717x_app_initialize+0x54>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	733b      	strb	r3, [r7, #12]
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	737b      	strb	r3, [r7, #13]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73bb      	strb	r3, [r7, #14]
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	2308      	movs	r3, #8
 8001fcc:	743b      	strb	r3, [r7, #16]
		8,						// Setup Number

	};

	// Initialze the device
	return (AD717X_Init(&pad717x_dev, ad717x_init));
 8001fce:	4668      	mov	r0, sp
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	22b0      	movs	r2, #176	@ 0xb0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f005 f827 	bl	800702a <memcpy>
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe0:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <ad717x_app_initialize+0x58>)
 8001fe2:	f7ff fb0b 	bl	80015fc <AD717X_Init>
 8001fe6:	4603      	mov	r3, r0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	37c0      	adds	r7, #192	@ 0xc0
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000294 	.word	0x20000294
 8001ff4:	20000298 	.word	0x20000298
 8001ff8:	20000b68 	.word	0x20000b68

08001ffc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	@ 0x50
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == DRY_Pin) {
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b80      	cmp	r3, #128	@ 0x80
 800200a:	f040 80ee 	bne.w	80021ea <HAL_GPIO_EXTI_Callback+0x1ee>
	  if(spi_status == READING)
 800200e:	4b79      	ldr	r3, [pc, #484]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d17d      	bne.n	8002114 <HAL_GPIO_EXTI_Callback+0x118>
	  {
			ad717x_st_reg *pReg = (ad717x_st_reg*)spi_read_reg.pReg;
 8002018:	4b77      	ldr	r3, [pc, #476]	@ (80021f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	643b      	str	r3, [r7, #64]	@ 0x40
			uint8_t Rx[8] = {0};
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
 8002022:	2300      	movs	r3, #0
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
			HAL_SPI_Transmit(SPI, &spi_read_reg.Tx, 1, 100);
 8002026:	2364      	movs	r3, #100	@ 0x64
 8002028:	2201      	movs	r2, #1
 800202a:	4973      	ldr	r1, [pc, #460]	@ (80021f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800202c:	4873      	ldr	r0, [pc, #460]	@ (80021fc <HAL_GPIO_EXTI_Callback+0x200>)
 800202e:	f002 f974 	bl	800431a <HAL_SPI_Transmit>

			HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 8002032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800203c:	2364      	movs	r3, #100	@ 0x64
 800203e:	486f      	ldr	r0, [pc, #444]	@ (80021fc <HAL_GPIO_EXTI_Callback+0x200>)
 8002040:	f002 faaf 	bl	80045a2 <HAL_SPI_Receive>


			pReg->value = 0;
 8002044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < pReg->size; i++) {
 800204a:	2300      	movs	r3, #0
 800204c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800204e:	e011      	b.n	8002074 <HAL_GPIO_EXTI_Callback+0x78>
				pReg->value <<= 8;
 8002050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002058:	605a      	str	r2, [r3, #4]
				pReg->value += Rx[i];
 800205a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002064:	440a      	add	r2, r1
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	441a      	add	r2, r3
 800206a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800206c:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < pReg->size; i++) {
 800206e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002070:	3301      	adds	r3, #1
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800207a:	429a      	cmp	r2, r3
 800207c:	dbe8      	blt.n	8002050 <HAL_GPIO_EXTI_Callback+0x54>
			}
		  	spi_status = IDLE;
 800207e:	4b5d      	ldr	r3, [pc, #372]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
		  	if(pReg->addr == 0x04) //if it is read reg
 8002084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d134      	bne.n	80020f6 <HAL_GPIO_EXTI_Callback+0xfa>
		  	{

		  		if(adc_sm == ADC_IDLE)
 800208c:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <HAL_GPIO_EXTI_Callback+0x204>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d123      	bne.n	80020de <HAL_GPIO_EXTI_Callback+0xe2>
		  		{
		  			float data = (((float) pReg->value / (1<<23))-1) * 25;
 8002096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002204 <HAL_GPIO_EXTI_Callback+0x208>
 80020a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020b2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
					char hexString[12];
					sprintf(hexString, "%.4f\r\n", data);
 80020be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020c0:	f7fe fa72 	bl	80005a8 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80020cc:	494e      	ldr	r1, [pc, #312]	@ (8002208 <HAL_GPIO_EXTI_Callback+0x20c>)
 80020ce:	f004 fe99 	bl	8006e04 <siprintf>
					send_string(hexString);
 80020d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fbbc 	bl	8001854 <send_string>
//		  send_string(hexString);
	  }
  } else {
      __NOP();
  }
}
 80020dc:	e086      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
		  			adc_to_buf(pReg->value);
 80020de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fb24 	bl	8001730 <adc_to_buf>
		  			adc_sm = ADC_IDLE;
 80020e8:	4b45      	ldr	r3, [pc, #276]	@ (8002200 <HAL_GPIO_EXTI_Callback+0x204>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
		  			spi_status = SENDING;
 80020ee:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80020f0:	2206      	movs	r2, #6
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	e07a      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
				sprintf(hexString, "0x%04x\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 80020f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4942      	ldr	r1, [pc, #264]	@ (800220c <HAL_GPIO_EXTI_Callback+0x210>)
 8002102:	4618      	mov	r0, r3
 8002104:	f004 fe7e 	bl	8006e04 <siprintf>
				send_string(hexString);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fba1 	bl	8001854 <send_string>
}
 8002112:	e06b      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
	  else if(spi_status == WRITING)
 8002114:	4b37      	ldr	r3, [pc, #220]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d11c      	bne.n	8002158 <HAL_GPIO_EXTI_Callback+0x15c>
		  ad717x_st_reg *pReg = (ad717x_st_reg*)spi_write_reg.pReg;
 800211e:	4b3c      	ldr	r3, [pc, #240]	@ (8002210 <HAL_GPIO_EXTI_Callback+0x214>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	647b      	str	r3, [r7, #68]	@ 0x44
		  HAL_SPI_Transmit(SPI, spi_write_reg.Tx, pReg->size + 1, 100);
 8002124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	b29b      	uxth	r3, r3
 800212a:	3301      	adds	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	2364      	movs	r3, #100	@ 0x64
 8002130:	4937      	ldr	r1, [pc, #220]	@ (8002210 <HAL_GPIO_EXTI_Callback+0x214>)
 8002132:	4832      	ldr	r0, [pc, #200]	@ (80021fc <HAL_GPIO_EXTI_Callback+0x200>)
 8002134:	f002 f8f1 	bl	800431a <HAL_SPI_Transmit>
		  send_string("write done\r\n");
 8002138:	4836      	ldr	r0, [pc, #216]	@ (8002214 <HAL_GPIO_EXTI_Callback+0x218>)
 800213a:	f7ff fb8b 	bl	8001854 <send_string>
		  spi_status = IDLE;
 800213e:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, pReg->addr);
 8002144:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_GPIO_EXTI_Callback+0x21c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f7ff f95f 	bl	8001414 <AD717X_ReadRegister>
}
 8002156:	e049      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
	  else if(spi_status == TRIGGER)
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d103      	bne.n	800216a <HAL_GPIO_EXTI_Callback+0x16e>
		spi_status = READING;
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002164:	2202      	movs	r2, #2
 8002166:	701a      	strb	r2, [r3, #0]
}
 8002168:	e040      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
	  else if (spi_status == GETID)
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b04      	cmp	r3, #4
 8002172:	d12b      	bne.n	80021cc <HAL_GPIO_EXTI_Callback+0x1d0>
		uint8_t Tx = 0x47;
 8002174:	2347      	movs	r3, #71	@ 0x47
 8002176:	76fb      	strb	r3, [r7, #27]
		uint8_t Rx[2] = {0};
 8002178:	2300      	movs	r3, #0
 800217a:	833b      	strh	r3, [r7, #24]
		HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 800217c:	f107 011b 	add.w	r1, r7, #27
 8002180:	230a      	movs	r3, #10
 8002182:	2201      	movs	r2, #1
 8002184:	481d      	ldr	r0, [pc, #116]	@ (80021fc <HAL_GPIO_EXTI_Callback+0x200>)
 8002186:	f002 f8c8 	bl	800431a <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, 2, 100);
 800218a:	f107 0118 	add.w	r1, r7, #24
 800218e:	2364      	movs	r3, #100	@ 0x64
 8002190:	2202      	movs	r2, #2
 8002192:	481a      	ldr	r0, [pc, #104]	@ (80021fc <HAL_GPIO_EXTI_Callback+0x200>)
 8002194:	f002 fa05 	bl	80045a2 <HAL_SPI_Receive>
		uint16_t receivedData = (Rx[0] << 8) | Rx[1];
 8002198:	7e3b      	ldrb	r3, [r7, #24]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	7e7b      	ldrb	r3, [r7, #25]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sprintf(hexString, "0x%04x\r\n", receivedData);  // Format as hex string with "0x" prefix
 80021aa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4916      	ldr	r1, [pc, #88]	@ (800220c <HAL_GPIO_EXTI_Callback+0x210>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 fe25 	bl	8006e04 <siprintf>
		send_string(hexString);
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fb48 	bl	8001854 <send_string>
		spi_status = IDLE;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
}
 80021ca:	e00f      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
	  else if(spi_status == SENDING)
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d10a      	bne.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
		  adc_sm = ADC_READING;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_GPIO_EXTI_Callback+0x204>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, 4);
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_GPIO_EXTI_Callback+0x21c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2104      	movs	r1, #4
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f916 	bl	8001414 <AD717X_ReadRegister>
}
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_EXTI_Callback+0x1f0>
      __NOP();
 80021ea:	bf00      	nop
}
 80021ec:	bf00      	nop
 80021ee:	3750      	adds	r7, #80	@ 0x50
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000b6c 	.word	0x20000b6c
 80021f8:	20000b70 	.word	0x20000b70
 80021fc:	2000048c 	.word	0x2000048c
 8002200:	20000b6d 	.word	0x20000b6d
 8002204:	4b000000 	.word	0x4b000000
 8002208:	08008fdc 	.word	0x08008fdc
 800220c:	08008fe4 	.word	0x08008fe4
 8002210:	20000b78 	.word	0x20000b78
 8002214:	08008ff0 	.word	0x08008ff0
 8002218:	20000b68 	.word	0x20000b68

0800221c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002220:	b672      	cpsid	i
}
 8002222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <Error_Handler+0x8>

08002228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <HAL_MspInit+0x4c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_MspInit+0x4c>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	@ 0x40
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002266:	2007      	movs	r0, #7
 8002268:	f000 fb96 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_SPI_MspInit+0x84>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12b      	bne.n	80022f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_SPI_MspInit+0x88>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_SPI_MspInit+0x88>)
 80022a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_SPI_MspInit+0x88>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_SPI_MspInit+0x88>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a10      	ldr	r2, [pc, #64]	@ (8002300 <HAL_SPI_MspInit+0x88>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_SPI_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022d2:	23e0      	movs	r3, #224	@ 0xe0
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e2:	2305      	movs	r3, #5
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	@ (8002304 <HAL_SPI_MspInit+0x8c>)
 80022ee:	f000 ff75 	bl	80031dc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	@ 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40013000 	.word	0x40013000
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002318:	d10d      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_TIM_Base_MspInit+0x3c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_TIM_Base_MspInit+0x3c>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_TIM_Base_MspInit+0x3c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a31      	ldr	r2, [pc, #196]	@ (800242c <HAL_UART_MspInit+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d15b      	bne.n	8002422 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b30      	ldr	r3, [pc, #192]	@ (8002430 <HAL_UART_MspInit+0xe8>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	4a2f      	ldr	r2, [pc, #188]	@ (8002430 <HAL_UART_MspInit+0xe8>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	6413      	str	r3, [r2, #64]	@ 0x40
 800237a:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_UART_MspInit+0xe8>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <HAL_UART_MspInit+0xe8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <HAL_UART_MspInit+0xe8>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b26      	ldr	r3, [pc, #152]	@ (8002430 <HAL_UART_MspInit+0xe8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023a2:	230c      	movs	r3, #12
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	481d      	ldr	r0, [pc, #116]	@ (8002434 <HAL_UART_MspInit+0xec>)
 80023be:	f000 ff0d 	bl	80031dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023c4:	4a1d      	ldr	r2, [pc, #116]	@ (800243c <HAL_UART_MspInit+0xf4>)
 80023c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 80023fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002400:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002406:	480c      	ldr	r0, [pc, #48]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 8002408:	f000 fb08 	bl	8002a1c <HAL_DMA_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002412:	f7ff ff03 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a07      	ldr	r2, [pc, #28]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 800241a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800241c:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <HAL_UART_MspInit+0xf0>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	@ 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40004400 	.word	0x40004400
 8002430:	40023800 	.word	0x40023800
 8002434:	40020000 	.word	0x40020000
 8002438:	20000574 	.word	0x20000574
 800243c:	40026088 	.word	0x40026088

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002496:	f000 f96b 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <DMA1_Stream5_IRQHandler+0x10>)
 80024a6:	f000 fc2f 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000574 	.word	0x20000574

080024b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRY_Pin);
 80024b8:	2080      	movs	r0, #128	@ 0x80
 80024ba:	f001 f855 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024c6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024ca:	f001 f84d 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  return 1;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_kill>:

int _kill(int pid, int sig)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ec:	f004 fd70 	bl	8006fd0 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2216      	movs	r2, #22
 80024f4:	601a      	str	r2, [r3, #0]
  return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_exit>:

void _exit (int status)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800250a:	f04f 31ff 	mov.w	r1, #4294967295
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffe7 	bl	80024e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <_exit+0x12>

08002518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e00a      	b.n	8002540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800252a:	f3af 8000 	nop.w
 800252e:	4601      	mov	r1, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	60ba      	str	r2, [r7, #8]
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbf0      	blt.n	800252a <_read+0x12>
  }

  return len;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e009      	b.n	8002578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf1      	blt.n	8002564 <_write+0x12>
  }
  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_close>:

int _close(int file)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025b2:	605a      	str	r2, [r3, #4]
  return 0;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_isatty>:

int _isatty(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ca:	2301      	movs	r3, #1
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025fc:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <_sbrk+0x5c>)
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <_sbrk+0x60>)
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <_sbrk+0x64>)
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <_sbrk+0x68>)
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	429a      	cmp	r2, r3
 8002622:	d207      	bcs.n	8002634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002624:	f004 fcd4 	bl	8006fd0 <__errno>
 8002628:	4603      	mov	r3, r0
 800262a:	220c      	movs	r2, #12
 800262c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	e009      	b.n	8002648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	4a05      	ldr	r2, [pc, #20]	@ (8002658 <_sbrk+0x64>)
 8002644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20020000 	.word	0x20020000
 8002654:	00000400 	.word	0x00000400
 8002658:	20000b88 	.word	0x20000b88
 800265c:	20000ce0 	.word	0x20000ce0

08002660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <SystemInit+0x20>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <SystemInit+0x20>)
 800266c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002688:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800268a:	490e      	ldr	r1, [pc, #56]	@ (80026c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800268c:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0b      	ldr	r2, [pc, #44]	@ (80026cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026a0:	4c0b      	ldr	r4, [pc, #44]	@ (80026d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ae:	f7ff ffd7 	bl	8002660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b2:	f004 fc93 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b6:	f7ff f9f7 	bl	8001aa8 <main>
  bx  lr    
 80026ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c4:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 80026c8:	080093a0 	.word	0x080093a0
  ldr r2, =_sbss
 80026cc:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80026d0:	20000cdc 	.word	0x20000cdc

080026d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC_IRQHandler>
	...

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_Init+0x34>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_Init+0x34>)
 80026e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_Init+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_Init+0x34>)
 80026ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026f2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f94f 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fd92 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f967 	bl	8002a02 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 f92f 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	@ (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000029c 	.word	0x2000029c
 8002768:	200002a4 	.word	0x200002a4
 800276c:	200002a0 	.word	0x200002a0

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200002a4 	.word	0x200002a4
 8002794:	20000b8c 	.word	0x20000b8c

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000b8c 	.word	0x20000b8c

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_Delay+0x44>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200002a4 	.word	0x200002a4

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	@ (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	@ (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff feb6 	bl	8002798 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e099      	b.n	8002b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a58:	e00f      	b.n	8002a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5a:	f7ff fe9d 	bl	8002798 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d908      	bls.n	8002a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e078      	b.n	8002b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e8      	bne.n	8002a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <HAL_DMA_Init+0x158>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	4313      	orrs	r3, r2
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d117      	bne.n	8002b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fadf 	bl	80030e4 <DMA_CheckFifoParam>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e016      	b.n	8002b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa96 	bl	8003078 <DMA_CalcBaseAndBitshift>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	223f      	movs	r2, #63	@ 0x3f
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	f010803f 	.word	0xf010803f

08002b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_DMA_Start_IT+0x26>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e040      	b.n	8002c20 <HAL_DMA_Start_IT+0xa8>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12f      	bne.n	8002c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa28 	bl	800301c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd0:	223f      	movs	r2, #63	@ 0x3f
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0216 	orr.w	r2, r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e005      	b.n	8002c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c36:	f7ff fdaf 	bl	8002798 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2280      	movs	r2, #128	@ 0x80
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e052      	b.n	8002d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0216 	bic.w	r2, r2, #22
 8002c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_DMA_Abort+0x62>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0208 	bic.w	r2, r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002caa:	e013      	b.n	8002cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cac:	f7ff fd74 	bl	8002798 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e015      	b.n	8002d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e4      	bne.n	8002cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	223f      	movs	r2, #63	@ 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d14:	4b8e      	ldr	r3, [pc, #568]	@ (8002f50 <HAL_DMA_IRQHandler+0x248>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8e      	ldr	r2, [pc, #568]	@ (8002f54 <HAL_DMA_IRQHandler+0x24c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	2208      	movs	r2, #8
 8002d62:	409a      	lsls	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dae:	2204      	movs	r2, #4
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	2204      	movs	r2, #4
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de4:	2210      	movs	r2, #16
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d043      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03c      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	2210      	movs	r2, #16
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d024      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e01f      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0208 	bic.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808f 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8087 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d136      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0216 	bic.w	r2, r2, #22
 8002ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x1da>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0208 	bic.w	r2, r2, #8
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	223f      	movs	r2, #63	@ 0x3f
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07e      	beq.n	8003014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
        }
        return;
 8002f1e:	e079      	b.n	8003014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d031      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
 8002f4e:	bf00      	nop
 8002f50:	2000029c 	.word	0x2000029c
 8002f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d023      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e01e      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0210 	bic.w	r2, r2, #16
 8002f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d032      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d307      	bcc.n	8002ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f2      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x2cc>
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e000      	b.n	8003016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003014:	bf00      	nop
    }
  }
}
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b40      	cmp	r3, #64	@ 0x40
 8003048:	d108      	bne.n	800305c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800305a:	e007      	b.n	800306c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3b10      	subs	r3, #16
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <DMA_CalcBaseAndBitshift+0x64>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003092:	4a13      	ldr	r2, [pc, #76]	@ (80030e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d909      	bls.n	80030ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80030b8:	e007      	b.n	80030ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	aaaaaaab 	.word	0xaaaaaaab
 80030e0:	08009018 	.word	0x08009018

080030e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11f      	bne.n	800313e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d856      	bhi.n	80031b2 <DMA_CheckFifoParam+0xce>
 8003104:	a201      	add	r2, pc, #4	@ (adr r2, 800310c <DMA_CheckFifoParam+0x28>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800312f 	.word	0x0800312f
 8003114:	0800311d 	.word	0x0800311d
 8003118:	080031b3 	.word	0x080031b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d046      	beq.n	80031b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312c:	e043      	b.n	80031b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003136:	d140      	bne.n	80031ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e03d      	b.n	80031ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003146:	d121      	bne.n	800318c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d837      	bhi.n	80031be <DMA_CheckFifoParam+0xda>
 800314e:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <DMA_CheckFifoParam+0x70>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003165 	.word	0x08003165
 8003158:	0800316b 	.word	0x0800316b
 800315c:	08003165 	.word	0x08003165
 8003160:	0800317d 	.word	0x0800317d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      break;
 8003168:	e030      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d025      	beq.n	80031c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317a:	e022      	b.n	80031c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003184:	d11f      	bne.n	80031c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800318a:	e01c      	b.n	80031c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d903      	bls.n	800319a <DMA_CheckFifoParam+0xb6>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d003      	beq.n	80031a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003198:	e018      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      break;
 800319e:	e015      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e00b      	b.n	80031ca <DMA_CheckFifoParam+0xe6>
      break;
 80031b2:	bf00      	nop
 80031b4:	e00a      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031b6:	bf00      	nop
 80031b8:	e008      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e006      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031be:	bf00      	nop
 80031c0:	e004      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;   
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
    }
  } 
  
  return status; 
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	@ 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e165      	b.n	80034c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8154 	bne.w	80034be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80ae 	beq.w	80034be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b5d      	ldr	r3, [pc, #372]	@ (80034dc <HAL_GPIO_Init+0x300>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	4a5c      	ldr	r2, [pc, #368]	@ (80034dc <HAL_GPIO_Init+0x300>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003370:	6453      	str	r3, [r2, #68]	@ 0x44
 8003372:	4b5a      	ldr	r3, [pc, #360]	@ (80034dc <HAL_GPIO_Init+0x300>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337e:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4f      	ldr	r2, [pc, #316]	@ (80034e4 <HAL_GPIO_Init+0x308>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d025      	beq.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	@ (80034e8 <HAL_GPIO_Init+0x30c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01f      	beq.n	80033f2 <HAL_GPIO_Init+0x216>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4d      	ldr	r2, [pc, #308]	@ (80034ec <HAL_GPIO_Init+0x310>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d019      	beq.n	80033ee <HAL_GPIO_Init+0x212>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <HAL_GPIO_Init+0x314>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_GPIO_Init+0x20e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4b      	ldr	r2, [pc, #300]	@ (80034f4 <HAL_GPIO_Init+0x318>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00d      	beq.n	80033e6 <HAL_GPIO_Init+0x20a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	@ (80034f8 <HAL_GPIO_Init+0x31c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <HAL_GPIO_Init+0x206>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a49      	ldr	r2, [pc, #292]	@ (80034fc <HAL_GPIO_Init+0x320>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_GPIO_Init+0x202>
 80033da:	2306      	movs	r3, #6
 80033dc:	e00c      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033de:	2307      	movs	r3, #7
 80033e0:	e00a      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033e2:	2305      	movs	r3, #5
 80033e4:	e008      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033e6:	2304      	movs	r3, #4
 80033e8:	e006      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033ea:	2303      	movs	r3, #3
 80033ec:	e004      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e002      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_GPIO_Init+0x21c>
 80033f6:	2300      	movs	r3, #0
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f002 0203 	and.w	r2, r2, #3
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4093      	lsls	r3, r2
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003408:	4935      	ldr	r1, [pc, #212]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	3302      	adds	r3, #2
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003416:	4b3a      	ldr	r3, [pc, #232]	@ (8003500 <HAL_GPIO_Init+0x324>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343a:	4a31      	ldr	r2, [pc, #196]	@ (8003500 <HAL_GPIO_Init+0x324>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003440:	4b2f      	ldr	r3, [pc, #188]	@ (8003500 <HAL_GPIO_Init+0x324>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003464:	4a26      	ldr	r2, [pc, #152]	@ (8003500 <HAL_GPIO_Init+0x324>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800346a:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_GPIO_Init+0x324>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348e:	4a1c      	ldr	r2, [pc, #112]	@ (8003500 <HAL_GPIO_Init+0x324>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <HAL_GPIO_Init+0x324>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b8:	4a11      	ldr	r2, [pc, #68]	@ (8003500 <HAL_GPIO_Init+0x324>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3301      	adds	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	f67f ae96 	bls.w	80031f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3724      	adds	r7, #36	@ 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40013800 	.word	0x40013800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40021400 	.word	0x40021400
 80034fc:	40021800 	.word	0x40021800
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e001      	b.n	8003526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800357e:	4a05      	ldr	r2, [pc, #20]	@ (8003594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fd38 	bl	8001ffc <HAL_GPIO_EXTI_Callback>
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40013c00 	.word	0x40013c00

08003598 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x90>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x90>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x90>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035be:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_PWREx_EnableOverDrive+0x94>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c4:	f7ff f8e8 	bl	8002798 <HAL_GetTick>
 80035c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ca:	e009      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035cc:	f7ff f8e4 	bl	8002798 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035da:	d901      	bls.n	80035e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e01f      	b.n	8003620 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x98>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d1ee      	bne.n	80035cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035ee:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f4:	f7ff f8d0 	bl	8002798 <HAL_GetTick>
 80035f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035fa:	e009      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035fc:	f7ff f8cc 	bl	8002798 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800360a:	d901      	bls.n	8003610 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e007      	b.n	8003620 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x98>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800361c:	d1ee      	bne.n	80035fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	420e0040 	.word	0x420e0040
 8003630:	40007000 	.word	0x40007000
 8003634:	420e0044 	.word	0x420e0044

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0cc      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b68      	ldr	r3, [pc, #416]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d90c      	bls.n	8003674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b65      	ldr	r3, [pc, #404]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d044      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b3f      	ldr	r3, [pc, #252]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3b      	ldr	r3, [pc, #236]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e067      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b37      	ldr	r3, [pc, #220]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4934      	ldr	r1, [pc, #208]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7ff f836 	bl	8002798 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7ff f832 	bl	8002798 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2b      	ldr	r3, [pc, #172]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b22      	ldr	r3, [pc, #136]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037aa:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f855 	bl	800386c <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe ff96 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08009000 	.word	0x08009000
 80037fc:	2000029c 	.word	0x2000029c
 8003800:	200002a0 	.word	0x200002a0

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	@ (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	2000029c 	.word	0x2000029c

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08009010 	.word	0x08009010

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08009010 	.word	0x08009010

0800386c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b0ae      	sub	sp, #184	@ 0xb8
 8003872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003892:	4bcb      	ldr	r3, [pc, #812]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b0c      	cmp	r3, #12
 800389c:	f200 8206 	bhi.w	8003cac <HAL_RCC_GetSysClockFreq+0x440>
 80038a0:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	08003cad 	.word	0x08003cad
 80038b0:	08003cad 	.word	0x08003cad
 80038b4:	08003cad 	.word	0x08003cad
 80038b8:	080038e5 	.word	0x080038e5
 80038bc:	08003cad 	.word	0x08003cad
 80038c0:	08003cad 	.word	0x08003cad
 80038c4:	08003cad 	.word	0x08003cad
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	08003cad 	.word	0x08003cad
 80038d0:	08003cad 	.word	0x08003cad
 80038d4:	08003cad 	.word	0x08003cad
 80038d8:	08003add 	.word	0x08003add
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4bb9      	ldr	r3, [pc, #740]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x358>)
 80038de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038e2:	e1e7      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e4:	4bb8      	ldr	r3, [pc, #736]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80038e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038ea:	e1e3      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ec:	4bb4      	ldr	r3, [pc, #720]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f8:	4bb1      	ldr	r3, [pc, #708]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d071      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003904:	4bae      	ldr	r3, [pc, #696]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003910:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393c:	0150      	lsls	r0, r2, #5
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4621      	mov	r1, r4
 8003944:	1a51      	subs	r1, r2, r1
 8003946:	6439      	str	r1, [r7, #64]	@ 0x40
 8003948:	4629      	mov	r1, r5
 800394a:	eb63 0301 	sbc.w	r3, r3, r1
 800394e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800395c:	4649      	mov	r1, r9
 800395e:	018b      	lsls	r3, r1, #6
 8003960:	4641      	mov	r1, r8
 8003962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003966:	4641      	mov	r1, r8
 8003968:	018a      	lsls	r2, r1, #6
 800396a:	4641      	mov	r1, r8
 800396c:	1a51      	subs	r1, r2, r1
 800396e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003970:	4649      	mov	r1, r9
 8003972:	eb63 0301 	sbc.w	r3, r3, r1
 8003976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003984:	4649      	mov	r1, r9
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4641      	mov	r1, r8
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4641      	mov	r1, r8
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4622      	mov	r2, r4
 800399a:	189b      	adds	r3, r3, r2
 800399c:	633b      	str	r3, [r7, #48]	@ 0x30
 800399e:	462b      	mov	r3, r5
 80039a0:	460a      	mov	r2, r1
 80039a2:	eb42 0303 	adc.w	r3, r2, r3
 80039a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039b4:	4629      	mov	r1, r5
 80039b6:	024b      	lsls	r3, r1, #9
 80039b8:	4621      	mov	r1, r4
 80039ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039be:	4621      	mov	r1, r4
 80039c0:	024a      	lsls	r2, r1, #9
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80039d8:	f7fd f916 	bl	8000c08 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039e6:	e067      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e8:	4b75      	ldr	r3, [pc, #468]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80039f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a02:	2300      	movs	r3, #0
 8003a04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	f04f 0000 	mov.w	r0, #0
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	0159      	lsls	r1, r3, #5
 8003a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1c:	0150      	lsls	r0, r2, #5
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4621      	mov	r1, r4
 8003a24:	1a51      	subs	r1, r2, r1
 8003a26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a28:	4629      	mov	r1, r5
 8003a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	018b      	lsls	r3, r1, #6
 8003a40:	4641      	mov	r1, r8
 8003a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a46:	4641      	mov	r1, r8
 8003a48:	018a      	lsls	r2, r1, #6
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a50:	4649      	mov	r1, r9
 8003a52:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6a:	4692      	mov	sl, r2
 8003a6c:	469b      	mov	fp, r3
 8003a6e:	4623      	mov	r3, r4
 8003a70:	eb1a 0303 	adds.w	r3, sl, r3
 8003a74:	623b      	str	r3, [r7, #32]
 8003a76:	462b      	mov	r3, r5
 8003a78:	eb4b 0303 	adc.w	r3, fp, r3
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	028b      	lsls	r3, r1, #10
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a94:	4621      	mov	r1, r4
 8003a96:	028a      	lsls	r2, r1, #10
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aa4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003aa6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003aaa:	f7fd f8ad 	bl	8000c08 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ab8:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ada:	e0eb      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003adc:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae8:	4b35      	ldr	r3, [pc, #212]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d06b      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af4:	4b32      	ldr	r3, [pc, #200]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	2200      	movs	r2, #0
 8003afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003afe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b08:	2300      	movs	r3, #0
 8003b0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b10:	4622      	mov	r2, r4
 8003b12:	462b      	mov	r3, r5
 8003b14:	f04f 0000 	mov.w	r0, #0
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	0159      	lsls	r1, r3, #5
 8003b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b22:	0150      	lsls	r0, r2, #5
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4621      	mov	r1, r4
 8003b2a:	1a51      	subs	r1, r2, r1
 8003b2c:	61b9      	str	r1, [r7, #24]
 8003b2e:	4629      	mov	r1, r5
 8003b30:	eb63 0301 	sbc.w	r3, r3, r1
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b42:	4659      	mov	r1, fp
 8003b44:	018b      	lsls	r3, r1, #6
 8003b46:	4651      	mov	r1, sl
 8003b48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	018a      	lsls	r2, r1, #6
 8003b50:	4651      	mov	r1, sl
 8003b52:	ebb2 0801 	subs.w	r8, r2, r1
 8003b56:	4659      	mov	r1, fp
 8003b58:	eb63 0901 	sbc.w	r9, r3, r1
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b70:	4690      	mov	r8, r2
 8003b72:	4699      	mov	r9, r3
 8003b74:	4623      	mov	r3, r4
 8003b76:	eb18 0303 	adds.w	r3, r8, r3
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	eb49 0303 	adc.w	r3, r9, r3
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b90:	4629      	mov	r1, r5
 8003b92:	024b      	lsls	r3, r1, #9
 8003b94:	4621      	mov	r1, r4
 8003b96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	024a      	lsls	r2, r1, #9
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003baa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bb0:	f7fd f82a 	bl	8000c08 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bbe:	e065      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x420>
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	00f42400 	.word	0x00f42400
 8003bc8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bde:	2300      	movs	r3, #0
 8003be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4641      	mov	r1, r8
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	4649      	mov	r1, r9
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c18:	4659      	mov	r1, fp
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4651      	mov	r1, sl
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4651      	mov	r1, sl
 8003c28:	1a54      	subs	r4, r2, r1
 8003c2a:	4659      	mov	r1, fp
 8003c2c:	eb63 0501 	sbc.w	r5, r3, r1
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	00eb      	lsls	r3, r5, #3
 8003c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c3e:	00e2      	lsls	r2, r4, #3
 8003c40:	4614      	mov	r4, r2
 8003c42:	461d      	mov	r5, r3
 8003c44:	4643      	mov	r3, r8
 8003c46:	18e3      	adds	r3, r4, r3
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	eb45 0303 	adc.w	r3, r5, r3
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c5e:	4629      	mov	r1, r5
 8003c60:	028b      	lsls	r3, r1, #10
 8003c62:	4621      	mov	r1, r4
 8003c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c68:	4621      	mov	r1, r4
 8003c6a:	028a      	lsls	r2, r1, #10
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c74:	2200      	movs	r2, #0
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c7e:	f7fc ffc3 	bl	8000c08 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4613      	mov	r3, r2
 8003c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0f1b      	lsrs	r3, r3, #28
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003caa:	e003      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	37b8      	adds	r7, #184	@ 0xb8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	00f42400 	.word	0x00f42400

08003ccc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e28d      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8083 	beq.w	8003df2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cec:	4b94      	ldr	r3, [pc, #592]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d019      	beq.n	8003d2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cf8:	4b91      	ldr	r3, [pc, #580]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d04:	4b8e      	ldr	r3, [pc, #568]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b8b      	ldr	r3, [pc, #556]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d112      	bne.n	8003d44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b88      	ldr	r3, [pc, #544]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b84      	ldr	r3, [pc, #528]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x124>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e25a      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x90>
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7b      	ldr	r2, [pc, #492]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xcc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0xb4>
 8003d66:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a72      	ldr	r2, [pc, #456]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xcc>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fcfa 	bl	8002798 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fcf6 	bl	8002798 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e21f      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b61      	ldr	r3, [pc, #388]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xdc>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fce6 	bl	8002798 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fce2 	bl	8002798 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e20b      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x104>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d06f      	beq.n	8003ede <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dfe:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d017      	beq.n	8003e3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d105      	bne.n	8003e22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e16:	4b4a      	ldr	r3, [pc, #296]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d11c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b44      	ldr	r3, [pc, #272]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d116      	bne.n	8003e68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	4b41      	ldr	r3, [pc, #260]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_RCC_OscConfig+0x186>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e1d3      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e52:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4937      	ldr	r1, [pc, #220]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	e03a      	b.n	8003ede <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e70:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <HAL_RCC_OscConfig+0x278>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe fc8f 	bl	8002798 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7e:	f7fe fc8b 	bl	8002798 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e1b4      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e90:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	4b28      	ldr	r3, [pc, #160]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4925      	ldr	r1, [pc, #148]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
 8003eb0:	e015      	b.n	8003ede <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RCC_OscConfig+0x278>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fc6e 	bl	8002798 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fe fc6a 	bl	8002798 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e193      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d036      	beq.n	8003f58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe fc4e 	bl	8002798 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fe fc4a 	bl	8002798 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e173      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f12:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x234>
 8003f1e:	e01b      	b.n	8003f58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe fc37 	bl	8002798 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	e00e      	b.n	8003f4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fc33 	bl	8002798 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d907      	bls.n	8003f4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e15c      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	42470000 	.word	0x42470000
 8003f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ea      	bne.n	8003f2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8097 	beq.w	8004094 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b83      	ldr	r3, [pc, #524]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f86:	4b7c      	ldr	r3, [pc, #496]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b79      	ldr	r3, [pc, #484]	@ (800417c <HAL_RCC_OscConfig+0x4b0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d118      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b76      	ldr	r3, [pc, #472]	@ (800417c <HAL_RCC_OscConfig+0x4b0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a75      	ldr	r2, [pc, #468]	@ (800417c <HAL_RCC_OscConfig+0x4b0>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fe fbf3 	bl	8002798 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fe fbef 	bl	8002798 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e118      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800417c <HAL_RCC_OscConfig+0x4b0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x31e>
 8003fdc:	4b66      	ldr	r3, [pc, #408]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	4a65      	ldr	r2, [pc, #404]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe8:	e01c      	b.n	8004024 <HAL_RCC_OscConfig+0x358>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x340>
 8003ff2:	4b61      	ldr	r3, [pc, #388]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a60      	ldr	r2, [pc, #384]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	f043 0304 	orr.w	r3, r3, #4
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a5d      	ldr	r2, [pc, #372]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0x358>
 800400c:	4b5a      	ldr	r3, [pc, #360]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a59      	ldr	r2, [pc, #356]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
 8004018:	4b57      	ldr	r3, [pc, #348]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a56      	ldr	r2, [pc, #344]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f023 0304 	bic.w	r3, r3, #4
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d015      	beq.n	8004058 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fe fbb4 	bl	8002798 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe fbb0 	bl	8002798 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0d7      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	4b4b      	ldr	r3, [pc, #300]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ee      	beq.n	8004034 <HAL_RCC_OscConfig+0x368>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fe fb9e 	bl	8002798 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	e00a      	b.n	8004076 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fe fb9a 	bl	8002798 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0c1      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004076:	4b40      	ldr	r3, [pc, #256]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ee      	bne.n	8004060 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004088:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	4a3a      	ldr	r2, [pc, #232]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80ad 	beq.w	80041f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800409e:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d060      	beq.n	800416c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d145      	bne.n	800413e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b33      	ldr	r3, [pc, #204]	@ (8004180 <HAL_RCC_OscConfig+0x4b4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe fb6e 	bl	8002798 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fb6a 	bl	8002798 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e093      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	4b29      	ldr	r3, [pc, #164]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	019b      	lsls	r3, r3, #6
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	071b      	lsls	r3, r3, #28
 800410a:	491b      	ldr	r1, [pc, #108]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_OscConfig+0x4b4>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fe fb3f 	bl	8002798 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fe fb3b 	bl	8002798 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e064      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x452>
 800413c:	e05c      	b.n	80041f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <HAL_RCC_OscConfig+0x4b4>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe fb28 	bl	8002798 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe fb24 	bl	8002798 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e04d      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x480>
 800416a:	e045      	b.n	80041f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e040      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
 8004180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004184:	4b1f      	ldr	r3, [pc, #124]	@ (8004204 <HAL_RCC_OscConfig+0x538>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d030      	beq.n	80041f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d129      	bne.n	80041f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d122      	bne.n	80041f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	4293      	cmp	r3, r2
 80041be:	d119      	bne.n	80041f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d10f      	bne.n	80041f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07b      	b.n	8004312 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800422a:	d009      	beq.n	8004240 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	61da      	str	r2, [r3, #28]
 8004232:	e005      	b.n	8004240 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fe f80c 	bl	8002278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004276:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c4:	ea42 0103 	orr.w	r1, r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0104 	and.w	r1, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	f003 0210 	and.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004300:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b088      	sub	sp, #32
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800432a:	f7fe fa35 	bl	8002798 <HAL_GetTick>
 800432e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	d001      	beq.n	8004344 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
 8004342:	e12a      	b.n	800459a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_SPI_Transmit+0x36>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e122      	b.n	800459a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_SPI_Transmit+0x48>
 800435e:	2302      	movs	r3, #2
 8004360:	e11b      	b.n	800459a <HAL_SPI_Transmit+0x280>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2203      	movs	r2, #3
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b0:	d10f      	bne.n	80043d2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d007      	beq.n	80043f0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f8:	d152      	bne.n	80044a0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_SPI_Transmit+0xee>
 8004402:	8b7b      	ldrh	r3, [r7, #26]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d145      	bne.n	8004494 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800442c:	e032      	b.n	8004494 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d112      	bne.n	8004462 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	881a      	ldrh	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004460:	e018      	b.n	8004494 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004462:	f7fe f999 	bl	8002798 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d803      	bhi.n	800447a <HAL_SPI_Transmit+0x160>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d102      	bne.n	8004480 <HAL_SPI_Transmit+0x166>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e082      	b.n	800459a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1c7      	bne.n	800442e <HAL_SPI_Transmit+0x114>
 800449e:	e053      	b.n	8004548 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_Transmit+0x194>
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d147      	bne.n	800453e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	7812      	ldrb	r2, [r2, #0]
 80044ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044d4:	e033      	b.n	800453e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d113      	bne.n	800450c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	7812      	ldrb	r2, [r2, #0]
 80044f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	86da      	strh	r2, [r3, #54]	@ 0x36
 800450a:	e018      	b.n	800453e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450c:	f7fe f944 	bl	8002798 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d803      	bhi.n	8004524 <HAL_SPI_Transmit+0x20a>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d102      	bne.n	800452a <HAL_SPI_Transmit+0x210>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e02d      	b.n	800459a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1c6      	bne.n	80044d6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fbd9 	bl	8004d04 <SPI_EndRxTxTransaction>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004598:	2300      	movs	r3, #0
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af02      	add	r7, sp, #8
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
 80045c0:	e104      	b.n	80047cc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ca:	d112      	bne.n	80045f2 <HAL_SPI_Receive+0x50>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10e      	bne.n	80045f2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2204      	movs	r2, #4
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8f3 	bl	80047d4 <HAL_SPI_TransmitReceive>
 80045ee:	4603      	mov	r3, r0
 80045f0:	e0ec      	b.n	80047cc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045f2:	f7fe f8d1 	bl	8002798 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_SPI_Receive+0x62>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0e1      	b.n	80047cc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_SPI_Receive+0x74>
 8004612:	2302      	movs	r3, #2
 8004614:	e0da      	b.n	80047cc <HAL_SPI_Receive+0x22a>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2204      	movs	r2, #4
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004664:	d10f      	bne.n	8004686 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004674:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004684:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d007      	beq.n	80046a4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d170      	bne.n	800478e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046ac:	e035      	b.n	800471a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d115      	bne.n	80046e8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f103 020c 	add.w	r2, r3, #12
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046e6:	e018      	b.n	800471a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e8:	f7fe f856 	bl	8002798 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d803      	bhi.n	8004700 <HAL_SPI_Receive+0x15e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d102      	bne.n	8004706 <HAL_SPI_Receive+0x164>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e058      	b.n	80047cc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1c4      	bne.n	80046ae <HAL_SPI_Receive+0x10c>
 8004724:	e038      	b.n	8004798 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d113      	bne.n	800475c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	b292      	uxth	r2, r2
 8004740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800475a:	e018      	b.n	800478e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475c:	f7fe f81c 	bl	8002798 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d803      	bhi.n	8004774 <HAL_SPI_Receive+0x1d2>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d102      	bne.n	800477a <HAL_SPI_Receive+0x1d8>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e01e      	b.n	80047cc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1c6      	bne.n	8004726 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fa4b 	bl	8004c38 <SPI_EndRxTransaction>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047e2:	2301      	movs	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e6:	f7fd ffd7 	bl	8002798 <HAL_GetTick>
 80047ea:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047f2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047fe:	7ffb      	ldrb	r3, [r7, #31]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d00c      	beq.n	800481e <HAL_SPI_TransmitReceive+0x4a>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800480a:	d106      	bne.n	800481a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <HAL_SPI_TransmitReceive+0x46>
 8004814:	7ffb      	ldrb	r3, [r7, #31]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d001      	beq.n	800481e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
 800481c:	e17f      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_SPI_TransmitReceive+0x5c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_SPI_TransmitReceive+0x5c>
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e174      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x6e>
 800483e:	2302      	movs	r3, #2
 8004840:	e16d      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b04      	cmp	r3, #4
 8004854:	d003      	beq.n	800485e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2205      	movs	r2, #5
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	887a      	ldrh	r2, [r7, #2]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	887a      	ldrh	r2, [r7, #2]
 8004886:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489e:	2b40      	cmp	r3, #64	@ 0x40
 80048a0:	d007      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ba:	d17e      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_TransmitReceive+0xf6>
 80048c4:	8afb      	ldrh	r3, [r7, #22]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d16c      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048da:	1c9a      	adds	r2, r3, #2
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ee:	e059      	b.n	80049a4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d11b      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x162>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x162>
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	2b01      	cmp	r3, #1
 800490c:	d113      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	1c9a      	adds	r2, r3, #2
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d119      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x1a4>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d014      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	b292      	uxth	r2, r2
 800495a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004974:	2301      	movs	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004978:	f7fd ff0e 	bl	8002798 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004984:	429a      	cmp	r2, r3
 8004986:	d80d      	bhi.n	80049a4 <HAL_SPI_TransmitReceive+0x1d0>
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d009      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0bc      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1a0      	bne.n	80048f0 <HAL_SPI_TransmitReceive+0x11c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d19b      	bne.n	80048f0 <HAL_SPI_TransmitReceive+0x11c>
 80049b8:	e082      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x1f4>
 80049c2:	8afb      	ldrh	r3, [r7, #22]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d171      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	7812      	ldrb	r2, [r2, #0]
 80049d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ee:	e05d      	b.n	8004aac <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d11c      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x264>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x264>
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d114      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d119      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x2a6>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d014      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a76:	2301      	movs	r3, #1
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a7a:	f7fd fe8d 	bl	8002798 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_TransmitReceive+0x2be>
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x2c4>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e038      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d19c      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x21c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d197      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f91d 	bl	8004d04 <SPI_EndRxTxTransaction>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01d      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3728      	adds	r7, #40	@ 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b38:	f7fd fe2e 	bl	8002798 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b48:	f7fd fe26 	bl	8002798 <HAL_GetTick>
 8004b4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b4e:	4b39      	ldr	r3, [pc, #228]	@ (8004c34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	015b      	lsls	r3, r3, #5
 8004b54:	0d1b      	lsrs	r3, r3, #20
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	e054      	b.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d050      	beq.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b68:	f7fd fe16 	bl	8002798 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d902      	bls.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d13d      	bne.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b96:	d111      	bne.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba0:	d004      	beq.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004baa:	d107      	bne.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc4:	d10f      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004be4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e017      	b.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4013      	ands	r3, r2
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d19b      	bne.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000029c 	.word	0x2000029c

08004c38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c4c:	d111      	bne.n	8004c72 <SPI_EndRxTransaction+0x3a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c56:	d004      	beq.n	8004c62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c60:	d107      	bne.n	8004c72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7a:	d12a      	bne.n	8004cd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c84:	d012      	beq.n	8004cac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	@ 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ff49 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02d      	beq.n	8004cf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e026      	b.n	8004cfa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff ff36 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01a      	beq.n	8004cf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e013      	b.n	8004cfa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2101      	movs	r1, #1
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7ff ff23 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e000      	b.n	8004cfa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2201      	movs	r2, #1
 8004d18:	2102      	movs	r1, #2
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff ff04 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e032      	b.n	8004d9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d36:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <SPI_EndRxTxTransaction+0xa0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <SPI_EndRxTxTransaction+0xa4>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	0d5b      	lsrs	r3, r3, #21
 8004d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d54:	d112      	bne.n	8004d7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	@ 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fee1 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e00f      	b.n	8004d9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b80      	cmp	r3, #128	@ 0x80
 8004d94:	d0f2      	beq.n	8004d7c <SPI_EndRxTxTransaction+0x78>
 8004d96:	e000      	b.n	8004d9a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d98:	bf00      	nop
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	2000029c 	.word	0x2000029c
 8004da8:	165e9f81 	.word	0x165e9f81

08004dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e041      	b.n	8004e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fd fa98 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f000 f95e 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e046      	b.n	8004ef2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <HAL_TIM_Base_Start+0xb4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d022      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d01d      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	@ (8004f04 <HAL_TIM_Base_Start+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d018      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <HAL_TIM_Base_Start+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_TIM_Base_Start+0xc0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <HAL_TIM_Base_Start+0xc4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <HAL_TIM_Base_Start+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_Base_Start+0x70>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_TIM_Base_Start+0xcc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d111      	bne.n	8004ee0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d010      	beq.n	8004ef0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e007      	b.n	8004ef0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40001800 	.word	0x40001800

08004f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_ConfigClockSource+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0b4      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x186>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f70:	d03e      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f76:	f200 8087 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f7e:	f000 8086 	beq.w	800508e <HAL_TIM_ConfigClockSource+0x172>
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f86:	d87f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b70      	cmp	r3, #112	@ 0x70
 8004f8a:	d01a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f8c:	2b70      	cmp	r3, #112	@ 0x70
 8004f8e:	d87b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b60      	cmp	r3, #96	@ 0x60
 8004f92:	d050      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x11a>
 8004f94:	2b60      	cmp	r3, #96	@ 0x60
 8004f96:	d877      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b50      	cmp	r3, #80	@ 0x50
 8004f9a:	d03c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0xfa>
 8004f9c:	2b50      	cmp	r3, #80	@ 0x50
 8004f9e:	d873      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d058      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x13a>
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d86f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b30      	cmp	r3, #48	@ 0x30
 8004faa:	d064      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b30      	cmp	r3, #48	@ 0x30
 8004fae:	d86b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d060      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d867      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05c      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d05a      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc0:	e062      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	f000 f991 	bl	80052f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e04f      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	f000 f97a 	bl	80052f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005012:	609a      	str	r2, [r3, #8]
      break;
 8005014:	e03c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005022:	461a      	mov	r2, r3
 8005024:	f000 f8ee 	bl	8005204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2150      	movs	r1, #80	@ 0x50
 800502e:	4618      	mov	r0, r3
 8005030:	f000 f947 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8005034:	e02c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005042:	461a      	mov	r2, r3
 8005044:	f000 f90d 	bl	8005262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2160      	movs	r1, #96	@ 0x60
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f937 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8005054:	e01c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005062:	461a      	mov	r2, r3
 8005064:	f000 f8ce 	bl	8005204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2140      	movs	r1, #64	@ 0x40
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f927 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8005074:	e00c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 f91e 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8005086:	e003      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e000      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800508e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a46      	ldr	r2, [pc, #280]	@ (80051d8 <TIM_Base_SetConfig+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a43      	ldr	r2, [pc, #268]	@ (80051dc <TIM_Base_SetConfig+0x130>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a42      	ldr	r2, [pc, #264]	@ (80051e0 <TIM_Base_SetConfig+0x134>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a41      	ldr	r2, [pc, #260]	@ (80051e4 <TIM_Base_SetConfig+0x138>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a40      	ldr	r2, [pc, #256]	@ (80051e8 <TIM_Base_SetConfig+0x13c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a35      	ldr	r2, [pc, #212]	@ (80051d8 <TIM_Base_SetConfig+0x12c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510c:	d027      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a32      	ldr	r2, [pc, #200]	@ (80051dc <TIM_Base_SetConfig+0x130>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d023      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a31      	ldr	r2, [pc, #196]	@ (80051e0 <TIM_Base_SetConfig+0x134>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a30      	ldr	r2, [pc, #192]	@ (80051e4 <TIM_Base_SetConfig+0x138>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2f      	ldr	r2, [pc, #188]	@ (80051e8 <TIM_Base_SetConfig+0x13c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2e      	ldr	r2, [pc, #184]	@ (80051ec <TIM_Base_SetConfig+0x140>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2d      	ldr	r2, [pc, #180]	@ (80051f0 <TIM_Base_SetConfig+0x144>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2c      	ldr	r2, [pc, #176]	@ (80051f4 <TIM_Base_SetConfig+0x148>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2b      	ldr	r2, [pc, #172]	@ (80051f8 <TIM_Base_SetConfig+0x14c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2a      	ldr	r2, [pc, #168]	@ (80051fc <TIM_Base_SetConfig+0x150>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <TIM_Base_SetConfig+0x154>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a10      	ldr	r2, [pc, #64]	@ (80051d8 <TIM_Base_SetConfig+0x12c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a12      	ldr	r2, [pc, #72]	@ (80051e8 <TIM_Base_SetConfig+0x13c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]
  }
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800
 80051f8:	40001800 	.word	0x40001800
 80051fc:	40001c00 	.word	0x40001c00
 8005200:	40002000 	.word	0x40002000

08005204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800522e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 030a 	bic.w	r3, r3, #10
 8005240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005262:	b480      	push	{r7}
 8005264:	b087      	sub	sp, #28
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 0210 	bic.w	r2, r3, #16
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800528c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	031b      	lsls	r3, r3, #12
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	f043 0307 	orr.w	r3, r3, #7
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	431a      	orrs	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800534c:	2302      	movs	r3, #2
 800534e:	e05a      	b.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d022      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539c:	d01d      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d018      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1b      	ldr	r2, [pc, #108]	@ (800541c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00e      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a18      	ldr	r2, [pc, #96]	@ (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	@ (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a15      	ldr	r2, [pc, #84]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10c      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e042      	b.n	80054c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc ff76 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	@ 0x24
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fc01 	bl	8005c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	@ 0x28
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d175      	bne.n	80055dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_UART_Transmit+0x2c>
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e06e      	b.n	80055de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2221      	movs	r2, #33	@ 0x21
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550e:	f7fd f943 	bl	8002798 <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005528:	d108      	bne.n	800553c <HAL_UART_Transmit+0x6c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e003      	b.n	8005544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005544:	e02e      	b.n	80055a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	@ 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fa14 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e03a      	b.n	80055de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800557c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3302      	adds	r3, #2
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e007      	b.n	8005596 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3301      	adds	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1cb      	bne.n	8005546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	2140      	movs	r1, #64	@ 0x40
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f9e0 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e006      	b.n	80055de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d112      	bne.n	8005626 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Receive_DMA+0x26>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e00b      	b.n	8005628 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	461a      	mov	r2, r3
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fa07 	bl	8005a30 <UART_Start_Receive_DMA>
 8005622:	4603      	mov	r3, r0
 8005624:	e000      	b.n	8005628 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
  }
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b090      	sub	sp, #64	@ 0x40
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005638:	2300      	movs	r3, #0
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b80      	cmp	r3, #128	@ 0x80
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b21      	cmp	r3, #33	@ 0x21
 800565c:	d128      	bne.n	80056b0 <HAL_UART_DMAStop+0x80>
 800565e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d025      	beq.n	80056b0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	623b      	str	r3, [r7, #32]
   return(result);
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800567a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005684:	633a      	str	r2, [r7, #48]	@ 0x30
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800568a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fd fabf 	bl	8002c28 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa5a 	bl	8005b64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	2b40      	cmp	r3, #64	@ 0x40
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b22      	cmp	r3, #34	@ 0x22
 80056d0:	d128      	bne.n	8005724 <HAL_UART_DMAStop+0xf4>
 80056d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d025      	beq.n	8005724 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056f8:	61fa      	str	r2, [r7, #28]
 80056fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	69b9      	ldr	r1, [r7, #24]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	617b      	str	r3, [r7, #20]
   return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	4618      	mov	r0, r3
 800571a:	f7fd fa85 	bl	8002c28 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa48 	bl	8005bb4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3740      	adds	r7, #64	@ 0x40
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b09c      	sub	sp, #112	@ 0x70
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d172      	bne.n	8005884 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800579e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a0:	2200      	movs	r2, #0
 80057a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80057f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057f8:	647a      	str	r2, [r7, #68]	@ 0x44
 80057fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3314      	adds	r3, #20
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	623b      	str	r3, [r7, #32]
   return(result);
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005822:	663b      	str	r3, [r7, #96]	@ 0x60
 8005824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800582c:	633a      	str	r2, [r7, #48]	@ 0x30
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e5      	bne.n	800580c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d119      	bne.n	8005884 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005870:	61fa      	str	r2, [r7, #28]
 8005872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	617b      	str	r3, [r7, #20]
   return(result);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005886:	2200      	movs	r2, #0
 8005888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	2b01      	cmp	r3, #1
 8005890:	d106      	bne.n	80058a0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005894:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005896:	4619      	mov	r1, r3
 8005898:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800589a:	f7ff ff66 	bl	800576a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800589e:	e002      	b.n	80058a6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80058a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058a2:	f7ff ff44 	bl	800572e <HAL_UART_RxCpltCallback>
}
 80058a6:	bf00      	nop
 80058a8:	3770      	adds	r7, #112	@ 0x70
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d108      	bne.n	80058dc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff ff48 	bl	800576a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058da:	e002      	b.n	80058e2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff ff30 	bl	8005742 <HAL_UART_RxHalfCpltCallback>
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b80      	cmp	r3, #128	@ 0x80
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b21      	cmp	r3, #33	@ 0x21
 800591c:	d108      	bne.n	8005930 <UART_DMAError+0x46>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f000 f91a 	bl	8005b64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b40      	cmp	r3, #64	@ 0x40
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b22      	cmp	r3, #34	@ 0x22
 8005950:	d108      	bne.n	8005964 <UART_DMAError+0x7a>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800595e:	68b8      	ldr	r0, [r7, #8]
 8005960:	f000 f928 	bl	8005bb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005968:	f043 0210 	orr.w	r2, r3, #16
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f7ff fef0 	bl	8005756 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	e03b      	b.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d037      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005998:	f7fc fefe 	bl	8002798 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <UART_WaitOnFlagUntilTimeout+0x30>
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e03a      	b.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d023      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b80      	cmp	r3, #128	@ 0x80
 80059c4:	d020      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d01d      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d116      	bne.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f8df 	bl	8005bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2208      	movs	r2, #8
 80059fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e00f      	b.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4013      	ands	r3, r2
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	79fb      	ldrb	r3, [r7, #7]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d0b4      	beq.n	8005990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b098      	sub	sp, #96	@ 0x60
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2222      	movs	r2, #34	@ 0x22
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b58 <UART_Start_Receive_DMA+0x128>)
 8005a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a64:	4a3d      	ldr	r2, [pc, #244]	@ (8005b5c <UART_Start_Receive_DMA+0x12c>)
 8005a66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b60 <UART_Start_Receive_DMA+0x130>)
 8005a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	2200      	movs	r2, #0
 8005a76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f7fd f872 	bl	8002b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d019      	beq.n	8005ae6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ad2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b06:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b30:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6a39      	ldr	r1, [r7, #32]
 8005b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3760      	adds	r7, #96	@ 0x60
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	08005783 	.word	0x08005783
 8005b5c:	080058af 	.word	0x080058af
 8005b60:	080058eb 	.word	0x080058eb

08005b64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	@ 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	61ba      	str	r2, [r7, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005ba8:	bf00      	nop
 8005baa:	3724      	adds	r7, #36	@ 0x24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b095      	sub	sp, #84	@ 0x54
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3314      	adds	r3, #20
 8005bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e5      	bne.n	8005bf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d119      	bne.n	8005c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f023 0310 	bic.w	r3, r3, #16
 8005c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c4c:	61ba      	str	r2, [r7, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6979      	ldr	r1, [r7, #20]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c6e:	bf00      	nop
 8005c70:	3754      	adds	r7, #84	@ 0x54
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c80:	b0c0      	sub	sp, #256	@ 0x100
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	68d9      	ldr	r1, [r3, #12]
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	ea40 0301 	orr.w	r3, r0, r1
 8005ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005cd4:	f021 010c 	bic.w	r1, r1, #12
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf6:	6999      	ldr	r1, [r3, #24]
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	ea40 0301 	orr.w	r3, r0, r1
 8005d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8005f48 <UART_SetConfig+0x2cc>)
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d005      	beq.n	8005d1c <UART_SetConfig+0xa0>
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b8d      	ldr	r3, [pc, #564]	@ (8005f4c <UART_SetConfig+0x2d0>)
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d104      	bne.n	8005d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d1c:	f7fd fd92 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8005d20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d24:	e003      	b.n	8005d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d26:	f7fd fd79 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8005d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d38:	f040 810c 	bne.w	8005f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	1891      	adds	r1, r2, r2
 8005d54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d56:	415b      	adcs	r3, r3
 8005d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d5e:	4621      	mov	r1, r4
 8005d60:	eb12 0801 	adds.w	r8, r2, r1
 8005d64:	4629      	mov	r1, r5
 8005d66:	eb43 0901 	adc.w	r9, r3, r1
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d7e:	4690      	mov	r8, r2
 8005d80:	4699      	mov	r9, r3
 8005d82:	4623      	mov	r3, r4
 8005d84:	eb18 0303 	adds.w	r3, r8, r3
 8005d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	eb49 0303 	adc.w	r3, r9, r3
 8005d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005da2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005daa:	460b      	mov	r3, r1
 8005dac:	18db      	adds	r3, r3, r3
 8005dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005db0:	4613      	mov	r3, r2
 8005db2:	eb42 0303 	adc.w	r3, r2, r3
 8005db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005dc0:	f7fa ff22 	bl	8000c08 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4b61      	ldr	r3, [pc, #388]	@ (8005f50 <UART_SetConfig+0x2d4>)
 8005dca:	fba3 2302 	umull	r2, r3, r3, r2
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	011c      	lsls	r4, r3, #4
 8005dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	1891      	adds	r1, r2, r2
 8005dea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dec:	415b      	adcs	r3, r3
 8005dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005df4:	4641      	mov	r1, r8
 8005df6:	eb12 0a01 	adds.w	sl, r2, r1
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e14:	4692      	mov	sl, r2
 8005e16:	469b      	mov	fp, r3
 8005e18:	4643      	mov	r3, r8
 8005e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8005e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e22:	464b      	mov	r3, r9
 8005e24:	eb4b 0303 	adc.w	r3, fp, r3
 8005e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e40:	460b      	mov	r3, r1
 8005e42:	18db      	adds	r3, r3, r3
 8005e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e46:	4613      	mov	r3, r2
 8005e48:	eb42 0303 	adc.w	r3, r2, r3
 8005e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e56:	f7fa fed7 	bl	8000c08 <__aeabi_uldivmod>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4b3b      	ldr	r3, [pc, #236]	@ (8005f50 <UART_SetConfig+0x2d4>)
 8005e62:	fba3 2301 	umull	r2, r3, r3, r1
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2264      	movs	r2, #100	@ 0x64
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	1acb      	subs	r3, r1, r3
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e76:	4b36      	ldr	r3, [pc, #216]	@ (8005f50 <UART_SetConfig+0x2d4>)
 8005e78:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e84:	441c      	add	r4, r3
 8005e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	1851      	adds	r1, r2, r1
 8005eac:	6339      	str	r1, [r7, #48]	@ 0x30
 8005eae:	4649      	mov	r1, r9
 8005eb0:	414b      	adcs	r3, r1
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	00cb      	lsls	r3, r1, #3
 8005ec4:	4651      	mov	r1, sl
 8005ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eca:	4651      	mov	r1, sl
 8005ecc:	00ca      	lsls	r2, r1, #3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	189b      	adds	r3, r3, r2
 8005ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005edc:	464b      	mov	r3, r9
 8005ede:	460a      	mov	r2, r1
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005efc:	460b      	mov	r3, r1
 8005efe:	18db      	adds	r3, r3, r3
 8005f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f02:	4613      	mov	r3, r2
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f12:	f7fa fe79 	bl	8000c08 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <UART_SetConfig+0x2d4>)
 8005f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	2164      	movs	r1, #100	@ 0x64
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	3332      	adds	r3, #50	@ 0x32
 8005f2e:	4a08      	ldr	r2, [pc, #32]	@ (8005f50 <UART_SetConfig+0x2d4>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f003 0207 	and.w	r2, r3, #7
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4422      	add	r2, r4
 8005f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f44:	e106      	b.n	8006154 <UART_SetConfig+0x4d8>
 8005f46:	bf00      	nop
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40011400 	.word	0x40011400
 8005f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f66:	4642      	mov	r2, r8
 8005f68:	464b      	mov	r3, r9
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	6239      	str	r1, [r7, #32]
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f76:	4641      	mov	r1, r8
 8005f78:	1854      	adds	r4, r2, r1
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	eb43 0501 	adc.w	r5, r3, r1
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	00eb      	lsls	r3, r5, #3
 8005f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f8e:	00e2      	lsls	r2, r4, #3
 8005f90:	4614      	mov	r4, r2
 8005f92:	461d      	mov	r5, r3
 8005f94:	4643      	mov	r3, r8
 8005f96:	18e3      	adds	r3, r4, r3
 8005f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	eb45 0303 	adc.w	r3, r5, r3
 8005fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	008b      	lsls	r3, r1, #2
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fcc:	4621      	mov	r1, r4
 8005fce:	008a      	lsls	r2, r1, #2
 8005fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fd4:	f7fa fe18 	bl	8000c08 <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4b60      	ldr	r3, [pc, #384]	@ (8006160 <UART_SetConfig+0x4e4>)
 8005fde:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	011c      	lsls	r4, r3, #4
 8005fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ff0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	1891      	adds	r1, r2, r2
 8005ffe:	61b9      	str	r1, [r7, #24]
 8006000:	415b      	adcs	r3, r3
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006008:	4641      	mov	r1, r8
 800600a:	1851      	adds	r1, r2, r1
 800600c:	6139      	str	r1, [r7, #16]
 800600e:	4649      	mov	r1, r9
 8006010:	414b      	adcs	r3, r1
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006020:	4659      	mov	r1, fp
 8006022:	00cb      	lsls	r3, r1, #3
 8006024:	4651      	mov	r1, sl
 8006026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602a:	4651      	mov	r1, sl
 800602c:	00ca      	lsls	r2, r1, #3
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	4603      	mov	r3, r0
 8006034:	4642      	mov	r2, r8
 8006036:	189b      	adds	r3, r3, r2
 8006038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800603c:	464b      	mov	r3, r9
 800603e:	460a      	mov	r2, r1
 8006040:	eb42 0303 	adc.w	r3, r2, r3
 8006044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006052:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006060:	4649      	mov	r1, r9
 8006062:	008b      	lsls	r3, r1, #2
 8006064:	4641      	mov	r1, r8
 8006066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800606a:	4641      	mov	r1, r8
 800606c:	008a      	lsls	r2, r1, #2
 800606e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006072:	f7fa fdc9 	bl	8000c08 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4611      	mov	r1, r2
 800607c:	4b38      	ldr	r3, [pc, #224]	@ (8006160 <UART_SetConfig+0x4e4>)
 800607e:	fba3 2301 	umull	r2, r3, r3, r1
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	2264      	movs	r2, #100	@ 0x64
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	1acb      	subs	r3, r1, r3
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	3332      	adds	r3, #50	@ 0x32
 8006090:	4a33      	ldr	r2, [pc, #204]	@ (8006160 <UART_SetConfig+0x4e4>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800609c:	441c      	add	r4, r3
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80060a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80060a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	1891      	adds	r1, r2, r2
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	415b      	adcs	r3, r3
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060bc:	4641      	mov	r1, r8
 80060be:	1851      	adds	r1, r2, r1
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	4649      	mov	r1, r9
 80060c4:	414b      	adcs	r3, r1
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060d4:	4659      	mov	r1, fp
 80060d6:	00cb      	lsls	r3, r1, #3
 80060d8:	4651      	mov	r1, sl
 80060da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060de:	4651      	mov	r1, sl
 80060e0:	00ca      	lsls	r2, r1, #3
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	4642      	mov	r2, r8
 80060ea:	189b      	adds	r3, r3, r2
 80060ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ee:	464b      	mov	r3, r9
 80060f0:	460a      	mov	r2, r1
 80060f2:	eb42 0303 	adc.w	r3, r2, r3
 80060f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	663b      	str	r3, [r7, #96]	@ 0x60
 8006102:	667a      	str	r2, [r7, #100]	@ 0x64
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006110:	4649      	mov	r1, r9
 8006112:	008b      	lsls	r3, r1, #2
 8006114:	4641      	mov	r1, r8
 8006116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611a:	4641      	mov	r1, r8
 800611c:	008a      	lsls	r2, r1, #2
 800611e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006122:	f7fa fd71 	bl	8000c08 <__aeabi_uldivmod>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4b0d      	ldr	r3, [pc, #52]	@ (8006160 <UART_SetConfig+0x4e4>)
 800612c:	fba3 1302 	umull	r1, r3, r3, r2
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	2164      	movs	r1, #100	@ 0x64
 8006134:	fb01 f303 	mul.w	r3, r1, r3
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	3332      	adds	r3, #50	@ 0x32
 800613e:	4a08      	ldr	r2, [pc, #32]	@ (8006160 <UART_SetConfig+0x4e4>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	f003 020f 	and.w	r2, r3, #15
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4422      	add	r2, r4
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800615a:	46bd      	mov	sp, r7
 800615c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006160:	51eb851f 	.word	0x51eb851f

08006164 <malloc>:
 8006164:	4b02      	ldr	r3, [pc, #8]	@ (8006170 <malloc+0xc>)
 8006166:	4601      	mov	r1, r0
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f000 b82d 	b.w	80061c8 <_malloc_r>
 800616e:	bf00      	nop
 8006170:	200002b4 	.word	0x200002b4

08006174 <free>:
 8006174:	4b02      	ldr	r3, [pc, #8]	@ (8006180 <free+0xc>)
 8006176:	4601      	mov	r1, r0
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f001 bdb1 	b.w	8007ce0 <_free_r>
 800617e:	bf00      	nop
 8006180:	200002b4 	.word	0x200002b4

08006184 <sbrk_aligned>:
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	4e0f      	ldr	r6, [pc, #60]	@ (80061c4 <sbrk_aligned+0x40>)
 8006188:	460c      	mov	r4, r1
 800618a:	6831      	ldr	r1, [r6, #0]
 800618c:	4605      	mov	r5, r0
 800618e:	b911      	cbnz	r1, 8006196 <sbrk_aligned+0x12>
 8006190:	f000 fefc 	bl	8006f8c <_sbrk_r>
 8006194:	6030      	str	r0, [r6, #0]
 8006196:	4621      	mov	r1, r4
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fef7 	bl	8006f8c <_sbrk_r>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	d103      	bne.n	80061aa <sbrk_aligned+0x26>
 80061a2:	f04f 34ff 	mov.w	r4, #4294967295
 80061a6:	4620      	mov	r0, r4
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
 80061aa:	1cc4      	adds	r4, r0, #3
 80061ac:	f024 0403 	bic.w	r4, r4, #3
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d0f8      	beq.n	80061a6 <sbrk_aligned+0x22>
 80061b4:	1a21      	subs	r1, r4, r0
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fee8 	bl	8006f8c <_sbrk_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d1f2      	bne.n	80061a6 <sbrk_aligned+0x22>
 80061c0:	e7ef      	b.n	80061a2 <sbrk_aligned+0x1e>
 80061c2:	bf00      	nop
 80061c4:	20000b90 	.word	0x20000b90

080061c8 <_malloc_r>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	1ccd      	adds	r5, r1, #3
 80061ce:	f025 0503 	bic.w	r5, r5, #3
 80061d2:	3508      	adds	r5, #8
 80061d4:	2d0c      	cmp	r5, #12
 80061d6:	bf38      	it	cc
 80061d8:	250c      	movcc	r5, #12
 80061da:	2d00      	cmp	r5, #0
 80061dc:	4606      	mov	r6, r0
 80061de:	db01      	blt.n	80061e4 <_malloc_r+0x1c>
 80061e0:	42a9      	cmp	r1, r5
 80061e2:	d904      	bls.n	80061ee <_malloc_r+0x26>
 80061e4:	230c      	movs	r3, #12
 80061e6:	6033      	str	r3, [r6, #0]
 80061e8:	2000      	movs	r0, #0
 80061ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062c4 <_malloc_r+0xfc>
 80061f2:	f000 f869 	bl	80062c8 <__malloc_lock>
 80061f6:	f8d8 3000 	ldr.w	r3, [r8]
 80061fa:	461c      	mov	r4, r3
 80061fc:	bb44      	cbnz	r4, 8006250 <_malloc_r+0x88>
 80061fe:	4629      	mov	r1, r5
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff ffbf 	bl	8006184 <sbrk_aligned>
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	4604      	mov	r4, r0
 800620a:	d158      	bne.n	80062be <_malloc_r+0xf6>
 800620c:	f8d8 4000 	ldr.w	r4, [r8]
 8006210:	4627      	mov	r7, r4
 8006212:	2f00      	cmp	r7, #0
 8006214:	d143      	bne.n	800629e <_malloc_r+0xd6>
 8006216:	2c00      	cmp	r4, #0
 8006218:	d04b      	beq.n	80062b2 <_malloc_r+0xea>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	4639      	mov	r1, r7
 800621e:	4630      	mov	r0, r6
 8006220:	eb04 0903 	add.w	r9, r4, r3
 8006224:	f000 feb2 	bl	8006f8c <_sbrk_r>
 8006228:	4581      	cmp	r9, r0
 800622a:	d142      	bne.n	80062b2 <_malloc_r+0xea>
 800622c:	6821      	ldr	r1, [r4, #0]
 800622e:	1a6d      	subs	r5, r5, r1
 8006230:	4629      	mov	r1, r5
 8006232:	4630      	mov	r0, r6
 8006234:	f7ff ffa6 	bl	8006184 <sbrk_aligned>
 8006238:	3001      	adds	r0, #1
 800623a:	d03a      	beq.n	80062b2 <_malloc_r+0xea>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	442b      	add	r3, r5
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	f8d8 3000 	ldr.w	r3, [r8]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	bb62      	cbnz	r2, 80062a4 <_malloc_r+0xdc>
 800624a:	f8c8 7000 	str.w	r7, [r8]
 800624e:	e00f      	b.n	8006270 <_malloc_r+0xa8>
 8006250:	6822      	ldr	r2, [r4, #0]
 8006252:	1b52      	subs	r2, r2, r5
 8006254:	d420      	bmi.n	8006298 <_malloc_r+0xd0>
 8006256:	2a0b      	cmp	r2, #11
 8006258:	d917      	bls.n	800628a <_malloc_r+0xc2>
 800625a:	1961      	adds	r1, r4, r5
 800625c:	42a3      	cmp	r3, r4
 800625e:	6025      	str	r5, [r4, #0]
 8006260:	bf18      	it	ne
 8006262:	6059      	strne	r1, [r3, #4]
 8006264:	6863      	ldr	r3, [r4, #4]
 8006266:	bf08      	it	eq
 8006268:	f8c8 1000 	streq.w	r1, [r8]
 800626c:	5162      	str	r2, [r4, r5]
 800626e:	604b      	str	r3, [r1, #4]
 8006270:	4630      	mov	r0, r6
 8006272:	f000 f82f 	bl	80062d4 <__malloc_unlock>
 8006276:	f104 000b 	add.w	r0, r4, #11
 800627a:	1d23      	adds	r3, r4, #4
 800627c:	f020 0007 	bic.w	r0, r0, #7
 8006280:	1ac2      	subs	r2, r0, r3
 8006282:	bf1c      	itt	ne
 8006284:	1a1b      	subne	r3, r3, r0
 8006286:	50a3      	strne	r3, [r4, r2]
 8006288:	e7af      	b.n	80061ea <_malloc_r+0x22>
 800628a:	6862      	ldr	r2, [r4, #4]
 800628c:	42a3      	cmp	r3, r4
 800628e:	bf0c      	ite	eq
 8006290:	f8c8 2000 	streq.w	r2, [r8]
 8006294:	605a      	strne	r2, [r3, #4]
 8006296:	e7eb      	b.n	8006270 <_malloc_r+0xa8>
 8006298:	4623      	mov	r3, r4
 800629a:	6864      	ldr	r4, [r4, #4]
 800629c:	e7ae      	b.n	80061fc <_malloc_r+0x34>
 800629e:	463c      	mov	r4, r7
 80062a0:	687f      	ldr	r7, [r7, #4]
 80062a2:	e7b6      	b.n	8006212 <_malloc_r+0x4a>
 80062a4:	461a      	mov	r2, r3
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d1fb      	bne.n	80062a4 <_malloc_r+0xdc>
 80062ac:	2300      	movs	r3, #0
 80062ae:	6053      	str	r3, [r2, #4]
 80062b0:	e7de      	b.n	8006270 <_malloc_r+0xa8>
 80062b2:	230c      	movs	r3, #12
 80062b4:	6033      	str	r3, [r6, #0]
 80062b6:	4630      	mov	r0, r6
 80062b8:	f000 f80c 	bl	80062d4 <__malloc_unlock>
 80062bc:	e794      	b.n	80061e8 <_malloc_r+0x20>
 80062be:	6005      	str	r5, [r0, #0]
 80062c0:	e7d6      	b.n	8006270 <_malloc_r+0xa8>
 80062c2:	bf00      	nop
 80062c4:	20000b94 	.word	0x20000b94

080062c8 <__malloc_lock>:
 80062c8:	4801      	ldr	r0, [pc, #4]	@ (80062d0 <__malloc_lock+0x8>)
 80062ca:	f000 beac 	b.w	8007026 <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	20000cd8 	.word	0x20000cd8

080062d4 <__malloc_unlock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	@ (80062dc <__malloc_unlock+0x8>)
 80062d6:	f000 bea7 	b.w	8007028 <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	20000cd8 	.word	0x20000cd8

080062e0 <_strtoul_l.constprop.0>:
 80062e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062e4:	4e34      	ldr	r6, [pc, #208]	@ (80063b8 <_strtoul_l.constprop.0+0xd8>)
 80062e6:	4686      	mov	lr, r0
 80062e8:	460d      	mov	r5, r1
 80062ea:	4628      	mov	r0, r5
 80062ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062f0:	5d37      	ldrb	r7, [r6, r4]
 80062f2:	f017 0708 	ands.w	r7, r7, #8
 80062f6:	d1f8      	bne.n	80062ea <_strtoul_l.constprop.0+0xa>
 80062f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80062fa:	d12f      	bne.n	800635c <_strtoul_l.constprop.0+0x7c>
 80062fc:	782c      	ldrb	r4, [r5, #0]
 80062fe:	2701      	movs	r7, #1
 8006300:	1c85      	adds	r5, r0, #2
 8006302:	f033 0010 	bics.w	r0, r3, #16
 8006306:	d109      	bne.n	800631c <_strtoul_l.constprop.0+0x3c>
 8006308:	2c30      	cmp	r4, #48	@ 0x30
 800630a:	d12c      	bne.n	8006366 <_strtoul_l.constprop.0+0x86>
 800630c:	7828      	ldrb	r0, [r5, #0]
 800630e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006312:	2858      	cmp	r0, #88	@ 0x58
 8006314:	d127      	bne.n	8006366 <_strtoul_l.constprop.0+0x86>
 8006316:	786c      	ldrb	r4, [r5, #1]
 8006318:	2310      	movs	r3, #16
 800631a:	3502      	adds	r5, #2
 800631c:	f04f 38ff 	mov.w	r8, #4294967295
 8006320:	2600      	movs	r6, #0
 8006322:	fbb8 f8f3 	udiv	r8, r8, r3
 8006326:	fb03 f908 	mul.w	r9, r3, r8
 800632a:	ea6f 0909 	mvn.w	r9, r9
 800632e:	4630      	mov	r0, r6
 8006330:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006334:	f1bc 0f09 	cmp.w	ip, #9
 8006338:	d81c      	bhi.n	8006374 <_strtoul_l.constprop.0+0x94>
 800633a:	4664      	mov	r4, ip
 800633c:	42a3      	cmp	r3, r4
 800633e:	dd2a      	ble.n	8006396 <_strtoul_l.constprop.0+0xb6>
 8006340:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006344:	d007      	beq.n	8006356 <_strtoul_l.constprop.0+0x76>
 8006346:	4580      	cmp	r8, r0
 8006348:	d322      	bcc.n	8006390 <_strtoul_l.constprop.0+0xb0>
 800634a:	d101      	bne.n	8006350 <_strtoul_l.constprop.0+0x70>
 800634c:	45a1      	cmp	r9, r4
 800634e:	db1f      	blt.n	8006390 <_strtoul_l.constprop.0+0xb0>
 8006350:	fb00 4003 	mla	r0, r0, r3, r4
 8006354:	2601      	movs	r6, #1
 8006356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800635a:	e7e9      	b.n	8006330 <_strtoul_l.constprop.0+0x50>
 800635c:	2c2b      	cmp	r4, #43	@ 0x2b
 800635e:	bf04      	itt	eq
 8006360:	782c      	ldrbeq	r4, [r5, #0]
 8006362:	1c85      	addeq	r5, r0, #2
 8006364:	e7cd      	b.n	8006302 <_strtoul_l.constprop.0+0x22>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1d8      	bne.n	800631c <_strtoul_l.constprop.0+0x3c>
 800636a:	2c30      	cmp	r4, #48	@ 0x30
 800636c:	bf0c      	ite	eq
 800636e:	2308      	moveq	r3, #8
 8006370:	230a      	movne	r3, #10
 8006372:	e7d3      	b.n	800631c <_strtoul_l.constprop.0+0x3c>
 8006374:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006378:	f1bc 0f19 	cmp.w	ip, #25
 800637c:	d801      	bhi.n	8006382 <_strtoul_l.constprop.0+0xa2>
 800637e:	3c37      	subs	r4, #55	@ 0x37
 8006380:	e7dc      	b.n	800633c <_strtoul_l.constprop.0+0x5c>
 8006382:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006386:	f1bc 0f19 	cmp.w	ip, #25
 800638a:	d804      	bhi.n	8006396 <_strtoul_l.constprop.0+0xb6>
 800638c:	3c57      	subs	r4, #87	@ 0x57
 800638e:	e7d5      	b.n	800633c <_strtoul_l.constprop.0+0x5c>
 8006390:	f04f 36ff 	mov.w	r6, #4294967295
 8006394:	e7df      	b.n	8006356 <_strtoul_l.constprop.0+0x76>
 8006396:	1c73      	adds	r3, r6, #1
 8006398:	d106      	bne.n	80063a8 <_strtoul_l.constprop.0+0xc8>
 800639a:	2322      	movs	r3, #34	@ 0x22
 800639c:	f8ce 3000 	str.w	r3, [lr]
 80063a0:	4630      	mov	r0, r6
 80063a2:	b932      	cbnz	r2, 80063b2 <_strtoul_l.constprop.0+0xd2>
 80063a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063a8:	b107      	cbz	r7, 80063ac <_strtoul_l.constprop.0+0xcc>
 80063aa:	4240      	negs	r0, r0
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d0f9      	beq.n	80063a4 <_strtoul_l.constprop.0+0xc4>
 80063b0:	b106      	cbz	r6, 80063b4 <_strtoul_l.constprop.0+0xd4>
 80063b2:	1e69      	subs	r1, r5, #1
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	e7f5      	b.n	80063a4 <_strtoul_l.constprop.0+0xc4>
 80063b8:	08009021 	.word	0x08009021

080063bc <strtoul>:
 80063bc:	4613      	mov	r3, r2
 80063be:	460a      	mov	r2, r1
 80063c0:	4601      	mov	r1, r0
 80063c2:	4802      	ldr	r0, [pc, #8]	@ (80063cc <strtoul+0x10>)
 80063c4:	6800      	ldr	r0, [r0, #0]
 80063c6:	f7ff bf8b 	b.w	80062e0 <_strtoul_l.constprop.0>
 80063ca:	bf00      	nop
 80063cc:	200002b4 	.word	0x200002b4

080063d0 <__cvt>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	ec57 6b10 	vmov	r6, r7, d0
 80063d8:	2f00      	cmp	r7, #0
 80063da:	460c      	mov	r4, r1
 80063dc:	4619      	mov	r1, r3
 80063de:	463b      	mov	r3, r7
 80063e0:	bfbb      	ittet	lt
 80063e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063e6:	461f      	movlt	r7, r3
 80063e8:	2300      	movge	r3, #0
 80063ea:	232d      	movlt	r3, #45	@ 0x2d
 80063ec:	700b      	strb	r3, [r1, #0]
 80063ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063f4:	4691      	mov	r9, r2
 80063f6:	f023 0820 	bic.w	r8, r3, #32
 80063fa:	bfbc      	itt	lt
 80063fc:	4632      	movlt	r2, r6
 80063fe:	4616      	movlt	r6, r2
 8006400:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006404:	d005      	beq.n	8006412 <__cvt+0x42>
 8006406:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800640a:	d100      	bne.n	800640e <__cvt+0x3e>
 800640c:	3401      	adds	r4, #1
 800640e:	2102      	movs	r1, #2
 8006410:	e000      	b.n	8006414 <__cvt+0x44>
 8006412:	2103      	movs	r1, #3
 8006414:	ab03      	add	r3, sp, #12
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	ab02      	add	r3, sp, #8
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	ec47 6b10 	vmov	d0, r6, r7
 8006420:	4653      	mov	r3, sl
 8006422:	4622      	mov	r2, r4
 8006424:	f000 fe98 	bl	8007158 <_dtoa_r>
 8006428:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800642c:	4605      	mov	r5, r0
 800642e:	d119      	bne.n	8006464 <__cvt+0x94>
 8006430:	f019 0f01 	tst.w	r9, #1
 8006434:	d00e      	beq.n	8006454 <__cvt+0x84>
 8006436:	eb00 0904 	add.w	r9, r0, r4
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7fa fb71 	bl	8000b28 <__aeabi_dcmpeq>
 8006446:	b108      	cbz	r0, 800644c <__cvt+0x7c>
 8006448:	f8cd 900c 	str.w	r9, [sp, #12]
 800644c:	2230      	movs	r2, #48	@ 0x30
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	454b      	cmp	r3, r9
 8006452:	d31e      	bcc.n	8006492 <__cvt+0xc2>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006458:	1b5b      	subs	r3, r3, r5
 800645a:	4628      	mov	r0, r5
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	b004      	add	sp, #16
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006468:	eb00 0904 	add.w	r9, r0, r4
 800646c:	d1e5      	bne.n	800643a <__cvt+0x6a>
 800646e:	7803      	ldrb	r3, [r0, #0]
 8006470:	2b30      	cmp	r3, #48	@ 0x30
 8006472:	d10a      	bne.n	800648a <__cvt+0xba>
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	4630      	mov	r0, r6
 800647a:	4639      	mov	r1, r7
 800647c:	f7fa fb54 	bl	8000b28 <__aeabi_dcmpeq>
 8006480:	b918      	cbnz	r0, 800648a <__cvt+0xba>
 8006482:	f1c4 0401 	rsb	r4, r4, #1
 8006486:	f8ca 4000 	str.w	r4, [sl]
 800648a:	f8da 3000 	ldr.w	r3, [sl]
 800648e:	4499      	add	r9, r3
 8006490:	e7d3      	b.n	800643a <__cvt+0x6a>
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	9103      	str	r1, [sp, #12]
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e7d9      	b.n	800644e <__cvt+0x7e>

0800649a <__exponent>:
 800649a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649c:	2900      	cmp	r1, #0
 800649e:	bfba      	itte	lt
 80064a0:	4249      	neglt	r1, r1
 80064a2:	232d      	movlt	r3, #45	@ 0x2d
 80064a4:	232b      	movge	r3, #43	@ 0x2b
 80064a6:	2909      	cmp	r1, #9
 80064a8:	7002      	strb	r2, [r0, #0]
 80064aa:	7043      	strb	r3, [r0, #1]
 80064ac:	dd29      	ble.n	8006502 <__exponent+0x68>
 80064ae:	f10d 0307 	add.w	r3, sp, #7
 80064b2:	461d      	mov	r5, r3
 80064b4:	270a      	movs	r7, #10
 80064b6:	461a      	mov	r2, r3
 80064b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80064bc:	fb07 1416 	mls	r4, r7, r6, r1
 80064c0:	3430      	adds	r4, #48	@ 0x30
 80064c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064c6:	460c      	mov	r4, r1
 80064c8:	2c63      	cmp	r4, #99	@ 0x63
 80064ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ce:	4631      	mov	r1, r6
 80064d0:	dcf1      	bgt.n	80064b6 <__exponent+0x1c>
 80064d2:	3130      	adds	r1, #48	@ 0x30
 80064d4:	1e94      	subs	r4, r2, #2
 80064d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064da:	1c41      	adds	r1, r0, #1
 80064dc:	4623      	mov	r3, r4
 80064de:	42ab      	cmp	r3, r5
 80064e0:	d30a      	bcc.n	80064f8 <__exponent+0x5e>
 80064e2:	f10d 0309 	add.w	r3, sp, #9
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	42ac      	cmp	r4, r5
 80064ea:	bf88      	it	hi
 80064ec:	2300      	movhi	r3, #0
 80064ee:	3302      	adds	r3, #2
 80064f0:	4403      	add	r3, r0
 80064f2:	1a18      	subs	r0, r3, r0
 80064f4:	b003      	add	sp, #12
 80064f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006500:	e7ed      	b.n	80064de <__exponent+0x44>
 8006502:	2330      	movs	r3, #48	@ 0x30
 8006504:	3130      	adds	r1, #48	@ 0x30
 8006506:	7083      	strb	r3, [r0, #2]
 8006508:	70c1      	strb	r1, [r0, #3]
 800650a:	1d03      	adds	r3, r0, #4
 800650c:	e7f1      	b.n	80064f2 <__exponent+0x58>
	...

08006510 <_printf_float>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	b08d      	sub	sp, #52	@ 0x34
 8006516:	460c      	mov	r4, r1
 8006518:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800651c:	4616      	mov	r6, r2
 800651e:	461f      	mov	r7, r3
 8006520:	4605      	mov	r5, r0
 8006522:	f000 fcfb 	bl	8006f1c <_localeconv_r>
 8006526:	6803      	ldr	r3, [r0, #0]
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	4618      	mov	r0, r3
 800652c:	f7f9 fed0 	bl	80002d0 <strlen>
 8006530:	2300      	movs	r3, #0
 8006532:	930a      	str	r3, [sp, #40]	@ 0x28
 8006534:	f8d8 3000 	ldr.w	r3, [r8]
 8006538:	9005      	str	r0, [sp, #20]
 800653a:	3307      	adds	r3, #7
 800653c:	f023 0307 	bic.w	r3, r3, #7
 8006540:	f103 0208 	add.w	r2, r3, #8
 8006544:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006548:	f8d4 b000 	ldr.w	fp, [r4]
 800654c:	f8c8 2000 	str.w	r2, [r8]
 8006550:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006554:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006558:	9307      	str	r3, [sp, #28]
 800655a:	f8cd 8018 	str.w	r8, [sp, #24]
 800655e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006566:	4b9c      	ldr	r3, [pc, #624]	@ (80067d8 <_printf_float+0x2c8>)
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	f7fa fb0e 	bl	8000b8c <__aeabi_dcmpun>
 8006570:	bb70      	cbnz	r0, 80065d0 <_printf_float+0xc0>
 8006572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006576:	4b98      	ldr	r3, [pc, #608]	@ (80067d8 <_printf_float+0x2c8>)
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	f7fa fae8 	bl	8000b50 <__aeabi_dcmple>
 8006580:	bb30      	cbnz	r0, 80065d0 <_printf_float+0xc0>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	f7fa fad7 	bl	8000b3c <__aeabi_dcmplt>
 800658e:	b110      	cbz	r0, 8006596 <_printf_float+0x86>
 8006590:	232d      	movs	r3, #45	@ 0x2d
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006596:	4a91      	ldr	r2, [pc, #580]	@ (80067dc <_printf_float+0x2cc>)
 8006598:	4b91      	ldr	r3, [pc, #580]	@ (80067e0 <_printf_float+0x2d0>)
 800659a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800659e:	bf94      	ite	ls
 80065a0:	4690      	movls	r8, r2
 80065a2:	4698      	movhi	r8, r3
 80065a4:	2303      	movs	r3, #3
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f02b 0304 	bic.w	r3, fp, #4
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	9700      	str	r7, [sp, #0]
 80065b4:	4633      	mov	r3, r6
 80065b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f9d2 	bl	8006964 <_printf_common>
 80065c0:	3001      	adds	r0, #1
 80065c2:	f040 808d 	bne.w	80066e0 <_printf_float+0x1d0>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	b00d      	add	sp, #52	@ 0x34
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa fad8 	bl	8000b8c <__aeabi_dcmpun>
 80065dc:	b140      	cbz	r0, 80065f0 <_printf_float+0xe0>
 80065de:	464b      	mov	r3, r9
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfbc      	itt	lt
 80065e4:	232d      	movlt	r3, #45	@ 0x2d
 80065e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065ea:	4a7e      	ldr	r2, [pc, #504]	@ (80067e4 <_printf_float+0x2d4>)
 80065ec:	4b7e      	ldr	r3, [pc, #504]	@ (80067e8 <_printf_float+0x2d8>)
 80065ee:	e7d4      	b.n	800659a <_printf_float+0x8a>
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065f6:	9206      	str	r2, [sp, #24]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	d13b      	bne.n	8006674 <_printf_float+0x164>
 80065fc:	2306      	movs	r3, #6
 80065fe:	6063      	str	r3, [r4, #4]
 8006600:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006604:	2300      	movs	r3, #0
 8006606:	6022      	str	r2, [r4, #0]
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	ab0a      	add	r3, sp, #40	@ 0x28
 800660c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006610:	ab09      	add	r3, sp, #36	@ 0x24
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	ec49 8b10 	vmov	d0, r8, r9
 800661a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800661e:	4628      	mov	r0, r5
 8006620:	f7ff fed6 	bl	80063d0 <__cvt>
 8006624:	9b06      	ldr	r3, [sp, #24]
 8006626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006628:	2b47      	cmp	r3, #71	@ 0x47
 800662a:	4680      	mov	r8, r0
 800662c:	d129      	bne.n	8006682 <_printf_float+0x172>
 800662e:	1cc8      	adds	r0, r1, #3
 8006630:	db02      	blt.n	8006638 <_printf_float+0x128>
 8006632:	6863      	ldr	r3, [r4, #4]
 8006634:	4299      	cmp	r1, r3
 8006636:	dd41      	ble.n	80066bc <_printf_float+0x1ac>
 8006638:	f1aa 0a02 	sub.w	sl, sl, #2
 800663c:	fa5f fa8a 	uxtb.w	sl, sl
 8006640:	3901      	subs	r1, #1
 8006642:	4652      	mov	r2, sl
 8006644:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006648:	9109      	str	r1, [sp, #36]	@ 0x24
 800664a:	f7ff ff26 	bl	800649a <__exponent>
 800664e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006650:	1813      	adds	r3, r2, r0
 8006652:	2a01      	cmp	r2, #1
 8006654:	4681      	mov	r9, r0
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	dc02      	bgt.n	8006660 <_printf_float+0x150>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	07d2      	lsls	r2, r2, #31
 800665e:	d501      	bpl.n	8006664 <_printf_float+0x154>
 8006660:	3301      	adds	r3, #1
 8006662:	6123      	str	r3, [r4, #16]
 8006664:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0a2      	beq.n	80065b2 <_printf_float+0xa2>
 800666c:	232d      	movs	r3, #45	@ 0x2d
 800666e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006672:	e79e      	b.n	80065b2 <_printf_float+0xa2>
 8006674:	9a06      	ldr	r2, [sp, #24]
 8006676:	2a47      	cmp	r2, #71	@ 0x47
 8006678:	d1c2      	bne.n	8006600 <_printf_float+0xf0>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1c0      	bne.n	8006600 <_printf_float+0xf0>
 800667e:	2301      	movs	r3, #1
 8006680:	e7bd      	b.n	80065fe <_printf_float+0xee>
 8006682:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006686:	d9db      	bls.n	8006640 <_printf_float+0x130>
 8006688:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800668c:	d118      	bne.n	80066c0 <_printf_float+0x1b0>
 800668e:	2900      	cmp	r1, #0
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	dd0b      	ble.n	80066ac <_printf_float+0x19c>
 8006694:	6121      	str	r1, [r4, #16]
 8006696:	b913      	cbnz	r3, 800669e <_printf_float+0x18e>
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	07d0      	lsls	r0, r2, #31
 800669c:	d502      	bpl.n	80066a4 <_printf_float+0x194>
 800669e:	3301      	adds	r3, #1
 80066a0:	440b      	add	r3, r1
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066a6:	f04f 0900 	mov.w	r9, #0
 80066aa:	e7db      	b.n	8006664 <_printf_float+0x154>
 80066ac:	b913      	cbnz	r3, 80066b4 <_printf_float+0x1a4>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	07d2      	lsls	r2, r2, #31
 80066b2:	d501      	bpl.n	80066b8 <_printf_float+0x1a8>
 80066b4:	3302      	adds	r3, #2
 80066b6:	e7f4      	b.n	80066a2 <_printf_float+0x192>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e7f2      	b.n	80066a2 <_printf_float+0x192>
 80066bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c2:	4299      	cmp	r1, r3
 80066c4:	db05      	blt.n	80066d2 <_printf_float+0x1c2>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	6121      	str	r1, [r4, #16]
 80066ca:	07d8      	lsls	r0, r3, #31
 80066cc:	d5ea      	bpl.n	80066a4 <_printf_float+0x194>
 80066ce:	1c4b      	adds	r3, r1, #1
 80066d0:	e7e7      	b.n	80066a2 <_printf_float+0x192>
 80066d2:	2900      	cmp	r1, #0
 80066d4:	bfd4      	ite	le
 80066d6:	f1c1 0202 	rsble	r2, r1, #2
 80066da:	2201      	movgt	r2, #1
 80066dc:	4413      	add	r3, r2
 80066de:	e7e0      	b.n	80066a2 <_printf_float+0x192>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	055a      	lsls	r2, r3, #21
 80066e4:	d407      	bmi.n	80066f6 <_printf_float+0x1e6>
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	4642      	mov	r2, r8
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	d12b      	bne.n	800674c <_printf_float+0x23c>
 80066f4:	e767      	b.n	80065c6 <_printf_float+0xb6>
 80066f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066fa:	f240 80dd 	bls.w	80068b8 <_printf_float+0x3a8>
 80066fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	f7fa fa0f 	bl	8000b28 <__aeabi_dcmpeq>
 800670a:	2800      	cmp	r0, #0
 800670c:	d033      	beq.n	8006776 <_printf_float+0x266>
 800670e:	4a37      	ldr	r2, [pc, #220]	@ (80067ec <_printf_float+0x2dc>)
 8006710:	2301      	movs	r3, #1
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f af54 	beq.w	80065c6 <_printf_float+0xb6>
 800671e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006722:	4543      	cmp	r3, r8
 8006724:	db02      	blt.n	800672c <_printf_float+0x21c>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	07d8      	lsls	r0, r3, #31
 800672a:	d50f      	bpl.n	800674c <_printf_float+0x23c>
 800672c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af45 	beq.w	80065c6 <_printf_float+0xb6>
 800673c:	f04f 0900 	mov.w	r9, #0
 8006740:	f108 38ff 	add.w	r8, r8, #4294967295
 8006744:	f104 0a1a 	add.w	sl, r4, #26
 8006748:	45c8      	cmp	r8, r9
 800674a:	dc09      	bgt.n	8006760 <_printf_float+0x250>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	079b      	lsls	r3, r3, #30
 8006750:	f100 8103 	bmi.w	800695a <_printf_float+0x44a>
 8006754:	68e0      	ldr	r0, [r4, #12]
 8006756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006758:	4298      	cmp	r0, r3
 800675a:	bfb8      	it	lt
 800675c:	4618      	movlt	r0, r3
 800675e:	e734      	b.n	80065ca <_printf_float+0xba>
 8006760:	2301      	movs	r3, #1
 8006762:	4652      	mov	r2, sl
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f af2b 	beq.w	80065c6 <_printf_float+0xb6>
 8006770:	f109 0901 	add.w	r9, r9, #1
 8006774:	e7e8      	b.n	8006748 <_printf_float+0x238>
 8006776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc39      	bgt.n	80067f0 <_printf_float+0x2e0>
 800677c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ec <_printf_float+0x2dc>)
 800677e:	2301      	movs	r3, #1
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	f43f af1d 	beq.w	80065c6 <_printf_float+0xb6>
 800678c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006790:	ea59 0303 	orrs.w	r3, r9, r3
 8006794:	d102      	bne.n	800679c <_printf_float+0x28c>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	07d9      	lsls	r1, r3, #31
 800679a:	d5d7      	bpl.n	800674c <_printf_float+0x23c>
 800679c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f af0d 	beq.w	80065c6 <_printf_float+0xb6>
 80067ac:	f04f 0a00 	mov.w	sl, #0
 80067b0:	f104 0b1a 	add.w	fp, r4, #26
 80067b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b6:	425b      	negs	r3, r3
 80067b8:	4553      	cmp	r3, sl
 80067ba:	dc01      	bgt.n	80067c0 <_printf_float+0x2b0>
 80067bc:	464b      	mov	r3, r9
 80067be:	e793      	b.n	80066e8 <_printf_float+0x1d8>
 80067c0:	2301      	movs	r3, #1
 80067c2:	465a      	mov	r2, fp
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f aefb 	beq.w	80065c6 <_printf_float+0xb6>
 80067d0:	f10a 0a01 	add.w	sl, sl, #1
 80067d4:	e7ee      	b.n	80067b4 <_printf_float+0x2a4>
 80067d6:	bf00      	nop
 80067d8:	7fefffff 	.word	0x7fefffff
 80067dc:	08009121 	.word	0x08009121
 80067e0:	08009125 	.word	0x08009125
 80067e4:	08009129 	.word	0x08009129
 80067e8:	0800912d 	.word	0x0800912d
 80067ec:	08009131 	.word	0x08009131
 80067f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067f6:	4553      	cmp	r3, sl
 80067f8:	bfa8      	it	ge
 80067fa:	4653      	movge	r3, sl
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	4699      	mov	r9, r3
 8006800:	dc36      	bgt.n	8006870 <_printf_float+0x360>
 8006802:	f04f 0b00 	mov.w	fp, #0
 8006806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800680a:	f104 021a 	add.w	r2, r4, #26
 800680e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006810:	9306      	str	r3, [sp, #24]
 8006812:	eba3 0309 	sub.w	r3, r3, r9
 8006816:	455b      	cmp	r3, fp
 8006818:	dc31      	bgt.n	800687e <_printf_float+0x36e>
 800681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681c:	459a      	cmp	sl, r3
 800681e:	dc3a      	bgt.n	8006896 <_printf_float+0x386>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	07da      	lsls	r2, r3, #31
 8006824:	d437      	bmi.n	8006896 <_printf_float+0x386>
 8006826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006828:	ebaa 0903 	sub.w	r9, sl, r3
 800682c:	9b06      	ldr	r3, [sp, #24]
 800682e:	ebaa 0303 	sub.w	r3, sl, r3
 8006832:	4599      	cmp	r9, r3
 8006834:	bfa8      	it	ge
 8006836:	4699      	movge	r9, r3
 8006838:	f1b9 0f00 	cmp.w	r9, #0
 800683c:	dc33      	bgt.n	80068a6 <_printf_float+0x396>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006846:	f104 0b1a 	add.w	fp, r4, #26
 800684a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800684c:	ebaa 0303 	sub.w	r3, sl, r3
 8006850:	eba3 0309 	sub.w	r3, r3, r9
 8006854:	4543      	cmp	r3, r8
 8006856:	f77f af79 	ble.w	800674c <_printf_float+0x23c>
 800685a:	2301      	movs	r3, #1
 800685c:	465a      	mov	r2, fp
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f aeae 	beq.w	80065c6 <_printf_float+0xb6>
 800686a:	f108 0801 	add.w	r8, r8, #1
 800686e:	e7ec      	b.n	800684a <_printf_float+0x33a>
 8006870:	4642      	mov	r2, r8
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	d1c2      	bne.n	8006802 <_printf_float+0x2f2>
 800687c:	e6a3      	b.n	80065c6 <_printf_float+0xb6>
 800687e:	2301      	movs	r3, #1
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	9206      	str	r2, [sp, #24]
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f ae9c 	beq.w	80065c6 <_printf_float+0xb6>
 800688e:	9a06      	ldr	r2, [sp, #24]
 8006890:	f10b 0b01 	add.w	fp, fp, #1
 8006894:	e7bb      	b.n	800680e <_printf_float+0x2fe>
 8006896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	d1c0      	bne.n	8006826 <_printf_float+0x316>
 80068a4:	e68f      	b.n	80065c6 <_printf_float+0xb6>
 80068a6:	9a06      	ldr	r2, [sp, #24]
 80068a8:	464b      	mov	r3, r9
 80068aa:	4442      	add	r2, r8
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	d1c3      	bne.n	800683e <_printf_float+0x32e>
 80068b6:	e686      	b.n	80065c6 <_printf_float+0xb6>
 80068b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068bc:	f1ba 0f01 	cmp.w	sl, #1
 80068c0:	dc01      	bgt.n	80068c6 <_printf_float+0x3b6>
 80068c2:	07db      	lsls	r3, r3, #31
 80068c4:	d536      	bpl.n	8006934 <_printf_float+0x424>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4642      	mov	r2, r8
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	f43f ae78 	beq.w	80065c6 <_printf_float+0xb6>
 80068d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae70 	beq.w	80065c6 <_printf_float+0xb6>
 80068e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068ea:	2200      	movs	r2, #0
 80068ec:	2300      	movs	r3, #0
 80068ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068f2:	f7fa f919 	bl	8000b28 <__aeabi_dcmpeq>
 80068f6:	b9c0      	cbnz	r0, 800692a <_printf_float+0x41a>
 80068f8:	4653      	mov	r3, sl
 80068fa:	f108 0201 	add.w	r2, r8, #1
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d10c      	bne.n	8006922 <_printf_float+0x412>
 8006908:	e65d      	b.n	80065c6 <_printf_float+0xb6>
 800690a:	2301      	movs	r3, #1
 800690c:	465a      	mov	r2, fp
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae56 	beq.w	80065c6 <_printf_float+0xb6>
 800691a:	f108 0801 	add.w	r8, r8, #1
 800691e:	45d0      	cmp	r8, sl
 8006920:	dbf3      	blt.n	800690a <_printf_float+0x3fa>
 8006922:	464b      	mov	r3, r9
 8006924:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006928:	e6df      	b.n	80066ea <_printf_float+0x1da>
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	f104 0b1a 	add.w	fp, r4, #26
 8006932:	e7f4      	b.n	800691e <_printf_float+0x40e>
 8006934:	2301      	movs	r3, #1
 8006936:	4642      	mov	r2, r8
 8006938:	e7e1      	b.n	80068fe <_printf_float+0x3ee>
 800693a:	2301      	movs	r3, #1
 800693c:	464a      	mov	r2, r9
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae3e 	beq.w	80065c6 <_printf_float+0xb6>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006952:	1a5b      	subs	r3, r3, r1
 8006954:	4543      	cmp	r3, r8
 8006956:	dcf0      	bgt.n	800693a <_printf_float+0x42a>
 8006958:	e6fc      	b.n	8006754 <_printf_float+0x244>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	f104 0919 	add.w	r9, r4, #25
 8006962:	e7f4      	b.n	800694e <_printf_float+0x43e>

08006964 <_printf_common>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	4616      	mov	r6, r2
 800696a:	4698      	mov	r8, r3
 800696c:	688a      	ldr	r2, [r1, #8]
 800696e:	690b      	ldr	r3, [r1, #16]
 8006970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006974:	4293      	cmp	r3, r2
 8006976:	bfb8      	it	lt
 8006978:	4613      	movlt	r3, r2
 800697a:	6033      	str	r3, [r6, #0]
 800697c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006980:	4607      	mov	r7, r0
 8006982:	460c      	mov	r4, r1
 8006984:	b10a      	cbz	r2, 800698a <_printf_common+0x26>
 8006986:	3301      	adds	r3, #1
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	0699      	lsls	r1, r3, #26
 800698e:	bf42      	ittt	mi
 8006990:	6833      	ldrmi	r3, [r6, #0]
 8006992:	3302      	addmi	r3, #2
 8006994:	6033      	strmi	r3, [r6, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	f015 0506 	ands.w	r5, r5, #6
 800699c:	d106      	bne.n	80069ac <_printf_common+0x48>
 800699e:	f104 0a19 	add.w	sl, r4, #25
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	6832      	ldr	r2, [r6, #0]
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	dc26      	bgt.n	80069fa <_printf_common+0x96>
 80069ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	3b00      	subs	r3, #0
 80069b4:	bf18      	it	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	0692      	lsls	r2, r2, #26
 80069ba:	d42b      	bmi.n	8006a14 <_printf_common+0xb0>
 80069bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069c0:	4641      	mov	r1, r8
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c8      	blx	r9
 80069c6:	3001      	adds	r0, #1
 80069c8:	d01e      	beq.n	8006a08 <_printf_common+0xa4>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	6922      	ldr	r2, [r4, #16]
 80069ce:	f003 0306 	and.w	r3, r3, #6
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	bf02      	ittt	eq
 80069d6:	68e5      	ldreq	r5, [r4, #12]
 80069d8:	6833      	ldreq	r3, [r6, #0]
 80069da:	1aed      	subeq	r5, r5, r3
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	bf0c      	ite	eq
 80069e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e4:	2500      	movne	r5, #0
 80069e6:	4293      	cmp	r3, r2
 80069e8:	bfc4      	itt	gt
 80069ea:	1a9b      	subgt	r3, r3, r2
 80069ec:	18ed      	addgt	r5, r5, r3
 80069ee:	2600      	movs	r6, #0
 80069f0:	341a      	adds	r4, #26
 80069f2:	42b5      	cmp	r5, r6
 80069f4:	d11a      	bne.n	8006a2c <_printf_common+0xc8>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e008      	b.n	8006a0c <_printf_common+0xa8>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4652      	mov	r2, sl
 80069fe:	4641      	mov	r1, r8
 8006a00:	4638      	mov	r0, r7
 8006a02:	47c8      	blx	r9
 8006a04:	3001      	adds	r0, #1
 8006a06:	d103      	bne.n	8006a10 <_printf_common+0xac>
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a10:	3501      	adds	r5, #1
 8006a12:	e7c6      	b.n	80069a2 <_printf_common+0x3e>
 8006a14:	18e1      	adds	r1, r4, r3
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	2030      	movs	r0, #48	@ 0x30
 8006a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a1e:	4422      	add	r2, r4
 8006a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a28:	3302      	adds	r3, #2
 8006a2a:	e7c7      	b.n	80069bc <_printf_common+0x58>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4641      	mov	r1, r8
 8006a32:	4638      	mov	r0, r7
 8006a34:	47c8      	blx	r9
 8006a36:	3001      	adds	r0, #1
 8006a38:	d0e6      	beq.n	8006a08 <_printf_common+0xa4>
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7d9      	b.n	80069f2 <_printf_common+0x8e>
	...

08006a40 <_printf_i>:
 8006a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	7e0f      	ldrb	r7, [r1, #24]
 8006a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a48:	2f78      	cmp	r7, #120	@ 0x78
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	469a      	mov	sl, r3
 8006a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a56:	d807      	bhi.n	8006a68 <_printf_i+0x28>
 8006a58:	2f62      	cmp	r7, #98	@ 0x62
 8006a5a:	d80a      	bhi.n	8006a72 <_printf_i+0x32>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	f000 80d2 	beq.w	8006c06 <_printf_i+0x1c6>
 8006a62:	2f58      	cmp	r7, #88	@ 0x58
 8006a64:	f000 80b9 	beq.w	8006bda <_printf_i+0x19a>
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a70:	e03a      	b.n	8006ae8 <_printf_i+0xa8>
 8006a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a76:	2b15      	cmp	r3, #21
 8006a78:	d8f6      	bhi.n	8006a68 <_printf_i+0x28>
 8006a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a80 <_printf_i+0x40>)
 8006a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006a69 	.word	0x08006a69
 8006a8c:	08006a69 	.word	0x08006a69
 8006a90:	08006a69 	.word	0x08006a69
 8006a94:	08006a69 	.word	0x08006a69
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006a69 	.word	0x08006a69
 8006aa0:	08006a69 	.word	0x08006a69
 8006aa4:	08006a69 	.word	0x08006a69
 8006aa8:	08006a69 	.word	0x08006a69
 8006aac:	08006bed 	.word	0x08006bed
 8006ab0:	08006b17 	.word	0x08006b17
 8006ab4:	08006ba7 	.word	0x08006ba7
 8006ab8:	08006a69 	.word	0x08006a69
 8006abc:	08006a69 	.word	0x08006a69
 8006ac0:	08006c0f 	.word	0x08006c0f
 8006ac4:	08006a69 	.word	0x08006a69
 8006ac8:	08006b17 	.word	0x08006b17
 8006acc:	08006a69 	.word	0x08006a69
 8006ad0:	08006a69 	.word	0x08006a69
 8006ad4:	08006baf 	.word	0x08006baf
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e09d      	b.n	8006c28 <_printf_i+0x1e8>
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	6031      	str	r1, [r6, #0]
 8006af4:	0606      	lsls	r6, r0, #24
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0xbc>
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	e003      	b.n	8006b04 <_printf_i+0xc4>
 8006afc:	0645      	lsls	r5, r0, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0xb8>
 8006b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	da03      	bge.n	8006b10 <_printf_i+0xd0>
 8006b08:	232d      	movs	r3, #45	@ 0x2d
 8006b0a:	426d      	negs	r5, r5
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b10:	4859      	ldr	r0, [pc, #356]	@ (8006c78 <_printf_i+0x238>)
 8006b12:	230a      	movs	r3, #10
 8006b14:	e011      	b.n	8006b3a <_printf_i+0xfa>
 8006b16:	6821      	ldr	r1, [r4, #0]
 8006b18:	6833      	ldr	r3, [r6, #0]
 8006b1a:	0608      	lsls	r0, r1, #24
 8006b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b20:	d402      	bmi.n	8006b28 <_printf_i+0xe8>
 8006b22:	0649      	lsls	r1, r1, #25
 8006b24:	bf48      	it	mi
 8006b26:	b2ad      	uxthmi	r5, r5
 8006b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b2a:	4853      	ldr	r0, [pc, #332]	@ (8006c78 <_printf_i+0x238>)
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	bf14      	ite	ne
 8006b30:	230a      	movne	r3, #10
 8006b32:	2308      	moveq	r3, #8
 8006b34:	2100      	movs	r1, #0
 8006b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b3a:	6866      	ldr	r6, [r4, #4]
 8006b3c:	60a6      	str	r6, [r4, #8]
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	bfa2      	ittt	ge
 8006b42:	6821      	ldrge	r1, [r4, #0]
 8006b44:	f021 0104 	bicge.w	r1, r1, #4
 8006b48:	6021      	strge	r1, [r4, #0]
 8006b4a:	b90d      	cbnz	r5, 8006b50 <_printf_i+0x110>
 8006b4c:	2e00      	cmp	r6, #0
 8006b4e:	d04b      	beq.n	8006be8 <_printf_i+0x1a8>
 8006b50:	4616      	mov	r6, r2
 8006b52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b56:	fb03 5711 	mls	r7, r3, r1, r5
 8006b5a:	5dc7      	ldrb	r7, [r0, r7]
 8006b5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b60:	462f      	mov	r7, r5
 8006b62:	42bb      	cmp	r3, r7
 8006b64:	460d      	mov	r5, r1
 8006b66:	d9f4      	bls.n	8006b52 <_printf_i+0x112>
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d10b      	bne.n	8006b84 <_printf_i+0x144>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	07df      	lsls	r7, r3, #31
 8006b70:	d508      	bpl.n	8006b84 <_printf_i+0x144>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	6861      	ldr	r1, [r4, #4]
 8006b76:	4299      	cmp	r1, r3
 8006b78:	bfde      	ittt	le
 8006b7a:	2330      	movle	r3, #48	@ 0x30
 8006b7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b84:	1b92      	subs	r2, r2, r6
 8006b86:	6122      	str	r2, [r4, #16]
 8006b88:	f8cd a000 	str.w	sl, [sp]
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	aa03      	add	r2, sp, #12
 8006b90:	4621      	mov	r1, r4
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff fee6 	bl	8006964 <_printf_common>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d14a      	bne.n	8006c32 <_printf_i+0x1f2>
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	b004      	add	sp, #16
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	f043 0320 	orr.w	r3, r3, #32
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	4833      	ldr	r0, [pc, #204]	@ (8006c7c <_printf_i+0x23c>)
 8006bb0:	2778      	movs	r7, #120	@ 0x78
 8006bb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	6831      	ldr	r1, [r6, #0]
 8006bba:	061f      	lsls	r7, r3, #24
 8006bbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bc0:	d402      	bmi.n	8006bc8 <_printf_i+0x188>
 8006bc2:	065f      	lsls	r7, r3, #25
 8006bc4:	bf48      	it	mi
 8006bc6:	b2ad      	uxthmi	r5, r5
 8006bc8:	6031      	str	r1, [r6, #0]
 8006bca:	07d9      	lsls	r1, r3, #31
 8006bcc:	bf44      	itt	mi
 8006bce:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd2:	6023      	strmi	r3, [r4, #0]
 8006bd4:	b11d      	cbz	r5, 8006bde <_printf_i+0x19e>
 8006bd6:	2310      	movs	r3, #16
 8006bd8:	e7ac      	b.n	8006b34 <_printf_i+0xf4>
 8006bda:	4827      	ldr	r0, [pc, #156]	@ (8006c78 <_printf_i+0x238>)
 8006bdc:	e7e9      	b.n	8006bb2 <_printf_i+0x172>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f023 0320 	bic.w	r3, r3, #32
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	e7f6      	b.n	8006bd6 <_printf_i+0x196>
 8006be8:	4616      	mov	r6, r2
 8006bea:	e7bd      	b.n	8006b68 <_printf_i+0x128>
 8006bec:	6833      	ldr	r3, [r6, #0]
 8006bee:	6825      	ldr	r5, [r4, #0]
 8006bf0:	6961      	ldr	r1, [r4, #20]
 8006bf2:	1d18      	adds	r0, r3, #4
 8006bf4:	6030      	str	r0, [r6, #0]
 8006bf6:	062e      	lsls	r6, r5, #24
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	d501      	bpl.n	8006c00 <_printf_i+0x1c0>
 8006bfc:	6019      	str	r1, [r3, #0]
 8006bfe:	e002      	b.n	8006c06 <_printf_i+0x1c6>
 8006c00:	0668      	lsls	r0, r5, #25
 8006c02:	d5fb      	bpl.n	8006bfc <_printf_i+0x1bc>
 8006c04:	8019      	strh	r1, [r3, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	6123      	str	r3, [r4, #16]
 8006c0a:	4616      	mov	r6, r2
 8006c0c:	e7bc      	b.n	8006b88 <_printf_i+0x148>
 8006c0e:	6833      	ldr	r3, [r6, #0]
 8006c10:	1d1a      	adds	r2, r3, #4
 8006c12:	6032      	str	r2, [r6, #0]
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	6862      	ldr	r2, [r4, #4]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7f9 fb08 	bl	8000230 <memchr>
 8006c20:	b108      	cbz	r0, 8006c26 <_printf_i+0x1e6>
 8006c22:	1b80      	subs	r0, r0, r6
 8006c24:	6060      	str	r0, [r4, #4]
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c30:	e7aa      	b.n	8006b88 <_printf_i+0x148>
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	4632      	mov	r2, r6
 8006c36:	4649      	mov	r1, r9
 8006c38:	4640      	mov	r0, r8
 8006c3a:	47d0      	blx	sl
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d0ad      	beq.n	8006b9c <_printf_i+0x15c>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	079b      	lsls	r3, r3, #30
 8006c44:	d413      	bmi.n	8006c6e <_printf_i+0x22e>
 8006c46:	68e0      	ldr	r0, [r4, #12]
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	4298      	cmp	r0, r3
 8006c4c:	bfb8      	it	lt
 8006c4e:	4618      	movlt	r0, r3
 8006c50:	e7a6      	b.n	8006ba0 <_printf_i+0x160>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4632      	mov	r2, r6
 8006c56:	4649      	mov	r1, r9
 8006c58:	4640      	mov	r0, r8
 8006c5a:	47d0      	blx	sl
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d09d      	beq.n	8006b9c <_printf_i+0x15c>
 8006c60:	3501      	adds	r5, #1
 8006c62:	68e3      	ldr	r3, [r4, #12]
 8006c64:	9903      	ldr	r1, [sp, #12]
 8006c66:	1a5b      	subs	r3, r3, r1
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	dcf2      	bgt.n	8006c52 <_printf_i+0x212>
 8006c6c:	e7eb      	b.n	8006c46 <_printf_i+0x206>
 8006c6e:	2500      	movs	r5, #0
 8006c70:	f104 0619 	add.w	r6, r4, #25
 8006c74:	e7f5      	b.n	8006c62 <_printf_i+0x222>
 8006c76:	bf00      	nop
 8006c78:	08009133 	.word	0x08009133
 8006c7c:	08009144 	.word	0x08009144

08006c80 <std>:
 8006c80:	2300      	movs	r3, #0
 8006c82:	b510      	push	{r4, lr}
 8006c84:	4604      	mov	r4, r0
 8006c86:	e9c0 3300 	strd	r3, r3, [r0]
 8006c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c8e:	6083      	str	r3, [r0, #8]
 8006c90:	8181      	strh	r1, [r0, #12]
 8006c92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c94:	81c2      	strh	r2, [r0, #14]
 8006c96:	6183      	str	r3, [r0, #24]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	305c      	adds	r0, #92	@ 0x5c
 8006c9e:	f000 f914 	bl	8006eca <memset>
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <std+0x58>)
 8006ca4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <std+0x5c>)
 8006ca8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006caa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <std+0x60>)
 8006cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <std+0x64>)
 8006cb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <std+0x68>)
 8006cb4:	6224      	str	r4, [r4, #32]
 8006cb6:	429c      	cmp	r4, r3
 8006cb8:	d006      	beq.n	8006cc8 <std+0x48>
 8006cba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cbe:	4294      	cmp	r4, r2
 8006cc0:	d002      	beq.n	8006cc8 <std+0x48>
 8006cc2:	33d0      	adds	r3, #208	@ 0xd0
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	d105      	bne.n	8006cd4 <std+0x54>
 8006cc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd0:	f000 b9a8 	b.w	8007024 <__retarget_lock_init_recursive>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08006e45 	.word	0x08006e45
 8006cdc:	08006e67 	.word	0x08006e67
 8006ce0:	08006e9f 	.word	0x08006e9f
 8006ce4:	08006ec3 	.word	0x08006ec3
 8006ce8:	20000b98 	.word	0x20000b98

08006cec <stdio_exit_handler>:
 8006cec:	4a02      	ldr	r2, [pc, #8]	@ (8006cf8 <stdio_exit_handler+0xc>)
 8006cee:	4903      	ldr	r1, [pc, #12]	@ (8006cfc <stdio_exit_handler+0x10>)
 8006cf0:	4803      	ldr	r0, [pc, #12]	@ (8006d00 <stdio_exit_handler+0x14>)
 8006cf2:	f000 b869 	b.w	8006dc8 <_fwalk_sglue>
 8006cf6:	bf00      	nop
 8006cf8:	200002a8 	.word	0x200002a8
 8006cfc:	08008831 	.word	0x08008831
 8006d00:	200002b8 	.word	0x200002b8

08006d04 <cleanup_stdio>:
 8006d04:	6841      	ldr	r1, [r0, #4]
 8006d06:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <cleanup_stdio+0x34>)
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	d001      	beq.n	8006d14 <cleanup_stdio+0x10>
 8006d10:	f001 fd8e 	bl	8008830 <_fflush_r>
 8006d14:	68a1      	ldr	r1, [r4, #8]
 8006d16:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <cleanup_stdio+0x38>)
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	d002      	beq.n	8006d22 <cleanup_stdio+0x1e>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f001 fd87 	bl	8008830 <_fflush_r>
 8006d22:	68e1      	ldr	r1, [r4, #12]
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <cleanup_stdio+0x3c>)
 8006d26:	4299      	cmp	r1, r3
 8006d28:	d004      	beq.n	8006d34 <cleanup_stdio+0x30>
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d30:	f001 bd7e 	b.w	8008830 <_fflush_r>
 8006d34:	bd10      	pop	{r4, pc}
 8006d36:	bf00      	nop
 8006d38:	20000b98 	.word	0x20000b98
 8006d3c:	20000c00 	.word	0x20000c00
 8006d40:	20000c68 	.word	0x20000c68

08006d44 <global_stdio_init.part.0>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <global_stdio_init.part.0+0x30>)
 8006d48:	4c0b      	ldr	r4, [pc, #44]	@ (8006d78 <global_stdio_init.part.0+0x34>)
 8006d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d7c <global_stdio_init.part.0+0x38>)
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	2200      	movs	r2, #0
 8006d52:	2104      	movs	r1, #4
 8006d54:	f7ff ff94 	bl	8006c80 <std>
 8006d58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2109      	movs	r1, #9
 8006d60:	f7ff ff8e 	bl	8006c80 <std>
 8006d64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d68:	2202      	movs	r2, #2
 8006d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6e:	2112      	movs	r1, #18
 8006d70:	f7ff bf86 	b.w	8006c80 <std>
 8006d74:	20000cd0 	.word	0x20000cd0
 8006d78:	20000b98 	.word	0x20000b98
 8006d7c:	08006ced 	.word	0x08006ced

08006d80 <__sfp_lock_acquire>:
 8006d80:	4801      	ldr	r0, [pc, #4]	@ (8006d88 <__sfp_lock_acquire+0x8>)
 8006d82:	f000 b950 	b.w	8007026 <__retarget_lock_acquire_recursive>
 8006d86:	bf00      	nop
 8006d88:	20000cd9 	.word	0x20000cd9

08006d8c <__sfp_lock_release>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	@ (8006d94 <__sfp_lock_release+0x8>)
 8006d8e:	f000 b94b 	b.w	8007028 <__retarget_lock_release_recursive>
 8006d92:	bf00      	nop
 8006d94:	20000cd9 	.word	0x20000cd9

08006d98 <__sinit>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	f7ff fff0 	bl	8006d80 <__sfp_lock_acquire>
 8006da0:	6a23      	ldr	r3, [r4, #32]
 8006da2:	b11b      	cbz	r3, 8006dac <__sinit+0x14>
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f7ff bff0 	b.w	8006d8c <__sfp_lock_release>
 8006dac:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <__sinit+0x28>)
 8006dae:	6223      	str	r3, [r4, #32]
 8006db0:	4b04      	ldr	r3, [pc, #16]	@ (8006dc4 <__sinit+0x2c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f5      	bne.n	8006da4 <__sinit+0xc>
 8006db8:	f7ff ffc4 	bl	8006d44 <global_stdio_init.part.0>
 8006dbc:	e7f2      	b.n	8006da4 <__sinit+0xc>
 8006dbe:	bf00      	nop
 8006dc0:	08006d05 	.word	0x08006d05
 8006dc4:	20000cd0 	.word	0x20000cd0

08006dc8 <_fwalk_sglue>:
 8006dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dcc:	4607      	mov	r7, r0
 8006dce:	4688      	mov	r8, r1
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006ddc:	d505      	bpl.n	8006dea <_fwalk_sglue+0x22>
 8006dde:	6824      	ldr	r4, [r4, #0]
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	d1f7      	bne.n	8006dd4 <_fwalk_sglue+0xc>
 8006de4:	4630      	mov	r0, r6
 8006de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d907      	bls.n	8006e00 <_fwalk_sglue+0x38>
 8006df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006df4:	3301      	adds	r3, #1
 8006df6:	d003      	beq.n	8006e00 <_fwalk_sglue+0x38>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c0      	blx	r8
 8006dfe:	4306      	orrs	r6, r0
 8006e00:	3568      	adds	r5, #104	@ 0x68
 8006e02:	e7e9      	b.n	8006dd8 <_fwalk_sglue+0x10>

08006e04 <siprintf>:
 8006e04:	b40e      	push	{r1, r2, r3}
 8006e06:	b500      	push	{lr}
 8006e08:	b09c      	sub	sp, #112	@ 0x70
 8006e0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e0c:	9002      	str	r0, [sp, #8]
 8006e0e:	9006      	str	r0, [sp, #24]
 8006e10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e14:	4809      	ldr	r0, [pc, #36]	@ (8006e3c <siprintf+0x38>)
 8006e16:	9107      	str	r1, [sp, #28]
 8006e18:	9104      	str	r1, [sp, #16]
 8006e1a:	4909      	ldr	r1, [pc, #36]	@ (8006e40 <siprintf+0x3c>)
 8006e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e20:	9105      	str	r1, [sp, #20]
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	a902      	add	r1, sp, #8
 8006e28:	f001 fb82 	bl	8008530 <_svfiprintf_r>
 8006e2c:	9b02      	ldr	r3, [sp, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	b01c      	add	sp, #112	@ 0x70
 8006e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e38:	b003      	add	sp, #12
 8006e3a:	4770      	bx	lr
 8006e3c:	200002b4 	.word	0x200002b4
 8006e40:	ffff0208 	.word	0xffff0208

08006e44 <__sread>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	460c      	mov	r4, r1
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	f000 f88c 	bl	8006f68 <_read_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	bfab      	itete	ge
 8006e54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e56:	89a3      	ldrhlt	r3, [r4, #12]
 8006e58:	181b      	addge	r3, r3, r0
 8006e5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e5e:	bfac      	ite	ge
 8006e60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e62:	81a3      	strhlt	r3, [r4, #12]
 8006e64:	bd10      	pop	{r4, pc}

08006e66 <__swrite>:
 8006e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	461f      	mov	r7, r3
 8006e6c:	898b      	ldrh	r3, [r1, #12]
 8006e6e:	05db      	lsls	r3, r3, #23
 8006e70:	4605      	mov	r5, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4616      	mov	r6, r2
 8006e76:	d505      	bpl.n	8006e84 <__swrite+0x1e>
 8006e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f000 f860 	bl	8006f44 <_lseek_r>
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	4632      	mov	r2, r6
 8006e92:	463b      	mov	r3, r7
 8006e94:	4628      	mov	r0, r5
 8006e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9a:	f000 b887 	b.w	8006fac <_write_r>

08006e9e <__sseek>:
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea6:	f000 f84d 	bl	8006f44 <_lseek_r>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	bf15      	itete	ne
 8006eb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eba:	81a3      	strheq	r3, [r4, #12]
 8006ebc:	bf18      	it	ne
 8006ebe:	81a3      	strhne	r3, [r4, #12]
 8006ec0:	bd10      	pop	{r4, pc}

08006ec2 <__sclose>:
 8006ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec6:	f000 b82d 	b.w	8006f24 <_close_r>

08006eca <memset>:
 8006eca:	4402      	add	r2, r0
 8006ecc:	4603      	mov	r3, r0
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d100      	bne.n	8006ed4 <memset+0xa>
 8006ed2:	4770      	bx	lr
 8006ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed8:	e7f9      	b.n	8006ece <memset+0x4>

08006eda <strchr>:
 8006eda:	b2c9      	uxtb	r1, r1
 8006edc:	4603      	mov	r3, r0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ee4:	b112      	cbz	r2, 8006eec <strchr+0x12>
 8006ee6:	428a      	cmp	r2, r1
 8006ee8:	d1f9      	bne.n	8006ede <strchr+0x4>
 8006eea:	4770      	bx	lr
 8006eec:	2900      	cmp	r1, #0
 8006eee:	bf18      	it	ne
 8006ef0:	2000      	movne	r0, #0
 8006ef2:	4770      	bx	lr

08006ef4 <strncpy>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	3901      	subs	r1, #1
 8006ef8:	4603      	mov	r3, r0
 8006efa:	b132      	cbz	r2, 8006f0a <strncpy+0x16>
 8006efc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f00:	f803 4b01 	strb.w	r4, [r3], #1
 8006f04:	3a01      	subs	r2, #1
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	d1f7      	bne.n	8006efa <strncpy+0x6>
 8006f0a:	441a      	add	r2, r3
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d100      	bne.n	8006f14 <strncpy+0x20>
 8006f12:	bd10      	pop	{r4, pc}
 8006f14:	f803 1b01 	strb.w	r1, [r3], #1
 8006f18:	e7f9      	b.n	8006f0e <strncpy+0x1a>
	...

08006f1c <_localeconv_r>:
 8006f1c:	4800      	ldr	r0, [pc, #0]	@ (8006f20 <_localeconv_r+0x4>)
 8006f1e:	4770      	bx	lr
 8006f20:	200003f4 	.word	0x200003f4

08006f24 <_close_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d06      	ldr	r5, [pc, #24]	@ (8006f40 <_close_r+0x1c>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	f7fb fb2b 	bl	800258a <_close>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_close_r+0x1a>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_close_r+0x1a>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	20000cd4 	.word	0x20000cd4

08006f44 <_lseek_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d07      	ldr	r5, [pc, #28]	@ (8006f64 <_lseek_r+0x20>)
 8006f48:	4604      	mov	r4, r0
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	602a      	str	r2, [r5, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7fb fb40 	bl	80025d8 <_lseek>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_lseek_r+0x1e>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_lseek_r+0x1e>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	20000cd4 	.word	0x20000cd4

08006f68 <_read_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	@ (8006f88 <_read_r+0x20>)
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f7fb face 	bl	8002518 <_read>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_read_r+0x1e>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_read_r+0x1e>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	20000cd4 	.word	0x20000cd4

08006f8c <_sbrk_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d06      	ldr	r5, [pc, #24]	@ (8006fa8 <_sbrk_r+0x1c>)
 8006f90:	2300      	movs	r3, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	f7fb fb2c 	bl	80025f4 <_sbrk>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_sbrk_r+0x1a>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_sbrk_r+0x1a>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	20000cd4 	.word	0x20000cd4

08006fac <_write_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d07      	ldr	r5, [pc, #28]	@ (8006fcc <_write_r+0x20>)
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	602a      	str	r2, [r5, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f7fb fac9 	bl	8002552 <_write>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_write_r+0x1e>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_write_r+0x1e>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000cd4 	.word	0x20000cd4

08006fd0 <__errno>:
 8006fd0:	4b01      	ldr	r3, [pc, #4]	@ (8006fd8 <__errno+0x8>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	200002b4 	.word	0x200002b4

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	@ (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	@ (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	@ (8007020 <__libc_init_array+0x44>)
 8006ff0:	f001 ff9e 	bl	8008f30 <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	08009398 	.word	0x08009398
 8007018:	08009398 	.word	0x08009398
 800701c:	08009398 	.word	0x08009398
 8007020:	0800939c 	.word	0x0800939c

08007024 <__retarget_lock_init_recursive>:
 8007024:	4770      	bx	lr

08007026 <__retarget_lock_acquire_recursive>:
 8007026:	4770      	bx	lr

08007028 <__retarget_lock_release_recursive>:
 8007028:	4770      	bx	lr

0800702a <memcpy>:
 800702a:	440a      	add	r2, r1
 800702c:	4291      	cmp	r1, r2
 800702e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007032:	d100      	bne.n	8007036 <memcpy+0xc>
 8007034:	4770      	bx	lr
 8007036:	b510      	push	{r4, lr}
 8007038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007040:	4291      	cmp	r1, r2
 8007042:	d1f9      	bne.n	8007038 <memcpy+0xe>
 8007044:	bd10      	pop	{r4, pc}

08007046 <quorem>:
 8007046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	6903      	ldr	r3, [r0, #16]
 800704c:	690c      	ldr	r4, [r1, #16]
 800704e:	42a3      	cmp	r3, r4
 8007050:	4607      	mov	r7, r0
 8007052:	db7e      	blt.n	8007152 <quorem+0x10c>
 8007054:	3c01      	subs	r4, #1
 8007056:	f101 0814 	add.w	r8, r1, #20
 800705a:	00a3      	lsls	r3, r4, #2
 800705c:	f100 0514 	add.w	r5, r0, #20
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800706c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007070:	3301      	adds	r3, #1
 8007072:	429a      	cmp	r2, r3
 8007074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007078:	fbb2 f6f3 	udiv	r6, r2, r3
 800707c:	d32e      	bcc.n	80070dc <quorem+0x96>
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	46c4      	mov	ip, r8
 8007084:	46ae      	mov	lr, r5
 8007086:	46d3      	mov	fp, sl
 8007088:	f85c 3b04 	ldr.w	r3, [ip], #4
 800708c:	b298      	uxth	r0, r3
 800708e:	fb06 a000 	mla	r0, r6, r0, sl
 8007092:	0c02      	lsrs	r2, r0, #16
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	fb06 2303 	mla	r3, r6, r3, r2
 800709a:	f8de 2000 	ldr.w	r2, [lr]
 800709e:	b280      	uxth	r0, r0
 80070a0:	b292      	uxth	r2, r2
 80070a2:	1a12      	subs	r2, r2, r0
 80070a4:	445a      	add	r2, fp
 80070a6:	f8de 0000 	ldr.w	r0, [lr]
 80070aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070b8:	b292      	uxth	r2, r2
 80070ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070be:	45e1      	cmp	r9, ip
 80070c0:	f84e 2b04 	str.w	r2, [lr], #4
 80070c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070c8:	d2de      	bcs.n	8007088 <quorem+0x42>
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	58eb      	ldr	r3, [r5, r3]
 80070ce:	b92b      	cbnz	r3, 80070dc <quorem+0x96>
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	3b04      	subs	r3, #4
 80070d4:	429d      	cmp	r5, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	d32f      	bcc.n	800713a <quorem+0xf4>
 80070da:	613c      	str	r4, [r7, #16]
 80070dc:	4638      	mov	r0, r7
 80070de:	f001 f8c3 	bl	8008268 <__mcmp>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	db25      	blt.n	8007132 <quorem+0xec>
 80070e6:	4629      	mov	r1, r5
 80070e8:	2000      	movs	r0, #0
 80070ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80070ee:	f8d1 c000 	ldr.w	ip, [r1]
 80070f2:	fa1f fe82 	uxth.w	lr, r2
 80070f6:	fa1f f38c 	uxth.w	r3, ip
 80070fa:	eba3 030e 	sub.w	r3, r3, lr
 80070fe:	4403      	add	r3, r0
 8007100:	0c12      	lsrs	r2, r2, #16
 8007102:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007106:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007110:	45c1      	cmp	r9, r8
 8007112:	f841 3b04 	str.w	r3, [r1], #4
 8007116:	ea4f 4022 	mov.w	r0, r2, asr #16
 800711a:	d2e6      	bcs.n	80070ea <quorem+0xa4>
 800711c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007124:	b922      	cbnz	r2, 8007130 <quorem+0xea>
 8007126:	3b04      	subs	r3, #4
 8007128:	429d      	cmp	r5, r3
 800712a:	461a      	mov	r2, r3
 800712c:	d30b      	bcc.n	8007146 <quorem+0x100>
 800712e:	613c      	str	r4, [r7, #16]
 8007130:	3601      	adds	r6, #1
 8007132:	4630      	mov	r0, r6
 8007134:	b003      	add	sp, #12
 8007136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	3b04      	subs	r3, #4
 800713e:	2a00      	cmp	r2, #0
 8007140:	d1cb      	bne.n	80070da <quorem+0x94>
 8007142:	3c01      	subs	r4, #1
 8007144:	e7c6      	b.n	80070d4 <quorem+0x8e>
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	3b04      	subs	r3, #4
 800714a:	2a00      	cmp	r2, #0
 800714c:	d1ef      	bne.n	800712e <quorem+0xe8>
 800714e:	3c01      	subs	r4, #1
 8007150:	e7ea      	b.n	8007128 <quorem+0xe2>
 8007152:	2000      	movs	r0, #0
 8007154:	e7ee      	b.n	8007134 <quorem+0xee>
	...

08007158 <_dtoa_r>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	69c7      	ldr	r7, [r0, #28]
 800715e:	b099      	sub	sp, #100	@ 0x64
 8007160:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007164:	ec55 4b10 	vmov	r4, r5, d0
 8007168:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800716a:	9109      	str	r1, [sp, #36]	@ 0x24
 800716c:	4683      	mov	fp, r0
 800716e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007170:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007172:	b97f      	cbnz	r7, 8007194 <_dtoa_r+0x3c>
 8007174:	2010      	movs	r0, #16
 8007176:	f7fe fff5 	bl	8006164 <malloc>
 800717a:	4602      	mov	r2, r0
 800717c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007180:	b920      	cbnz	r0, 800718c <_dtoa_r+0x34>
 8007182:	4ba7      	ldr	r3, [pc, #668]	@ (8007420 <_dtoa_r+0x2c8>)
 8007184:	21ef      	movs	r1, #239	@ 0xef
 8007186:	48a7      	ldr	r0, [pc, #668]	@ (8007424 <_dtoa_r+0x2cc>)
 8007188:	f001 fb94 	bl	80088b4 <__assert_func>
 800718c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007190:	6007      	str	r7, [r0, #0]
 8007192:	60c7      	str	r7, [r0, #12]
 8007194:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	b159      	cbz	r1, 80071b4 <_dtoa_r+0x5c>
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	604a      	str	r2, [r1, #4]
 80071a0:	2301      	movs	r3, #1
 80071a2:	4093      	lsls	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
 80071a6:	4658      	mov	r0, fp
 80071a8:	f000 fe24 	bl	8007df4 <_Bfree>
 80071ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	1e2b      	subs	r3, r5, #0
 80071b6:	bfb9      	ittee	lt
 80071b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071bc:	9303      	strlt	r3, [sp, #12]
 80071be:	2300      	movge	r3, #0
 80071c0:	6033      	strge	r3, [r6, #0]
 80071c2:	9f03      	ldr	r7, [sp, #12]
 80071c4:	4b98      	ldr	r3, [pc, #608]	@ (8007428 <_dtoa_r+0x2d0>)
 80071c6:	bfbc      	itt	lt
 80071c8:	2201      	movlt	r2, #1
 80071ca:	6032      	strlt	r2, [r6, #0]
 80071cc:	43bb      	bics	r3, r7
 80071ce:	d112      	bne.n	80071f6 <_dtoa_r+0x9e>
 80071d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071dc:	4323      	orrs	r3, r4
 80071de:	f000 854d 	beq.w	8007c7c <_dtoa_r+0xb24>
 80071e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800743c <_dtoa_r+0x2e4>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 854f 	beq.w	8007c8c <_dtoa_r+0xb34>
 80071ee:	f10a 0303 	add.w	r3, sl, #3
 80071f2:	f000 bd49 	b.w	8007c88 <_dtoa_r+0xb30>
 80071f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	ec51 0b17 	vmov	r0, r1, d7
 8007200:	2300      	movs	r3, #0
 8007202:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007206:	f7f9 fc8f 	bl	8000b28 <__aeabi_dcmpeq>
 800720a:	4680      	mov	r8, r0
 800720c:	b158      	cbz	r0, 8007226 <_dtoa_r+0xce>
 800720e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007210:	2301      	movs	r3, #1
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007216:	b113      	cbz	r3, 800721e <_dtoa_r+0xc6>
 8007218:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800721a:	4b84      	ldr	r3, [pc, #528]	@ (800742c <_dtoa_r+0x2d4>)
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007440 <_dtoa_r+0x2e8>
 8007222:	f000 bd33 	b.w	8007c8c <_dtoa_r+0xb34>
 8007226:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800722a:	aa16      	add	r2, sp, #88	@ 0x58
 800722c:	a917      	add	r1, sp, #92	@ 0x5c
 800722e:	4658      	mov	r0, fp
 8007230:	f001 f8ca 	bl	80083c8 <__d2b>
 8007234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007238:	4681      	mov	r9, r0
 800723a:	2e00      	cmp	r6, #0
 800723c:	d077      	beq.n	800732e <_dtoa_r+0x1d6>
 800723e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007240:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800724c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007258:	4619      	mov	r1, r3
 800725a:	2200      	movs	r2, #0
 800725c:	4b74      	ldr	r3, [pc, #464]	@ (8007430 <_dtoa_r+0x2d8>)
 800725e:	f7f9 f843 	bl	80002e8 <__aeabi_dsub>
 8007262:	a369      	add	r3, pc, #420	@ (adr r3, 8007408 <_dtoa_r+0x2b0>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f9 f9f6 	bl	8000658 <__aeabi_dmul>
 800726c:	a368      	add	r3, pc, #416	@ (adr r3, 8007410 <_dtoa_r+0x2b8>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f7f9 f83b 	bl	80002ec <__adddf3>
 8007276:	4604      	mov	r4, r0
 8007278:	4630      	mov	r0, r6
 800727a:	460d      	mov	r5, r1
 800727c:	f7f9 f982 	bl	8000584 <__aeabi_i2d>
 8007280:	a365      	add	r3, pc, #404	@ (adr r3, 8007418 <_dtoa_r+0x2c0>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f9e7 	bl	8000658 <__aeabi_dmul>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	f7f9 f82b 	bl	80002ec <__adddf3>
 8007296:	4604      	mov	r4, r0
 8007298:	460d      	mov	r5, r1
 800729a:	f7f9 fc8d 	bl	8000bb8 <__aeabi_d2iz>
 800729e:	2200      	movs	r2, #0
 80072a0:	4607      	mov	r7, r0
 80072a2:	2300      	movs	r3, #0
 80072a4:	4620      	mov	r0, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	f7f9 fc48 	bl	8000b3c <__aeabi_dcmplt>
 80072ac:	b140      	cbz	r0, 80072c0 <_dtoa_r+0x168>
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7f9 f968 	bl	8000584 <__aeabi_i2d>
 80072b4:	4622      	mov	r2, r4
 80072b6:	462b      	mov	r3, r5
 80072b8:	f7f9 fc36 	bl	8000b28 <__aeabi_dcmpeq>
 80072bc:	b900      	cbnz	r0, 80072c0 <_dtoa_r+0x168>
 80072be:	3f01      	subs	r7, #1
 80072c0:	2f16      	cmp	r7, #22
 80072c2:	d851      	bhi.n	8007368 <_dtoa_r+0x210>
 80072c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007434 <_dtoa_r+0x2dc>)
 80072c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072d2:	f7f9 fc33 	bl	8000b3c <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d048      	beq.n	800736c <_dtoa_r+0x214>
 80072da:	3f01      	subs	r7, #1
 80072dc:	2300      	movs	r3, #0
 80072de:	9312      	str	r3, [sp, #72]	@ 0x48
 80072e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072e2:	1b9b      	subs	r3, r3, r6
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	bf44      	itt	mi
 80072e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80072ec:	2300      	movmi	r3, #0
 80072ee:	9208      	str	r2, [sp, #32]
 80072f0:	bf54      	ite	pl
 80072f2:	f04f 0800 	movpl.w	r8, #0
 80072f6:	9308      	strmi	r3, [sp, #32]
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	db39      	blt.n	8007370 <_dtoa_r+0x218>
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007300:	443b      	add	r3, r7
 8007302:	9308      	str	r3, [sp, #32]
 8007304:	2300      	movs	r3, #0
 8007306:	930a      	str	r3, [sp, #40]	@ 0x28
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	2b09      	cmp	r3, #9
 800730c:	d864      	bhi.n	80073d8 <_dtoa_r+0x280>
 800730e:	2b05      	cmp	r3, #5
 8007310:	bfc4      	itt	gt
 8007312:	3b04      	subgt	r3, #4
 8007314:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007318:	f1a3 0302 	sub.w	r3, r3, #2
 800731c:	bfcc      	ite	gt
 800731e:	2400      	movgt	r4, #0
 8007320:	2401      	movle	r4, #1
 8007322:	2b03      	cmp	r3, #3
 8007324:	d863      	bhi.n	80073ee <_dtoa_r+0x296>
 8007326:	e8df f003 	tbb	[pc, r3]
 800732a:	372a      	.short	0x372a
 800732c:	5535      	.short	0x5535
 800732e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007332:	441e      	add	r6, r3
 8007334:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007338:	2b20      	cmp	r3, #32
 800733a:	bfc1      	itttt	gt
 800733c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007340:	409f      	lslgt	r7, r3
 8007342:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007346:	fa24 f303 	lsrgt.w	r3, r4, r3
 800734a:	bfd6      	itet	le
 800734c:	f1c3 0320 	rsble	r3, r3, #32
 8007350:	ea47 0003 	orrgt.w	r0, r7, r3
 8007354:	fa04 f003 	lslle.w	r0, r4, r3
 8007358:	f7f9 f904 	bl	8000564 <__aeabi_ui2d>
 800735c:	2201      	movs	r2, #1
 800735e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007362:	3e01      	subs	r6, #1
 8007364:	9214      	str	r2, [sp, #80]	@ 0x50
 8007366:	e777      	b.n	8007258 <_dtoa_r+0x100>
 8007368:	2301      	movs	r3, #1
 800736a:	e7b8      	b.n	80072de <_dtoa_r+0x186>
 800736c:	9012      	str	r0, [sp, #72]	@ 0x48
 800736e:	e7b7      	b.n	80072e0 <_dtoa_r+0x188>
 8007370:	427b      	negs	r3, r7
 8007372:	930a      	str	r3, [sp, #40]	@ 0x28
 8007374:	2300      	movs	r3, #0
 8007376:	eba8 0807 	sub.w	r8, r8, r7
 800737a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800737c:	e7c4      	b.n	8007308 <_dtoa_r+0x1b0>
 800737e:	2300      	movs	r3, #0
 8007380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	dc35      	bgt.n	80073f4 <_dtoa_r+0x29c>
 8007388:	2301      	movs	r3, #1
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	9307      	str	r3, [sp, #28]
 800738e:	461a      	mov	r2, r3
 8007390:	920e      	str	r2, [sp, #56]	@ 0x38
 8007392:	e00b      	b.n	80073ac <_dtoa_r+0x254>
 8007394:	2301      	movs	r3, #1
 8007396:	e7f3      	b.n	8007380 <_dtoa_r+0x228>
 8007398:	2300      	movs	r3, #0
 800739a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800739c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	bfb8      	it	lt
 80073aa:	2301      	movlt	r3, #1
 80073ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80073b0:	2100      	movs	r1, #0
 80073b2:	2204      	movs	r2, #4
 80073b4:	f102 0514 	add.w	r5, r2, #20
 80073b8:	429d      	cmp	r5, r3
 80073ba:	d91f      	bls.n	80073fc <_dtoa_r+0x2a4>
 80073bc:	6041      	str	r1, [r0, #4]
 80073be:	4658      	mov	r0, fp
 80073c0:	f000 fcd8 	bl	8007d74 <_Balloc>
 80073c4:	4682      	mov	sl, r0
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d13c      	bne.n	8007444 <_dtoa_r+0x2ec>
 80073ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007438 <_dtoa_r+0x2e0>)
 80073cc:	4602      	mov	r2, r0
 80073ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80073d2:	e6d8      	b.n	8007186 <_dtoa_r+0x2e>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e7e0      	b.n	800739a <_dtoa_r+0x242>
 80073d8:	2401      	movs	r4, #1
 80073da:	2300      	movs	r3, #0
 80073dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	9307      	str	r3, [sp, #28]
 80073e8:	2200      	movs	r2, #0
 80073ea:	2312      	movs	r3, #18
 80073ec:	e7d0      	b.n	8007390 <_dtoa_r+0x238>
 80073ee:	2301      	movs	r3, #1
 80073f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073f2:	e7f5      	b.n	80073e0 <_dtoa_r+0x288>
 80073f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	e7d7      	b.n	80073ac <_dtoa_r+0x254>
 80073fc:	3101      	adds	r1, #1
 80073fe:	0052      	lsls	r2, r2, #1
 8007400:	e7d8      	b.n	80073b4 <_dtoa_r+0x25c>
 8007402:	bf00      	nop
 8007404:	f3af 8000 	nop.w
 8007408:	636f4361 	.word	0x636f4361
 800740c:	3fd287a7 	.word	0x3fd287a7
 8007410:	8b60c8b3 	.word	0x8b60c8b3
 8007414:	3fc68a28 	.word	0x3fc68a28
 8007418:	509f79fb 	.word	0x509f79fb
 800741c:	3fd34413 	.word	0x3fd34413
 8007420:	08009162 	.word	0x08009162
 8007424:	08009179 	.word	0x08009179
 8007428:	7ff00000 	.word	0x7ff00000
 800742c:	08009132 	.word	0x08009132
 8007430:	3ff80000 	.word	0x3ff80000
 8007434:	08009270 	.word	0x08009270
 8007438:	080091d1 	.word	0x080091d1
 800743c:	0800915e 	.word	0x0800915e
 8007440:	08009131 	.word	0x08009131
 8007444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007448:	6018      	str	r0, [r3, #0]
 800744a:	9b07      	ldr	r3, [sp, #28]
 800744c:	2b0e      	cmp	r3, #14
 800744e:	f200 80a4 	bhi.w	800759a <_dtoa_r+0x442>
 8007452:	2c00      	cmp	r4, #0
 8007454:	f000 80a1 	beq.w	800759a <_dtoa_r+0x442>
 8007458:	2f00      	cmp	r7, #0
 800745a:	dd33      	ble.n	80074c4 <_dtoa_r+0x36c>
 800745c:	4bad      	ldr	r3, [pc, #692]	@ (8007714 <_dtoa_r+0x5bc>)
 800745e:	f007 020f 	and.w	r2, r7, #15
 8007462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007466:	ed93 7b00 	vldr	d7, [r3]
 800746a:	05f8      	lsls	r0, r7, #23
 800746c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007470:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007474:	d516      	bpl.n	80074a4 <_dtoa_r+0x34c>
 8007476:	4ba8      	ldr	r3, [pc, #672]	@ (8007718 <_dtoa_r+0x5c0>)
 8007478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800747c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007480:	f7f9 fa14 	bl	80008ac <__aeabi_ddiv>
 8007484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007488:	f004 040f 	and.w	r4, r4, #15
 800748c:	2603      	movs	r6, #3
 800748e:	4da2      	ldr	r5, [pc, #648]	@ (8007718 <_dtoa_r+0x5c0>)
 8007490:	b954      	cbnz	r4, 80074a8 <_dtoa_r+0x350>
 8007492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749a:	f7f9 fa07 	bl	80008ac <__aeabi_ddiv>
 800749e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a2:	e028      	b.n	80074f6 <_dtoa_r+0x39e>
 80074a4:	2602      	movs	r6, #2
 80074a6:	e7f2      	b.n	800748e <_dtoa_r+0x336>
 80074a8:	07e1      	lsls	r1, r4, #31
 80074aa:	d508      	bpl.n	80074be <_dtoa_r+0x366>
 80074ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074b4:	f7f9 f8d0 	bl	8000658 <__aeabi_dmul>
 80074b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074bc:	3601      	adds	r6, #1
 80074be:	1064      	asrs	r4, r4, #1
 80074c0:	3508      	adds	r5, #8
 80074c2:	e7e5      	b.n	8007490 <_dtoa_r+0x338>
 80074c4:	f000 80d2 	beq.w	800766c <_dtoa_r+0x514>
 80074c8:	427c      	negs	r4, r7
 80074ca:	4b92      	ldr	r3, [pc, #584]	@ (8007714 <_dtoa_r+0x5bc>)
 80074cc:	4d92      	ldr	r5, [pc, #584]	@ (8007718 <_dtoa_r+0x5c0>)
 80074ce:	f004 020f 	and.w	r2, r4, #15
 80074d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074de:	f7f9 f8bb 	bl	8000658 <__aeabi_dmul>
 80074e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e6:	1124      	asrs	r4, r4, #4
 80074e8:	2300      	movs	r3, #0
 80074ea:	2602      	movs	r6, #2
 80074ec:	2c00      	cmp	r4, #0
 80074ee:	f040 80b2 	bne.w	8007656 <_dtoa_r+0x4fe>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1d3      	bne.n	800749e <_dtoa_r+0x346>
 80074f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80b7 	beq.w	8007670 <_dtoa_r+0x518>
 8007502:	4b86      	ldr	r3, [pc, #536]	@ (800771c <_dtoa_r+0x5c4>)
 8007504:	2200      	movs	r2, #0
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f9 fb17 	bl	8000b3c <__aeabi_dcmplt>
 800750e:	2800      	cmp	r0, #0
 8007510:	f000 80ae 	beq.w	8007670 <_dtoa_r+0x518>
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80aa 	beq.w	8007670 <_dtoa_r+0x518>
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	dd37      	ble.n	8007592 <_dtoa_r+0x43a>
 8007522:	1e7b      	subs	r3, r7, #1
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	4620      	mov	r0, r4
 8007528:	4b7d      	ldr	r3, [pc, #500]	@ (8007720 <_dtoa_r+0x5c8>)
 800752a:	2200      	movs	r2, #0
 800752c:	4629      	mov	r1, r5
 800752e:	f7f9 f893 	bl	8000658 <__aeabi_dmul>
 8007532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007536:	9c00      	ldr	r4, [sp, #0]
 8007538:	3601      	adds	r6, #1
 800753a:	4630      	mov	r0, r6
 800753c:	f7f9 f822 	bl	8000584 <__aeabi_i2d>
 8007540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007544:	f7f9 f888 	bl	8000658 <__aeabi_dmul>
 8007548:	4b76      	ldr	r3, [pc, #472]	@ (8007724 <_dtoa_r+0x5cc>)
 800754a:	2200      	movs	r2, #0
 800754c:	f7f8 fece 	bl	80002ec <__adddf3>
 8007550:	4605      	mov	r5, r0
 8007552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007556:	2c00      	cmp	r4, #0
 8007558:	f040 808d 	bne.w	8007676 <_dtoa_r+0x51e>
 800755c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007560:	4b71      	ldr	r3, [pc, #452]	@ (8007728 <_dtoa_r+0x5d0>)
 8007562:	2200      	movs	r2, #0
 8007564:	f7f8 fec0 	bl	80002e8 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007570:	462a      	mov	r2, r5
 8007572:	4633      	mov	r3, r6
 8007574:	f7f9 fb00 	bl	8000b78 <__aeabi_dcmpgt>
 8007578:	2800      	cmp	r0, #0
 800757a:	f040 828b 	bne.w	8007a94 <_dtoa_r+0x93c>
 800757e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007582:	462a      	mov	r2, r5
 8007584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007588:	f7f9 fad8 	bl	8000b3c <__aeabi_dcmplt>
 800758c:	2800      	cmp	r0, #0
 800758e:	f040 8128 	bne.w	80077e2 <_dtoa_r+0x68a>
 8007592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800759a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f2c0 815a 	blt.w	8007856 <_dtoa_r+0x6fe>
 80075a2:	2f0e      	cmp	r7, #14
 80075a4:	f300 8157 	bgt.w	8007856 <_dtoa_r+0x6fe>
 80075a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007714 <_dtoa_r+0x5bc>)
 80075aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075ae:	ed93 7b00 	vldr	d7, [r3]
 80075b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	ed8d 7b00 	vstr	d7, [sp]
 80075ba:	da03      	bge.n	80075c4 <_dtoa_r+0x46c>
 80075bc:	9b07      	ldr	r3, [sp, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f340 8101 	ble.w	80077c6 <_dtoa_r+0x66e>
 80075c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075c8:	4656      	mov	r6, sl
 80075ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 f96b 	bl	80008ac <__aeabi_ddiv>
 80075d6:	f7f9 faef 	bl	8000bb8 <__aeabi_d2iz>
 80075da:	4680      	mov	r8, r0
 80075dc:	f7f8 ffd2 	bl	8000584 <__aeabi_i2d>
 80075e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075e4:	f7f9 f838 	bl	8000658 <__aeabi_dmul>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075f4:	f7f8 fe78 	bl	80002e8 <__aeabi_dsub>
 80075f8:	f806 4b01 	strb.w	r4, [r6], #1
 80075fc:	9d07      	ldr	r5, [sp, #28]
 80075fe:	eba6 040a 	sub.w	r4, r6, sl
 8007602:	42a5      	cmp	r5, r4
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	f040 8117 	bne.w	800783a <_dtoa_r+0x6e2>
 800760c:	f7f8 fe6e 	bl	80002ec <__adddf3>
 8007610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007614:	4604      	mov	r4, r0
 8007616:	460d      	mov	r5, r1
 8007618:	f7f9 faae 	bl	8000b78 <__aeabi_dcmpgt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f040 80f9 	bne.w	8007814 <_dtoa_r+0x6bc>
 8007622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	f7f9 fa7d 	bl	8000b28 <__aeabi_dcmpeq>
 800762e:	b118      	cbz	r0, 8007638 <_dtoa_r+0x4e0>
 8007630:	f018 0f01 	tst.w	r8, #1
 8007634:	f040 80ee 	bne.w	8007814 <_dtoa_r+0x6bc>
 8007638:	4649      	mov	r1, r9
 800763a:	4658      	mov	r0, fp
 800763c:	f000 fbda 	bl	8007df4 <_Bfree>
 8007640:	2300      	movs	r3, #0
 8007642:	7033      	strb	r3, [r6, #0]
 8007644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007646:	3701      	adds	r7, #1
 8007648:	601f      	str	r7, [r3, #0]
 800764a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 831d 	beq.w	8007c8c <_dtoa_r+0xb34>
 8007652:	601e      	str	r6, [r3, #0]
 8007654:	e31a      	b.n	8007c8c <_dtoa_r+0xb34>
 8007656:	07e2      	lsls	r2, r4, #31
 8007658:	d505      	bpl.n	8007666 <_dtoa_r+0x50e>
 800765a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800765e:	f7f8 fffb 	bl	8000658 <__aeabi_dmul>
 8007662:	3601      	adds	r6, #1
 8007664:	2301      	movs	r3, #1
 8007666:	1064      	asrs	r4, r4, #1
 8007668:	3508      	adds	r5, #8
 800766a:	e73f      	b.n	80074ec <_dtoa_r+0x394>
 800766c:	2602      	movs	r6, #2
 800766e:	e742      	b.n	80074f6 <_dtoa_r+0x39e>
 8007670:	9c07      	ldr	r4, [sp, #28]
 8007672:	9704      	str	r7, [sp, #16]
 8007674:	e761      	b.n	800753a <_dtoa_r+0x3e2>
 8007676:	4b27      	ldr	r3, [pc, #156]	@ (8007714 <_dtoa_r+0x5bc>)
 8007678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800767a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800767e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007682:	4454      	add	r4, sl
 8007684:	2900      	cmp	r1, #0
 8007686:	d053      	beq.n	8007730 <_dtoa_r+0x5d8>
 8007688:	4928      	ldr	r1, [pc, #160]	@ (800772c <_dtoa_r+0x5d4>)
 800768a:	2000      	movs	r0, #0
 800768c:	f7f9 f90e 	bl	80008ac <__aeabi_ddiv>
 8007690:	4633      	mov	r3, r6
 8007692:	462a      	mov	r2, r5
 8007694:	f7f8 fe28 	bl	80002e8 <__aeabi_dsub>
 8007698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800769c:	4656      	mov	r6, sl
 800769e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a2:	f7f9 fa89 	bl	8000bb8 <__aeabi_d2iz>
 80076a6:	4605      	mov	r5, r0
 80076a8:	f7f8 ff6c 	bl	8000584 <__aeabi_i2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b4:	f7f8 fe18 	bl	80002e8 <__aeabi_dsub>
 80076b8:	3530      	adds	r5, #48	@ 0x30
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076c2:	f806 5b01 	strb.w	r5, [r6], #1
 80076c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076ca:	f7f9 fa37 	bl	8000b3c <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d171      	bne.n	80077b6 <_dtoa_r+0x65e>
 80076d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076d6:	4911      	ldr	r1, [pc, #68]	@ (800771c <_dtoa_r+0x5c4>)
 80076d8:	2000      	movs	r0, #0
 80076da:	f7f8 fe05 	bl	80002e8 <__aeabi_dsub>
 80076de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076e2:	f7f9 fa2b 	bl	8000b3c <__aeabi_dcmplt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f040 8095 	bne.w	8007816 <_dtoa_r+0x6be>
 80076ec:	42a6      	cmp	r6, r4
 80076ee:	f43f af50 	beq.w	8007592 <_dtoa_r+0x43a>
 80076f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <_dtoa_r+0x5c8>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	f7f8 ffad 	bl	8000658 <__aeabi_dmul>
 80076fe:	4b08      	ldr	r3, [pc, #32]	@ (8007720 <_dtoa_r+0x5c8>)
 8007700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007704:	2200      	movs	r2, #0
 8007706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770a:	f7f8 ffa5 	bl	8000658 <__aeabi_dmul>
 800770e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007712:	e7c4      	b.n	800769e <_dtoa_r+0x546>
 8007714:	08009270 	.word	0x08009270
 8007718:	08009248 	.word	0x08009248
 800771c:	3ff00000 	.word	0x3ff00000
 8007720:	40240000 	.word	0x40240000
 8007724:	401c0000 	.word	0x401c0000
 8007728:	40140000 	.word	0x40140000
 800772c:	3fe00000 	.word	0x3fe00000
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	f7f8 ff90 	bl	8000658 <__aeabi_dmul>
 8007738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800773c:	9415      	str	r4, [sp, #84]	@ 0x54
 800773e:	4656      	mov	r6, sl
 8007740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007744:	f7f9 fa38 	bl	8000bb8 <__aeabi_d2iz>
 8007748:	4605      	mov	r5, r0
 800774a:	f7f8 ff1b 	bl	8000584 <__aeabi_i2d>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007756:	f7f8 fdc7 	bl	80002e8 <__aeabi_dsub>
 800775a:	3530      	adds	r5, #48	@ 0x30
 800775c:	f806 5b01 	strb.w	r5, [r6], #1
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	42a6      	cmp	r6, r4
 8007766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	d124      	bne.n	80077ba <_dtoa_r+0x662>
 8007770:	4bac      	ldr	r3, [pc, #688]	@ (8007a24 <_dtoa_r+0x8cc>)
 8007772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007776:	f7f8 fdb9 	bl	80002ec <__adddf3>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007782:	f7f9 f9f9 	bl	8000b78 <__aeabi_dcmpgt>
 8007786:	2800      	cmp	r0, #0
 8007788:	d145      	bne.n	8007816 <_dtoa_r+0x6be>
 800778a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800778e:	49a5      	ldr	r1, [pc, #660]	@ (8007a24 <_dtoa_r+0x8cc>)
 8007790:	2000      	movs	r0, #0
 8007792:	f7f8 fda9 	bl	80002e8 <__aeabi_dsub>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779e:	f7f9 f9cd 	bl	8000b3c <__aeabi_dcmplt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f43f aef5 	beq.w	8007592 <_dtoa_r+0x43a>
 80077a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80077aa:	1e73      	subs	r3, r6, #1
 80077ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80077ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077b2:	2b30      	cmp	r3, #48	@ 0x30
 80077b4:	d0f8      	beq.n	80077a8 <_dtoa_r+0x650>
 80077b6:	9f04      	ldr	r7, [sp, #16]
 80077b8:	e73e      	b.n	8007638 <_dtoa_r+0x4e0>
 80077ba:	4b9b      	ldr	r3, [pc, #620]	@ (8007a28 <_dtoa_r+0x8d0>)
 80077bc:	f7f8 ff4c 	bl	8000658 <__aeabi_dmul>
 80077c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077c4:	e7bc      	b.n	8007740 <_dtoa_r+0x5e8>
 80077c6:	d10c      	bne.n	80077e2 <_dtoa_r+0x68a>
 80077c8:	4b98      	ldr	r3, [pc, #608]	@ (8007a2c <_dtoa_r+0x8d4>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077d0:	f7f8 ff42 	bl	8000658 <__aeabi_dmul>
 80077d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077d8:	f7f9 f9c4 	bl	8000b64 <__aeabi_dcmpge>
 80077dc:	2800      	cmp	r0, #0
 80077de:	f000 8157 	beq.w	8007a90 <_dtoa_r+0x938>
 80077e2:	2400      	movs	r4, #0
 80077e4:	4625      	mov	r5, r4
 80077e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077e8:	43db      	mvns	r3, r3
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	4656      	mov	r6, sl
 80077ee:	2700      	movs	r7, #0
 80077f0:	4621      	mov	r1, r4
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fafe 	bl	8007df4 <_Bfree>
 80077f8:	2d00      	cmp	r5, #0
 80077fa:	d0dc      	beq.n	80077b6 <_dtoa_r+0x65e>
 80077fc:	b12f      	cbz	r7, 800780a <_dtoa_r+0x6b2>
 80077fe:	42af      	cmp	r7, r5
 8007800:	d003      	beq.n	800780a <_dtoa_r+0x6b2>
 8007802:	4639      	mov	r1, r7
 8007804:	4658      	mov	r0, fp
 8007806:	f000 faf5 	bl	8007df4 <_Bfree>
 800780a:	4629      	mov	r1, r5
 800780c:	4658      	mov	r0, fp
 800780e:	f000 faf1 	bl	8007df4 <_Bfree>
 8007812:	e7d0      	b.n	80077b6 <_dtoa_r+0x65e>
 8007814:	9704      	str	r7, [sp, #16]
 8007816:	4633      	mov	r3, r6
 8007818:	461e      	mov	r6, r3
 800781a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800781e:	2a39      	cmp	r2, #57	@ 0x39
 8007820:	d107      	bne.n	8007832 <_dtoa_r+0x6da>
 8007822:	459a      	cmp	sl, r3
 8007824:	d1f8      	bne.n	8007818 <_dtoa_r+0x6c0>
 8007826:	9a04      	ldr	r2, [sp, #16]
 8007828:	3201      	adds	r2, #1
 800782a:	9204      	str	r2, [sp, #16]
 800782c:	2230      	movs	r2, #48	@ 0x30
 800782e:	f88a 2000 	strb.w	r2, [sl]
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	3201      	adds	r2, #1
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e7bd      	b.n	80077b6 <_dtoa_r+0x65e>
 800783a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a28 <_dtoa_r+0x8d0>)
 800783c:	2200      	movs	r2, #0
 800783e:	f7f8 ff0b 	bl	8000658 <__aeabi_dmul>
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	f7f9 f96d 	bl	8000b28 <__aeabi_dcmpeq>
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f aebb 	beq.w	80075ca <_dtoa_r+0x472>
 8007854:	e6f0      	b.n	8007638 <_dtoa_r+0x4e0>
 8007856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007858:	2a00      	cmp	r2, #0
 800785a:	f000 80db 	beq.w	8007a14 <_dtoa_r+0x8bc>
 800785e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007860:	2a01      	cmp	r2, #1
 8007862:	f300 80bf 	bgt.w	80079e4 <_dtoa_r+0x88c>
 8007866:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007868:	2a00      	cmp	r2, #0
 800786a:	f000 80b7 	beq.w	80079dc <_dtoa_r+0x884>
 800786e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007874:	4646      	mov	r6, r8
 8007876:	9a08      	ldr	r2, [sp, #32]
 8007878:	2101      	movs	r1, #1
 800787a:	441a      	add	r2, r3
 800787c:	4658      	mov	r0, fp
 800787e:	4498      	add	r8, r3
 8007880:	9208      	str	r2, [sp, #32]
 8007882:	f000 fb6b 	bl	8007f5c <__i2b>
 8007886:	4605      	mov	r5, r0
 8007888:	b15e      	cbz	r6, 80078a2 <_dtoa_r+0x74a>
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd08      	ble.n	80078a2 <_dtoa_r+0x74a>
 8007890:	42b3      	cmp	r3, r6
 8007892:	9a08      	ldr	r2, [sp, #32]
 8007894:	bfa8      	it	ge
 8007896:	4633      	movge	r3, r6
 8007898:	eba8 0803 	sub.w	r8, r8, r3
 800789c:	1af6      	subs	r6, r6, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078a4:	b1f3      	cbz	r3, 80078e4 <_dtoa_r+0x78c>
 80078a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80b7 	beq.w	8007a1c <_dtoa_r+0x8c4>
 80078ae:	b18c      	cbz	r4, 80078d4 <_dtoa_r+0x77c>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4622      	mov	r2, r4
 80078b4:	4658      	mov	r0, fp
 80078b6:	f000 fc11 	bl	80080dc <__pow5mult>
 80078ba:	464a      	mov	r2, r9
 80078bc:	4601      	mov	r1, r0
 80078be:	4605      	mov	r5, r0
 80078c0:	4658      	mov	r0, fp
 80078c2:	f000 fb61 	bl	8007f88 <__multiply>
 80078c6:	4649      	mov	r1, r9
 80078c8:	9004      	str	r0, [sp, #16]
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fa92 	bl	8007df4 <_Bfree>
 80078d0:	9b04      	ldr	r3, [sp, #16]
 80078d2:	4699      	mov	r9, r3
 80078d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078d6:	1b1a      	subs	r2, r3, r4
 80078d8:	d004      	beq.n	80078e4 <_dtoa_r+0x78c>
 80078da:	4649      	mov	r1, r9
 80078dc:	4658      	mov	r0, fp
 80078de:	f000 fbfd 	bl	80080dc <__pow5mult>
 80078e2:	4681      	mov	r9, r0
 80078e4:	2101      	movs	r1, #1
 80078e6:	4658      	mov	r0, fp
 80078e8:	f000 fb38 	bl	8007f5c <__i2b>
 80078ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ee:	4604      	mov	r4, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 81cf 	beq.w	8007c94 <_dtoa_r+0xb3c>
 80078f6:	461a      	mov	r2, r3
 80078f8:	4601      	mov	r1, r0
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 fbee 	bl	80080dc <__pow5mult>
 8007900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007902:	2b01      	cmp	r3, #1
 8007904:	4604      	mov	r4, r0
 8007906:	f300 8095 	bgt.w	8007a34 <_dtoa_r+0x8dc>
 800790a:	9b02      	ldr	r3, [sp, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 8087 	bne.w	8007a20 <_dtoa_r+0x8c8>
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007918:	2b00      	cmp	r3, #0
 800791a:	f040 8089 	bne.w	8007a30 <_dtoa_r+0x8d8>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007924:	0d1b      	lsrs	r3, r3, #20
 8007926:	051b      	lsls	r3, r3, #20
 8007928:	b12b      	cbz	r3, 8007936 <_dtoa_r+0x7de>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	3301      	adds	r3, #1
 800792e:	9308      	str	r3, [sp, #32]
 8007930:	f108 0801 	add.w	r8, r8, #1
 8007934:	2301      	movs	r3, #1
 8007936:	930a      	str	r3, [sp, #40]	@ 0x28
 8007938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 81b0 	beq.w	8007ca0 <_dtoa_r+0xb48>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007946:	6918      	ldr	r0, [r3, #16]
 8007948:	f000 fabc 	bl	8007ec4 <__hi0bits>
 800794c:	f1c0 0020 	rsb	r0, r0, #32
 8007950:	9b08      	ldr	r3, [sp, #32]
 8007952:	4418      	add	r0, r3
 8007954:	f010 001f 	ands.w	r0, r0, #31
 8007958:	d077      	beq.n	8007a4a <_dtoa_r+0x8f2>
 800795a:	f1c0 0320 	rsb	r3, r0, #32
 800795e:	2b04      	cmp	r3, #4
 8007960:	dd6b      	ble.n	8007a3a <_dtoa_r+0x8e2>
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	f1c0 001c 	rsb	r0, r0, #28
 8007968:	4403      	add	r3, r0
 800796a:	4480      	add	r8, r0
 800796c:	4406      	add	r6, r0
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	f1b8 0f00 	cmp.w	r8, #0
 8007974:	dd05      	ble.n	8007982 <_dtoa_r+0x82a>
 8007976:	4649      	mov	r1, r9
 8007978:	4642      	mov	r2, r8
 800797a:	4658      	mov	r0, fp
 800797c:	f000 fc08 	bl	8008190 <__lshift>
 8007980:	4681      	mov	r9, r0
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd05      	ble.n	8007994 <_dtoa_r+0x83c>
 8007988:	4621      	mov	r1, r4
 800798a:	461a      	mov	r2, r3
 800798c:	4658      	mov	r0, fp
 800798e:	f000 fbff 	bl	8008190 <__lshift>
 8007992:	4604      	mov	r4, r0
 8007994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007996:	2b00      	cmp	r3, #0
 8007998:	d059      	beq.n	8007a4e <_dtoa_r+0x8f6>
 800799a:	4621      	mov	r1, r4
 800799c:	4648      	mov	r0, r9
 800799e:	f000 fc63 	bl	8008268 <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	da53      	bge.n	8007a4e <_dtoa_r+0x8f6>
 80079a6:	1e7b      	subs	r3, r7, #1
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	4649      	mov	r1, r9
 80079ac:	2300      	movs	r3, #0
 80079ae:	220a      	movs	r2, #10
 80079b0:	4658      	mov	r0, fp
 80079b2:	f000 fa41 	bl	8007e38 <__multadd>
 80079b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b8:	4681      	mov	r9, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8172 	beq.w	8007ca4 <_dtoa_r+0xb4c>
 80079c0:	2300      	movs	r3, #0
 80079c2:	4629      	mov	r1, r5
 80079c4:	220a      	movs	r2, #10
 80079c6:	4658      	mov	r0, fp
 80079c8:	f000 fa36 	bl	8007e38 <__multadd>
 80079cc:	9b00      	ldr	r3, [sp, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	4605      	mov	r5, r0
 80079d2:	dc67      	bgt.n	8007aa4 <_dtoa_r+0x94c>
 80079d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	dc41      	bgt.n	8007a5e <_dtoa_r+0x906>
 80079da:	e063      	b.n	8007aa4 <_dtoa_r+0x94c>
 80079dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079e2:	e746      	b.n	8007872 <_dtoa_r+0x71a>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	1e5c      	subs	r4, r3, #1
 80079e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ea:	42a3      	cmp	r3, r4
 80079ec:	bfbf      	itttt	lt
 80079ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80079f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079f4:	1ae3      	sublt	r3, r4, r3
 80079f6:	bfb4      	ite	lt
 80079f8:	18d2      	addlt	r2, r2, r3
 80079fa:	1b1c      	subge	r4, r3, r4
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	bfbc      	itt	lt
 8007a00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a02:	2400      	movlt	r4, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfb5      	itete	lt
 8007a08:	eba8 0603 	sublt.w	r6, r8, r3
 8007a0c:	9b07      	ldrge	r3, [sp, #28]
 8007a0e:	2300      	movlt	r3, #0
 8007a10:	4646      	movge	r6, r8
 8007a12:	e730      	b.n	8007876 <_dtoa_r+0x71e>
 8007a14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a18:	4646      	mov	r6, r8
 8007a1a:	e735      	b.n	8007888 <_dtoa_r+0x730>
 8007a1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a1e:	e75c      	b.n	80078da <_dtoa_r+0x782>
 8007a20:	2300      	movs	r3, #0
 8007a22:	e788      	b.n	8007936 <_dtoa_r+0x7de>
 8007a24:	3fe00000 	.word	0x3fe00000
 8007a28:	40240000 	.word	0x40240000
 8007a2c:	40140000 	.word	0x40140000
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	e780      	b.n	8007936 <_dtoa_r+0x7de>
 8007a34:	2300      	movs	r3, #0
 8007a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a38:	e782      	b.n	8007940 <_dtoa_r+0x7e8>
 8007a3a:	d099      	beq.n	8007970 <_dtoa_r+0x818>
 8007a3c:	9a08      	ldr	r2, [sp, #32]
 8007a3e:	331c      	adds	r3, #28
 8007a40:	441a      	add	r2, r3
 8007a42:	4498      	add	r8, r3
 8007a44:	441e      	add	r6, r3
 8007a46:	9208      	str	r2, [sp, #32]
 8007a48:	e792      	b.n	8007970 <_dtoa_r+0x818>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	e7f6      	b.n	8007a3c <_dtoa_r+0x8e4>
 8007a4e:	9b07      	ldr	r3, [sp, #28]
 8007a50:	9704      	str	r7, [sp, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc20      	bgt.n	8007a98 <_dtoa_r+0x940>
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	dd1e      	ble.n	8007a9c <_dtoa_r+0x944>
 8007a5e:	9b00      	ldr	r3, [sp, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f47f aec0 	bne.w	80077e6 <_dtoa_r+0x68e>
 8007a66:	4621      	mov	r1, r4
 8007a68:	2205      	movs	r2, #5
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	f000 f9e4 	bl	8007e38 <__multadd>
 8007a70:	4601      	mov	r1, r0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fbf7 	bl	8008268 <__mcmp>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	f77f aeb3 	ble.w	80077e6 <_dtoa_r+0x68e>
 8007a80:	4656      	mov	r6, sl
 8007a82:	2331      	movs	r3, #49	@ 0x31
 8007a84:	f806 3b01 	strb.w	r3, [r6], #1
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	e6ae      	b.n	80077ee <_dtoa_r+0x696>
 8007a90:	9c07      	ldr	r4, [sp, #28]
 8007a92:	9704      	str	r7, [sp, #16]
 8007a94:	4625      	mov	r5, r4
 8007a96:	e7f3      	b.n	8007a80 <_dtoa_r+0x928>
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8104 	beq.w	8007cac <_dtoa_r+0xb54>
 8007aa4:	2e00      	cmp	r6, #0
 8007aa6:	dd05      	ble.n	8007ab4 <_dtoa_r+0x95c>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4632      	mov	r2, r6
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 fb6f 	bl	8008190 <__lshift>
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d05a      	beq.n	8007b70 <_dtoa_r+0xa18>
 8007aba:	6869      	ldr	r1, [r5, #4]
 8007abc:	4658      	mov	r0, fp
 8007abe:	f000 f959 	bl	8007d74 <_Balloc>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	b928      	cbnz	r0, 8007ad2 <_dtoa_r+0x97a>
 8007ac6:	4b84      	ldr	r3, [pc, #528]	@ (8007cd8 <_dtoa_r+0xb80>)
 8007ac8:	4602      	mov	r2, r0
 8007aca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ace:	f7ff bb5a 	b.w	8007186 <_dtoa_r+0x2e>
 8007ad2:	692a      	ldr	r2, [r5, #16]
 8007ad4:	3202      	adds	r2, #2
 8007ad6:	0092      	lsls	r2, r2, #2
 8007ad8:	f105 010c 	add.w	r1, r5, #12
 8007adc:	300c      	adds	r0, #12
 8007ade:	f7ff faa4 	bl	800702a <memcpy>
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	f000 fb52 	bl	8008190 <__lshift>
 8007aec:	f10a 0301 	add.w	r3, sl, #1
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	9b00      	ldr	r3, [sp, #0]
 8007af4:	4453      	add	r3, sl
 8007af6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	462f      	mov	r7, r5
 8007b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b02:	4605      	mov	r5, r0
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	4621      	mov	r1, r4
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	4648      	mov	r0, r9
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f7ff fa9a 	bl	8007046 <quorem>
 8007b12:	4639      	mov	r1, r7
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b1a:	4648      	mov	r0, r9
 8007b1c:	f000 fba4 	bl	8008268 <__mcmp>
 8007b20:	462a      	mov	r2, r5
 8007b22:	9008      	str	r0, [sp, #32]
 8007b24:	4621      	mov	r1, r4
 8007b26:	4658      	mov	r0, fp
 8007b28:	f000 fbba 	bl	80082a0 <__mdiff>
 8007b2c:	68c2      	ldr	r2, [r0, #12]
 8007b2e:	4606      	mov	r6, r0
 8007b30:	bb02      	cbnz	r2, 8007b74 <_dtoa_r+0xa1c>
 8007b32:	4601      	mov	r1, r0
 8007b34:	4648      	mov	r0, r9
 8007b36:	f000 fb97 	bl	8008268 <__mcmp>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4658      	mov	r0, fp
 8007b40:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b42:	f000 f957 	bl	8007df4 <_Bfree>
 8007b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b4a:	9e07      	ldr	r6, [sp, #28]
 8007b4c:	ea43 0102 	orr.w	r1, r3, r2
 8007b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b52:	4319      	orrs	r1, r3
 8007b54:	d110      	bne.n	8007b78 <_dtoa_r+0xa20>
 8007b56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b5a:	d029      	beq.n	8007bb0 <_dtoa_r+0xa58>
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd02      	ble.n	8007b68 <_dtoa_r+0xa10>
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	f883 8000 	strb.w	r8, [r3]
 8007b6e:	e63f      	b.n	80077f0 <_dtoa_r+0x698>
 8007b70:	4628      	mov	r0, r5
 8007b72:	e7bb      	b.n	8007aec <_dtoa_r+0x994>
 8007b74:	2201      	movs	r2, #1
 8007b76:	e7e1      	b.n	8007b3c <_dtoa_r+0x9e4>
 8007b78:	9b08      	ldr	r3, [sp, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	db04      	blt.n	8007b88 <_dtoa_r+0xa30>
 8007b7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b80:	430b      	orrs	r3, r1
 8007b82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b84:	430b      	orrs	r3, r1
 8007b86:	d120      	bne.n	8007bca <_dtoa_r+0xa72>
 8007b88:	2a00      	cmp	r2, #0
 8007b8a:	dded      	ble.n	8007b68 <_dtoa_r+0xa10>
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4658      	mov	r0, fp
 8007b92:	f000 fafd 	bl	8008190 <__lshift>
 8007b96:	4621      	mov	r1, r4
 8007b98:	4681      	mov	r9, r0
 8007b9a:	f000 fb65 	bl	8008268 <__mcmp>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dc03      	bgt.n	8007baa <_dtoa_r+0xa52>
 8007ba2:	d1e1      	bne.n	8007b68 <_dtoa_r+0xa10>
 8007ba4:	f018 0f01 	tst.w	r8, #1
 8007ba8:	d0de      	beq.n	8007b68 <_dtoa_r+0xa10>
 8007baa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bae:	d1d8      	bne.n	8007b62 <_dtoa_r+0xa0a>
 8007bb0:	9a00      	ldr	r2, [sp, #0]
 8007bb2:	2339      	movs	r3, #57	@ 0x39
 8007bb4:	7013      	strb	r3, [r2, #0]
 8007bb6:	4633      	mov	r3, r6
 8007bb8:	461e      	mov	r6, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007bc0:	2a39      	cmp	r2, #57	@ 0x39
 8007bc2:	d052      	beq.n	8007c6a <_dtoa_r+0xb12>
 8007bc4:	3201      	adds	r2, #1
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	e612      	b.n	80077f0 <_dtoa_r+0x698>
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	dd07      	ble.n	8007bde <_dtoa_r+0xa86>
 8007bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bd2:	d0ed      	beq.n	8007bb0 <_dtoa_r+0xa58>
 8007bd4:	9a00      	ldr	r2, [sp, #0]
 8007bd6:	f108 0301 	add.w	r3, r8, #1
 8007bda:	7013      	strb	r3, [r2, #0]
 8007bdc:	e608      	b.n	80077f0 <_dtoa_r+0x698>
 8007bde:	9b07      	ldr	r3, [sp, #28]
 8007be0:	9a07      	ldr	r2, [sp, #28]
 8007be2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d028      	beq.n	8007c3e <_dtoa_r+0xae6>
 8007bec:	4649      	mov	r1, r9
 8007bee:	2300      	movs	r3, #0
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	4658      	mov	r0, fp
 8007bf4:	f000 f920 	bl	8007e38 <__multadd>
 8007bf8:	42af      	cmp	r7, r5
 8007bfa:	4681      	mov	r9, r0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	f04f 020a 	mov.w	r2, #10
 8007c04:	4639      	mov	r1, r7
 8007c06:	4658      	mov	r0, fp
 8007c08:	d107      	bne.n	8007c1a <_dtoa_r+0xac2>
 8007c0a:	f000 f915 	bl	8007e38 <__multadd>
 8007c0e:	4607      	mov	r7, r0
 8007c10:	4605      	mov	r5, r0
 8007c12:	9b07      	ldr	r3, [sp, #28]
 8007c14:	3301      	adds	r3, #1
 8007c16:	9307      	str	r3, [sp, #28]
 8007c18:	e774      	b.n	8007b04 <_dtoa_r+0x9ac>
 8007c1a:	f000 f90d 	bl	8007e38 <__multadd>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4607      	mov	r7, r0
 8007c22:	2300      	movs	r3, #0
 8007c24:	220a      	movs	r2, #10
 8007c26:	4658      	mov	r0, fp
 8007c28:	f000 f906 	bl	8007e38 <__multadd>
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	e7f0      	b.n	8007c12 <_dtoa_r+0xaba>
 8007c30:	9b00      	ldr	r3, [sp, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfcc      	ite	gt
 8007c36:	461e      	movgt	r6, r3
 8007c38:	2601      	movle	r6, #1
 8007c3a:	4456      	add	r6, sl
 8007c3c:	2700      	movs	r7, #0
 8007c3e:	4649      	mov	r1, r9
 8007c40:	2201      	movs	r2, #1
 8007c42:	4658      	mov	r0, fp
 8007c44:	f000 faa4 	bl	8008190 <__lshift>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4681      	mov	r9, r0
 8007c4c:	f000 fb0c 	bl	8008268 <__mcmp>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	dcb0      	bgt.n	8007bb6 <_dtoa_r+0xa5e>
 8007c54:	d102      	bne.n	8007c5c <_dtoa_r+0xb04>
 8007c56:	f018 0f01 	tst.w	r8, #1
 8007c5a:	d1ac      	bne.n	8007bb6 <_dtoa_r+0xa5e>
 8007c5c:	4633      	mov	r3, r6
 8007c5e:	461e      	mov	r6, r3
 8007c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c64:	2a30      	cmp	r2, #48	@ 0x30
 8007c66:	d0fa      	beq.n	8007c5e <_dtoa_r+0xb06>
 8007c68:	e5c2      	b.n	80077f0 <_dtoa_r+0x698>
 8007c6a:	459a      	cmp	sl, r3
 8007c6c:	d1a4      	bne.n	8007bb8 <_dtoa_r+0xa60>
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	3301      	adds	r3, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	2331      	movs	r3, #49	@ 0x31
 8007c76:	f88a 3000 	strb.w	r3, [sl]
 8007c7a:	e5b9      	b.n	80077f0 <_dtoa_r+0x698>
 8007c7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007cdc <_dtoa_r+0xb84>
 8007c82:	b11b      	cbz	r3, 8007c8c <_dtoa_r+0xb34>
 8007c84:	f10a 0308 	add.w	r3, sl, #8
 8007c88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	b019      	add	sp, #100	@ 0x64
 8007c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	f77f ae37 	ble.w	800790a <_dtoa_r+0x7b2>
 8007c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	e655      	b.n	8007950 <_dtoa_r+0x7f8>
 8007ca4:	9b00      	ldr	r3, [sp, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f77f aed6 	ble.w	8007a58 <_dtoa_r+0x900>
 8007cac:	4656      	mov	r6, sl
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	f7ff f9c8 	bl	8007046 <quorem>
 8007cb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cba:	f806 8b01 	strb.w	r8, [r6], #1
 8007cbe:	9b00      	ldr	r3, [sp, #0]
 8007cc0:	eba6 020a 	sub.w	r2, r6, sl
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	ddb3      	ble.n	8007c30 <_dtoa_r+0xad8>
 8007cc8:	4649      	mov	r1, r9
 8007cca:	2300      	movs	r3, #0
 8007ccc:	220a      	movs	r2, #10
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f000 f8b2 	bl	8007e38 <__multadd>
 8007cd4:	4681      	mov	r9, r0
 8007cd6:	e7ea      	b.n	8007cae <_dtoa_r+0xb56>
 8007cd8:	080091d1 	.word	0x080091d1
 8007cdc:	08009155 	.word	0x08009155

08007ce0 <_free_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d041      	beq.n	8007d6c <_free_r+0x8c>
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f0c      	subs	r4, r1, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	18e4      	addlt	r4, r4, r3
 8007cf4:	f7fe fae8 	bl	80062c8 <__malloc_lock>
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d70 <_free_r+0x90>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x2c>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	4628      	mov	r0, r5
 8007d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d08:	f7fe bae4 	b.w	80062d4 <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x42>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	1821      	adds	r1, r4, r0
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1809      	addeq	r1, r1, r0
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x1e>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x4c>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x42>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1850      	adds	r0, r2, r1
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x6c>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	4401      	add	r1, r0
 8007d38:	1850      	adds	r0, r2, r1
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x22>
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6053      	str	r3, [r2, #4]
 8007d46:	4408      	add	r0, r1
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x22>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x74>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x22>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	1821      	adds	r1, r4, r0
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf04      	itt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	bf04      	itt	eq
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6054      	str	r4, [r2, #4]
 8007d6a:	e7ca      	b.n	8007d02 <_free_r+0x22>
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000b94 	.word	0x20000b94

08007d74 <_Balloc>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	69c6      	ldr	r6, [r0, #28]
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	b976      	cbnz	r6, 8007d9c <_Balloc+0x28>
 8007d7e:	2010      	movs	r0, #16
 8007d80:	f7fe f9f0 	bl	8006164 <malloc>
 8007d84:	4602      	mov	r2, r0
 8007d86:	61e0      	str	r0, [r4, #28]
 8007d88:	b920      	cbnz	r0, 8007d94 <_Balloc+0x20>
 8007d8a:	4b18      	ldr	r3, [pc, #96]	@ (8007dec <_Balloc+0x78>)
 8007d8c:	4818      	ldr	r0, [pc, #96]	@ (8007df0 <_Balloc+0x7c>)
 8007d8e:	216b      	movs	r1, #107	@ 0x6b
 8007d90:	f000 fd90 	bl	80088b4 <__assert_func>
 8007d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d98:	6006      	str	r6, [r0, #0]
 8007d9a:	60c6      	str	r6, [r0, #12]
 8007d9c:	69e6      	ldr	r6, [r4, #28]
 8007d9e:	68f3      	ldr	r3, [r6, #12]
 8007da0:	b183      	cbz	r3, 8007dc4 <_Balloc+0x50>
 8007da2:	69e3      	ldr	r3, [r4, #28]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007daa:	b9b8      	cbnz	r0, 8007ddc <_Balloc+0x68>
 8007dac:	2101      	movs	r1, #1
 8007dae:	fa01 f605 	lsl.w	r6, r1, r5
 8007db2:	1d72      	adds	r2, r6, #5
 8007db4:	0092      	lsls	r2, r2, #2
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fd9a 	bl	80088f0 <_calloc_r>
 8007dbc:	b160      	cbz	r0, 8007dd8 <_Balloc+0x64>
 8007dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dc2:	e00e      	b.n	8007de2 <_Balloc+0x6e>
 8007dc4:	2221      	movs	r2, #33	@ 0x21
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fd91 	bl	80088f0 <_calloc_r>
 8007dce:	69e3      	ldr	r3, [r4, #28]
 8007dd0:	60f0      	str	r0, [r6, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e4      	bne.n	8007da2 <_Balloc+0x2e>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	6802      	ldr	r2, [r0, #0]
 8007dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007de2:	2300      	movs	r3, #0
 8007de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007de8:	e7f7      	b.n	8007dda <_Balloc+0x66>
 8007dea:	bf00      	nop
 8007dec:	08009162 	.word	0x08009162
 8007df0:	080091e2 	.word	0x080091e2

08007df4 <_Bfree>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	69c6      	ldr	r6, [r0, #28]
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	b976      	cbnz	r6, 8007e1c <_Bfree+0x28>
 8007dfe:	2010      	movs	r0, #16
 8007e00:	f7fe f9b0 	bl	8006164 <malloc>
 8007e04:	4602      	mov	r2, r0
 8007e06:	61e8      	str	r0, [r5, #28]
 8007e08:	b920      	cbnz	r0, 8007e14 <_Bfree+0x20>
 8007e0a:	4b09      	ldr	r3, [pc, #36]	@ (8007e30 <_Bfree+0x3c>)
 8007e0c:	4809      	ldr	r0, [pc, #36]	@ (8007e34 <_Bfree+0x40>)
 8007e0e:	218f      	movs	r1, #143	@ 0x8f
 8007e10:	f000 fd50 	bl	80088b4 <__assert_func>
 8007e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e18:	6006      	str	r6, [r0, #0]
 8007e1a:	60c6      	str	r6, [r0, #12]
 8007e1c:	b13c      	cbz	r4, 8007e2e <_Bfree+0x3a>
 8007e1e:	69eb      	ldr	r3, [r5, #28]
 8007e20:	6862      	ldr	r2, [r4, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e28:	6021      	str	r1, [r4, #0]
 8007e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	08009162 	.word	0x08009162
 8007e34:	080091e2 	.word	0x080091e2

08007e38 <__multadd>:
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	690d      	ldr	r5, [r1, #16]
 8007e3e:	4607      	mov	r7, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	461e      	mov	r6, r3
 8007e44:	f101 0c14 	add.w	ip, r1, #20
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e4e:	b299      	uxth	r1, r3
 8007e50:	fb02 6101 	mla	r1, r2, r1, r6
 8007e54:	0c1e      	lsrs	r6, r3, #16
 8007e56:	0c0b      	lsrs	r3, r1, #16
 8007e58:	fb02 3306 	mla	r3, r2, r6, r3
 8007e5c:	b289      	uxth	r1, r1
 8007e5e:	3001      	adds	r0, #1
 8007e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e64:	4285      	cmp	r5, r0
 8007e66:	f84c 1b04 	str.w	r1, [ip], #4
 8007e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e6e:	dcec      	bgt.n	8007e4a <__multadd+0x12>
 8007e70:	b30e      	cbz	r6, 8007eb6 <__multadd+0x7e>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dc19      	bgt.n	8007eac <__multadd+0x74>
 8007e78:	6861      	ldr	r1, [r4, #4]
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	3101      	adds	r1, #1
 8007e7e:	f7ff ff79 	bl	8007d74 <_Balloc>
 8007e82:	4680      	mov	r8, r0
 8007e84:	b928      	cbnz	r0, 8007e92 <__multadd+0x5a>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b0c      	ldr	r3, [pc, #48]	@ (8007ebc <__multadd+0x84>)
 8007e8a:	480d      	ldr	r0, [pc, #52]	@ (8007ec0 <__multadd+0x88>)
 8007e8c:	21ba      	movs	r1, #186	@ 0xba
 8007e8e:	f000 fd11 	bl	80088b4 <__assert_func>
 8007e92:	6922      	ldr	r2, [r4, #16]
 8007e94:	3202      	adds	r2, #2
 8007e96:	f104 010c 	add.w	r1, r4, #12
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	300c      	adds	r0, #12
 8007e9e:	f7ff f8c4 	bl	800702a <memcpy>
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff ffa5 	bl	8007df4 <_Bfree>
 8007eaa:	4644      	mov	r4, r8
 8007eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	615e      	str	r6, [r3, #20]
 8007eb4:	6125      	str	r5, [r4, #16]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	080091d1 	.word	0x080091d1
 8007ec0:	080091e2 	.word	0x080091e2

08007ec4 <__hi0bits>:
 8007ec4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ec8:	4603      	mov	r3, r0
 8007eca:	bf36      	itet	cc
 8007ecc:	0403      	lslcc	r3, r0, #16
 8007ece:	2000      	movcs	r0, #0
 8007ed0:	2010      	movcc	r0, #16
 8007ed2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ed6:	bf3c      	itt	cc
 8007ed8:	021b      	lslcc	r3, r3, #8
 8007eda:	3008      	addcc	r0, #8
 8007edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ee0:	bf3c      	itt	cc
 8007ee2:	011b      	lslcc	r3, r3, #4
 8007ee4:	3004      	addcc	r0, #4
 8007ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eea:	bf3c      	itt	cc
 8007eec:	009b      	lslcc	r3, r3, #2
 8007eee:	3002      	addcc	r0, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	db05      	blt.n	8007f00 <__hi0bits+0x3c>
 8007ef4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ef8:	f100 0001 	add.w	r0, r0, #1
 8007efc:	bf08      	it	eq
 8007efe:	2020      	moveq	r0, #32
 8007f00:	4770      	bx	lr

08007f02 <__lo0bits>:
 8007f02:	6803      	ldr	r3, [r0, #0]
 8007f04:	4602      	mov	r2, r0
 8007f06:	f013 0007 	ands.w	r0, r3, #7
 8007f0a:	d00b      	beq.n	8007f24 <__lo0bits+0x22>
 8007f0c:	07d9      	lsls	r1, r3, #31
 8007f0e:	d421      	bmi.n	8007f54 <__lo0bits+0x52>
 8007f10:	0798      	lsls	r0, r3, #30
 8007f12:	bf49      	itett	mi
 8007f14:	085b      	lsrmi	r3, r3, #1
 8007f16:	089b      	lsrpl	r3, r3, #2
 8007f18:	2001      	movmi	r0, #1
 8007f1a:	6013      	strmi	r3, [r2, #0]
 8007f1c:	bf5c      	itt	pl
 8007f1e:	6013      	strpl	r3, [r2, #0]
 8007f20:	2002      	movpl	r0, #2
 8007f22:	4770      	bx	lr
 8007f24:	b299      	uxth	r1, r3
 8007f26:	b909      	cbnz	r1, 8007f2c <__lo0bits+0x2a>
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	2010      	movs	r0, #16
 8007f2c:	b2d9      	uxtb	r1, r3
 8007f2e:	b909      	cbnz	r1, 8007f34 <__lo0bits+0x32>
 8007f30:	3008      	adds	r0, #8
 8007f32:	0a1b      	lsrs	r3, r3, #8
 8007f34:	0719      	lsls	r1, r3, #28
 8007f36:	bf04      	itt	eq
 8007f38:	091b      	lsreq	r3, r3, #4
 8007f3a:	3004      	addeq	r0, #4
 8007f3c:	0799      	lsls	r1, r3, #30
 8007f3e:	bf04      	itt	eq
 8007f40:	089b      	lsreq	r3, r3, #2
 8007f42:	3002      	addeq	r0, #2
 8007f44:	07d9      	lsls	r1, r3, #31
 8007f46:	d403      	bmi.n	8007f50 <__lo0bits+0x4e>
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	f100 0001 	add.w	r0, r0, #1
 8007f4e:	d003      	beq.n	8007f58 <__lo0bits+0x56>
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	4770      	bx	lr
 8007f54:	2000      	movs	r0, #0
 8007f56:	4770      	bx	lr
 8007f58:	2020      	movs	r0, #32
 8007f5a:	4770      	bx	lr

08007f5c <__i2b>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	460c      	mov	r4, r1
 8007f60:	2101      	movs	r1, #1
 8007f62:	f7ff ff07 	bl	8007d74 <_Balloc>
 8007f66:	4602      	mov	r2, r0
 8007f68:	b928      	cbnz	r0, 8007f76 <__i2b+0x1a>
 8007f6a:	4b05      	ldr	r3, [pc, #20]	@ (8007f80 <__i2b+0x24>)
 8007f6c:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <__i2b+0x28>)
 8007f6e:	f240 1145 	movw	r1, #325	@ 0x145
 8007f72:	f000 fc9f 	bl	80088b4 <__assert_func>
 8007f76:	2301      	movs	r3, #1
 8007f78:	6144      	str	r4, [r0, #20]
 8007f7a:	6103      	str	r3, [r0, #16]
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	bf00      	nop
 8007f80:	080091d1 	.word	0x080091d1
 8007f84:	080091e2 	.word	0x080091e2

08007f88 <__multiply>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	690a      	ldr	r2, [r1, #16]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	bfa8      	it	ge
 8007f96:	4623      	movge	r3, r4
 8007f98:	460f      	mov	r7, r1
 8007f9a:	bfa4      	itt	ge
 8007f9c:	460c      	movge	r4, r1
 8007f9e:	461f      	movge	r7, r3
 8007fa0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007fa4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	6861      	ldr	r1, [r4, #4]
 8007fac:	eb0a 0609 	add.w	r6, sl, r9
 8007fb0:	42b3      	cmp	r3, r6
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	bfb8      	it	lt
 8007fb6:	3101      	addlt	r1, #1
 8007fb8:	f7ff fedc 	bl	8007d74 <_Balloc>
 8007fbc:	b930      	cbnz	r0, 8007fcc <__multiply+0x44>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	4b44      	ldr	r3, [pc, #272]	@ (80080d4 <__multiply+0x14c>)
 8007fc2:	4845      	ldr	r0, [pc, #276]	@ (80080d8 <__multiply+0x150>)
 8007fc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fc8:	f000 fc74 	bl	80088b4 <__assert_func>
 8007fcc:	f100 0514 	add.w	r5, r0, #20
 8007fd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4543      	cmp	r3, r8
 8007fda:	d321      	bcc.n	8008020 <__multiply+0x98>
 8007fdc:	f107 0114 	add.w	r1, r7, #20
 8007fe0:	f104 0214 	add.w	r2, r4, #20
 8007fe4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007fe8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007fec:	9302      	str	r3, [sp, #8]
 8007fee:	1b13      	subs	r3, r2, r4
 8007ff0:	3b15      	subs	r3, #21
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	f104 0715 	add.w	r7, r4, #21
 8007ffc:	42ba      	cmp	r2, r7
 8007ffe:	bf38      	it	cc
 8008000:	2304      	movcc	r3, #4
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	9103      	str	r1, [sp, #12]
 8008008:	428b      	cmp	r3, r1
 800800a:	d80c      	bhi.n	8008026 <__multiply+0x9e>
 800800c:	2e00      	cmp	r6, #0
 800800e:	dd03      	ble.n	8008018 <__multiply+0x90>
 8008010:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05b      	beq.n	80080d0 <__multiply+0x148>
 8008018:	6106      	str	r6, [r0, #16]
 800801a:	b005      	add	sp, #20
 800801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008020:	f843 2b04 	str.w	r2, [r3], #4
 8008024:	e7d8      	b.n	8007fd8 <__multiply+0x50>
 8008026:	f8b1 a000 	ldrh.w	sl, [r1]
 800802a:	f1ba 0f00 	cmp.w	sl, #0
 800802e:	d024      	beq.n	800807a <__multiply+0xf2>
 8008030:	f104 0e14 	add.w	lr, r4, #20
 8008034:	46a9      	mov	r9, r5
 8008036:	f04f 0c00 	mov.w	ip, #0
 800803a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800803e:	f8d9 3000 	ldr.w	r3, [r9]
 8008042:	fa1f fb87 	uxth.w	fp, r7
 8008046:	b29b      	uxth	r3, r3
 8008048:	fb0a 330b 	mla	r3, sl, fp, r3
 800804c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008050:	f8d9 7000 	ldr.w	r7, [r9]
 8008054:	4463      	add	r3, ip
 8008056:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800805a:	fb0a c70b 	mla	r7, sl, fp, ip
 800805e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008068:	4572      	cmp	r2, lr
 800806a:	f849 3b04 	str.w	r3, [r9], #4
 800806e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008072:	d8e2      	bhi.n	800803a <__multiply+0xb2>
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	f845 c003 	str.w	ip, [r5, r3]
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008080:	3104      	adds	r1, #4
 8008082:	f1b9 0f00 	cmp.w	r9, #0
 8008086:	d021      	beq.n	80080cc <__multiply+0x144>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	f104 0c14 	add.w	ip, r4, #20
 800808e:	46ae      	mov	lr, r5
 8008090:	f04f 0a00 	mov.w	sl, #0
 8008094:	f8bc b000 	ldrh.w	fp, [ip]
 8008098:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800809c:	fb09 770b 	mla	r7, r9, fp, r7
 80080a0:	4457      	add	r7, sl
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080a8:	f84e 3b04 	str.w	r3, [lr], #4
 80080ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080b4:	f8be 3000 	ldrh.w	r3, [lr]
 80080b8:	fb09 330a 	mla	r3, r9, sl, r3
 80080bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80080c0:	4562      	cmp	r2, ip
 80080c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080c6:	d8e5      	bhi.n	8008094 <__multiply+0x10c>
 80080c8:	9f01      	ldr	r7, [sp, #4]
 80080ca:	51eb      	str	r3, [r5, r7]
 80080cc:	3504      	adds	r5, #4
 80080ce:	e799      	b.n	8008004 <__multiply+0x7c>
 80080d0:	3e01      	subs	r6, #1
 80080d2:	e79b      	b.n	800800c <__multiply+0x84>
 80080d4:	080091d1 	.word	0x080091d1
 80080d8:	080091e2 	.word	0x080091e2

080080dc <__pow5mult>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	4615      	mov	r5, r2
 80080e2:	f012 0203 	ands.w	r2, r2, #3
 80080e6:	4607      	mov	r7, r0
 80080e8:	460e      	mov	r6, r1
 80080ea:	d007      	beq.n	80080fc <__pow5mult+0x20>
 80080ec:	4c25      	ldr	r4, [pc, #148]	@ (8008184 <__pow5mult+0xa8>)
 80080ee:	3a01      	subs	r2, #1
 80080f0:	2300      	movs	r3, #0
 80080f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080f6:	f7ff fe9f 	bl	8007e38 <__multadd>
 80080fa:	4606      	mov	r6, r0
 80080fc:	10ad      	asrs	r5, r5, #2
 80080fe:	d03d      	beq.n	800817c <__pow5mult+0xa0>
 8008100:	69fc      	ldr	r4, [r7, #28]
 8008102:	b97c      	cbnz	r4, 8008124 <__pow5mult+0x48>
 8008104:	2010      	movs	r0, #16
 8008106:	f7fe f82d 	bl	8006164 <malloc>
 800810a:	4602      	mov	r2, r0
 800810c:	61f8      	str	r0, [r7, #28]
 800810e:	b928      	cbnz	r0, 800811c <__pow5mult+0x40>
 8008110:	4b1d      	ldr	r3, [pc, #116]	@ (8008188 <__pow5mult+0xac>)
 8008112:	481e      	ldr	r0, [pc, #120]	@ (800818c <__pow5mult+0xb0>)
 8008114:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008118:	f000 fbcc 	bl	80088b4 <__assert_func>
 800811c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008120:	6004      	str	r4, [r0, #0]
 8008122:	60c4      	str	r4, [r0, #12]
 8008124:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800812c:	b94c      	cbnz	r4, 8008142 <__pow5mult+0x66>
 800812e:	f240 2171 	movw	r1, #625	@ 0x271
 8008132:	4638      	mov	r0, r7
 8008134:	f7ff ff12 	bl	8007f5c <__i2b>
 8008138:	2300      	movs	r3, #0
 800813a:	f8c8 0008 	str.w	r0, [r8, #8]
 800813e:	4604      	mov	r4, r0
 8008140:	6003      	str	r3, [r0, #0]
 8008142:	f04f 0900 	mov.w	r9, #0
 8008146:	07eb      	lsls	r3, r5, #31
 8008148:	d50a      	bpl.n	8008160 <__pow5mult+0x84>
 800814a:	4631      	mov	r1, r6
 800814c:	4622      	mov	r2, r4
 800814e:	4638      	mov	r0, r7
 8008150:	f7ff ff1a 	bl	8007f88 <__multiply>
 8008154:	4631      	mov	r1, r6
 8008156:	4680      	mov	r8, r0
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff fe4b 	bl	8007df4 <_Bfree>
 800815e:	4646      	mov	r6, r8
 8008160:	106d      	asrs	r5, r5, #1
 8008162:	d00b      	beq.n	800817c <__pow5mult+0xa0>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	b938      	cbnz	r0, 8008178 <__pow5mult+0x9c>
 8008168:	4622      	mov	r2, r4
 800816a:	4621      	mov	r1, r4
 800816c:	4638      	mov	r0, r7
 800816e:	f7ff ff0b 	bl	8007f88 <__multiply>
 8008172:	6020      	str	r0, [r4, #0]
 8008174:	f8c0 9000 	str.w	r9, [r0]
 8008178:	4604      	mov	r4, r0
 800817a:	e7e4      	b.n	8008146 <__pow5mult+0x6a>
 800817c:	4630      	mov	r0, r6
 800817e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008182:	bf00      	nop
 8008184:	0800923c 	.word	0x0800923c
 8008188:	08009162 	.word	0x08009162
 800818c:	080091e2 	.word	0x080091e2

08008190 <__lshift>:
 8008190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008194:	460c      	mov	r4, r1
 8008196:	6849      	ldr	r1, [r1, #4]
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800819e:	68a3      	ldr	r3, [r4, #8]
 80081a0:	4607      	mov	r7, r0
 80081a2:	4691      	mov	r9, r2
 80081a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081a8:	f108 0601 	add.w	r6, r8, #1
 80081ac:	42b3      	cmp	r3, r6
 80081ae:	db0b      	blt.n	80081c8 <__lshift+0x38>
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7ff fddf 	bl	8007d74 <_Balloc>
 80081b6:	4605      	mov	r5, r0
 80081b8:	b948      	cbnz	r0, 80081ce <__lshift+0x3e>
 80081ba:	4602      	mov	r2, r0
 80081bc:	4b28      	ldr	r3, [pc, #160]	@ (8008260 <__lshift+0xd0>)
 80081be:	4829      	ldr	r0, [pc, #164]	@ (8008264 <__lshift+0xd4>)
 80081c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081c4:	f000 fb76 	bl	80088b4 <__assert_func>
 80081c8:	3101      	adds	r1, #1
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	e7ee      	b.n	80081ac <__lshift+0x1c>
 80081ce:	2300      	movs	r3, #0
 80081d0:	f100 0114 	add.w	r1, r0, #20
 80081d4:	f100 0210 	add.w	r2, r0, #16
 80081d8:	4618      	mov	r0, r3
 80081da:	4553      	cmp	r3, sl
 80081dc:	db33      	blt.n	8008246 <__lshift+0xb6>
 80081de:	6920      	ldr	r0, [r4, #16]
 80081e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081e4:	f104 0314 	add.w	r3, r4, #20
 80081e8:	f019 091f 	ands.w	r9, r9, #31
 80081ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081f4:	d02b      	beq.n	800824e <__lshift+0xbe>
 80081f6:	f1c9 0e20 	rsb	lr, r9, #32
 80081fa:	468a      	mov	sl, r1
 80081fc:	2200      	movs	r2, #0
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	fa00 f009 	lsl.w	r0, r0, r9
 8008204:	4310      	orrs	r0, r2
 8008206:	f84a 0b04 	str.w	r0, [sl], #4
 800820a:	f853 2b04 	ldr.w	r2, [r3], #4
 800820e:	459c      	cmp	ip, r3
 8008210:	fa22 f20e 	lsr.w	r2, r2, lr
 8008214:	d8f3      	bhi.n	80081fe <__lshift+0x6e>
 8008216:	ebac 0304 	sub.w	r3, ip, r4
 800821a:	3b15      	subs	r3, #21
 800821c:	f023 0303 	bic.w	r3, r3, #3
 8008220:	3304      	adds	r3, #4
 8008222:	f104 0015 	add.w	r0, r4, #21
 8008226:	4584      	cmp	ip, r0
 8008228:	bf38      	it	cc
 800822a:	2304      	movcc	r3, #4
 800822c:	50ca      	str	r2, [r1, r3]
 800822e:	b10a      	cbz	r2, 8008234 <__lshift+0xa4>
 8008230:	f108 0602 	add.w	r6, r8, #2
 8008234:	3e01      	subs	r6, #1
 8008236:	4638      	mov	r0, r7
 8008238:	612e      	str	r6, [r5, #16]
 800823a:	4621      	mov	r1, r4
 800823c:	f7ff fdda 	bl	8007df4 <_Bfree>
 8008240:	4628      	mov	r0, r5
 8008242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008246:	f842 0f04 	str.w	r0, [r2, #4]!
 800824a:	3301      	adds	r3, #1
 800824c:	e7c5      	b.n	80081da <__lshift+0x4a>
 800824e:	3904      	subs	r1, #4
 8008250:	f853 2b04 	ldr.w	r2, [r3], #4
 8008254:	f841 2f04 	str.w	r2, [r1, #4]!
 8008258:	459c      	cmp	ip, r3
 800825a:	d8f9      	bhi.n	8008250 <__lshift+0xc0>
 800825c:	e7ea      	b.n	8008234 <__lshift+0xa4>
 800825e:	bf00      	nop
 8008260:	080091d1 	.word	0x080091d1
 8008264:	080091e2 	.word	0x080091e2

08008268 <__mcmp>:
 8008268:	690a      	ldr	r2, [r1, #16]
 800826a:	4603      	mov	r3, r0
 800826c:	6900      	ldr	r0, [r0, #16]
 800826e:	1a80      	subs	r0, r0, r2
 8008270:	b530      	push	{r4, r5, lr}
 8008272:	d10e      	bne.n	8008292 <__mcmp+0x2a>
 8008274:	3314      	adds	r3, #20
 8008276:	3114      	adds	r1, #20
 8008278:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800827c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008280:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008284:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008288:	4295      	cmp	r5, r2
 800828a:	d003      	beq.n	8008294 <__mcmp+0x2c>
 800828c:	d205      	bcs.n	800829a <__mcmp+0x32>
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	bd30      	pop	{r4, r5, pc}
 8008294:	42a3      	cmp	r3, r4
 8008296:	d3f3      	bcc.n	8008280 <__mcmp+0x18>
 8008298:	e7fb      	b.n	8008292 <__mcmp+0x2a>
 800829a:	2001      	movs	r0, #1
 800829c:	e7f9      	b.n	8008292 <__mcmp+0x2a>
	...

080082a0 <__mdiff>:
 80082a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	4689      	mov	r9, r1
 80082a6:	4606      	mov	r6, r0
 80082a8:	4611      	mov	r1, r2
 80082aa:	4648      	mov	r0, r9
 80082ac:	4614      	mov	r4, r2
 80082ae:	f7ff ffdb 	bl	8008268 <__mcmp>
 80082b2:	1e05      	subs	r5, r0, #0
 80082b4:	d112      	bne.n	80082dc <__mdiff+0x3c>
 80082b6:	4629      	mov	r1, r5
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff fd5b 	bl	8007d74 <_Balloc>
 80082be:	4602      	mov	r2, r0
 80082c0:	b928      	cbnz	r0, 80082ce <__mdiff+0x2e>
 80082c2:	4b3f      	ldr	r3, [pc, #252]	@ (80083c0 <__mdiff+0x120>)
 80082c4:	f240 2137 	movw	r1, #567	@ 0x237
 80082c8:	483e      	ldr	r0, [pc, #248]	@ (80083c4 <__mdiff+0x124>)
 80082ca:	f000 faf3 	bl	80088b4 <__assert_func>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082d4:	4610      	mov	r0, r2
 80082d6:	b003      	add	sp, #12
 80082d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082dc:	bfbc      	itt	lt
 80082de:	464b      	movlt	r3, r9
 80082e0:	46a1      	movlt	r9, r4
 80082e2:	4630      	mov	r0, r6
 80082e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082e8:	bfba      	itte	lt
 80082ea:	461c      	movlt	r4, r3
 80082ec:	2501      	movlt	r5, #1
 80082ee:	2500      	movge	r5, #0
 80082f0:	f7ff fd40 	bl	8007d74 <_Balloc>
 80082f4:	4602      	mov	r2, r0
 80082f6:	b918      	cbnz	r0, 8008300 <__mdiff+0x60>
 80082f8:	4b31      	ldr	r3, [pc, #196]	@ (80083c0 <__mdiff+0x120>)
 80082fa:	f240 2145 	movw	r1, #581	@ 0x245
 80082fe:	e7e3      	b.n	80082c8 <__mdiff+0x28>
 8008300:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008304:	6926      	ldr	r6, [r4, #16]
 8008306:	60c5      	str	r5, [r0, #12]
 8008308:	f109 0310 	add.w	r3, r9, #16
 800830c:	f109 0514 	add.w	r5, r9, #20
 8008310:	f104 0e14 	add.w	lr, r4, #20
 8008314:	f100 0b14 	add.w	fp, r0, #20
 8008318:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800831c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	46d9      	mov	r9, fp
 8008324:	f04f 0c00 	mov.w	ip, #0
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800832e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	fa1f f38a 	uxth.w	r3, sl
 8008338:	4619      	mov	r1, r3
 800833a:	b283      	uxth	r3, r0
 800833c:	1acb      	subs	r3, r1, r3
 800833e:	0c00      	lsrs	r0, r0, #16
 8008340:	4463      	add	r3, ip
 8008342:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008346:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800834a:	b29b      	uxth	r3, r3
 800834c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008350:	4576      	cmp	r6, lr
 8008352:	f849 3b04 	str.w	r3, [r9], #4
 8008356:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800835a:	d8e5      	bhi.n	8008328 <__mdiff+0x88>
 800835c:	1b33      	subs	r3, r6, r4
 800835e:	3b15      	subs	r3, #21
 8008360:	f023 0303 	bic.w	r3, r3, #3
 8008364:	3415      	adds	r4, #21
 8008366:	3304      	adds	r3, #4
 8008368:	42a6      	cmp	r6, r4
 800836a:	bf38      	it	cc
 800836c:	2304      	movcc	r3, #4
 800836e:	441d      	add	r5, r3
 8008370:	445b      	add	r3, fp
 8008372:	461e      	mov	r6, r3
 8008374:	462c      	mov	r4, r5
 8008376:	4544      	cmp	r4, r8
 8008378:	d30e      	bcc.n	8008398 <__mdiff+0xf8>
 800837a:	f108 0103 	add.w	r1, r8, #3
 800837e:	1b49      	subs	r1, r1, r5
 8008380:	f021 0103 	bic.w	r1, r1, #3
 8008384:	3d03      	subs	r5, #3
 8008386:	45a8      	cmp	r8, r5
 8008388:	bf38      	it	cc
 800838a:	2100      	movcc	r1, #0
 800838c:	440b      	add	r3, r1
 800838e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008392:	b191      	cbz	r1, 80083ba <__mdiff+0x11a>
 8008394:	6117      	str	r7, [r2, #16]
 8008396:	e79d      	b.n	80082d4 <__mdiff+0x34>
 8008398:	f854 1b04 	ldr.w	r1, [r4], #4
 800839c:	46e6      	mov	lr, ip
 800839e:	0c08      	lsrs	r0, r1, #16
 80083a0:	fa1c fc81 	uxtah	ip, ip, r1
 80083a4:	4471      	add	r1, lr
 80083a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80083aa:	b289      	uxth	r1, r1
 80083ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083b0:	f846 1b04 	str.w	r1, [r6], #4
 80083b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083b8:	e7dd      	b.n	8008376 <__mdiff+0xd6>
 80083ba:	3f01      	subs	r7, #1
 80083bc:	e7e7      	b.n	800838e <__mdiff+0xee>
 80083be:	bf00      	nop
 80083c0:	080091d1 	.word	0x080091d1
 80083c4:	080091e2 	.word	0x080091e2

080083c8 <__d2b>:
 80083c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	460f      	mov	r7, r1
 80083ce:	2101      	movs	r1, #1
 80083d0:	ec59 8b10 	vmov	r8, r9, d0
 80083d4:	4616      	mov	r6, r2
 80083d6:	f7ff fccd 	bl	8007d74 <_Balloc>
 80083da:	4604      	mov	r4, r0
 80083dc:	b930      	cbnz	r0, 80083ec <__d2b+0x24>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b23      	ldr	r3, [pc, #140]	@ (8008470 <__d2b+0xa8>)
 80083e2:	4824      	ldr	r0, [pc, #144]	@ (8008474 <__d2b+0xac>)
 80083e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80083e8:	f000 fa64 	bl	80088b4 <__assert_func>
 80083ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083f4:	b10d      	cbz	r5, 80083fa <__d2b+0x32>
 80083f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	f1b8 0300 	subs.w	r3, r8, #0
 8008400:	d023      	beq.n	800844a <__d2b+0x82>
 8008402:	4668      	mov	r0, sp
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	f7ff fd7c 	bl	8007f02 <__lo0bits>
 800840a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800840e:	b1d0      	cbz	r0, 8008446 <__d2b+0x7e>
 8008410:	f1c0 0320 	rsb	r3, r0, #32
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	430b      	orrs	r3, r1
 800841a:	40c2      	lsrs	r2, r0
 800841c:	6163      	str	r3, [r4, #20]
 800841e:	9201      	str	r2, [sp, #4]
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	61a3      	str	r3, [r4, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	bf0c      	ite	eq
 8008428:	2201      	moveq	r2, #1
 800842a:	2202      	movne	r2, #2
 800842c:	6122      	str	r2, [r4, #16]
 800842e:	b1a5      	cbz	r5, 800845a <__d2b+0x92>
 8008430:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008434:	4405      	add	r5, r0
 8008436:	603d      	str	r5, [r7, #0]
 8008438:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800843c:	6030      	str	r0, [r6, #0]
 800843e:	4620      	mov	r0, r4
 8008440:	b003      	add	sp, #12
 8008442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008446:	6161      	str	r1, [r4, #20]
 8008448:	e7ea      	b.n	8008420 <__d2b+0x58>
 800844a:	a801      	add	r0, sp, #4
 800844c:	f7ff fd59 	bl	8007f02 <__lo0bits>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	3020      	adds	r0, #32
 8008456:	2201      	movs	r2, #1
 8008458:	e7e8      	b.n	800842c <__d2b+0x64>
 800845a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800845e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008462:	6038      	str	r0, [r7, #0]
 8008464:	6918      	ldr	r0, [r3, #16]
 8008466:	f7ff fd2d 	bl	8007ec4 <__hi0bits>
 800846a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800846e:	e7e5      	b.n	800843c <__d2b+0x74>
 8008470:	080091d1 	.word	0x080091d1
 8008474:	080091e2 	.word	0x080091e2

08008478 <__ssputs_r>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	688e      	ldr	r6, [r1, #8]
 800847e:	461f      	mov	r7, r3
 8008480:	42be      	cmp	r6, r7
 8008482:	680b      	ldr	r3, [r1, #0]
 8008484:	4682      	mov	sl, r0
 8008486:	460c      	mov	r4, r1
 8008488:	4690      	mov	r8, r2
 800848a:	d82d      	bhi.n	80084e8 <__ssputs_r+0x70>
 800848c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008494:	d026      	beq.n	80084e4 <__ssputs_r+0x6c>
 8008496:	6965      	ldr	r5, [r4, #20]
 8008498:	6909      	ldr	r1, [r1, #16]
 800849a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800849e:	eba3 0901 	sub.w	r9, r3, r1
 80084a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084a6:	1c7b      	adds	r3, r7, #1
 80084a8:	444b      	add	r3, r9
 80084aa:	106d      	asrs	r5, r5, #1
 80084ac:	429d      	cmp	r5, r3
 80084ae:	bf38      	it	cc
 80084b0:	461d      	movcc	r5, r3
 80084b2:	0553      	lsls	r3, r2, #21
 80084b4:	d527      	bpl.n	8008506 <__ssputs_r+0x8e>
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7fd fe86 	bl	80061c8 <_malloc_r>
 80084bc:	4606      	mov	r6, r0
 80084be:	b360      	cbz	r0, 800851a <__ssputs_r+0xa2>
 80084c0:	6921      	ldr	r1, [r4, #16]
 80084c2:	464a      	mov	r2, r9
 80084c4:	f7fe fdb1 	bl	800702a <memcpy>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	6126      	str	r6, [r4, #16]
 80084d6:	6165      	str	r5, [r4, #20]
 80084d8:	444e      	add	r6, r9
 80084da:	eba5 0509 	sub.w	r5, r5, r9
 80084de:	6026      	str	r6, [r4, #0]
 80084e0:	60a5      	str	r5, [r4, #8]
 80084e2:	463e      	mov	r6, r7
 80084e4:	42be      	cmp	r6, r7
 80084e6:	d900      	bls.n	80084ea <__ssputs_r+0x72>
 80084e8:	463e      	mov	r6, r7
 80084ea:	6820      	ldr	r0, [r4, #0]
 80084ec:	4632      	mov	r2, r6
 80084ee:	4641      	mov	r1, r8
 80084f0:	f000 f9c6 	bl	8008880 <memmove>
 80084f4:	68a3      	ldr	r3, [r4, #8]
 80084f6:	1b9b      	subs	r3, r3, r6
 80084f8:	60a3      	str	r3, [r4, #8]
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	4433      	add	r3, r6
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	2000      	movs	r0, #0
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	462a      	mov	r2, r5
 8008508:	f000 fa18 	bl	800893c <_realloc_r>
 800850c:	4606      	mov	r6, r0
 800850e:	2800      	cmp	r0, #0
 8008510:	d1e0      	bne.n	80084d4 <__ssputs_r+0x5c>
 8008512:	6921      	ldr	r1, [r4, #16]
 8008514:	4650      	mov	r0, sl
 8008516:	f7ff fbe3 	bl	8007ce0 <_free_r>
 800851a:	230c      	movs	r3, #12
 800851c:	f8ca 3000 	str.w	r3, [sl]
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	e7e9      	b.n	8008502 <__ssputs_r+0x8a>
	...

08008530 <_svfiprintf_r>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4698      	mov	r8, r3
 8008536:	898b      	ldrh	r3, [r1, #12]
 8008538:	061b      	lsls	r3, r3, #24
 800853a:	b09d      	sub	sp, #116	@ 0x74
 800853c:	4607      	mov	r7, r0
 800853e:	460d      	mov	r5, r1
 8008540:	4614      	mov	r4, r2
 8008542:	d510      	bpl.n	8008566 <_svfiprintf_r+0x36>
 8008544:	690b      	ldr	r3, [r1, #16]
 8008546:	b973      	cbnz	r3, 8008566 <_svfiprintf_r+0x36>
 8008548:	2140      	movs	r1, #64	@ 0x40
 800854a:	f7fd fe3d 	bl	80061c8 <_malloc_r>
 800854e:	6028      	str	r0, [r5, #0]
 8008550:	6128      	str	r0, [r5, #16]
 8008552:	b930      	cbnz	r0, 8008562 <_svfiprintf_r+0x32>
 8008554:	230c      	movs	r3, #12
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b01d      	add	sp, #116	@ 0x74
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	2340      	movs	r3, #64	@ 0x40
 8008564:	616b      	str	r3, [r5, #20]
 8008566:	2300      	movs	r3, #0
 8008568:	9309      	str	r3, [sp, #36]	@ 0x24
 800856a:	2320      	movs	r3, #32
 800856c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008570:	f8cd 800c 	str.w	r8, [sp, #12]
 8008574:	2330      	movs	r3, #48	@ 0x30
 8008576:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008714 <_svfiprintf_r+0x1e4>
 800857a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800857e:	f04f 0901 	mov.w	r9, #1
 8008582:	4623      	mov	r3, r4
 8008584:	469a      	mov	sl, r3
 8008586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800858a:	b10a      	cbz	r2, 8008590 <_svfiprintf_r+0x60>
 800858c:	2a25      	cmp	r2, #37	@ 0x25
 800858e:	d1f9      	bne.n	8008584 <_svfiprintf_r+0x54>
 8008590:	ebba 0b04 	subs.w	fp, sl, r4
 8008594:	d00b      	beq.n	80085ae <_svfiprintf_r+0x7e>
 8008596:	465b      	mov	r3, fp
 8008598:	4622      	mov	r2, r4
 800859a:	4629      	mov	r1, r5
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ff6b 	bl	8008478 <__ssputs_r>
 80085a2:	3001      	adds	r0, #1
 80085a4:	f000 80a7 	beq.w	80086f6 <_svfiprintf_r+0x1c6>
 80085a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085aa:	445a      	add	r2, fp
 80085ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ae:	f89a 3000 	ldrb.w	r3, [sl]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 809f 	beq.w	80086f6 <_svfiprintf_r+0x1c6>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c2:	f10a 0a01 	add.w	sl, sl, #1
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	9307      	str	r3, [sp, #28]
 80085ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d0:	4654      	mov	r4, sl
 80085d2:	2205      	movs	r2, #5
 80085d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d8:	484e      	ldr	r0, [pc, #312]	@ (8008714 <_svfiprintf_r+0x1e4>)
 80085da:	f7f7 fe29 	bl	8000230 <memchr>
 80085de:	9a04      	ldr	r2, [sp, #16]
 80085e0:	b9d8      	cbnz	r0, 800861a <_svfiprintf_r+0xea>
 80085e2:	06d0      	lsls	r0, r2, #27
 80085e4:	bf44      	itt	mi
 80085e6:	2320      	movmi	r3, #32
 80085e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085ec:	0711      	lsls	r1, r2, #28
 80085ee:	bf44      	itt	mi
 80085f0:	232b      	movmi	r3, #43	@ 0x2b
 80085f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f6:	f89a 3000 	ldrb.w	r3, [sl]
 80085fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fc:	d015      	beq.n	800862a <_svfiprintf_r+0xfa>
 80085fe:	9a07      	ldr	r2, [sp, #28]
 8008600:	4654      	mov	r4, sl
 8008602:	2000      	movs	r0, #0
 8008604:	f04f 0c0a 	mov.w	ip, #10
 8008608:	4621      	mov	r1, r4
 800860a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800860e:	3b30      	subs	r3, #48	@ 0x30
 8008610:	2b09      	cmp	r3, #9
 8008612:	d94b      	bls.n	80086ac <_svfiprintf_r+0x17c>
 8008614:	b1b0      	cbz	r0, 8008644 <_svfiprintf_r+0x114>
 8008616:	9207      	str	r2, [sp, #28]
 8008618:	e014      	b.n	8008644 <_svfiprintf_r+0x114>
 800861a:	eba0 0308 	sub.w	r3, r0, r8
 800861e:	fa09 f303 	lsl.w	r3, r9, r3
 8008622:	4313      	orrs	r3, r2
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	46a2      	mov	sl, r4
 8008628:	e7d2      	b.n	80085d0 <_svfiprintf_r+0xa0>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	9103      	str	r1, [sp, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	bfbb      	ittet	lt
 8008636:	425b      	neglt	r3, r3
 8008638:	f042 0202 	orrlt.w	r2, r2, #2
 800863c:	9307      	strge	r3, [sp, #28]
 800863e:	9307      	strlt	r3, [sp, #28]
 8008640:	bfb8      	it	lt
 8008642:	9204      	strlt	r2, [sp, #16]
 8008644:	7823      	ldrb	r3, [r4, #0]
 8008646:	2b2e      	cmp	r3, #46	@ 0x2e
 8008648:	d10a      	bne.n	8008660 <_svfiprintf_r+0x130>
 800864a:	7863      	ldrb	r3, [r4, #1]
 800864c:	2b2a      	cmp	r3, #42	@ 0x2a
 800864e:	d132      	bne.n	80086b6 <_svfiprintf_r+0x186>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	9203      	str	r2, [sp, #12]
 8008658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800865c:	3402      	adds	r4, #2
 800865e:	9305      	str	r3, [sp, #20]
 8008660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008724 <_svfiprintf_r+0x1f4>
 8008664:	7821      	ldrb	r1, [r4, #0]
 8008666:	2203      	movs	r2, #3
 8008668:	4650      	mov	r0, sl
 800866a:	f7f7 fde1 	bl	8000230 <memchr>
 800866e:	b138      	cbz	r0, 8008680 <_svfiprintf_r+0x150>
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	eba0 000a 	sub.w	r0, r0, sl
 8008676:	2240      	movs	r2, #64	@ 0x40
 8008678:	4082      	lsls	r2, r0
 800867a:	4313      	orrs	r3, r2
 800867c:	3401      	adds	r4, #1
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008684:	4824      	ldr	r0, [pc, #144]	@ (8008718 <_svfiprintf_r+0x1e8>)
 8008686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800868a:	2206      	movs	r2, #6
 800868c:	f7f7 fdd0 	bl	8000230 <memchr>
 8008690:	2800      	cmp	r0, #0
 8008692:	d036      	beq.n	8008702 <_svfiprintf_r+0x1d2>
 8008694:	4b21      	ldr	r3, [pc, #132]	@ (800871c <_svfiprintf_r+0x1ec>)
 8008696:	bb1b      	cbnz	r3, 80086e0 <_svfiprintf_r+0x1b0>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	3307      	adds	r3, #7
 800869c:	f023 0307 	bic.w	r3, r3, #7
 80086a0:	3308      	adds	r3, #8
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a6:	4433      	add	r3, r6
 80086a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086aa:	e76a      	b.n	8008582 <_svfiprintf_r+0x52>
 80086ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b0:	460c      	mov	r4, r1
 80086b2:	2001      	movs	r0, #1
 80086b4:	e7a8      	b.n	8008608 <_svfiprintf_r+0xd8>
 80086b6:	2300      	movs	r3, #0
 80086b8:	3401      	adds	r4, #1
 80086ba:	9305      	str	r3, [sp, #20]
 80086bc:	4619      	mov	r1, r3
 80086be:	f04f 0c0a 	mov.w	ip, #10
 80086c2:	4620      	mov	r0, r4
 80086c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c8:	3a30      	subs	r2, #48	@ 0x30
 80086ca:	2a09      	cmp	r2, #9
 80086cc:	d903      	bls.n	80086d6 <_svfiprintf_r+0x1a6>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0c6      	beq.n	8008660 <_svfiprintf_r+0x130>
 80086d2:	9105      	str	r1, [sp, #20]
 80086d4:	e7c4      	b.n	8008660 <_svfiprintf_r+0x130>
 80086d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80086da:	4604      	mov	r4, r0
 80086dc:	2301      	movs	r3, #1
 80086de:	e7f0      	b.n	80086c2 <_svfiprintf_r+0x192>
 80086e0:	ab03      	add	r3, sp, #12
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	462a      	mov	r2, r5
 80086e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008720 <_svfiprintf_r+0x1f0>)
 80086e8:	a904      	add	r1, sp, #16
 80086ea:	4638      	mov	r0, r7
 80086ec:	f7fd ff10 	bl	8006510 <_printf_float>
 80086f0:	1c42      	adds	r2, r0, #1
 80086f2:	4606      	mov	r6, r0
 80086f4:	d1d6      	bne.n	80086a4 <_svfiprintf_r+0x174>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	065b      	lsls	r3, r3, #25
 80086fa:	f53f af2d 	bmi.w	8008558 <_svfiprintf_r+0x28>
 80086fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008700:	e72c      	b.n	800855c <_svfiprintf_r+0x2c>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b05      	ldr	r3, [pc, #20]	@ (8008720 <_svfiprintf_r+0x1f0>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4638      	mov	r0, r7
 800870e:	f7fe f997 	bl	8006a40 <_printf_i>
 8008712:	e7ed      	b.n	80086f0 <_svfiprintf_r+0x1c0>
 8008714:	08009338 	.word	0x08009338
 8008718:	08009342 	.word	0x08009342
 800871c:	08006511 	.word	0x08006511
 8008720:	08008479 	.word	0x08008479
 8008724:	0800933e 	.word	0x0800933e

08008728 <__sflush_r>:
 8008728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	0716      	lsls	r6, r2, #28
 8008732:	4605      	mov	r5, r0
 8008734:	460c      	mov	r4, r1
 8008736:	d454      	bmi.n	80087e2 <__sflush_r+0xba>
 8008738:	684b      	ldr	r3, [r1, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc02      	bgt.n	8008744 <__sflush_r+0x1c>
 800873e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	dd48      	ble.n	80087d6 <__sflush_r+0xae>
 8008744:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008746:	2e00      	cmp	r6, #0
 8008748:	d045      	beq.n	80087d6 <__sflush_r+0xae>
 800874a:	2300      	movs	r3, #0
 800874c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008750:	682f      	ldr	r7, [r5, #0]
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	d030      	beq.n	80087ba <__sflush_r+0x92>
 8008758:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	0759      	lsls	r1, r3, #29
 800875e:	d505      	bpl.n	800876c <__sflush_r+0x44>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008766:	b10b      	cbz	r3, 800876c <__sflush_r+0x44>
 8008768:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800876a:	1ad2      	subs	r2, r2, r3
 800876c:	2300      	movs	r3, #0
 800876e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008770:	6a21      	ldr	r1, [r4, #32]
 8008772:	4628      	mov	r0, r5
 8008774:	47b0      	blx	r6
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	d106      	bne.n	800878a <__sflush_r+0x62>
 800877c:	6829      	ldr	r1, [r5, #0]
 800877e:	291d      	cmp	r1, #29
 8008780:	d82b      	bhi.n	80087da <__sflush_r+0xb2>
 8008782:	4a2a      	ldr	r2, [pc, #168]	@ (800882c <__sflush_r+0x104>)
 8008784:	410a      	asrs	r2, r1
 8008786:	07d6      	lsls	r6, r2, #31
 8008788:	d427      	bmi.n	80087da <__sflush_r+0xb2>
 800878a:	2200      	movs	r2, #0
 800878c:	6062      	str	r2, [r4, #4]
 800878e:	04d9      	lsls	r1, r3, #19
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	6022      	str	r2, [r4, #0]
 8008794:	d504      	bpl.n	80087a0 <__sflush_r+0x78>
 8008796:	1c42      	adds	r2, r0, #1
 8008798:	d101      	bne.n	800879e <__sflush_r+0x76>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	b903      	cbnz	r3, 80087a0 <__sflush_r+0x78>
 800879e:	6560      	str	r0, [r4, #84]	@ 0x54
 80087a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087a2:	602f      	str	r7, [r5, #0]
 80087a4:	b1b9      	cbz	r1, 80087d6 <__sflush_r+0xae>
 80087a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087aa:	4299      	cmp	r1, r3
 80087ac:	d002      	beq.n	80087b4 <__sflush_r+0x8c>
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7ff fa96 	bl	8007ce0 <_free_r>
 80087b4:	2300      	movs	r3, #0
 80087b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80087b8:	e00d      	b.n	80087d6 <__sflush_r+0xae>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4628      	mov	r0, r5
 80087be:	47b0      	blx	r6
 80087c0:	4602      	mov	r2, r0
 80087c2:	1c50      	adds	r0, r2, #1
 80087c4:	d1c9      	bne.n	800875a <__sflush_r+0x32>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0c6      	beq.n	800875a <__sflush_r+0x32>
 80087cc:	2b1d      	cmp	r3, #29
 80087ce:	d001      	beq.n	80087d4 <__sflush_r+0xac>
 80087d0:	2b16      	cmp	r3, #22
 80087d2:	d11e      	bne.n	8008812 <__sflush_r+0xea>
 80087d4:	602f      	str	r7, [r5, #0]
 80087d6:	2000      	movs	r0, #0
 80087d8:	e022      	b.n	8008820 <__sflush_r+0xf8>
 80087da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087de:	b21b      	sxth	r3, r3
 80087e0:	e01b      	b.n	800881a <__sflush_r+0xf2>
 80087e2:	690f      	ldr	r7, [r1, #16]
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	d0f6      	beq.n	80087d6 <__sflush_r+0xae>
 80087e8:	0793      	lsls	r3, r2, #30
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	bf08      	it	eq
 80087ee:	694b      	ldreq	r3, [r1, #20]
 80087f0:	600f      	str	r7, [r1, #0]
 80087f2:	bf18      	it	ne
 80087f4:	2300      	movne	r3, #0
 80087f6:	eba6 0807 	sub.w	r8, r6, r7
 80087fa:	608b      	str	r3, [r1, #8]
 80087fc:	f1b8 0f00 	cmp.w	r8, #0
 8008800:	dde9      	ble.n	80087d6 <__sflush_r+0xae>
 8008802:	6a21      	ldr	r1, [r4, #32]
 8008804:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008806:	4643      	mov	r3, r8
 8008808:	463a      	mov	r2, r7
 800880a:	4628      	mov	r0, r5
 800880c:	47b0      	blx	r6
 800880e:	2800      	cmp	r0, #0
 8008810:	dc08      	bgt.n	8008824 <__sflush_r+0xfc>
 8008812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	4407      	add	r7, r0
 8008826:	eba8 0800 	sub.w	r8, r8, r0
 800882a:	e7e7      	b.n	80087fc <__sflush_r+0xd4>
 800882c:	dfbffffe 	.word	0xdfbffffe

08008830 <_fflush_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	690b      	ldr	r3, [r1, #16]
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b913      	cbnz	r3, 8008840 <_fflush_r+0x10>
 800883a:	2500      	movs	r5, #0
 800883c:	4628      	mov	r0, r5
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	b118      	cbz	r0, 800884a <_fflush_r+0x1a>
 8008842:	6a03      	ldr	r3, [r0, #32]
 8008844:	b90b      	cbnz	r3, 800884a <_fflush_r+0x1a>
 8008846:	f7fe faa7 	bl	8006d98 <__sinit>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f3      	beq.n	800883a <_fflush_r+0xa>
 8008852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008854:	07d0      	lsls	r0, r2, #31
 8008856:	d404      	bmi.n	8008862 <_fflush_r+0x32>
 8008858:	0599      	lsls	r1, r3, #22
 800885a:	d402      	bmi.n	8008862 <_fflush_r+0x32>
 800885c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885e:	f7fe fbe2 	bl	8007026 <__retarget_lock_acquire_recursive>
 8008862:	4628      	mov	r0, r5
 8008864:	4621      	mov	r1, r4
 8008866:	f7ff ff5f 	bl	8008728 <__sflush_r>
 800886a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800886c:	07da      	lsls	r2, r3, #31
 800886e:	4605      	mov	r5, r0
 8008870:	d4e4      	bmi.n	800883c <_fflush_r+0xc>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4e1      	bmi.n	800883c <_fflush_r+0xc>
 8008878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800887a:	f7fe fbd5 	bl	8007028 <__retarget_lock_release_recursive>
 800887e:	e7dd      	b.n	800883c <_fflush_r+0xc>

08008880 <memmove>:
 8008880:	4288      	cmp	r0, r1
 8008882:	b510      	push	{r4, lr}
 8008884:	eb01 0402 	add.w	r4, r1, r2
 8008888:	d902      	bls.n	8008890 <memmove+0x10>
 800888a:	4284      	cmp	r4, r0
 800888c:	4623      	mov	r3, r4
 800888e:	d807      	bhi.n	80088a0 <memmove+0x20>
 8008890:	1e43      	subs	r3, r0, #1
 8008892:	42a1      	cmp	r1, r4
 8008894:	d008      	beq.n	80088a8 <memmove+0x28>
 8008896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800889a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800889e:	e7f8      	b.n	8008892 <memmove+0x12>
 80088a0:	4402      	add	r2, r0
 80088a2:	4601      	mov	r1, r0
 80088a4:	428a      	cmp	r2, r1
 80088a6:	d100      	bne.n	80088aa <memmove+0x2a>
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088b2:	e7f7      	b.n	80088a4 <memmove+0x24>

080088b4 <__assert_func>:
 80088b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088b6:	4614      	mov	r4, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	4b09      	ldr	r3, [pc, #36]	@ (80088e0 <__assert_func+0x2c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4605      	mov	r5, r0
 80088c0:	68d8      	ldr	r0, [r3, #12]
 80088c2:	b954      	cbnz	r4, 80088da <__assert_func+0x26>
 80088c4:	4b07      	ldr	r3, [pc, #28]	@ (80088e4 <__assert_func+0x30>)
 80088c6:	461c      	mov	r4, r3
 80088c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088cc:	9100      	str	r1, [sp, #0]
 80088ce:	462b      	mov	r3, r5
 80088d0:	4905      	ldr	r1, [pc, #20]	@ (80088e8 <__assert_func+0x34>)
 80088d2:	f000 f86f 	bl	80089b4 <fiprintf>
 80088d6:	f000 f87f 	bl	80089d8 <abort>
 80088da:	4b04      	ldr	r3, [pc, #16]	@ (80088ec <__assert_func+0x38>)
 80088dc:	e7f4      	b.n	80088c8 <__assert_func+0x14>
 80088de:	bf00      	nop
 80088e0:	200002b4 	.word	0x200002b4
 80088e4:	0800938e 	.word	0x0800938e
 80088e8:	08009360 	.word	0x08009360
 80088ec:	08009353 	.word	0x08009353

080088f0 <_calloc_r>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	fba1 5402 	umull	r5, r4, r1, r2
 80088f6:	b93c      	cbnz	r4, 8008908 <_calloc_r+0x18>
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7fd fc65 	bl	80061c8 <_malloc_r>
 80088fe:	4606      	mov	r6, r0
 8008900:	b928      	cbnz	r0, 800890e <_calloc_r+0x1e>
 8008902:	2600      	movs	r6, #0
 8008904:	4630      	mov	r0, r6
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	220c      	movs	r2, #12
 800890a:	6002      	str	r2, [r0, #0]
 800890c:	e7f9      	b.n	8008902 <_calloc_r+0x12>
 800890e:	462a      	mov	r2, r5
 8008910:	4621      	mov	r1, r4
 8008912:	f7fe fada 	bl	8006eca <memset>
 8008916:	e7f5      	b.n	8008904 <_calloc_r+0x14>

08008918 <__ascii_mbtowc>:
 8008918:	b082      	sub	sp, #8
 800891a:	b901      	cbnz	r1, 800891e <__ascii_mbtowc+0x6>
 800891c:	a901      	add	r1, sp, #4
 800891e:	b142      	cbz	r2, 8008932 <__ascii_mbtowc+0x1a>
 8008920:	b14b      	cbz	r3, 8008936 <__ascii_mbtowc+0x1e>
 8008922:	7813      	ldrb	r3, [r2, #0]
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	1e10      	subs	r0, r2, #0
 800892a:	bf18      	it	ne
 800892c:	2001      	movne	r0, #1
 800892e:	b002      	add	sp, #8
 8008930:	4770      	bx	lr
 8008932:	4610      	mov	r0, r2
 8008934:	e7fb      	b.n	800892e <__ascii_mbtowc+0x16>
 8008936:	f06f 0001 	mvn.w	r0, #1
 800893a:	e7f8      	b.n	800892e <__ascii_mbtowc+0x16>

0800893c <_realloc_r>:
 800893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008940:	4680      	mov	r8, r0
 8008942:	4615      	mov	r5, r2
 8008944:	460c      	mov	r4, r1
 8008946:	b921      	cbnz	r1, 8008952 <_realloc_r+0x16>
 8008948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800894c:	4611      	mov	r1, r2
 800894e:	f7fd bc3b 	b.w	80061c8 <_malloc_r>
 8008952:	b92a      	cbnz	r2, 8008960 <_realloc_r+0x24>
 8008954:	f7ff f9c4 	bl	8007ce0 <_free_r>
 8008958:	2400      	movs	r4, #0
 800895a:	4620      	mov	r0, r4
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	f000 f841 	bl	80089e6 <_malloc_usable_size_r>
 8008964:	4285      	cmp	r5, r0
 8008966:	4606      	mov	r6, r0
 8008968:	d802      	bhi.n	8008970 <_realloc_r+0x34>
 800896a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800896e:	d8f4      	bhi.n	800895a <_realloc_r+0x1e>
 8008970:	4629      	mov	r1, r5
 8008972:	4640      	mov	r0, r8
 8008974:	f7fd fc28 	bl	80061c8 <_malloc_r>
 8008978:	4607      	mov	r7, r0
 800897a:	2800      	cmp	r0, #0
 800897c:	d0ec      	beq.n	8008958 <_realloc_r+0x1c>
 800897e:	42b5      	cmp	r5, r6
 8008980:	462a      	mov	r2, r5
 8008982:	4621      	mov	r1, r4
 8008984:	bf28      	it	cs
 8008986:	4632      	movcs	r2, r6
 8008988:	f7fe fb4f 	bl	800702a <memcpy>
 800898c:	4621      	mov	r1, r4
 800898e:	4640      	mov	r0, r8
 8008990:	f7ff f9a6 	bl	8007ce0 <_free_r>
 8008994:	463c      	mov	r4, r7
 8008996:	e7e0      	b.n	800895a <_realloc_r+0x1e>

08008998 <__ascii_wctomb>:
 8008998:	4603      	mov	r3, r0
 800899a:	4608      	mov	r0, r1
 800899c:	b141      	cbz	r1, 80089b0 <__ascii_wctomb+0x18>
 800899e:	2aff      	cmp	r2, #255	@ 0xff
 80089a0:	d904      	bls.n	80089ac <__ascii_wctomb+0x14>
 80089a2:	228a      	movs	r2, #138	@ 0x8a
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	4770      	bx	lr
 80089ac:	700a      	strb	r2, [r1, #0]
 80089ae:	2001      	movs	r0, #1
 80089b0:	4770      	bx	lr
	...

080089b4 <fiprintf>:
 80089b4:	b40e      	push	{r1, r2, r3}
 80089b6:	b503      	push	{r0, r1, lr}
 80089b8:	4601      	mov	r1, r0
 80089ba:	ab03      	add	r3, sp, #12
 80089bc:	4805      	ldr	r0, [pc, #20]	@ (80089d4 <fiprintf+0x20>)
 80089be:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c2:	6800      	ldr	r0, [r0, #0]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	f000 f83f 	bl	8008a48 <_vfiprintf_r>
 80089ca:	b002      	add	sp, #8
 80089cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d0:	b003      	add	sp, #12
 80089d2:	4770      	bx	lr
 80089d4:	200002b4 	.word	0x200002b4

080089d8 <abort>:
 80089d8:	b508      	push	{r3, lr}
 80089da:	2006      	movs	r0, #6
 80089dc:	f000 fa08 	bl	8008df0 <raise>
 80089e0:	2001      	movs	r0, #1
 80089e2:	f7f9 fd8e 	bl	8002502 <_exit>

080089e6 <_malloc_usable_size_r>:
 80089e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ea:	1f18      	subs	r0, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfbc      	itt	lt
 80089f0:	580b      	ldrlt	r3, [r1, r0]
 80089f2:	18c0      	addlt	r0, r0, r3
 80089f4:	4770      	bx	lr

080089f6 <__sfputc_r>:
 80089f6:	6893      	ldr	r3, [r2, #8]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	b410      	push	{r4}
 80089fe:	6093      	str	r3, [r2, #8]
 8008a00:	da08      	bge.n	8008a14 <__sfputc_r+0x1e>
 8008a02:	6994      	ldr	r4, [r2, #24]
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	db01      	blt.n	8008a0c <__sfputc_r+0x16>
 8008a08:	290a      	cmp	r1, #10
 8008a0a:	d103      	bne.n	8008a14 <__sfputc_r+0x1e>
 8008a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a10:	f000 b932 	b.w	8008c78 <__swbuf_r>
 8008a14:	6813      	ldr	r3, [r2, #0]
 8008a16:	1c58      	adds	r0, r3, #1
 8008a18:	6010      	str	r0, [r2, #0]
 8008a1a:	7019      	strb	r1, [r3, #0]
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <__sfputs_r>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	18d5      	adds	r5, r2, r3
 8008a2e:	42ac      	cmp	r4, r5
 8008a30:	d101      	bne.n	8008a36 <__sfputs_r+0x12>
 8008a32:	2000      	movs	r0, #0
 8008a34:	e007      	b.n	8008a46 <__sfputs_r+0x22>
 8008a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3a:	463a      	mov	r2, r7
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7ff ffda 	bl	80089f6 <__sfputc_r>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d1f3      	bne.n	8008a2e <__sfputs_r+0xa>
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a48 <_vfiprintf_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	b09d      	sub	sp, #116	@ 0x74
 8008a50:	4614      	mov	r4, r2
 8008a52:	4698      	mov	r8, r3
 8008a54:	4606      	mov	r6, r0
 8008a56:	b118      	cbz	r0, 8008a60 <_vfiprintf_r+0x18>
 8008a58:	6a03      	ldr	r3, [r0, #32]
 8008a5a:	b90b      	cbnz	r3, 8008a60 <_vfiprintf_r+0x18>
 8008a5c:	f7fe f99c 	bl	8006d98 <__sinit>
 8008a60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a62:	07d9      	lsls	r1, r3, #31
 8008a64:	d405      	bmi.n	8008a72 <_vfiprintf_r+0x2a>
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	059a      	lsls	r2, r3, #22
 8008a6a:	d402      	bmi.n	8008a72 <_vfiprintf_r+0x2a>
 8008a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a6e:	f7fe fada 	bl	8007026 <__retarget_lock_acquire_recursive>
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	071b      	lsls	r3, r3, #28
 8008a76:	d501      	bpl.n	8008a7c <_vfiprintf_r+0x34>
 8008a78:	692b      	ldr	r3, [r5, #16]
 8008a7a:	b99b      	cbnz	r3, 8008aa4 <_vfiprintf_r+0x5c>
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f000 f938 	bl	8008cf4 <__swsetup_r>
 8008a84:	b170      	cbz	r0, 8008aa4 <_vfiprintf_r+0x5c>
 8008a86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a88:	07dc      	lsls	r4, r3, #31
 8008a8a:	d504      	bpl.n	8008a96 <_vfiprintf_r+0x4e>
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	b01d      	add	sp, #116	@ 0x74
 8008a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	0598      	lsls	r0, r3, #22
 8008a9a:	d4f7      	bmi.n	8008a8c <_vfiprintf_r+0x44>
 8008a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a9e:	f7fe fac3 	bl	8007028 <__retarget_lock_release_recursive>
 8008aa2:	e7f3      	b.n	8008a8c <_vfiprintf_r+0x44>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab2:	2330      	movs	r3, #48	@ 0x30
 8008ab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c64 <_vfiprintf_r+0x21c>
 8008ab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008abc:	f04f 0901 	mov.w	r9, #1
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	469a      	mov	sl, r3
 8008ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac8:	b10a      	cbz	r2, 8008ace <_vfiprintf_r+0x86>
 8008aca:	2a25      	cmp	r2, #37	@ 0x25
 8008acc:	d1f9      	bne.n	8008ac2 <_vfiprintf_r+0x7a>
 8008ace:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad2:	d00b      	beq.n	8008aec <_vfiprintf_r+0xa4>
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff ffa2 	bl	8008a24 <__sfputs_r>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f000 80a7 	beq.w	8008c34 <_vfiprintf_r+0x1ec>
 8008ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae8:	445a      	add	r2, fp
 8008aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aec:	f89a 3000 	ldrb.w	r3, [sl]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 809f 	beq.w	8008c34 <_vfiprintf_r+0x1ec>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f04f 32ff 	mov.w	r2, #4294967295
 8008afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b00:	f10a 0a01 	add.w	sl, sl, #1
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	9307      	str	r3, [sp, #28]
 8008b08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b0e:	4654      	mov	r4, sl
 8008b10:	2205      	movs	r2, #5
 8008b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b16:	4853      	ldr	r0, [pc, #332]	@ (8008c64 <_vfiprintf_r+0x21c>)
 8008b18:	f7f7 fb8a 	bl	8000230 <memchr>
 8008b1c:	9a04      	ldr	r2, [sp, #16]
 8008b1e:	b9d8      	cbnz	r0, 8008b58 <_vfiprintf_r+0x110>
 8008b20:	06d1      	lsls	r1, r2, #27
 8008b22:	bf44      	itt	mi
 8008b24:	2320      	movmi	r3, #32
 8008b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b2a:	0713      	lsls	r3, r2, #28
 8008b2c:	bf44      	itt	mi
 8008b2e:	232b      	movmi	r3, #43	@ 0x2b
 8008b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b34:	f89a 3000 	ldrb.w	r3, [sl]
 8008b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3a:	d015      	beq.n	8008b68 <_vfiprintf_r+0x120>
 8008b3c:	9a07      	ldr	r2, [sp, #28]
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2000      	movs	r0, #0
 8008b42:	f04f 0c0a 	mov.w	ip, #10
 8008b46:	4621      	mov	r1, r4
 8008b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4c:	3b30      	subs	r3, #48	@ 0x30
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d94b      	bls.n	8008bea <_vfiprintf_r+0x1a2>
 8008b52:	b1b0      	cbz	r0, 8008b82 <_vfiprintf_r+0x13a>
 8008b54:	9207      	str	r2, [sp, #28]
 8008b56:	e014      	b.n	8008b82 <_vfiprintf_r+0x13a>
 8008b58:	eba0 0308 	sub.w	r3, r0, r8
 8008b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	46a2      	mov	sl, r4
 8008b66:	e7d2      	b.n	8008b0e <_vfiprintf_r+0xc6>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	1d19      	adds	r1, r3, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	9103      	str	r1, [sp, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bfbb      	ittet	lt
 8008b74:	425b      	neglt	r3, r3
 8008b76:	f042 0202 	orrlt.w	r2, r2, #2
 8008b7a:	9307      	strge	r3, [sp, #28]
 8008b7c:	9307      	strlt	r3, [sp, #28]
 8008b7e:	bfb8      	it	lt
 8008b80:	9204      	strlt	r2, [sp, #16]
 8008b82:	7823      	ldrb	r3, [r4, #0]
 8008b84:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b86:	d10a      	bne.n	8008b9e <_vfiprintf_r+0x156>
 8008b88:	7863      	ldrb	r3, [r4, #1]
 8008b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b8c:	d132      	bne.n	8008bf4 <_vfiprintf_r+0x1ac>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	1d1a      	adds	r2, r3, #4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	9203      	str	r2, [sp, #12]
 8008b96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b9a:	3402      	adds	r4, #2
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c74 <_vfiprintf_r+0x22c>
 8008ba2:	7821      	ldrb	r1, [r4, #0]
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	f7f7 fb42 	bl	8000230 <memchr>
 8008bac:	b138      	cbz	r0, 8008bbe <_vfiprintf_r+0x176>
 8008bae:	9b04      	ldr	r3, [sp, #16]
 8008bb0:	eba0 000a 	sub.w	r0, r0, sl
 8008bb4:	2240      	movs	r2, #64	@ 0x40
 8008bb6:	4082      	lsls	r2, r0
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	3401      	adds	r4, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc2:	4829      	ldr	r0, [pc, #164]	@ (8008c68 <_vfiprintf_r+0x220>)
 8008bc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bc8:	2206      	movs	r2, #6
 8008bca:	f7f7 fb31 	bl	8000230 <memchr>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d03f      	beq.n	8008c52 <_vfiprintf_r+0x20a>
 8008bd2:	4b26      	ldr	r3, [pc, #152]	@ (8008c6c <_vfiprintf_r+0x224>)
 8008bd4:	bb1b      	cbnz	r3, 8008c1e <_vfiprintf_r+0x1d6>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	3307      	adds	r3, #7
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	3308      	adds	r3, #8
 8008be0:	9303      	str	r3, [sp, #12]
 8008be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be4:	443b      	add	r3, r7
 8008be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be8:	e76a      	b.n	8008ac0 <_vfiprintf_r+0x78>
 8008bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bee:	460c      	mov	r4, r1
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	e7a8      	b.n	8008b46 <_vfiprintf_r+0xfe>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f04f 0c0a 	mov.w	ip, #10
 8008c00:	4620      	mov	r0, r4
 8008c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c06:	3a30      	subs	r2, #48	@ 0x30
 8008c08:	2a09      	cmp	r2, #9
 8008c0a:	d903      	bls.n	8008c14 <_vfiprintf_r+0x1cc>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0c6      	beq.n	8008b9e <_vfiprintf_r+0x156>
 8008c10:	9105      	str	r1, [sp, #20]
 8008c12:	e7c4      	b.n	8008b9e <_vfiprintf_r+0x156>
 8008c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c18:	4604      	mov	r4, r0
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e7f0      	b.n	8008c00 <_vfiprintf_r+0x1b8>
 8008c1e:	ab03      	add	r3, sp, #12
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	462a      	mov	r2, r5
 8008c24:	4b12      	ldr	r3, [pc, #72]	@ (8008c70 <_vfiprintf_r+0x228>)
 8008c26:	a904      	add	r1, sp, #16
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7fd fc71 	bl	8006510 <_printf_float>
 8008c2e:	4607      	mov	r7, r0
 8008c30:	1c78      	adds	r0, r7, #1
 8008c32:	d1d6      	bne.n	8008be2 <_vfiprintf_r+0x19a>
 8008c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c36:	07d9      	lsls	r1, r3, #31
 8008c38:	d405      	bmi.n	8008c46 <_vfiprintf_r+0x1fe>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	059a      	lsls	r2, r3, #22
 8008c3e:	d402      	bmi.n	8008c46 <_vfiprintf_r+0x1fe>
 8008c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c42:	f7fe f9f1 	bl	8007028 <__retarget_lock_release_recursive>
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	065b      	lsls	r3, r3, #25
 8008c4a:	f53f af1f 	bmi.w	8008a8c <_vfiprintf_r+0x44>
 8008c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c50:	e71e      	b.n	8008a90 <_vfiprintf_r+0x48>
 8008c52:	ab03      	add	r3, sp, #12
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	462a      	mov	r2, r5
 8008c58:	4b05      	ldr	r3, [pc, #20]	@ (8008c70 <_vfiprintf_r+0x228>)
 8008c5a:	a904      	add	r1, sp, #16
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7fd feef 	bl	8006a40 <_printf_i>
 8008c62:	e7e4      	b.n	8008c2e <_vfiprintf_r+0x1e6>
 8008c64:	08009338 	.word	0x08009338
 8008c68:	08009342 	.word	0x08009342
 8008c6c:	08006511 	.word	0x08006511
 8008c70:	08008a25 	.word	0x08008a25
 8008c74:	0800933e 	.word	0x0800933e

08008c78 <__swbuf_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b118      	cbz	r0, 8008c8a <__swbuf_r+0x12>
 8008c82:	6a03      	ldr	r3, [r0, #32]
 8008c84:	b90b      	cbnz	r3, 8008c8a <__swbuf_r+0x12>
 8008c86:	f7fe f887 	bl	8006d98 <__sinit>
 8008c8a:	69a3      	ldr	r3, [r4, #24]
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	071a      	lsls	r2, r3, #28
 8008c92:	d501      	bpl.n	8008c98 <__swbuf_r+0x20>
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	b943      	cbnz	r3, 8008caa <__swbuf_r+0x32>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 f82a 	bl	8008cf4 <__swsetup_r>
 8008ca0:	b118      	cbz	r0, 8008caa <__swbuf_r+0x32>
 8008ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	1a98      	subs	r0, r3, r2
 8008cb0:	6963      	ldr	r3, [r4, #20]
 8008cb2:	b2f6      	uxtb	r6, r6
 8008cb4:	4283      	cmp	r3, r0
 8008cb6:	4637      	mov	r7, r6
 8008cb8:	dc05      	bgt.n	8008cc6 <__swbuf_r+0x4e>
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f7ff fdb7 	bl	8008830 <_fflush_r>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1ed      	bne.n	8008ca2 <__swbuf_r+0x2a>
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	60a3      	str	r3, [r4, #8]
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	6022      	str	r2, [r4, #0]
 8008cd2:	701e      	strb	r6, [r3, #0]
 8008cd4:	6962      	ldr	r2, [r4, #20]
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d004      	beq.n	8008ce6 <__swbuf_r+0x6e>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	07db      	lsls	r3, r3, #31
 8008ce0:	d5e1      	bpl.n	8008ca6 <__swbuf_r+0x2e>
 8008ce2:	2e0a      	cmp	r6, #10
 8008ce4:	d1df      	bne.n	8008ca6 <__swbuf_r+0x2e>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f7ff fda1 	bl	8008830 <_fflush_r>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d0d9      	beq.n	8008ca6 <__swbuf_r+0x2e>
 8008cf2:	e7d6      	b.n	8008ca2 <__swbuf_r+0x2a>

08008cf4 <__swsetup_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4b29      	ldr	r3, [pc, #164]	@ (8008d9c <__swsetup_r+0xa8>)
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	b118      	cbz	r0, 8008d08 <__swsetup_r+0x14>
 8008d00:	6a03      	ldr	r3, [r0, #32]
 8008d02:	b90b      	cbnz	r3, 8008d08 <__swsetup_r+0x14>
 8008d04:	f7fe f848 	bl	8006d98 <__sinit>
 8008d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0c:	0719      	lsls	r1, r3, #28
 8008d0e:	d422      	bmi.n	8008d56 <__swsetup_r+0x62>
 8008d10:	06da      	lsls	r2, r3, #27
 8008d12:	d407      	bmi.n	8008d24 <__swsetup_r+0x30>
 8008d14:	2209      	movs	r2, #9
 8008d16:	602a      	str	r2, [r5, #0]
 8008d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d22:	e033      	b.n	8008d8c <__swsetup_r+0x98>
 8008d24:	0758      	lsls	r0, r3, #29
 8008d26:	d512      	bpl.n	8008d4e <__swsetup_r+0x5a>
 8008d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d2a:	b141      	cbz	r1, 8008d3e <__swsetup_r+0x4a>
 8008d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d002      	beq.n	8008d3a <__swsetup_r+0x46>
 8008d34:	4628      	mov	r0, r5
 8008d36:	f7fe ffd3 	bl	8007ce0 <_free_r>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	2300      	movs	r3, #0
 8008d48:	6063      	str	r3, [r4, #4]
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	f043 0308 	orr.w	r3, r3, #8
 8008d54:	81a3      	strh	r3, [r4, #12]
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	b94b      	cbnz	r3, 8008d6e <__swsetup_r+0x7a>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d64:	d003      	beq.n	8008d6e <__swsetup_r+0x7a>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f000 f883 	bl	8008e74 <__smakebuf_r>
 8008d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d72:	f013 0201 	ands.w	r2, r3, #1
 8008d76:	d00a      	beq.n	8008d8e <__swsetup_r+0x9a>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	60a2      	str	r2, [r4, #8]
 8008d7c:	6962      	ldr	r2, [r4, #20]
 8008d7e:	4252      	negs	r2, r2
 8008d80:	61a2      	str	r2, [r4, #24]
 8008d82:	6922      	ldr	r2, [r4, #16]
 8008d84:	b942      	cbnz	r2, 8008d98 <__swsetup_r+0xa4>
 8008d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d8a:	d1c5      	bne.n	8008d18 <__swsetup_r+0x24>
 8008d8c:	bd38      	pop	{r3, r4, r5, pc}
 8008d8e:	0799      	lsls	r1, r3, #30
 8008d90:	bf58      	it	pl
 8008d92:	6962      	ldrpl	r2, [r4, #20]
 8008d94:	60a2      	str	r2, [r4, #8]
 8008d96:	e7f4      	b.n	8008d82 <__swsetup_r+0x8e>
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e7f7      	b.n	8008d8c <__swsetup_r+0x98>
 8008d9c:	200002b4 	.word	0x200002b4

08008da0 <_raise_r>:
 8008da0:	291f      	cmp	r1, #31
 8008da2:	b538      	push	{r3, r4, r5, lr}
 8008da4:	4605      	mov	r5, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	d904      	bls.n	8008db4 <_raise_r+0x14>
 8008daa:	2316      	movs	r3, #22
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008db6:	b112      	cbz	r2, 8008dbe <_raise_r+0x1e>
 8008db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dbc:	b94b      	cbnz	r3, 8008dd2 <_raise_r+0x32>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 f830 	bl	8008e24 <_getpid_r>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dce:	f000 b817 	b.w	8008e00 <_kill_r>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d00a      	beq.n	8008dec <_raise_r+0x4c>
 8008dd6:	1c59      	adds	r1, r3, #1
 8008dd8:	d103      	bne.n	8008de2 <_raise_r+0x42>
 8008dda:	2316      	movs	r3, #22
 8008ddc:	6003      	str	r3, [r0, #0]
 8008dde:	2001      	movs	r0, #1
 8008de0:	e7e7      	b.n	8008db2 <_raise_r+0x12>
 8008de2:	2100      	movs	r1, #0
 8008de4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008de8:	4620      	mov	r0, r4
 8008dea:	4798      	blx	r3
 8008dec:	2000      	movs	r0, #0
 8008dee:	e7e0      	b.n	8008db2 <_raise_r+0x12>

08008df0 <raise>:
 8008df0:	4b02      	ldr	r3, [pc, #8]	@ (8008dfc <raise+0xc>)
 8008df2:	4601      	mov	r1, r0
 8008df4:	6818      	ldr	r0, [r3, #0]
 8008df6:	f7ff bfd3 	b.w	8008da0 <_raise_r>
 8008dfa:	bf00      	nop
 8008dfc:	200002b4 	.word	0x200002b4

08008e00 <_kill_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d07      	ldr	r5, [pc, #28]	@ (8008e20 <_kill_r+0x20>)
 8008e04:	2300      	movs	r3, #0
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	f7f9 fb68 	bl	80024e2 <_kill>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d102      	bne.n	8008e1c <_kill_r+0x1c>
 8008e16:	682b      	ldr	r3, [r5, #0]
 8008e18:	b103      	cbz	r3, 8008e1c <_kill_r+0x1c>
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	bd38      	pop	{r3, r4, r5, pc}
 8008e1e:	bf00      	nop
 8008e20:	20000cd4 	.word	0x20000cd4

08008e24 <_getpid_r>:
 8008e24:	f7f9 bb55 	b.w	80024d2 <_getpid>

08008e28 <__swhatbuf_r>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e30:	2900      	cmp	r1, #0
 8008e32:	b096      	sub	sp, #88	@ 0x58
 8008e34:	4615      	mov	r5, r2
 8008e36:	461e      	mov	r6, r3
 8008e38:	da0d      	bge.n	8008e56 <__swhatbuf_r+0x2e>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e40:	f04f 0100 	mov.w	r1, #0
 8008e44:	bf14      	ite	ne
 8008e46:	2340      	movne	r3, #64	@ 0x40
 8008e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	6031      	str	r1, [r6, #0]
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	b016      	add	sp, #88	@ 0x58
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
 8008e56:	466a      	mov	r2, sp
 8008e58:	f000 f848 	bl	8008eec <_fstat_r>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	dbec      	blt.n	8008e3a <__swhatbuf_r+0x12>
 8008e60:	9901      	ldr	r1, [sp, #4]
 8008e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e6a:	4259      	negs	r1, r3
 8008e6c:	4159      	adcs	r1, r3
 8008e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e72:	e7eb      	b.n	8008e4c <__swhatbuf_r+0x24>

08008e74 <__smakebuf_r>:
 8008e74:	898b      	ldrh	r3, [r1, #12]
 8008e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e78:	079d      	lsls	r5, r3, #30
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	d507      	bpl.n	8008e90 <__smakebuf_r+0x1c>
 8008e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	6123      	str	r3, [r4, #16]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	6163      	str	r3, [r4, #20]
 8008e8c:	b003      	add	sp, #12
 8008e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e90:	ab01      	add	r3, sp, #4
 8008e92:	466a      	mov	r2, sp
 8008e94:	f7ff ffc8 	bl	8008e28 <__swhatbuf_r>
 8008e98:	9f00      	ldr	r7, [sp, #0]
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7fd f992 	bl	80061c8 <_malloc_r>
 8008ea4:	b948      	cbnz	r0, 8008eba <__smakebuf_r+0x46>
 8008ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eaa:	059a      	lsls	r2, r3, #22
 8008eac:	d4ee      	bmi.n	8008e8c <__smakebuf_r+0x18>
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	f043 0302 	orr.w	r3, r3, #2
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	e7e2      	b.n	8008e80 <__smakebuf_r+0xc>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	6020      	str	r0, [r4, #0]
 8008ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eca:	b15b      	cbz	r3, 8008ee4 <__smakebuf_r+0x70>
 8008ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f81d 	bl	8008f10 <_isatty_r>
 8008ed6:	b128      	cbz	r0, 8008ee4 <__smakebuf_r+0x70>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	81a3      	strh	r3, [r4, #12]
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	431d      	orrs	r5, r3
 8008ee8:	81a5      	strh	r5, [r4, #12]
 8008eea:	e7cf      	b.n	8008e8c <__smakebuf_r+0x18>

08008eec <_fstat_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d07      	ldr	r5, [pc, #28]	@ (8008f0c <_fstat_r+0x20>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	f7f9 fb52 	bl	80025a2 <_fstat>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d102      	bne.n	8008f08 <_fstat_r+0x1c>
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	b103      	cbz	r3, 8008f08 <_fstat_r+0x1c>
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000cd4 	.word	0x20000cd4

08008f10 <_isatty_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d06      	ldr	r5, [pc, #24]	@ (8008f2c <_isatty_r+0x1c>)
 8008f14:	2300      	movs	r3, #0
 8008f16:	4604      	mov	r4, r0
 8008f18:	4608      	mov	r0, r1
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	f7f9 fb51 	bl	80025c2 <_isatty>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_isatty_r+0x1a>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_isatty_r+0x1a>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	20000cd4 	.word	0x20000cd4

08008f30 <_init>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr

08008f3c <_fini>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr
