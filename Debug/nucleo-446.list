
nucleo-446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a520  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800a6f0  0800a6f0  0000b6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac58  0800ac58  0000c470  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac58  0800ac58  0000bc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac60  0800ac60  0000c470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac60  0800ac60  0000bc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac64  0800ac64  0000bc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800ac68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e2f4  20000470  0800b0d8  0000c470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e764  0800b0d8  0000c764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157d1  00000000  00000000  0000c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003001  00000000  00000000  00021c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00024c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dde  00000000  00000000  00025e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ea8  00000000  00000000  00026bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eb8  00000000  00000000  0004aaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6da0  00000000  00000000  0006195e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001386fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  00138744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000470 	.word	0x20000470
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6d8 	.word	0x0800a6d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000474 	.word	0x20000474
 800020c:	0800a6d8 	.word	0x0800a6d8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <ad717x_set_channel_status>:
 *			    	and False in case of Disable
 * @return Returns 0 for success or negative error code in case of failure.
*******************************************************************************/
int ad717x_set_channel_status(ad717x_dev *device, uint8_t channel_id,
			      bool channel_status)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *chn_register;
	int ret;

	if (!device)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <ad717x_set_channel_status+0x1a>
		return -EINVAL;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f10:	e031      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	/* Point to the Channel register */
	chn_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	3310      	adds	r3, #16
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fa40 	bl	80013a0 <AD717X_GetReg>
 8000f20:	60f8      	str	r0, [r7, #12]
	if (!chn_register)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <ad717x_set_channel_status+0x34>
		return -EINVAL;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f2a:	e024      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	if (channel_status)
 8000f2c:	78bb      	ldrb	r3, [r7, #2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <ad717x_set_channel_status+0x48>
		/* Assign the Channel enable bit and write to channel register */
		chn_register->value |= AD717X_CHMAP_REG_CH_EN;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	e005      	b.n	8000f4c <ad717x_set_channel_status+0x54>
	else
		chn_register->value &= ~(AD717X_CHMAP_REG_CH_EN);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id);
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fae3 	bl	8001520 <AD717X_WriteRegister>
 8000f5a:	60b8      	str	r0, [r7, #8]
	if (ret < 0)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da01      	bge.n	8000f66 <ad717x_set_channel_status+0x6e>
		return ret;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	e007      	b.n	8000f76 <ad717x_set_channel_status+0x7e>
	device->chan_map[channel_id].channel_enable = channel_status;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	330a      	adds	r3, #10
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	78ba      	ldrb	r2, [r7, #2]
 8000f72:	719a      	strb	r2, [r3, #6]

	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	ffffd929 	.word	0xffffd929

08000f84 <ad717x_set_adc_mode>:
 * @param device - AD717x Device Descriptor
 * @param adc_mode - ADC Mode to be configured
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_adc_mode(ad717x_dev *device, enum ad717x_mode adc_mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <ad717x_set_adc_mode+0x16>
		return -EINVAL;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000f98:	e026      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Retrieve the ADC Mode reigster */
	adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f9ff 	bl	80013a0 <AD717X_GetReg>
 8000fa2:	60f8      	str	r0, [r7, #12]
	if (!adc_mode_reg)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <ad717x_set_adc_mode+0x2a>
		return -EINVAL;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fac:	e01c      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Clear the Mode[6:4] bits in the ADC Mode Register */
	adc_mode_reg->value &= ~(AD717X_ADCMODE_REG_MODE_MSK);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	605a      	str	r2, [r3, #4]

	/* Set the required conversion mode, write to register */
	adc_mode_reg->value |= AD717X_ADCMODE_REG_MODE(adc_mode);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	605a      	str	r2, [r3, #4]
	device->mode = adc_mode;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 faa2 	bl	8001520 <AD717X_WriteRegister>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da01      	bge.n	8000fe6 <ad717x_set_adc_mode+0x62>
		return -EINVAL;
 8000fe2:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fe4:	e000      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>



	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffd929 	.word	0xffffd929

08000ff4 <ad717x_connect_analog_input>:
 * @param analog_input - Analog Inputs to the Channel
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_connect_analog_input(ad717x_dev *device, uint8_t channel_id,
				union ad717x_analog_inputs analog_input)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803a      	strh	r2, [r7, #0]
 8001000:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *channel_reg;

	if (!device)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <ad717x_connect_analog_input+0x18>
		return -EINVAL;
 8001008:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 800100a:	e079      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	/* Retrieve the channel register */
	channel_reg = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	3310      	adds	r3, #16
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f9c3 	bl	80013a0 <AD717X_GetReg>
 800101a:	60f8      	str	r0, [r7, #12]
	if (!channel_reg)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <ad717x_connect_analog_input+0x32>
		return -EINVAL;
 8001022:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001024:	e06c      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	switch ((uint8_t)device->active_device) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	2b04      	cmp	r3, #4
 800102c:	dc02      	bgt.n	8001034 <ad717x_connect_analog_input+0x40>
 800102e:	2b00      	cmp	r3, #0
 8001030:	da04      	bge.n	800103c <ad717x_connect_analog_input+0x48>
 8001032:	e062      	b.n	80010fa <ad717x_connect_analog_input+0x106>
 8001034:	3b05      	subs	r3, #5
 8001036:	2b06      	cmp	r3, #6
 8001038:	d85f      	bhi.n	80010fa <ad717x_connect_analog_input+0x106>
 800103a:	e024      	b.n	8001086 <ad717x_connect_analog_input+0x92>
	case ID_AD4112 :
	case ID_AD4114 :
	case ID_AD4115 :
	case ID_AD4116 :
		/* Clear and Set the required analog input pair to channel */
		channel_reg->value  &= ~AD717x_CHANNEL_INPUT_MASK;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	6053      	str	r3, [r2, #4]
		channel_reg->value |= AD4111_CHMAP_REG_INPUT(analog_input.analog_input_pairs);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001056:	431a      	orrs	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3310      	adds	r3, #16
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fa5b 	bl	8001520 <AD717X_WriteRegister>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da01      	bge.n	8001074 <ad717x_connect_analog_input+0x80>
			return -EINVAL;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001072:	e045      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001074:	78fb      	ldrb	r3, [r7, #3]
			analog_input.analog_input_pairs;
 8001076:	8839      	ldrh	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	330a      	adds	r3, #10
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	460a      	mov	r2, r1
 8001082:	811a      	strh	r2, [r3, #8]
		break;
 8001084:	e03b      	b.n	80010fe <ad717x_connect_analog_input+0x10a>
	case ID_AD7175_8:
	case ID_AD7176_2:
	case ID_AD7177_2:
	case ID_AD7172_2:
		/* Select the Positive Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINPOS_MSK;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]
		channel_reg->value |=  AD717X_CHMAP_REG_AINPOS(
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	783b      	ldrb	r3, [r7, #0]
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
					       analog_input.ainp.pos_analog_input);

		/* Select the Negative Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINNEG_MSK;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 021f 	bic.w	r2, r3, #31
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	605a      	str	r2, [r3, #4]
		channel_reg->value |= AD717X_CHMAP_REG_AINNEG(
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	431a      	orrs	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	605a      	str	r2, [r3, #4]
					      analog_input.ainp.neg_analog_input);
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	3310      	adds	r3, #16
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fa29 	bl	8001520 <AD717X_WriteRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da01      	bge.n	80010d8 <ad717x_connect_analog_input+0xe4>
			return -EINVAL;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010d6:	e013      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010d8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.pos_analog_input;
 80010da:	7839      	ldrb	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	330a      	adds	r3, #10
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	460a      	mov	r2, r1
 80010e6:	721a      	strb	r2, [r3, #8]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010e8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.neg_analog_input;
 80010ea:	7879      	ldrb	r1, [r7, #1]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	330a      	adds	r3, #10
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	725a      	strb	r2, [r3, #9]
		break;
 80010f8:	e001      	b.n	80010fe <ad717x_connect_analog_input+0x10a>

	default :
		return -EINVAL;
 80010fa:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010fc:	e000      	b.n	8001100 <ad717x_connect_analog_input+0x10c>
	}

	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	ffffd929 	.word	0xffffd929

0800110c <ad717x_assign_setup>:
 * @param channel_id - Channel ID (number)
 * @param setup - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_assign_setup(ad717x_dev *device, uint8_t channel_id, uint8_t setup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *p_register;

	if (!device)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <ad717x_assign_setup+0x1a>
		return -EINVAL;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001124:	e02f      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Retrieve the Channel Register */
	p_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	3310      	adds	r3, #16
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f936 	bl	80013a0 <AD717X_GetReg>
 8001134:	60f8      	str	r0, [r7, #12]
	if (!p_register)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <ad717x_assign_setup+0x34>
		return -EINVAL;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <ad717x_assign_setup+0x84>)
 800113e:	e022      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Assign set up to the chosen channel */
	p_register->value &= ~AD717X_CHMAP_REG_SETUP_SEL_MSK;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
	p_register->value |= AD717X_CHMAP_REG_SETUP_SEL(setup);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	78bb      	ldrb	r3, [r7, #2]
 8001152:	031b      	lsls	r3, r3, #12
 8001154:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	3310      	adds	r3, #16
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9da 	bl	8001520 <AD717X_WriteRegister>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <ad717x_assign_setup+0x6a>
		return -EINVAL;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001174:	e007      	b.n	8001186 <ad717x_assign_setup+0x7a>
	device->chan_map[channel_id].setup_sel = setup;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	330a      	adds	r3, #10
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	78ba      	ldrb	r2, [r7, #2]
 8001182:	71da      	strb	r2, [r3, #7]

	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	ffffd929 	.word	0xffffd929

08001194 <ad717x_set_polarity>:
 * @param bipolar - Polarity Select:True in case of Bipolar, False in case of Unipolar
 * @param setup_id - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_set_polarity(ad717x_dev* device, bool bipolar, uint8_t setup_id)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;

	if (!device)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <ad717x_set_polarity+0x1a>
		return -EINVAL;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011ac:	e030      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	3320      	adds	r3, #32
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8f2 	bl	80013a0 <AD717X_GetReg>
 80011bc:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <ad717x_set_polarity+0x34>
		return -EINVAL;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011c6:	e023      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Set the BI_UNIPOLAR bit in case of BIPOLAR operation */
	if (bipolar)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <ad717x_set_polarity+0x48>
		setup_reg->value |= AD717X_SETUP_CONF_REG_BI_UNIPOLAR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e005      	b.n	80011e8 <ad717x_set_polarity+0x54>
	else
		setup_reg->value &= ~(AD717X_SETUP_CONF_REG_BI_UNIPOLAR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	3320      	adds	r3, #32
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f995 	bl	8001520 <AD717X_WriteRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da01      	bge.n	8001200 <ad717x_set_polarity+0x6c>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011fe:	e007      	b.n	8001210 <ad717x_set_polarity+0x7c>
	device->setups[setup_id].bi_unipolar = bipolar;
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	3302      	adds	r3, #2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	715a      	strb	r2, [r3, #5]

	return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	ffffd929 	.word	0xffffd929

0800121c <ad717x_set_reference_source>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_reference_source(ad717x_dev* device,
				enum ad717x_reference_source ref_source, uint8_t setup_id)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <ad717x_set_reference_source+0x1a>
		return -EINVAL;
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001234:	e04e      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	3320      	adds	r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8ae 	bl	80013a0 <AD717X_GetReg>
 8001244:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <ad717x_set_reference_source+0x34>
		return -EINVAL;
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 800124e:	e041      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Choose the reference source for the selected setup */
	setup_reg->value &= ~AD717X_SETUP_CONF_REG_REF_SEL_MSK;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
	setup_reg->value |= (AD717X_SETUP_CONF_REG_REF_SEL(ref_source));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	3320      	adds	r3, #32
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f952 	bl	8001520 <AD717X_WriteRegister>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	da01      	bge.n	8001286 <ad717x_set_reference_source+0x6a>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001284:	e026      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
	device->setups[setup_id].ref_source = ref_source;
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	721a      	strb	r2, [r3, #8]

	/* Enable the REF_EN Bit in case of Internal reference */
	if (ref_source == INTERNAL_REF) {
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d11b      	bne.n	80012d2 <ad717x_set_reference_source+0xb6>
		/* Retrieve the ADC Mode reigster */
		adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f87f 	bl	80013a0 <AD717X_GetReg>
 80012a2:	60b8      	str	r0, [r7, #8]
		if (!adc_mode_reg)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <ad717x_set_reference_source+0x92>
			return -EINVAL;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ac:	e012      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

		/* Set the REF_EN Bit */
		adc_mode_reg->value |= AD717X_ADCMODE_REG_REF_EN;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f92f 	bl	8001520 <AD717X_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da01      	bge.n	80012cc <ad717x_set_reference_source+0xb0>
			return -EINVAL;
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ca:	e003      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
		device->ref_en = true;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	72da      	strb	r2, [r3, #11]
	}

	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	ffffd929 	.word	0xffffd929

080012e0 <ad717x_enable_input_buffer>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_enable_input_buffer(ad717x_dev* device,
			       bool inbuf_en, bool refbuf_en, uint8_t setup_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	70fb      	strb	r3, [r7, #3]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70bb      	strb	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	707b      	strb	r3, [r7, #1]
	ad717x_st_reg* setup_reg;

	if (!device)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <ad717x_enable_input_buffer+0x24>
		return -EINVAL;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001302:	e047      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	3320      	adds	r3, #32
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f847 	bl	80013a0 <AD717X_GetReg>
 8001312:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <ad717x_enable_input_buffer+0x3e>
		return -EINVAL;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 800131c:	e03a      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	if (inbuf_en)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <ad717x_enable_input_buffer+0x52>
		/* Enable input buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_AINBUF_P |
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	e005      	b.n	800133e <ad717x_enable_input_buffer+0x5e>
				     AD717X_SETUP_CONF_REG_AINBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_AINBUF_P |
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_AINBUF_N));
	if (refbuf_en)
 800133e:	78bb      	ldrb	r3, [r7, #2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <ad717x_enable_input_buffer+0x72>
		/* Enable reference buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_REFBUF_P |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f443 6240 	orr.w	r2, r3, #3072	@ 0xc00
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	e005      	b.n	800135e <ad717x_enable_input_buffer+0x7e>
				     AD717X_SETUP_CONF_REG_REFBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_REFBUF_P |
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_REFBUF_N));

	if (AD717X_WriteRegister(device,
 800135e:	787b      	ldrb	r3, [r7, #1]
 8001360:	3320      	adds	r3, #32
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f8da 	bl	8001520 <AD717X_WriteRegister>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	da01      	bge.n	8001376 <ad717x_enable_input_buffer+0x96>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001374:	e00e      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>
	device->setups[setup_id].input_buff = inbuf_en;
 8001376:	787b      	ldrb	r3, [r7, #1]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	71da      	strb	r2, [r3, #7]
	device->setups[setup_id].ref_buff = refbuf_en;
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	78ba      	ldrb	r2, [r7, #2]
 8001390:	719a      	strb	r2, [r3, #6]

	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	ffffd929 	.word	0xffffd929

080013a0 <AD717X_GetReg>:
*
* @return A pointer to the register if found or 0.
*******************************************************************************/
ad717x_st_reg *AD717X_GetReg(ad717x_dev *device,
			     uint8_t reg_address)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	ad717x_st_reg *reg = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]

	if (!device || !device->regs)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <AD717X_GetReg+0x1e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <AD717X_GetReg+0x22>
		return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e021      	b.n	8001406 <AD717X_GetReg+0x66>

	for (i = 0; i < device->num_regs; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e018      	b.n	80013fa <AD717X_GetReg+0x5a>
		if (device->regs[i].addr == reg_address) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d109      	bne.n	80013f4 <AD717X_GetReg+0x54>
			reg = &device->regs[i];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	60bb      	str	r3, [r7, #8]
			break;
 80013f2:	e007      	b.n	8001404 <AD717X_GetReg+0x64>
	for (i = 0; i < device->num_regs; i++) {
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a1b      	ldrb	r3, [r3, #8]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3e1      	bcc.n	80013c8 <AD717X_GetReg+0x28>
		}
	}

	return reg;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <AD717X_ReadRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_ReadRegister(ad717x_dev *device,
			    uint8_t addr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	@ 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	int32_t ret       = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t Tx = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t Rx [8] = {0};
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
//	uint8_t i         = 0;
//	uint8_t check8    = 0;
//	uint8_t msgBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	ad717x_st_reg *pReg;

	if(!device)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <AD717X_ReadRegister+0x2a>
		return INVALID_VAL;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	e063      	b.n	8001506 <AD717X_ReadRegister+0xf2>

	pReg = AD717X_GetReg(device, addr);
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	4619      	mov	r1, r3
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffac 	bl	80013a0 <AD717X_GetReg>
 8001448:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (!pReg)
 800144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <AD717X_ReadRegister+0x42>
		return INVALID_VAL;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	e057      	b.n	8001506 <AD717X_ReadRegister+0xf2>

	/* Build the Command word */
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
		    AD717X_COMM_REG_RA(pReg->addr);
 8001456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001460:	b25b      	sxtb	r3, r3
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
 8001462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 800146c:	701a      	strb	r2, [r3, #0]
	Tx = spi_read_reg.Tx;
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	spi_read_reg.pReg = pReg;
 8001476:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 8001478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147a:	6053      	str	r3, [r2, #4]
//	spi_read_reg.size = pReg->size;

	/* Read data from the device */

	if(device->mode == CONTINUOUS)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d103      	bne.n	800148e <AD717X_ReadRegister+0x7a>
		spi_status = READING;
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <AD717X_ReadRegister+0x100>)
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e03a      	b.n	8001504 <AD717X_ReadRegister+0xf0>
	else
	{
		HAL_SPI_Transmit(SPI, &Tx, 1, 100);
 800148e:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8001492:	2364      	movs	r3, #100	@ 0x64
 8001494:	2201      	movs	r2, #1
 8001496:	4820      	ldr	r0, [pc, #128]	@ (8001518 <AD717X_ReadRegister+0x104>)
 8001498:	f003 fc97 	bl	8004dca <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0120 	add.w	r1, r7, #32
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <AD717X_ReadRegister+0x104>)
 80014aa:	f003 fdd2 	bl	8005052 <HAL_SPI_Receive>
		pReg->value = 0;
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b8:	e011      	b.n	80014de <AD717X_ReadRegister+0xca>
			pReg->value <<= 8;
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	021a      	lsls	r2, r3, #8
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c2:	605a      	str	r2, [r3, #4]
			pReg->value += Rx[i];
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f107 0120 	add.w	r1, r7, #32
 80014cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014ce:	440a      	add	r2, r1
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	441a      	add	r2, r3
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80014d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014da:	3301      	adds	r3, #1
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbe8      	blt.n	80014ba <AD717X_ReadRegister+0xa6>
		}
		char hexString[24];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	461a      	mov	r2, r3
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	490a      	ldr	r1, [pc, #40]	@ (800151c <AD717X_ReadRegister+0x108>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 f843 	bl	8008580 <siprintf>
		send_string(hexString);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fcb0 	bl	8001e64 <send_string>
	*/
	/* Build the result */

//	}

	return ret;
 8001504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001506:	4618      	mov	r0, r3
 8001508:	3738      	adds	r7, #56	@ 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2001e5f8 	.word	0x2001e5f8
 8001514:	2001e5f4 	.word	0x2001e5f4
 8001518:	2000048c 	.word	0x2000048c
 800151c:	0800a6f0 	.word	0x0800a6f0

08001520 <AD717X_WriteRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_WriteRegister(ad717x_dev *device,
			     uint8_t addr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	int32_t ret      = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
	int32_t regValue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint8_t wrBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001534:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <AD717X_WriteRegister+0xe0>)
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i        = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	76fb      	strb	r3, [r7, #27]
//	uint8_t crc8     = 0;
	ad717x_st_reg *preg;

	if(!device)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <AD717X_WriteRegister+0x32>
		return INVALID_VAL;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e051      	b.n	80015f6 <AD717X_WriteRegister+0xd6>

	preg = AD717X_GetReg(device, addr);
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff22 	bl	80013a0 <AD717X_GetReg>
 800155c:	6138      	str	r0, [r7, #16]
	if (!preg)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <AD717X_WriteRegister+0x4a>
		return INVALID_VAL;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e045      	b.n	80015f6 <AD717X_WriteRegister+0xd6>

	/* Build the Command word */
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
		   AD717X_COMM_REG_RA(preg->addr);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	681b      	ldr	r3, [r3, #0]
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001574:	b2db      	uxtb	r3, r3
 8001576:	723b      	strb	r3, [r7, #8]

	/* Fill the write buffer */
	regValue = preg->value;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	76fb      	strb	r3, [r7, #27]
 8001582:	e00f      	b.n	80015a4 <AD717X_WriteRegister+0x84>
		wrBuf[preg->size - i] = regValue & 0xFF;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	7efb      	ldrb	r3, [r7, #27]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	3320      	adds	r3, #32
 8001592:	443b      	add	r3, r7
 8001594:	f803 2c18 	strb.w	r2, [r3, #-24]
		regValue >>= 8;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	121b      	asrs	r3, r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800159e:	7efb      	ldrb	r3, [r7, #27]
 80015a0:	3301      	adds	r3, #1
 80015a2:	76fb      	strb	r3, [r7, #27]
 80015a4:	7efa      	ldrb	r2, [r7, #27]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbea      	blt.n	8001584 <AD717X_WriteRegister+0x64>
	/* Write data to the device */
//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       (device->useCRC != AD717X_DISABLE) ?
//				       preg->size + 2 : preg->size + 1);
	memcpy(spi_write_reg.Tx, wrBuf, 8);
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <AD717X_WriteRegister+0xe4>)
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ba:	e882 0003 	stmia.w	r2, {r0, r1}
	spi_write_reg.pReg = preg;
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <AD717X_WriteRegister+0xe4>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	60d3      	str	r3, [r2, #12]
//			ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
//
//		}
//
//	}
	if(device->mode == CONTINUOUS)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <AD717X_WriteRegister+0xb6>
		spi_status = WRITING;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <AD717X_WriteRegister+0xe8>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e00c      	b.n	80015f0 <AD717X_WriteRegister+0xd0>
	else
	{
		ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 0108 	add.w	r1, r7, #8
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <AD717X_WriteRegister+0xec>)
 80015e8:	f003 fbef 	bl	8004dca <HAL_SPI_Transmit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]
	}
//	ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
	ret = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
	return ret;
 80015f4:	697b      	ldr	r3, [r7, #20]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800a708 	.word	0x0800a708
 8001604:	2001e600 	.word	0x2001e600
 8001608:	2001e5f4 	.word	0x2001e5f4
 800160c:	2000048c 	.word	0x2000048c

08001610 <AD717X_Reset>:
* @param device - The handler of the instance of the driver.
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Reset(ad717x_dev *device)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
	uint8_t wrBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <AD717X_Reset+0x40>)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001626:	e883 0003 	stmia.w	r3, {r0, r1}

	if(!device)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <AD717X_Reset+0x26>
		return INVALID_VAL;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	e007      	b.n	8001646 <AD717X_Reset+0x36>

//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       8);
	HAL_SPI_Transmit(SPI, wrBuf, 8, 100);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	2364      	movs	r3, #100	@ 0x64
 800163c:	2208      	movs	r2, #8
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <AD717X_Reset+0x44>)
 8001640:	f003 fbc3 	bl	8004dca <HAL_SPI_Transmit>
	return ret;
 8001644:	697b      	ldr	r3, [r7, #20]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	0800a710 	.word	0x0800a710
 8001654:	2000048c 	.word	0x2000048c

08001658 <AD717X_ComputeDataregSize>:
* @param device - The handler of the instance of the driver.
*
* @return 0in case of success or negative code in case of failure.
*******************************************************************************/
int32_t AD717X_ComputeDataregSize(ad717x_dev *device)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	ad717x_st_reg *reg_ptr;
	ad717x_st_reg *datareg_ptr;
	uint16_t case_var;

	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_IFMODE_REG);
 8001660:	2102      	movs	r1, #2
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe9c 	bl	80013a0 <AD717X_GetReg>
 8001668:	6178      	str	r0, [r7, #20]
	/* Get data register pointer */
	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
 800166a:	2104      	movs	r1, #4
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe97 	bl	80013a0 <AD717X_GetReg>
 8001672:	6138      	str	r0, [r7, #16]
	case_var = reg_ptr->value & (AD717X_IFMODE_REG_DATA_STAT |
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 800167e:	81fb      	strh	r3, [r7, #14]
				     AD717X_IFMODE_REG_DATA_WL16);

	/* Compute data register size */
	datareg_ptr->size = 3;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2203      	movs	r2, #3
 8001684:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_WL16) == AD717X_IFMODE_REG_DATA_WL16)
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <AD717X_ComputeDataregSize+0x42>
		datareg_ptr->size--;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_STAT) == AD717X_IFMODE_REG_DATA_STAT)
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <AD717X_ComputeDataregSize+0x56>
		datareg_ptr->size++;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]

	/* Get ID register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_ID_REG);
 80016ae:	2107      	movs	r1, #7
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe75 	bl	80013a0 <AD717X_GetReg>
 80016b6:	6178      	str	r0, [r7, #20]

	/* If the part is 32/24 bit wide add a byte to the read */
	if((reg_ptr->value & AD717X_ID_REG_MASK) == AD7177_2_ID_REG_VALUE)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80016c0:	4013      	ands	r3, r2
 80016c2:	f644 72d0 	movw	r2, #20432	@ 0x4fd0
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d104      	bne.n	80016d4 <AD717X_ComputeDataregSize+0x7c>
		datareg_ptr->size++;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <ad717x_configure_device_odr>:
 * @return 0 in case of success, negative error code otherwise
 */
int32_t ad717x_configure_device_odr(ad717x_dev *dev,
				    uint8_t filtcon_id,
				    uint8_t odr_sel)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *filtcon_reg;
	int32_t ret;

	/* Retrieve the FILTCON register */
	filtcon_reg = AD717X_GetReg(dev,
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	3328      	adds	r3, #40	@ 0x28
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe51 	bl	80013a0 <AD717X_GetReg>
 80016fe:	60f8      	str	r0, [r7, #12]
				    AD717X_FILTCON0_REG + filtcon_id);
	if (!filtcon_reg) {
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <ad717x_configure_device_odr+0x2a>
		return -EINVAL;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <ad717x_configure_device_odr+0x6c>)
 8001708:	e01b      	b.n	8001742 <ad717x_configure_device_odr+0x62>
	}

	/* Clear the ODR bits, configure the requested ODR */
	filtcon_reg->value &= ~(AD717x_ODR_MSK);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 021f 	bic.w	r2, r3, #31
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
	filtcon_reg->value |= AD717X_FILT_CONF_REG_ODR(odr_sel);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	431a      	orrs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(dev, AD717X_FILTCON0_REG + filtcon_id);
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	3328      	adds	r3, #40	@ 0x28
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fef6 	bl	8001520 <AD717X_WriteRegister>
 8001734:	60b8      	str	r0, [r7, #8]
	if (ret) {
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <ad717x_configure_device_odr+0x60>
		return ret;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	e000      	b.n	8001742 <ad717x_configure_device_odr+0x62>
	}

	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	ffffd929 	.word	0xffffd929

08001750 <AD717X_Init>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Init(ad717x_dev **device,
		    ad717x_init_param init_param)
{
 8001750:	b084      	sub	sp, #16
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800175e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;
	ad717x_st_reg *preg;
	uint8_t setup_index;
	uint8_t ch_index;

	dev = (ad717x_dev *)malloc(sizeof(*dev));
 8001762:	20bc      	movs	r0, #188	@ 0xbc
 8001764:	f006 f8bc 	bl	80078e0 <malloc>
 8001768:	4603      	mov	r3, r0
 800176a:	613b      	str	r3, [r7, #16]
	if (!dev)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <AD717X_Init+0x28>
		return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e07d      	b.n	8001874 <AD717X_Init+0x124>

	dev->regs = init_param.regs;
 8001778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
	dev->num_regs = init_param.num_regs;
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	721a      	strb	r2, [r3, #8]
//	ret = no_os_spi_init(&dev->spi_desc, &init_param.spi_init);
//	if (ret < 0)
//		return ret;

	/*  Reset the device interface.*/
	ret = AD717X_Reset(dev);
 8001786:	6938      	ldr	r0, [r7, #16]
 8001788:	f7ff ff42 	bl	8001610 <AD717X_Reset>
 800178c:	60f8      	str	r0, [r7, #12]
	if (ret < 0)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da01      	bge.n	8001798 <AD717X_Init+0x48>
		return ret;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	e06d      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize ADC mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
	if(ret < 0)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	da01      	bge.n	80017a2 <AD717X_Init+0x52>
		return ret;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	e068      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize Interface mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
	if(ret < 0)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da01      	bge.n	80017ac <AD717X_Init+0x5c>
		return ret;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e063      	b.n	8001874 <AD717X_Init+0x124>

	/* Get CRC State */
//	ret = AD717X_UpdateCRCSetting(dev);
	if(ret < 0)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da01      	bge.n	80017b6 <AD717X_Init+0x66>
		return ret;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	e05e      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize registers AD717X_GPIOCON_REG through AD717X_OFFSET0_REG */
	preg = AD717X_GetReg(dev, AD717X_GPIOCON_REG);
 80017b6:	2106      	movs	r1, #6
 80017b8:	6938      	ldr	r0, [r7, #16]
 80017ba:	f7ff fdf1 	bl	80013a0 <AD717X_GetReg>
 80017be:	60b8      	str	r0, [r7, #8]
	if (!preg)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <AD717X_Init+0x7c>
		return INVALID_VAL;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e053      	b.n	8001874 <AD717X_Init+0x124>
//			break;
//		preg ++;
//	}

	/* Read ID register to identify the part */
	ret = AD717X_ReadRegister(dev, AD717X_ID_REG);
 80017cc:	2107      	movs	r1, #7
 80017ce:	6938      	ldr	r0, [r7, #16]
 80017d0:	f7ff fe20 	bl	8001414 <AD717X_ReadRegister>
 80017d4:	60f8      	str	r0, [r7, #12]
	if(ret < 0)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da01      	bge.n	80017e0 <AD717X_Init+0x90>
		return ret;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	e049      	b.n	8001874 <AD717X_Init+0x124>
	dev->active_device = init_param.active_device;
 80017e0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	729a      	strb	r2, [r3, #10]
	dev->num_channels = init_param.num_channels;
 80017e8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	731a      	strb	r2, [r3, #12]

	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
 80017f4:	e016      	b.n	8001824 <AD717X_Init+0xd4>
		/* Set Polarity */
//		ret = ad717x_set_polarity(dev, init_param.setups[setup_index].bi_unipolar,
//					  setup_index);
		if (ret < 0)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da01      	bge.n	8001800 <AD717X_Init+0xb0>
			return ret;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e039      	b.n	8001874 <AD717X_Init+0x124>

		/* Select the reference source */
//		ret = ad717x_set_reference_source(dev,
//						  init_param.setups[setup_index].ref_source, setup_index);
		if (ret < 0)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da01      	bge.n	800180a <AD717X_Init+0xba>
			return ret;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	e034      	b.n	8001874 <AD717X_Init+0x124>
		/* Enable reference and input buffers */
//		ret = ad717x_enable_input_buffer(dev,
//						 init_param.setups[setup_index].input_buff,
//						 init_param.setups[setup_index].ref_buff,
//						 setup_index);
		if (ret < 0)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da01      	bge.n	8001814 <AD717X_Init+0xc4>
			return ret;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e02f      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_configure_device_odr(dev, setup_index,
//						  init_param.filter_configuration[setup_index].odr);
		if (ret < 0)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	da01      	bge.n	800181e <AD717X_Init+0xce>
			return ret;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e02a      	b.n	8001874 <AD717X_Init+0x124>
	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	3301      	adds	r3, #1
 8001822:	75fb      	strb	r3, [r7, #23]
 8001824:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001828:	7dfa      	ldrb	r2, [r7, #23]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3e3      	bcc.n	80017f6 <AD717X_Init+0xa6>
	}

	/* Set Conversion Mode */
//	ret = ad717x_set_adc_mode(dev, init_param.mode);
	if (ret < 0)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da01      	bge.n	8001838 <AD717X_Init+0xe8>
		return ret;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	e01d      	b.n	8001874 <AD717X_Init+0x124>

	/*  Connect Analog Inputs, Assign Setup, Disable all channels */
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 8001838:	2300      	movs	r3, #0
 800183a:	75bb      	strb	r3, [r7, #22]
 800183c:	e011      	b.n	8001862 <AD717X_Init+0x112>
//		ret = ad717x_connect_analog_input(dev, ch_index,
//						  init_param.chan_map[ch_index].analog_inputs);
		if (ret < 0)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	da01      	bge.n	8001848 <AD717X_Init+0xf8>
			return ret;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	e015      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_assign_setup(dev, ch_index,
//					  init_param.chan_map[ch_index].setup_sel);
		if (ret < 0)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <AD717X_Init+0x102>
			return ret;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	e010      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_set_channel_status(dev,ch_index,
//						init_param.chan_map[ch_index].channel_enable);
		if (ret < 0)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da01      	bge.n	800185c <AD717X_Init+0x10c>
			return ret;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	e00b      	b.n	8001874 <AD717X_Init+0x124>
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	3301      	adds	r3, #1
 8001860:	75bb      	strb	r3, [r7, #22]
 8001862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001866:	7dba      	ldrb	r2, [r7, #22]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3e8      	bcc.n	800183e <AD717X_Init+0xee>
	}
	*device = dev;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

	return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800187e:	b004      	add	sp, #16
 8001880:	4770      	bx	lr
	...

08001884 <ad717x_set_clock>:

	return ret;
}

void ad717x_set_clock(ad717x_dev *dev, uint32_t clcck_sel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	ad717x_st_reg *pReg = AD717X_GetReg(dev, AD717X_ADCMODE_REG);
 800188e:	2101      	movs	r1, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fd85 	bl	80013a0 <AD717X_GetReg>
 8001896:	60f8      	str	r0, [r7, #12]

	pReg->value |= AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	4313      	orrs	r3, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	605a      	str	r2, [r3, #4]
	spi_write_reg.value = AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <ad717x_set_clock+0x48>)
 80018b8:	6093      	str	r3, [r2, #8]
	AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe2f 	bl	8001520 <AD717X_WriteRegister>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2001e600 	.word	0x2001e600

080018d0 <ad717x_set_data_stat>:

void ad717x_set_data_stat(ad717x_dev *dev, bool stat)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *reg_ptr;
//	ad717x_st_reg *datareg_ptr;
	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(dev, AD717X_IFMODE_REG);
 80018dc:	2102      	movs	r1, #2
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd5e 	bl	80013a0 <AD717X_GetReg>
 80018e4:	60f8      	str	r0, [r7, #12]
	/* Get data register pointer */
//	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
	if(stat)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <ad717x_set_data_stat+0x2a>
		reg_ptr->value |= AD717X_IFMODE_REG_DATA_STAT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	e005      	b.n	8001906 <ad717x_set_data_stat+0x36>
	else
		reg_ptr->value &= ~(AD717X_IFMODE_REG_DATA_STAT);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
	AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
 8001906:	2102      	movs	r1, #2
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fe09 	bl	8001520 <AD717X_WriteRegister>
	AD717X_ComputeDataregSize(dev);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fea2 	bl	8001658 <AD717X_ComputeDataregSize>

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <adc_to_buf>:
#include "ad717x.h"

void send_adc_data();

void adc_to_buf(uint32_t new_val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
//	if(adc_buff_idx == 0 && adc_channel_offset > 0)
//	{
//		adc_channel_offset -= 2;
//		return;
//	}
	if(adc_channel_offset == 0)
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <adc_to_buf+0x94>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d116      	bne.n	800195a <adc_to_buf+0x3e>
	{
		time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
 800192c:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <adc_to_buf+0x98>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <adc_to_buf+0x9c>)
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	b292      	uxth	r2, r2
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	b292      	uxth	r2, r2
 800193a:	4611      	mov	r1, r2
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <adc_to_buf+0xa0>)
 8001940:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_buff[adc_buff_idx / 2] = new_val;
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <adc_to_buf+0x9c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <adc_to_buf+0xa4>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001958:	e015      	b.n	8001986 <adc_to_buf+0x6a>
	}
	else
	{
		tq_time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <adc_to_buf+0x98>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <adc_to_buf+0x9c>)
 8001960:	8812      	ldrh	r2, [r2, #0]
 8001962:	b292      	uxth	r2, r2
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	b292      	uxth	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <adc_to_buf+0xa8>)
 800196e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		tq_buff[adc_buff_idx / 2] = new_val;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <adc_to_buf+0x9c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <adc_to_buf+0xac>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	adc_buff_idx ++;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <adc_to_buf+0x9c>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <adc_to_buf+0x9c>)
 8001992:	801a      	strh	r2, [r3, #0]
	if(adc_buff_idx >= ADC_BUFFER_SIZE * ENABLED_CHANNELS)
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <adc_to_buf+0x9c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b63      	cmp	r3, #99	@ 0x63
 800199c:	d904      	bls.n	80019a8 <adc_to_buf+0x8c>
	{
		send_adc_data();
 800199e:	f000 f815 	bl	80019cc <send_adc_data>
		adc_buff_idx = 0;
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <adc_to_buf+0x9c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
//		TIM.Instance->CNT = 0;
	}
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20001128 	.word	0x20001128
 80019b4:	2000053c 	.word	0x2000053c
 80019b8:	20001124 	.word	0x20001124
 80019bc:	20000e04 	.word	0x20000e04
 80019c0:	20000ecc 	.word	0x20000ecc
 80019c4:	20000f94 	.word	0x20000f94
 80019c8:	2000105c 	.word	0x2000105c

080019cc <send_adc_data>:

void send_adc_data()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	int array_length = sizeof(uint32_t) * ADC_BUFFER_SIZE;
 80019d2:	23c8      	movs	r3, #200	@ 0xc8
 80019d4:	607b      	str	r3, [r7, #4]

	sprintf((char*)tx_buffer, "{fdb,\r\n");
 80019d6:	4920      	ldr	r1, [pc, #128]	@ (8001a58 <send_adc_data+0x8c>)
 80019d8:	4820      	ldr	r0, [pc, #128]	@ (8001a5c <send_adc_data+0x90>)
 80019da:	f006 fdd1 	bl	8008580 <siprintf>
	memcpy(tx_buffer + 7, (uint8_t*) time_buff, array_length);
 80019de:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <send_adc_data+0x94>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	491f      	ldr	r1, [pc, #124]	@ (8001a64 <send_adc_data+0x98>)
 80019e6:	f006 fef4 	bl	80087d2 <memcpy>
	memcpy(tx_buffer + 7 + array_length, (uint8_t*) adc_buff, array_length);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3307      	adds	r3, #7
 80019ee:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <send_adc_data+0x90>)
 80019f0:	4413      	add	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	491c      	ldr	r1, [pc, #112]	@ (8001a68 <send_adc_data+0x9c>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 feeb 	bl	80087d2 <memcpy>
	memcpy(tx_buffer + 7 + 2 * array_length, (uint8_t*) tq_time_buff, array_length);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	3307      	adds	r3, #7
 8001a02:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <send_adc_data+0x90>)
 8001a04:	4413      	add	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4918      	ldr	r1, [pc, #96]	@ (8001a6c <send_adc_data+0xa0>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 fee1 	bl	80087d2 <memcpy>
	memcpy(tx_buffer + 7 + 3 * array_length, (uint8_t*) tq_buff, array_length);
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3307      	adds	r3, #7
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <send_adc_data+0x90>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4913      	ldr	r1, [pc, #76]	@ (8001a70 <send_adc_data+0xa4>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f006 fed5 	bl	80087d2 <memcpy>
	sprintf((char*)tx_buffer+ 7 + 4 * array_length, ",end}\r\n");
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <send_adc_data+0x90>)
 8001a30:	4413      	add	r3, r2
 8001a32:	4910      	ldr	r1, [pc, #64]	@ (8001a74 <send_adc_data+0xa8>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f006 fda3 	bl	8008580 <siprintf>

	HAL_UART_Transmit_DMA(PC_UART, tx_buffer, 4 * array_length + 14);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	330e      	adds	r3, #14
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4904      	ldr	r1, [pc, #16]	@ (8001a5c <send_adc_data+0x90>)
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <send_adc_data+0xac>)
 8001a4c:	f004 fce8 	bl	8006420 <HAL_UART_Transmit_DMA>
//	HAL_UART_Transmit(PC_UART, (uint8_t*)"{fb,", 4, 10);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)time_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)adc_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)",end}\r\n", 8, 10);
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800a718 	.word	0x0800a718
 8001a5c:	20000ad4 	.word	0x20000ad4
 8001a60:	20000adb 	.word	0x20000adb
 8001a64:	20000e04 	.word	0x20000e04
 8001a68:	20000ecc 	.word	0x20000ecc
 8001a6c:	20000f94 	.word	0x20000f94
 8001a70:	2000105c 	.word	0x2000105c
 8001a74:	0800a720 	.word	0x0800a720
 8001a78:	200005cc 	.word	0x200005cc

08001a7c <adc_start>:
	}
	return receivedData;
}

void adc_start(int start)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	if(start)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <adc_start+0x24>
	{
		adc_buff_idx = 0;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <adc_start+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	801a      	strh	r2, [r3, #0]
		TIM.Instance->CNT = 0;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <adc_start+0x50>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24
		spi_status = SENDING;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <adc_start+0x54>)
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	701a      	strb	r2, [r3, #0]
		TIM.Instance->CNT = 0;
		spi_status = IDLE;
		adc_sm = ADC_IDLE;
	}

}
 8001a9e:	e00c      	b.n	8001aba <adc_start+0x3e>
		adc_buff_idx = 0;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <adc_start+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
		TIM.Instance->CNT = 0;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <adc_start+0x50>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24
		spi_status = IDLE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <adc_start+0x54>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
		adc_sm = ADC_IDLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <adc_start+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20001124 	.word	0x20001124
 8001acc:	2000053c 	.word	0x2000053c
 8001ad0:	2001e5f4 	.word	0x2001e5f4
 8001ad4:	2001e5f5 	.word	0x2001e5f5

08001ad8 <dac_read>:
#include "global.h"



uint32_t dac_read(uint8_t addr, int print)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b090      	sub	sp, #64	@ 0x40
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx[3] = {addr,0,0};
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t Rx[3] = {0};
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <dac_read+0xdc>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2102      	movs	r1, #2
 8001b06:	482c      	ldr	r0, [pc, #176]	@ (8001bb8 <dac_read+0xe0>)
 8001b08:	f002 fa6c 	bl	8003fe4 <HAL_GPIO_WritePin>
	delay_us(1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f000 ffcd 	bl	8002aac <delay_us>
	HAL_SPI_Transmit(DAC_SPI, Tx, 3, 100);
 8001b12:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001b16:	2364      	movs	r3, #100	@ 0x64
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4828      	ldr	r0, [pc, #160]	@ (8001bbc <dac_read+0xe4>)
 8001b1c:	f003 f955 	bl	8004dca <HAL_SPI_Transmit>
	delay_us(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f000 ffc3 	bl	8002aac <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4823      	ldr	r0, [pc, #140]	@ (8001bb8 <dac_read+0xe0>)
 8001b2c:	f002 fa5a 	bl	8003fe4 <HAL_GPIO_WritePin>
	delay_us(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f000 ffbb 	bl	8002aac <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2102      	movs	r1, #2
 8001b3a:	481f      	ldr	r0, [pc, #124]	@ (8001bb8 <dac_read+0xe0>)
 8001b3c:	f002 fa52 	bl	8003fe4 <HAL_GPIO_WritePin>
	delay_us(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f000 ffb3 	bl	8002aac <delay_us>
	HAL_SPI_Receive(&hspi2, Rx, 3, 100);
 8001b46:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	481b      	ldr	r0, [pc, #108]	@ (8001bbc <dac_read+0xe4>)
 8001b50:	f003 fa7f 	bl	8005052 <HAL_SPI_Receive>
	delay_us(1);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f000 ffa9 	bl	8002aac <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4816      	ldr	r0, [pc, #88]	@ (8001bb8 <dac_read+0xe0>)
 8001b60:	f002 fa40 	bl	8003fe4 <HAL_GPIO_WritePin>
	uint32_t reg_data = (Rx[0] << 16) | (Rx[1] << 8) | Rx[2];
 8001b64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001b76:	4313      	orrs	r3, r2
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
	if(print)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <dac_read+0xd0>
	{
		char hexString[35];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\ndac,0x%02x%02x%02x,end}\r\n", Rx[0], Rx[1], Rx[2]);  // Format as hex string with "0x" prefix
 8001b80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b84:	461a      	mov	r2, r3
 8001b86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b90:	f107 0008 	add.w	r0, r7, #8
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	460b      	mov	r3, r1
 8001b98:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <dac_read+0xe8>)
 8001b9a:	f006 fcf1 	bl	8008580 <siprintf>
		send_string(hexString);
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f95e 	bl	8001e64 <send_string>
	}
	return reg_data;
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3738      	adds	r7, #56	@ 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800a74c 	.word	0x0800a74c
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	200004e4 	.word	0x200004e4
 8001bc0:	0800a728 	.word	0x0800a728

08001bc4 <dac_write>:

void dac_write(uint8_t addr, uint16_t value)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80bb      	strh	r3, [r7, #4]
	uint8_t Tx[3] = {addr,(value & 0xFF00) >> 8, (value & 0x00FF) >> 0};
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	723b      	strb	r3, [r7, #8]
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	727b      	strb	r3, [r7, #9]
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	72bb      	strb	r3, [r7, #10]
	for(int i = 0; i < 1; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e019      	b.n	8001c22 <dac_write+0x5e>
	{
		HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4810      	ldr	r0, [pc, #64]	@ (8001c34 <dac_write+0x70>)
 8001bf4:	f002 f9f6 	bl	8003fe4 <HAL_GPIO_WritePin>
		delay_us(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f000 ff57 	bl	8002aac <delay_us>
		HAL_SPI_Transmit(DAC_SPI, Tx, 3, 100);
 8001bfe:	f107 0108 	add.w	r1, r7, #8
 8001c02:	2364      	movs	r3, #100	@ 0x64
 8001c04:	2203      	movs	r2, #3
 8001c06:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <dac_write+0x74>)
 8001c08:	f003 f8df 	bl	8004dca <HAL_SPI_Transmit>
		delay_us(1);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 ff4d 	bl	8002aac <delay_us>
		HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2102      	movs	r1, #2
 8001c16:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <dac_write+0x70>)
 8001c18:	f002 f9e4 	bl	8003fe4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 1; i++)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	dde2      	ble.n	8001bee <dac_write+0x2a>
	}
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020400 	.word	0x40020400
 8001c38:	200004e4 	.word	0x200004e4

08001c3c <dac_update>:

void dac_update(float v)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t val = (uint16_t) (((v+10) / 20) * (1 << 16));
 8001c46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c52:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c5a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001c80 <dac_update+0x44>
 8001c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c66:	ee17 3a90 	vmov	r3, s15
 8001c6a:	81fb      	strh	r3, [r7, #14]
	dac_write(0x01, val);
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff ffa7 	bl	8001bc4 <dac_write>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	47800000 	.word	0x47800000

08001c84 <dac_init>:

void dac_init(int num)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	//send full reset
	for(int i = 0; i < 3; i++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e006      	b.n	8001ca0 <dac_init+0x1c>
		dac_write(0x0f, 0x00);
 8001c92:	2100      	movs	r1, #0
 8001c94:	200f      	movs	r0, #15
 8001c96:	f7ff ff95 	bl	8001bc4 <dac_write>
	for(int i = 0; i < 3; i++)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	ddf5      	ble.n	8001c92 <dac_init+0xe>
	for(int i = 0; i < 3; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	e006      	b.n	8001cba <dac_init+0x36>
		dac_write(0x04, 0x08); // Set Control Register to mid scale and -+10V so V_out = 0
 8001cac:	2108      	movs	r1, #8
 8001cae:	2004      	movs	r0, #4
 8001cb0:	f7ff ff88 	bl	8001bc4 <dac_write>
	for(int i = 0; i < 3; i++)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	ddf5      	ble.n	8001cac <dac_init+0x28>
//		}
//
//	}


}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <new_pattern>:

void new_pattern(uint16_t length, uint8_t* pattern_ptr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	80fb      	strh	r3, [r7, #6]
	adc_start(0);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fecf 	bl	8001a7c <adc_start>
	DAC_idx = 0;
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <new_pattern+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
	DAC_length = length;
 8001ce4:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <new_pattern+0x78>)
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	8013      	strh	r3, [r2, #0]
	memset(DAC_pattern, 0, DAC_PATTERN_SIZE);
 8001cea:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4815      	ldr	r0, [pc, #84]	@ (8001d48 <new_pattern+0x7c>)
 8001cf2:	f006 fca8 	bl	8008646 <memset>
	length = (length < DAC_BULK_SIZE) ? length : DAC_BULK_SIZE; // if length is more than BULK_SIZE, just copy the BULK
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2bfa      	cmp	r3, #250	@ 0xfa
 8001cfa:	bf28      	it	cs
 8001cfc:	23fa      	movcs	r3, #250	@ 0xfa
 8001cfe:	80fb      	strh	r3, [r7, #6]
	memcpy(DAC_pattern, pattern_ptr, length * sizeof(float));
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	461a      	mov	r2, r3
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	480f      	ldr	r0, [pc, #60]	@ (8001d48 <new_pattern+0x7c>)
 8001d0a:	f006 fd62 	bl	80087d2 <memcpy>
	DAC_idx += length;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <new_pattern+0x74>)
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	4413      	add	r3, r2
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <new_pattern+0x74>)
 8001d1a:	801a      	strh	r2, [r3, #0]

//	send_string("{dac,\r\n");
	char message[30];
	sprintf(message, "{dac,\r\n%d,end}\r\n", DAC_idx);
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <new_pattern+0x74>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4909      	ldr	r1, [pc, #36]	@ (8001d4c <new_pattern+0x80>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f006 fc29 	bl	8008580 <siprintf>
	send_string(message);
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f896 	bl	8001e64 <send_string>
}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	@ 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2001e5ee 	.word	0x2001e5ee
 8001d44:	2001e5ec 	.word	0x2001e5ec
 8001d48:	2000112c 	.word	0x2000112c
 8001d4c:	0800a750 	.word	0x0800a750

08001d50 <bulk_pattern>:

void bulk_pattern(uint16_t length, uint8_t* pattern_ptr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	80fb      	strh	r3, [r7, #6]
	memcpy(DAC_pattern + DAC_idx, pattern_ptr, length * sizeof(float));
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <bulk_pattern+0x74>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <bulk_pattern+0x78>)
 8001d64:	1898      	adds	r0, r3, r2
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	f006 fd30 	bl	80087d2 <memcpy>
	DAC_idx += length;
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <bulk_pattern+0x74>)
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <bulk_pattern+0x74>)
 8001d7e:	801a      	strh	r2, [r3, #0]

//	send_string("{dac,end}\r\n");
	char message[30];
	sprintf(message, "{dac,\r\n%d,end}\r\n", DAC_idx);
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <bulk_pattern+0x74>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4910      	ldr	r1, [pc, #64]	@ (8001dcc <bulk_pattern+0x7c>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f006 fbf7 	bl	8008580 <siprintf>
	send_string(message);
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f864 	bl	8001e64 <send_string>
	if(DAC_idx >= DAC_length)
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <bulk_pattern+0x74>)
 8001d9e:	881a      	ldrh	r2, [r3, #0]
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <bulk_pattern+0x80>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d308      	bcc.n	8001dba <bulk_pattern+0x6a>
	{
		DAC_idx = 0;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <bulk_pattern+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8001dae:	4809      	ldr	r0, [pc, #36]	@ (8001dd4 <bulk_pattern+0x84>)
 8001db0:	f003 fe34 	bl	8005a1c <HAL_TIM_Base_Start_IT>
		adc_start(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff fe61 	bl	8001a7c <adc_start>
	}
}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	@ 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2001e5ee 	.word	0x2001e5ee
 8001dc8:	2000112c 	.word	0x2000112c
 8001dcc:	0800a750 	.word	0x0800a750
 8001dd0:	2001e5ec 	.word	0x2001e5ec
 8001dd4:	20000584 	.word	0x20000584

08001dd8 <check_pattern>:
// Check if pattern loads correctly -> To-Do
void check_pattern()
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <check_command>:
extern struct spi_write spi_write_reg;

extern ad717x_dev *pad717x_dev;
//extern enum SPI_STATUS spi_status;
extern int check_command(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0

	if(strchr((char*)uart_buffer, ',') != NULL)
 8001dee:	212c      	movs	r1, #44	@ 0x2c
 8001df0:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <check_command+0x74>)
 8001df2:	f006 fc30 	bl	8008656 <strchr>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d022      	beq.n	8001e42 <check_command+0x5a>
	{
		char *command;
		char *endptr = strchr((char*)uart_buffer, ',');
 8001dfc:	212c      	movs	r1, #44	@ 0x2c
 8001dfe:	4817      	ldr	r0, [pc, #92]	@ (8001e5c <check_command+0x74>)
 8001e00:	f006 fc29 	bl	8008656 <strchr>
 8001e04:	60f8      	str	r0, [r7, #12]
		int length = endptr - (char*)uart_buffer;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <check_command+0x74>)
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
		command = (char*) malloc(length);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f005 fd65 	bl	80078e0 <malloc>
 8001e16:	4603      	mov	r3, r0
 8001e18:	607b      	str	r3, [r7, #4]
		strncpy(command, (char*) (uart_buffer+1), length);
 8001e1a:	4911      	ldr	r1, [pc, #68]	@ (8001e60 <check_command+0x78>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f006 fc25 	bl	8008670 <strncpy>
		command[length-1] = '\0';
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
		handle_command(command);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f844 	bl	8001ec0 <handle_command>
		free(command);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f005 fd59 	bl	80078f0 <free>
		return 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e008      	b.n	8001e54 <check_command+0x6c>
	}
	else if(strlen((char*) uart_buffer) > 200){
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <check_command+0x74>)
 8001e44:	f7fe fa44 	bl	80002d0 <strlen>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e4c:	d901      	bls.n	8001e52 <check_command+0x6a>
		reset_uart();
 8001e4e:	f000 f81d 	bl	8001e8c <reset_uart>
	}
	return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200006d4 	.word	0x200006d4
 8001e60:	200006d5 	.word	0x200006d5

08001e64 <send_string>:

extern void send_string(const char *msg)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(PC_UART, (uint8_t *)msg, strlen(msg), 100);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fa2f 	bl	80002d0 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	2364      	movs	r3, #100	@ 0x64
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <send_string+0x24>)
 8001e7c:	f004 fa44 	bl	8006308 <HAL_UART_Transmit>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200005cc 	.word	0x200005cc

08001e8c <reset_uart>:

extern void reset_uart(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	strncpy((char*)uart_buffer, "", UART_BUFFER_SIZE);
 8001e90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e94:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <reset_uart+0x28>)
 8001e96:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <reset_uart+0x2c>)
 8001e98:	f006 fbea 	bl	8008670 <strncpy>
	HAL_UART_DMAStop(PC_UART);
 8001e9c:	4807      	ldr	r0, [pc, #28]	@ (8001ebc <reset_uart+0x30>)
 8001e9e:	f004 fb54 	bl	800654a <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 8001ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea6:	4904      	ldr	r1, [pc, #16]	@ (8001eb8 <reset_uart+0x2c>)
 8001ea8:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <reset_uart+0x30>)
 8001eaa:	f004 fb29 	bl	8006500 <HAL_UART_Receive_DMA>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	0800a764 	.word	0x0800a764
 8001eb8:	200006d4 	.word	0x200006d4
 8001ebc:	200005cc 	.word	0x200005cc

08001ec0 <handle_command>:


extern void handle_command(char* txt_in)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	@ 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	uint8_t addr = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t value = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
	char *command = txt_in;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
	char *addr_str = (char*)uart_buffer + strlen(command) + 2;
 8001ed6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ed8:	f7fe f9fa 	bl	80002d0 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	3302      	adds	r3, #2
 8001ee0:	4a97      	ldr	r2, [pc, #604]	@ (8002140 <handle_command+0x280>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	623b      	str	r3, [r7, #32]

	char *endptr = strchr((char*)addr_str, ',');
 8001ee6:	212c      	movs	r1, #44	@ 0x2c
 8001ee8:	6a38      	ldr	r0, [r7, #32]
 8001eea:	f006 fbb4 	bl	8008656 <strchr>
 8001eee:	61f8      	str	r0, [r7, #28]
	int length = endptr - (char*)addr_str;
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	61bb      	str	r3, [r7, #24]
	char *value_str = (char*)addr_str + length + 1;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	3301      	adds	r3, #1
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	4413      	add	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
	if(strchr((char*)uart_buffer, '}') != NULL)
 8001f02:	217d      	movs	r1, #125	@ 0x7d
 8001f04:	488e      	ldr	r0, [pc, #568]	@ (8002140 <handle_command+0x280>)
 8001f06:	f006 fba6 	bl	8008656 <strchr>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <handle_command+0x7c>
	{
		addr = (uint8_t)strtoul(addr_str, NULL, 16);
 8001f10:	2210      	movs	r2, #16
 8001f12:	2100      	movs	r1, #0
 8001f14:	6a38      	ldr	r0, [r7, #32]
 8001f16:	f005 fe0f 	bl	8007b38 <strtoul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		value = (uint32_t)strtoul(value_str, NULL, 16);
 8001f20:	2210      	movs	r2, #16
 8001f22:	2100      	movs	r1, #0
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f005 fe07 	bl	8007b38 <strtoul>
 8001f2a:	62b8      	str	r0, [r7, #40]	@ 0x28

		reset_uart();
		return;
	}
	else return;
	if(!strcmp(command, "get_id")){
 8001f2c:	4985      	ldr	r1, [pc, #532]	@ (8002144 <handle_command+0x284>)
 8001f2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f30:	f7fe f96e 	bl	8000210 <strcmp>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d14a      	bne.n	8001fd0 <handle_command+0x110>
 8001f3a:	e045      	b.n	8001fc8 <handle_command+0x108>
	else if(strstr(command, "pattern") != NULL) // if command contains "pattern", it may have '\0' and string search doens't work. so check it separately
 8001f3c:	4982      	ldr	r1, [pc, #520]	@ (8002148 <handle_command+0x288>)
 8001f3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f40:	f006 fba9 	bl	8008696 <strstr>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80f3 	beq.w	8002132 <handle_command+0x272>
		uint16_t bulk = (uint16_t)strtoul(addr_str, NULL, 10);
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	2100      	movs	r1, #0
 8001f50:	6a38      	ldr	r0, [r7, #32]
 8001f52:	f005 fdf1 	bl	8007b38 <strtoul>
 8001f56:	4603      	mov	r3, r0
 8001f58:	827b      	strh	r3, [r7, #18]
		endptr = (bulk < 250) ? value_str + bulk * sizeof(float) : value_str + DAC_BULK_SIZE * sizeof(float);
 8001f5a:	8a7b      	ldrh	r3, [r7, #18]
 8001f5c:	2bf9      	cmp	r3, #249	@ 0xf9
 8001f5e:	d804      	bhi.n	8001f6a <handle_command+0xaa>
 8001f60:	8a7b      	ldrh	r3, [r7, #18]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4413      	add	r3, r2
 8001f68:	e002      	b.n	8001f70 <handle_command+0xb0>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f70:	61fb      	str	r3, [r7, #28]
		if(*(endptr) != '}') return;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f78:	f040 80dd 	bne.w	8002136 <handle_command+0x276>
		if(!strcmp(command, "pattern_init"))
 8001f7c:	4973      	ldr	r1, [pc, #460]	@ (800214c <handle_command+0x28c>)
 8001f7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f80:	f7fe f946 	bl	8000210 <strcmp>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d105      	bne.n	8001f96 <handle_command+0xd6>
			new_pattern(bulk, (uint8_t*)value_str);
 8001f8a:	8a7b      	ldrh	r3, [r7, #18]
 8001f8c:	6979      	ldr	r1, [r7, #20]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe9c 	bl	8001ccc <new_pattern>
 8001f94:	e015      	b.n	8001fc2 <handle_command+0x102>
		else if(!strcmp(command, "pattern_bulk"))
 8001f96:	496e      	ldr	r1, [pc, #440]	@ (8002150 <handle_command+0x290>)
 8001f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f9a:	f7fe f939 	bl	8000210 <strcmp>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <handle_command+0xf0>
			bulk_pattern(bulk, (uint8_t*)value_str);
 8001fa4:	8a7b      	ldrh	r3, [r7, #18]
 8001fa6:	6979      	ldr	r1, [r7, #20]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fed1 	bl	8001d50 <bulk_pattern>
 8001fae:	e008      	b.n	8001fc2 <handle_command+0x102>
		else if(!strcmp(command, "pattern_end"))
 8001fb0:	4968      	ldr	r1, [pc, #416]	@ (8002154 <handle_command+0x294>)
 8001fb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fb4:	f7fe f92c 	bl	8000210 <strcmp>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <handle_command+0x102>
			check_pattern();
 8001fbe:	f7ff ff0b 	bl	8001dd8 <check_pattern>
		reset_uart();
 8001fc2:	f7ff ff63 	bl	8001e8c <reset_uart>
		return;
 8001fc6:	e0b7      	b.n	8002138 <handle_command+0x278>
		spi_status = GETID;
 8001fc8:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <handle_command+0x298>)
 8001fca:	2204      	movs	r2, #4
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e0ad      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "getreg"))
 8001fd0:	4962      	ldr	r1, [pc, #392]	@ (800215c <handle_command+0x29c>)
 8001fd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fd4:	f7fe f91c 	bl	8000210 <strcmp>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d108      	bne.n	8001ff0 <handle_command+0x130>
	{
		AD717X_ReadRegister(pad717x_dev, addr);
 8001fde:	4b60      	ldr	r3, [pc, #384]	@ (8002160 <handle_command+0x2a0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fa13 	bl	8001414 <AD717X_ReadRegister>
 8001fee:	e09d      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "writereg"))
 8001ff0:	495c      	ldr	r1, [pc, #368]	@ (8002164 <handle_command+0x2a4>)
 8001ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff4:	f7fe f90c 	bl	8000210 <strcmp>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d117      	bne.n	800202e <handle_command+0x16e>
	{
		ad717x_st_reg *pReg = AD717X_GetReg(pad717x_dev, addr);
 8001ffe:	4b58      	ldr	r3, [pc, #352]	@ (8002160 <handle_command+0x2a0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f9c9 	bl	80013a0 <AD717X_GetReg>
 800200e:	60f8      	str	r0, [r7, #12]
		pReg->value = value;
 8002010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	605a      	str	r2, [r3, #4]
		spi_write_reg.value = value;
 8002016:	4a54      	ldr	r2, [pc, #336]	@ (8002168 <handle_command+0x2a8>)
 8002018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201a:	6093      	str	r3, [r2, #8]
		AD717X_WriteRegister(pad717x_dev, addr);
 800201c:	4b50      	ldr	r3, [pc, #320]	@ (8002160 <handle_command+0x2a0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fa7a 	bl	8001520 <AD717X_WriteRegister>
 800202c:	e07e      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "send"))
 800202e:	494f      	ldr	r1, [pc, #316]	@ (800216c <handle_command+0x2ac>)
 8002030:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002032:	f7fe f8ed 	bl	8000210 <strcmp>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <handle_command+0x1a0>
	{
		if(spi_status != SENDING && adc_sm == ADC_IDLE)
 800203c:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <handle_command+0x298>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b06      	cmp	r3, #6
 8002044:	d008      	beq.n	8002058 <handle_command+0x198>
 8002046:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <handle_command+0x2b0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <handle_command+0x198>
			adc_start(true);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fd13 	bl	8001a7c <adc_start>
 8002056:	e069      	b.n	800212c <handle_command+0x26c>
		else
			adc_start(false);
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fd0f 	bl	8001a7c <adc_start>
 800205e:	e065      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "start"))
 8002060:	4944      	ldr	r1, [pc, #272]	@ (8002174 <handle_command+0x2b4>)
 8002062:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002064:	f7fe f8d4 	bl	8000210 <strcmp>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10b      	bne.n	8002086 <handle_command+0x1c6>
		if(addr) adc_start(true); else adc_start(false);
 800206e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <handle_command+0x1be>
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff fd00 	bl	8001a7c <adc_start>
 800207c:	e056      	b.n	800212c <handle_command+0x26c>
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fcfc 	bl	8001a7c <adc_start>
 8002084:	e052      	b.n	800212c <handle_command+0x26c>
	else if(!strcmp(command, "adc_mode"))
 8002086:	493c      	ldr	r1, [pc, #240]	@ (8002178 <handle_command+0x2b8>)
 8002088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800208a:	f7fe f8c1 	bl	8000210 <strcmp>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <handle_command+0x1e6>
	{
		ad717x_set_adc_mode(pad717x_dev, addr);
 8002094:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <handle_command+0x2a0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe ff70 	bl	8000f84 <ad717x_set_adc_mode>
 80020a4:	e042      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "dac_read"))
 80020a6:	4935      	ldr	r1, [pc, #212]	@ (800217c <handle_command+0x2bc>)
 80020a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020aa:	f7fe f8b1 	bl	8000210 <strcmp>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <handle_command+0x202>
	{
		dac_read(addr, 1);
 80020b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fd0c 	bl	8001ad8 <dac_read>
 80020c0:	e034      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "dac_write"))
 80020c2:	492f      	ldr	r1, [pc, #188]	@ (8002180 <handle_command+0x2c0>)
 80020c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020c6:	f7fe f8a3 	bl	8000210 <strcmp>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <handle_command+0x222>
	{
		dac_write(addr, (uint16_t)value);
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fd72 	bl	8001bc4 <dac_write>
 80020e0:	e024      	b.n	800212c <handle_command+0x26c>
	}
	else if(!strcmp(command, "dac_update"))
 80020e2:	4928      	ldr	r1, [pc, #160]	@ (8002184 <handle_command+0x2c4>)
 80020e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e6:	f7fe f893 	bl	8000210 <strcmp>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d115      	bne.n	800211c <handle_command+0x25c>
	{
		value = (uint16_t)strtoul(value_str, NULL, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f005 fd1f 	bl	8007b38 <strtoul>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		dac_update((float)value/1000);
 8002100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8002188 <handle_command+0x2c8>
 800210e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002112:	eeb0 0a47 	vmov.f32	s0, s14
 8002116:	f7ff fd91 	bl	8001c3c <dac_update>
 800211a:	e007      	b.n	800212c <handle_command+0x26c>
	}

	else{
		send_string("{Unknown msg,end}\r\n");
 800211c:	481b      	ldr	r0, [pc, #108]	@ (800218c <handle_command+0x2cc>)
 800211e:	f7ff fea1 	bl	8001e64 <send_string>
		send_string(command);
 8002122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002124:	f7ff fe9e 	bl	8001e64 <send_string>
		reset_uart();
 8002128:	f7ff feb0 	bl	8001e8c <reset_uart>
	}
	reset_uart();
 800212c:	f7ff feae 	bl	8001e8c <reset_uart>
 8002130:	e002      	b.n	8002138 <handle_command+0x278>
	else return;
 8002132:	bf00      	nop
 8002134:	e000      	b.n	8002138 <handle_command+0x278>
		if(*(endptr) != '}') return;
 8002136:	bf00      	nop

}
 8002138:	3730      	adds	r7, #48	@ 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200006d4 	.word	0x200006d4
 8002144:	0800a79c 	.word	0x0800a79c
 8002148:	0800a768 	.word	0x0800a768
 800214c:	0800a770 	.word	0x0800a770
 8002150:	0800a780 	.word	0x0800a780
 8002154:	0800a790 	.word	0x0800a790
 8002158:	2001e5f4 	.word	0x2001e5f4
 800215c:	0800a7a4 	.word	0x0800a7a4
 8002160:	2001e5f0 	.word	0x2001e5f0
 8002164:	0800a7ac 	.word	0x0800a7ac
 8002168:	2001e600 	.word	0x2001e600
 800216c:	0800a7b8 	.word	0x0800a7b8
 8002170:	2001e5f5 	.word	0x2001e5f5
 8002174:	0800a7c0 	.word	0x0800a7c0
 8002178:	0800a7c8 	.word	0x0800a7c8
 800217c:	0800a7d4 	.word	0x0800a7d4
 8002180:	0800a7e0 	.word	0x0800a7e0
 8002184:	0800a7ec 	.word	0x0800a7ec
 8002188:	447a0000 	.word	0x447a0000
 800218c:	0800a7f8 	.word	0x0800a7f8

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002196:	f000 ffed 	bl	8003174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219a:	f000 f8bd 	bl	8002318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219e:	f000 fa85 	bl	80026ac <MX_GPIO_Init>
  MX_DMA_Init();
 80021a2:	f000 fa5b 	bl	800265c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021a6:	f000 fa2f 	bl	8002608 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80021aa:	f000 f927 	bl	80023fc <MX_SPI1_Init>
  MX_TIM2_Init();
 80021ae:	f000 f991 	bl	80024d4 <MX_TIM2_Init>
  MX_SPI2_Init();
 80021b2:	f000 f959 	bl	8002468 <MX_SPI2_Init>
  MX_TIM3_Init();
 80021b6:	f000 f9d9 	bl	800256c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ad717x_app_initialize();
 80021ba:	f000 fafb 	bl	80027b4 <ad717x_app_initialize>


  ad717x_configure_device_odr(pad717x_dev, 0, sps_1007);
 80021be:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <main+0x174>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	220a      	movs	r2, #10
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fa8a 	bl	80016e0 <ad717x_configure_device_odr>
  HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f001 f83d 	bl	800324c <HAL_Delay>
  ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
 80021d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002304 <main+0x174>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fed3 	bl	8000f84 <ad717x_set_adc_mode>

  ad717x_set_clock(pad717x_dev, 3);
 80021de:	4b49      	ldr	r3, [pc, #292]	@ (8002304 <main+0x174>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2103      	movs	r1, #3
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fb4d 	bl	8001884 <ad717x_set_clock>
  union ad717x_analog_inputs AIN_0;
  AIN_0.analog_input_pairs = VIN0_VIN1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	813b      	strh	r3, [r7, #8]
  HAL_Delay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f001 f82c 	bl	800324c <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 0, AIN_0);
 80021f4:	4b43      	ldr	r3, [pc, #268]	@ (8002304 <main+0x174>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	893a      	ldrh	r2, [r7, #8]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fef9 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8002202:	200a      	movs	r0, #10
 8002204:	f001 f822 	bl	800324c <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 0, 0);
 8002208:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <main+0x174>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ff7b 	bl	800110c <ad717x_assign_setup>
  HAL_Delay(10);
 8002216:	200a      	movs	r0, #10
 8002218:	f001 f818 	bl	800324c <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 0, 1);
 800221c:	4b39      	ldr	r3, [pc, #228]	@ (8002304 <main+0x174>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2201      	movs	r2, #1
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe67 	bl	8000ef8 <ad717x_set_channel_status>



  union ad717x_analog_inputs AIN_2;
  AIN_2.analog_input_pairs = VIN2_VIN3;
 800222a:	2343      	movs	r3, #67	@ 0x43
 800222c:	80bb      	strh	r3, [r7, #4]
  HAL_Delay(10);
 800222e:	200a      	movs	r0, #10
 8002230:	f001 f80c 	bl	800324c <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 2, AIN_2);
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <main+0x174>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	88ba      	ldrh	r2, [r7, #4]
 800223a:	2102      	movs	r1, #2
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fed9 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8002242:	200a      	movs	r0, #10
 8002244:	f001 f802 	bl	800324c <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 2, 1);
 8002248:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <main+0x174>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	2102      	movs	r1, #2
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fe51 	bl	8000ef8 <ad717x_set_channel_status>
  HAL_Delay(10);
 8002256:	200a      	movs	r0, #10
 8002258:	f000 fff8 	bl	800324c <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 2, 0);
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <main+0x174>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2102      	movs	r1, #2
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe ff51 	bl	800110c <ad717x_assign_setup>


  HAL_Delay(10);
 800226a:	200a      	movs	r0, #10
 800226c:	f000 ffee 	bl	800324c <HAL_Delay>
  ad717x_set_polarity(pad717x_dev, 1, 0);
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <main+0x174>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe ff8b 	bl	8001194 <ad717x_set_polarity>
  HAL_Delay(10);
 800227e:	200a      	movs	r0, #10
 8002280:	f000 ffe4 	bl	800324c <HAL_Delay>
  ad717x_set_reference_source(pad717x_dev, EXTERNAL_REF, 0);
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <main+0x174>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe ffc5 	bl	800121c <ad717x_set_reference_source>
  HAL_Delay(10);
 8002292:	200a      	movs	r0, #10
 8002294:	f000 ffda 	bl	800324c <HAL_Delay>

  HAL_Delay(10);
 8002298:	200a      	movs	r0, #10
 800229a:	f000 ffd7 	bl	800324c <HAL_Delay>
  ad717x_enable_input_buffer(pad717x_dev, 1, 0, 0);
 800229e:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <main+0x174>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	2200      	movs	r2, #0
 80022a6:	2101      	movs	r1, #1
 80022a8:	f7ff f81a 	bl	80012e0 <ad717x_enable_input_buffer>
  HAL_Delay(10);
 80022ac:	200a      	movs	r0, #10
 80022ae:	f000 ffcd 	bl	800324c <HAL_Delay>

  ad717x_set_data_stat(pad717x_dev, true);
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <main+0x174>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fb09 	bl	80018d0 <ad717x_set_data_stat>



  // Initial Message for PC:
  char *init_msg = "{inf,\r\nWelcome to Pourostad Project,end}\r\n";
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <main+0x178>)
 80022c0:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(PC_UART, (uint8_t*)init_msg, strlen(init_msg), 10);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7fe f804 	bl	80002d0 <strlen>
 80022c8:	4603      	mov	r3, r0
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	230a      	movs	r3, #10
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	480e      	ldr	r0, [pc, #56]	@ (800230c <main+0x17c>)
 80022d2:	f004 f819 	bl	8006308 <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 80022d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <main+0x180>)
 80022dc:	480b      	ldr	r0, [pc, #44]	@ (800230c <main+0x17c>)
 80022de:	f004 f90f 	bl	8006500 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim2.Instance->CNT = 0;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <main+0x184>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80022ea:	480a      	ldr	r0, [pc, #40]	@ (8002314 <main+0x184>)
 80022ec:	f003 fb06 	bl	80058fc <HAL_TIM_Base_Start>
  dac_init(0); // init DAC for the first time
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fcc7 	bl	8001c84 <dac_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uart_buffer[0]!='\0')
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <main+0x180>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0fb      	beq.n	80022f6 <main+0x166>
	  {
		  check_command();
 80022fe:	f7ff fd73 	bl	8001de8 <check_command>
	  if(uart_buffer[0]!='\0')
 8002302:	e7f8      	b.n	80022f6 <main+0x166>
 8002304:	2001e5f0 	.word	0x2001e5f0
 8002308:	0800a80c 	.word	0x0800a80c
 800230c:	200005cc 	.word	0x200005cc
 8002310:	200006d4 	.word	0x200006d4
 8002314:	2000053c 	.word	0x2000053c

08002318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b094      	sub	sp, #80	@ 0x50
 800231c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	2234      	movs	r2, #52	@ 0x34
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f006 f98d 	bl	8008646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	4b2c      	ldr	r3, [pc, #176]	@ (80023f4 <SystemClock_Config+0xdc>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	4a2b      	ldr	r2, [pc, #172]	@ (80023f4 <SystemClock_Config+0xdc>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234a:	6413      	str	r3, [r2, #64]	@ 0x40
 800234c:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <SystemClock_Config+0xdc>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002358:	2300      	movs	r3, #0
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	4b26      	ldr	r3, [pc, #152]	@ (80023f8 <SystemClock_Config+0xe0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <SystemClock_Config+0xe0>)
 8002362:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b23      	ldr	r3, [pc, #140]	@ (80023f8 <SystemClock_Config+0xe0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002378:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800237c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237e:	2302      	movs	r3, #2
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002382:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002388:	2304      	movs	r3, #4
 800238a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800238c:	23b4      	movs	r3, #180	@ 0xb4
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002390:	2302      	movs	r3, #2
 8002392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002394:	2306      	movs	r3, #6
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002398:	2302      	movs	r3, #2
 800239a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 f9eb 	bl	800477c <HAL_RCC_OscConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80023ac:	f000 fbda 	bl	8002b64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023b0:	f001 fe4a 	bl	8004048 <HAL_PWREx_EnableOverDrive>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023ba:	f000 fbd3 	bl	8002b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023be:	230f      	movs	r3, #15
 80023c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c2:	2302      	movs	r3, #2
 80023c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	2105      	movs	r1, #5
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 fe83 	bl	80040e8 <HAL_RCC_ClockConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80023e8:	f000 fbbc 	bl	8002b64 <Error_Handler>
  }
}
 80023ec:	bf00      	nop
 80023ee:	3750      	adds	r7, #80	@ 0x50
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000

080023fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002400:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002402:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <MX_SPI1_Init+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800240c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002414:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <MX_SPI1_Init+0x64>)
 800241c:	2202      	movs	r2, #2
 800241e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002422:	2201      	movs	r2, #1
 8002424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002430:	2210      	movs	r2, #16
 8002432:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <MX_SPI1_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <MX_SPI1_Init+0x64>)
 8002448:	220a      	movs	r2, #10
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800244c:	4804      	ldr	r0, [pc, #16]	@ (8002460 <MX_SPI1_Init+0x64>)
 800244e:	f002 fc33 	bl	8004cb8 <HAL_SPI_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002458:	f000 fb84 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000048c 	.word	0x2000048c
 8002464:	40013000 	.word	0x40013000

08002468 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <MX_SPI2_Init+0x64>)
 800246e:	4a18      	ldr	r2, [pc, #96]	@ (80024d0 <MX_SPI2_Init+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <MX_SPI2_Init+0x64>)
 8002474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002478:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800247a:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <MX_SPI2_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <MX_SPI2_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <MX_SPI2_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <MX_SPI2_Init+0x64>)
 800248e:	2201      	movs	r2, #1
 8002490:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002492:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <MX_SPI2_Init+0x64>)
 8002494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002498:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_SPI2_Init+0x64>)
 800249c:	2218      	movs	r2, #24
 800249e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <MX_SPI2_Init+0x64>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_SPI2_Init+0x64>)
 80024b4:	220a      	movs	r2, #10
 80024b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <MX_SPI2_Init+0x64>)
 80024ba:	f002 fbfd 	bl	8004cb8 <HAL_SPI_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024c4:	f000 fb4e 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200004e4 	.word	0x200004e4
 80024d0:	40003800 	.word	0x40003800

080024d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e8:	463b      	mov	r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <MX_TIM2_Init+0x94>)
 80024f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <MX_TIM2_Init+0x94>)
 80024fa:	2259      	movs	r2, #89	@ 0x59
 80024fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <MX_TIM2_Init+0x94>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <MX_TIM2_Init+0x94>)
 8002506:	f04f 32ff 	mov.w	r2, #4294967295
 800250a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_TIM2_Init+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <MX_TIM2_Init+0x94>)
 8002514:	2280      	movs	r2, #128	@ 0x80
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002518:	4813      	ldr	r0, [pc, #76]	@ (8002568 <MX_TIM2_Init+0x94>)
 800251a:	f003 f99f 	bl	800585c <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002524:	f000 fb1e 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4619      	mov	r1, r3
 8002534:	480c      	ldr	r0, [pc, #48]	@ (8002568 <MX_TIM2_Init+0x94>)
 8002536:	f003 fbd1 	bl	8005cdc <HAL_TIM_ConfigClockSource>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002540:	f000 fb10 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800254c:	463b      	mov	r3, r7
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	@ (8002568 <MX_TIM2_Init+0x94>)
 8002552:	f003 fdf9 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800255c:	f000 fb02 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000053c 	.word	0x2000053c

0800256c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	463b      	mov	r3, r7
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <MX_TIM3_Init+0x94>)
 800258a:	4a1e      	ldr	r2, [pc, #120]	@ (8002604 <MX_TIM3_Init+0x98>)
 800258c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <MX_TIM3_Init+0x94>)
 8002590:	2259      	movs	r2, #89	@ 0x59
 8002592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <MX_TIM3_Init+0x94>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <MX_TIM3_Init+0x94>)
 800259c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <MX_TIM3_Init+0x94>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a8:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <MX_TIM3_Init+0x94>)
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ae:	4814      	ldr	r0, [pc, #80]	@ (8002600 <MX_TIM3_Init+0x94>)
 80025b0:	f003 f954 	bl	800585c <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025ba:	f000 fad3 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4619      	mov	r1, r3
 80025ca:	480d      	ldr	r0, [pc, #52]	@ (8002600 <MX_TIM3_Init+0x94>)
 80025cc:	f003 fb86 	bl	8005cdc <HAL_TIM_ConfigClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025d6:	f000 fac5 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025da:	2320      	movs	r3, #32
 80025dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025e2:	463b      	mov	r3, r7
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	@ (8002600 <MX_TIM3_Init+0x94>)
 80025e8:	f003 fdae 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80025f2:	f000 fab7 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000584 	.word	0x20000584
 8002604:	40000400 	.word	0x40000400

08002608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 800260e:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 8002610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 8002614:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <MX_USART2_UART_Init+0x50>)
 8002616:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 800262c:	220c      	movs	r2, #12
 800262e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <MX_USART2_UART_Init+0x48>)
 800263e:	f003 fe13 	bl	8006268 <HAL_UART_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002648:	f000 fa8c 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200005cc 	.word	0x200005cc
 8002654:	40004400 	.word	0x40004400
 8002658:	00119400 	.word	0x00119400

0800265c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <MX_DMA_Init+0x4c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a0f      	ldr	r2, [pc, #60]	@ (80026a8 <MX_DMA_Init+0x4c>)
 800266c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <MX_DMA_Init+0x4c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 1);
 800267e:	2201      	movs	r2, #1
 8002680:	2100      	movs	r1, #0
 8002682:	2010      	movs	r0, #16
 8002684:	f000 fee1 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002688:	2010      	movs	r0, #16
 800268a:	f000 fefa 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 2);
 800268e:	2202      	movs	r2, #2
 8002690:	2100      	movs	r1, #0
 8002692:	2011      	movs	r0, #17
 8002694:	f000 fed9 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002698:	2011      	movs	r0, #17
 800269a:	f000 fef2 	bl	8003482 <HAL_NVIC_EnableIRQ>

}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a37      	ldr	r2, [pc, #220]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b35      	ldr	r3, [pc, #212]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b31      	ldr	r3, [pc, #196]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a30      	ldr	r2, [pc, #192]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 80026e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a29      	ldr	r2, [pc, #164]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a22      	ldr	r2, [pc, #136]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <MX_GPIO_Init+0xfc>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	2102      	movs	r1, #2
 8002736:	481d      	ldr	r0, [pc, #116]	@ (80027ac <MX_GPIO_Init+0x100>)
 8002738:	f001 fc54 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	2140      	movs	r1, #64	@ 0x40
 8002740:	481a      	ldr	r0, [pc, #104]	@ (80027ac <MX_GPIO_Init+0x100>)
 8002742:	f001 fc4f 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin DRY_Pin */
  GPIO_InitStruct.Pin = B1_Pin|DRY_Pin;
 8002746:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800274a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800274c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4814      	ldr	r0, [pc, #80]	@ (80027b0 <MX_GPIO_Init+0x104>)
 800275e:	f001 faad 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin|SPI1_CS_Pin;
 8002762:	2342      	movs	r3, #66	@ 0x42
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <MX_GPIO_Init+0x100>)
 800277a:	f001 fa9f 	bl	8003cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2017      	movs	r0, #23
 8002784:	f000 fe61 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002788:	2017      	movs	r0, #23
 800278a:	f000 fe7a 	bl	8003482 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 800278e:	2202      	movs	r2, #2
 8002790:	2100      	movs	r1, #0
 8002792:	2028      	movs	r0, #40	@ 0x28
 8002794:	f000 fe59 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002798:	2028      	movs	r0, #40	@ 0x28
 800279a:	f000 fe72 	bl	8003482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	@ 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800

080027b4 <ad717x_app_initialize>:

/* USER CODE BEGIN 4 */
int32_t ad717x_app_initialize(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b0dc      	sub	sp, #368	@ 0x170
 80027b8:	af2c      	add	r7, sp, #176	@ 0xb0
	// Used to create the ad717x device
	ad717x_init_param ad717x_init = {
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	22bc      	movs	r2, #188	@ 0xbc
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f005 ff40 	bl	8008646 <memset>
 80027c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <ad717x_app_initialize+0x50>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <ad717x_app_initialize+0x54>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	733b      	strb	r3, [r7, #12]
 80027d2:	2303      	movs	r3, #3
 80027d4:	737b      	strb	r3, [r7, #13]
 80027d6:	2301      	movs	r3, #1
 80027d8:	73bb      	strb	r3, [r7, #14]
 80027da:	2310      	movs	r3, #16
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	2308      	movs	r3, #8
 80027e0:	743b      	strb	r3, [r7, #16]
		8,						// Setup Number

	};

	// Initialze the device
	return (AD717X_Init(&pad717x_dev, ad717x_init));
 80027e2:	4668      	mov	r0, sp
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	22b0      	movs	r2, #176	@ 0xb0
 80027ea:	4619      	mov	r1, r3
 80027ec:	f005 fff1 	bl	80087d2 <memcpy>
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f4:	4805      	ldr	r0, [pc, #20]	@ (800280c <ad717x_app_initialize+0x58>)
 80027f6:	f7fe ffab 	bl	8001750 <AD717X_Init>
 80027fa:	4603      	mov	r3, r0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	37c0      	adds	r7, #192	@ 0xc0
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000294 	.word	0x20000294
 8002808:	20000298 	.word	0x20000298
 800280c:	2001e5f0 	.word	0x2001e5f0

08002810 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b0a1      	sub	sp, #132	@ 0x84
 8002814:	af02      	add	r7, sp, #8
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == DRY_Pin) {
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b80      	cmp	r3, #128	@ 0x80
 800281e:	f040 8129 	bne.w	8002a74 <HAL_GPIO_EXTI_Callback+0x264>
	  adc_channel_offset++;
 8002822:	4b97      	ldr	r3, [pc, #604]	@ (8002a80 <HAL_GPIO_EXTI_Callback+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a95      	ldr	r2, [pc, #596]	@ (8002a80 <HAL_GPIO_EXTI_Callback+0x270>)
 800282a:	6013      	str	r3, [r2, #0]
	  if(spi_status == READING)
 800282c:	4b95      	ldr	r3, [pc, #596]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	f040 8091 	bne.w	800295a <HAL_GPIO_EXTI_Callback+0x14a>
	  {
//		  uint8_t Tx = 0x40;
		  uint8_t Rx[8] = {0};
 8002838:	2300      	movs	r3, #0
 800283a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800283c:	2300      	movs	r3, #0
 800283e:	65fb      	str	r3, [r7, #92]	@ 0x5c
//		  Rx[0] = 0x40;
//		  HAL_SPI_TransmitReceive(SPI, &Tx, Rx, 2, 10);
//		  HAL_SPI_Receive(SPI, Rx, 1, 100);
//		  adc_channel_offset = Rx[0] & 0x0f;

			ad717x_st_reg *pReg = (ad717x_st_reg*)spi_read_reg.pReg;
 8002840:	4b91      	ldr	r3, [pc, #580]	@ (8002a88 <HAL_GPIO_EXTI_Callback+0x278>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	667b      	str	r3, [r7, #100]	@ 0x64
//			uint8_t Rx[8] = {0};
			HAL_SPI_Transmit(SPI, &spi_read_reg.Tx, 1, 100);
 8002846:	2364      	movs	r3, #100	@ 0x64
 8002848:	2201      	movs	r2, #1
 800284a:	498f      	ldr	r1, [pc, #572]	@ (8002a88 <HAL_GPIO_EXTI_Callback+0x278>)
 800284c:	488f      	ldr	r0, [pc, #572]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 800284e:	f002 fabc 	bl	8004dca <HAL_SPI_Transmit>

			HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 8002852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	b29a      	uxth	r2, r3
 8002858:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800285c:	2364      	movs	r3, #100	@ 0x64
 800285e:	488b      	ldr	r0, [pc, #556]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002860:	f002 fbf7 	bl	8005052 <HAL_SPI_Receive>


			pReg->value = 0;
 8002864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002866:	2200      	movs	r2, #0
 8002868:	605a      	str	r2, [r3, #4]
			int data_size = pReg->size;
 800286a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	677b      	str	r3, [r7, #116]	@ 0x74
			if(pReg->addr == 0x04)
 8002870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d101      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x6c>
				data_size = 3;
 8002878:	2303      	movs	r3, #3
 800287a:	677b      	str	r3, [r7, #116]	@ 0x74
			for(int i = 0; i < data_size; i++) {
 800287c:	2300      	movs	r3, #0
 800287e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002880:	e011      	b.n	80028a6 <HAL_GPIO_EXTI_Callback+0x96>
				pReg->value <<= 8;
 8002882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	021a      	lsls	r2, r3, #8
 8002888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800288a:	605a      	str	r2, [r3, #4]
				pReg->value += Rx[i];
 800288c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002894:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002896:	440a      	add	r2, r1
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	441a      	add	r2, r3
 800289c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800289e:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < data_size; i++) {
 80028a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028a2:	3301      	adds	r3, #1
 80028a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80028a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80028a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dbe9      	blt.n	8002882 <HAL_GPIO_EXTI_Callback+0x72>
			}
		  	spi_status = IDLE;
 80028ae:	4b75      	ldr	r3, [pc, #468]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
		  	if(pReg->addr == 0x04) //if it is read data
 80028b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d13f      	bne.n	800293c <HAL_GPIO_EXTI_Callback+0x12c>
		  	{

		  		if(adc_sm == ADC_IDLE)
 80028bc:	4b74      	ldr	r3, [pc, #464]	@ (8002a90 <HAL_GPIO_EXTI_Callback+0x280>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d129      	bne.n	800291a <HAL_GPIO_EXTI_Callback+0x10a>
		  		{
		  			float data = (((float) pReg->value / (1<<23))-1) * 25;
 80028c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002a94 <HAL_GPIO_EXTI_Callback+0x284>
 80028d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028e2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80028e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ea:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
					char hexString[24];
					sprintf(hexString, "{inf,\r\n%u %.4f,end}", Rx[3], data);
 80028ee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80028f2:	461c      	mov	r4, r3
 80028f4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80028f6:	f7fd fe57 	bl	80005a8 <__aeabi_f2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002902:	e9cd 2300 	strd	r2, r3, [sp]
 8002906:	4622      	mov	r2, r4
 8002908:	4963      	ldr	r1, [pc, #396]	@ (8002a98 <HAL_GPIO_EXTI_Callback+0x288>)
 800290a:	f005 fe39 	bl	8008580 <siprintf>
					send_string(hexString);
 800290e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff faa6 	bl	8001e64 <send_string>
		  spi_status = SENDING;
	  }
  } else {
      __NOP();
  }
}
 8002918:	e0ad      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
		  			adc_channel_offset = Rx[3];
 800291a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800291e:	461a      	mov	r2, r3
 8002920:	4b57      	ldr	r3, [pc, #348]	@ (8002a80 <HAL_GPIO_EXTI_Callback+0x270>)
 8002922:	601a      	str	r2, [r3, #0]
		  			adc_to_buf(pReg->value);
 8002924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fff7 	bl	800191c <adc_to_buf>
		  			adc_sm = ADC_IDLE;
 800292e:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_GPIO_EXTI_Callback+0x280>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
		  			spi_status = SENDING;
 8002934:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 8002936:	2206      	movs	r2, #6
 8002938:	701a      	strb	r2, [r3, #0]
}
 800293a:	e09c      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
				sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 800293c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002946:	4955      	ldr	r1, [pc, #340]	@ (8002a9c <HAL_GPIO_EXTI_Callback+0x28c>)
 8002948:	4618      	mov	r0, r3
 800294a:	f005 fe19 	bl	8008580 <siprintf>
				send_string(hexString);
 800294e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fa86 	bl	8001e64 <send_string>
}
 8002958:	e08d      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == WRITING)
 800295a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d11c      	bne.n	800299e <HAL_GPIO_EXTI_Callback+0x18e>
		  ad717x_st_reg *pReg = (ad717x_st_reg*)spi_write_reg.pReg;
 8002964:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	66bb      	str	r3, [r7, #104]	@ 0x68
		  HAL_SPI_Transmit(SPI, spi_write_reg.Tx, pReg->size + 1, 100);
 800296a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	b29b      	uxth	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	2364      	movs	r3, #100	@ 0x64
 8002976:	494a      	ldr	r1, [pc, #296]	@ (8002aa0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002978:	4844      	ldr	r0, [pc, #272]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 800297a:	f002 fa26 	bl	8004dca <HAL_SPI_Transmit>
		  send_string("{inf,\r\nwrite done,end}\r\n");
 800297e:	4849      	ldr	r0, [pc, #292]	@ (8002aa4 <HAL_GPIO_EXTI_Callback+0x294>)
 8002980:	f7ff fa70 	bl	8001e64 <send_string>
		  spi_status = IDLE;
 8002984:	4b3f      	ldr	r3, [pc, #252]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, pReg->addr);
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_GPIO_EXTI_Callback+0x298>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f7fe fd3c 	bl	8001414 <AD717X_ReadRegister>
}
 800299c:	e06b      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == TRIGGER)
 800299e:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d103      	bne.n	80029b0 <HAL_GPIO_EXTI_Callback+0x1a0>
		spi_status = READING;
 80029a8:	4b36      	ldr	r3, [pc, #216]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
}
 80029ae:	e062      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
	  else if (spi_status == GETID)
 80029b0:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d12e      	bne.n	8002a18 <HAL_GPIO_EXTI_Callback+0x208>
		uint8_t Tx = 0x47;
 80029ba:	2347      	movs	r3, #71	@ 0x47
 80029bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		uint8_t Rx[2] = {0};
 80029c0:	2300      	movs	r3, #0
 80029c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 80029c4:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 80029c8:	230a      	movs	r3, #10
 80029ca:	2201      	movs	r2, #1
 80029cc:	482f      	ldr	r0, [pc, #188]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 80029ce:	f002 f9fc 	bl	8004dca <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, 2, 100);
 80029d2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80029d6:	2364      	movs	r3, #100	@ 0x64
 80029d8:	2202      	movs	r2, #2
 80029da:	482c      	ldr	r0, [pc, #176]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 80029dc:	f002 fb39 	bl	8005052 <HAL_SPI_Receive>
		uint16_t receivedData = (Rx[0] << 8) | Rx[1];
 80029e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", receivedData);  // Format as hex string with "0x" prefix
 80029f6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4927      	ldr	r1, [pc, #156]	@ (8002a9c <HAL_GPIO_EXTI_Callback+0x28c>)
 8002a00:	4618      	mov	r0, r3
 8002a02:	f005 fdbd 	bl	8008580 <siprintf>
		send_string(hexString);
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fa2a 	bl	8001e64 <send_string>
		spi_status = IDLE;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	e02e      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == SENDING)
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d109      	bne.n	8002a36 <HAL_GPIO_EXTI_Callback+0x226>
		  adc_sm = ADC_READING;
 8002a22:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_GPIO_EXTI_Callback+0x280>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, 4);
 8002a28:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <HAL_GPIO_EXTI_Callback+0x298>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fcf0 	bl	8001414 <AD717X_ReadRegister>
}
 8002a34:	e01f      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == CHANNEL_OFFSET)
 8002a36:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b07      	cmp	r3, #7
 8002a3e:	d11a      	bne.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
		  uint8_t Tx = 0x40;
 8002a40:	2340      	movs	r3, #64	@ 0x40
 8002a42:	72fb      	strb	r3, [r7, #11]
		  uint8_t Rx[2] = {0};
 8002a44:	2300      	movs	r3, #0
 8002a46:	813b      	strh	r3, [r7, #8]
		  HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 8002a48:	f107 010b 	add.w	r1, r7, #11
 8002a4c:	230a      	movs	r3, #10
 8002a4e:	2201      	movs	r2, #1
 8002a50:	480e      	ldr	r0, [pc, #56]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002a52:	f002 f9ba 	bl	8004dca <HAL_SPI_Transmit>
		  HAL_SPI_Receive(SPI, Rx, 2, 100);
 8002a56:	f107 0108 	add.w	r1, r7, #8
 8002a5a:	2364      	movs	r3, #100	@ 0x64
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	480b      	ldr	r0, [pc, #44]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002a60:	f002 faf7 	bl	8005052 <HAL_SPI_Receive>
		  adc_channel_offset = Rx[1];
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_GPIO_EXTI_Callback+0x270>)
 8002a6a:	601a      	str	r2, [r3, #0]
		  spi_status = SENDING;
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x274>)
 8002a6e:	2206      	movs	r2, #6
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	e000      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x266>
      __NOP();
 8002a74:	bf00      	nop
}
 8002a76:	bf00      	nop
 8002a78:	377c      	adds	r7, #124	@ 0x7c
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20001128 	.word	0x20001128
 8002a84:	2001e5f4 	.word	0x2001e5f4
 8002a88:	2001e5f8 	.word	0x2001e5f8
 8002a8c:	2000048c 	.word	0x2000048c
 8002a90:	2001e5f5 	.word	0x2001e5f5
 8002a94:	4b000000 	.word	0x4b000000
 8002a98:	0800a838 	.word	0x0800a838
 8002a9c:	0800a84c 	.word	0x0800a84c
 8002aa0:	2001e600 	.word	0x2001e600
 8002aa4:	0800a864 	.word	0x0800a864
 8002aa8:	2001e5f0 	.word	0x2001e5f0

08002aac <delay_us>:

void delay_us(uint32_t us)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	uint32_t t_start = htim2.Instance->CNT;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <delay_us+0x30>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	60fb      	str	r3, [r7, #12]
	while(htim2.Instance->CNT - t_start < us);
 8002abc:	bf00      	nop
 8002abe:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <delay_us+0x30>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d8f7      	bhi.n	8002abe <delay_us+0x12>
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	2000053c 	.word	0x2000053c

08002ae0 <HAL_UART_TxCpltCallback>:
//		pReg->value += Rx[i];
//	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d11e      	bne.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(DAC_idx >= DAC_length)
 8002b06:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d309      	bcc.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			DAC_idx = 0;
 8002b12:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim3);
 8002b18:	480f      	ldr	r0, [pc, #60]	@ (8002b58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002b1a:	f002 ff57 	bl	80059cc <HAL_TIM_Base_Stop>
			send_string("{cmd,\r\nend_pattern,end}\r\n");
 8002b1e:	480f      	ldr	r0, [pc, #60]	@ (8002b5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002b20:	f7ff f9a0 	bl	8001e64 <send_string>
			return;
 8002b24:	e00e      	b.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		dac_update(DAC_pattern[DAC_idx++]);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	b291      	uxth	r1, r2
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b30:	8011      	strh	r1, [r2, #0]
 8002b32:	4a0b      	ldr	r2, [pc, #44]	@ (8002b60 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b40:	f7ff f87c 	bl	8001c3c <dac_update>
	}
}
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	2001e5ee 	.word	0x2001e5ee
 8002b54:	2001e5ec 	.word	0x2001e5ec
 8002b58:	20000584 	.word	0x20000584
 8002b5c:	0800a8a8 	.word	0x0800a8a8
 8002b60:	2000112c 	.word	0x2000112c

08002b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b68:	b672      	cpsid	i
}
 8002b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <Error_Handler+0x8>

08002b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <HAL_MspInit+0x4c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bbc <HAL_MspInit+0x4c>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <HAL_MspInit+0x4c>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_MspInit+0x4c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <HAL_MspInit+0x4c>)
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_MspInit+0x4c>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bae:	2007      	movs	r0, #7
 8002bb0:	f000 fc40 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	@ 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a32      	ldr	r2, [pc, #200]	@ (8002ca8 <HAL_SPI_MspInit+0xe8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12c      	bne.n	8002c3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4a30      	ldr	r2, [pc, #192]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002bec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	4b2a      	ldr	r3, [pc, #168]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b27      	ldr	r3, [pc, #156]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c1a:	23e0      	movs	r3, #224	@ 0xe0
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	481e      	ldr	r0, [pc, #120]	@ (8002cb0 <HAL_SPI_MspInit+0xf0>)
 8002c36:	f001 f841 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c3a:	e031      	b.n	8002ca0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <HAL_SPI_MspInit+0xf4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12c      	bne.n	8002ca0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	4a10      	ldr	r2, [pc, #64]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <HAL_SPI_MspInit+0xec>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c7e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c90:	2305      	movs	r3, #5
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4807      	ldr	r0, [pc, #28]	@ (8002cb8 <HAL_SPI_MspInit+0xf8>)
 8002c9c:	f001 f80e 	bl	8003cbc <HAL_GPIO_Init>
}
 8002ca0:	bf00      	nop
 8002ca2:	3730      	adds	r7, #48	@ 0x30
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40013000 	.word	0x40013000
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40003800 	.word	0x40003800
 8002cb8:	40020400 	.word	0x40020400

08002cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <HAL_TIM_Base_MspInit+0x70>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	4a15      	ldr	r2, [pc, #84]	@ (8002d2c <HAL_TIM_Base_MspInit+0x70>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cde:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <HAL_TIM_Base_MspInit+0x70>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cea:	e01a      	b.n	8002d22 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d30 <HAL_TIM_Base_MspInit+0x74>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d115      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <HAL_TIM_Base_MspInit+0x70>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002d2c <HAL_TIM_Base_MspInit+0x70>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_TIM_Base_MspInit+0x70>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	201d      	movs	r0, #29
 8002d18:	f000 fb97 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d1c:	201d      	movs	r0, #29
 8002d1e:	f000 fbb0 	bl	8003482 <HAL_NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40000400 	.word	0x40000400

08002d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4c      	ldr	r2, [pc, #304]	@ (8002e84 <HAL_UART_MspInit+0x150>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	f040 8092 	bne.w	8002e7c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <HAL_UART_MspInit+0x154>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <HAL_UART_MspInit+0x154>)
 8002d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d68:	4b47      	ldr	r3, [pc, #284]	@ (8002e88 <HAL_UART_MspInit+0x154>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	4b43      	ldr	r3, [pc, #268]	@ (8002e88 <HAL_UART_MspInit+0x154>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4a42      	ldr	r2, [pc, #264]	@ (8002e88 <HAL_UART_MspInit+0x154>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d84:	4b40      	ldr	r3, [pc, #256]	@ (8002e88 <HAL_UART_MspInit+0x154>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d90:	230c      	movs	r3, #12
 8002d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da0:	2307      	movs	r3, #7
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	4619      	mov	r1, r3
 8002daa:	4838      	ldr	r0, [pc, #224]	@ (8002e8c <HAL_UART_MspInit+0x158>)
 8002dac:	f000 ff86 	bl	8003cbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002db0:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002db2:	4a38      	ldr	r2, [pc, #224]	@ (8002e94 <HAL_UART_MspInit+0x160>)
 8002db4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002db6:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002db8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002dbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dbe:	4b34      	ldr	r3, [pc, #208]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc4:	4b32      	ldr	r3, [pc, #200]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dca:	4b31      	ldr	r3, [pc, #196]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002dcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dd0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002dde:	4b2c      	ldr	r3, [pc, #176]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002de6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002de8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dee:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002df4:	4826      	ldr	r0, [pc, #152]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002df6:	f000 fb5f 	bl	80034b8 <HAL_DMA_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002e00:	f7ff feb0 	bl	8002b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a22      	ldr	r2, [pc, #136]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002e08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e0a:	4a21      	ldr	r2, [pc, #132]	@ (8002e90 <HAL_UART_MspInit+0x15c>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e10:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e12:	4a22      	ldr	r2, [pc, #136]	@ (8002e9c <HAL_UART_MspInit+0x168>)
 8002e14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e18:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e20:	2240      	movs	r2, #64	@ 0x40
 8002e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e24:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e32:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e38:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e3e:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e44:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e50:	4811      	ldr	r0, [pc, #68]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e52:	f000 fb31 	bl	80034b8 <HAL_DMA_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002e5c:	f7ff fe82 	bl	8002b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e64:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e66:	4a0c      	ldr	r2, [pc, #48]	@ (8002e98 <HAL_UART_MspInit+0x164>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2026      	movs	r0, #38	@ 0x26
 8002e72:	f000 faea 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e76:	2026      	movs	r0, #38	@ 0x26
 8002e78:	f000 fb03 	bl	8003482 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e7c:	bf00      	nop
 8002e7e:	3728      	adds	r7, #40	@ 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40004400 	.word	0x40004400
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	20000614 	.word	0x20000614
 8002e94:	40026088 	.word	0x40026088
 8002e98:	20000674 	.word	0x20000674
 8002e9c:	400260a0 	.word	0x400260a0

08002ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <NMI_Handler+0x4>

08002ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <HardFault_Handler+0x4>

08002eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <MemManage_Handler+0x4>

08002eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <BusFault_Handler+0x4>

08002ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <UsageFault_Handler+0x4>

08002ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef6:	f000 f989 	bl	800320c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f04:	4802      	ldr	r0, [pc, #8]	@ (8002f10 <DMA1_Stream5_IRQHandler+0x10>)
 8002f06:	f000 fc6f 	bl	80037e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000614 	.word	0x20000614

08002f14 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f18:	4802      	ldr	r0, [pc, #8]	@ (8002f24 <DMA1_Stream6_IRQHandler+0x10>)
 8002f1a:	f000 fc65 	bl	80037e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000674 	.word	0x20000674

08002f28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRY_Pin);
 8002f2c:	2080      	movs	r0, #128	@ 0x80
 8002f2e:	f001 f873 	bl	8004018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <TIM3_IRQHandler+0x10>)
 8002f3e:	f002 fddd 	bl	8005afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000584 	.word	0x20000584

08002f4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <USART2_IRQHandler+0x10>)
 8002f52:	f003 fb79 	bl	8006648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200005cc 	.word	0x200005cc

08002f60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f68:	f001 f856 	bl	8004018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return 1;
 8002f74:	2301      	movs	r3, #1
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_kill>:

int _kill(int pid, int sig)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f8a:	f005 fbf5 	bl	8008778 <__errno>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2216      	movs	r2, #22
 8002f92:	601a      	str	r2, [r3, #0]
  return -1;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_exit>:

void _exit (int status)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ffe7 	bl	8002f80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <_exit+0x12>

08002fb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e00a      	b.n	8002fde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fc8:	f3af 8000 	nop.w
 8002fcc:	4601      	mov	r1, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	60ba      	str	r2, [r7, #8]
 8002fd4:	b2ca      	uxtb	r2, r1
 8002fd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	dbf0      	blt.n	8002fc8 <_read+0x12>
  }

  return len;
 8002fe6:	687b      	ldr	r3, [r7, #4]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e009      	b.n	8003016 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	60ba      	str	r2, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3301      	adds	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	dbf1      	blt.n	8003002 <_write+0x12>
  }
  return len;
 800301e:	687b      	ldr	r3, [r7, #4]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_close>:

int _close(int file)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003050:	605a      	str	r2, [r3, #4]
  return 0;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <_isatty>:

int _isatty(int file)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003098:	4a14      	ldr	r2, [pc, #80]	@ (80030ec <_sbrk+0x5c>)
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <_sbrk+0x60>)
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <_sbrk+0x64>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <_sbrk+0x64>)
 80030ae:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <_sbrk+0x68>)
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <_sbrk+0x64>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d207      	bcs.n	80030d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c0:	f005 fb5a 	bl	8008778 <__errno>
 80030c4:	4603      	mov	r3, r0
 80030c6:	220c      	movs	r2, #12
 80030c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e009      	b.n	80030e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d0:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030d6:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <_sbrk+0x64>)
 80030e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20020000 	.word	0x20020000
 80030f0:	00000400 	.word	0x00000400
 80030f4:	2001e610 	.word	0x2001e610
 80030f8:	2001e768 	.word	0x2001e768

080030fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <SystemInit+0x20>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <SystemInit+0x20>)
 8003108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800310c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003124:	480d      	ldr	r0, [pc, #52]	@ (800315c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003126:	490e      	ldr	r1, [pc, #56]	@ (8003160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003128:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800312c:	e002      	b.n	8003134 <LoopCopyDataInit>

0800312e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800312e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003132:	3304      	adds	r3, #4

08003134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003138:	d3f9      	bcc.n	800312e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313a:	4a0b      	ldr	r2, [pc, #44]	@ (8003168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800313c:	4c0b      	ldr	r4, [pc, #44]	@ (800316c <LoopFillZerobss+0x26>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003140:	e001      	b.n	8003146 <LoopFillZerobss>

08003142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003144:	3204      	adds	r2, #4

08003146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003148:	d3fb      	bcc.n	8003142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800314a:	f7ff ffd7 	bl	80030fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314e:	f005 fb19 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003152:	f7ff f81d 	bl	8002190 <main>
  bx  lr    
 8003156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800315c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003160:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8003164:	0800ac68 	.word	0x0800ac68
  ldr r2, =_sbss
 8003168:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 800316c:	2001e764 	.word	0x2001e764

08003170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC_IRQHandler>
	...

08003174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_Init+0x34>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	@ (80031a8 <HAL_Init+0x34>)
 800317e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_Init+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_Init+0x34>)
 800318a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800318e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003190:	2003      	movs	r0, #3
 8003192:	f000 f94f 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003196:	2000      	movs	r0, #0
 8003198:	f000 f808 	bl	80031ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800319c:	f7ff fce8 	bl	8002b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023c00 	.word	0x40023c00

080031ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <HAL_InitTick+0x54>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_InitTick+0x58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f967 	bl	800349e <HAL_SYSTICK_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00e      	b.n	80031f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d80a      	bhi.n	80031f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f000 f92f 	bl	800344a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4a06      	ldr	r2, [pc, #24]	@ (8003208 <HAL_InitTick+0x5c>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	2000029c 	.word	0x2000029c
 8003204:	200002a4 	.word	0x200002a4
 8003208:	200002a0 	.word	0x200002a0

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	200002a4 	.word	0x200002a4
 8003230:	2001e614 	.word	0x2001e614

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	@ (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	2001e614 	.word	0x2001e614

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <HAL_Delay+0x44>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200002a4 	.word	0x200002a4

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	@ (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	@ (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	@ (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	@ (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003400:	d301      	bcc.n	8003406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003402:	2301      	movs	r3, #1
 8003404:	e00f      	b.n	8003426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003406:	4a0a      	ldr	r2, [pc, #40]	@ (8003430 <SysTick_Config+0x40>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340e:	210f      	movs	r1, #15
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	f7ff ff8e 	bl	8003334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <SysTick_Config+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341e:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <SysTick_Config+0x40>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff29 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff3e 	bl	80032dc <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff8e 	bl	8003388 <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5d 	bl	8003334 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff31 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa2 	bl	80033f0 <SysTick_Config>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034c4:	f7ff feb6 	bl	8003234 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e099      	b.n	8003608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f4:	e00f      	b.n	8003516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f6:	f7ff fe9d 	bl	8003234 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b05      	cmp	r3, #5
 8003502:	d908      	bls.n	8003516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e078      	b.n	8003608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e8      	bne.n	80034f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <HAL_DMA_Init+0x158>)
 8003530:	4013      	ands	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	2b04      	cmp	r3, #4
 800356e:	d107      	bne.n	8003580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	4313      	orrs	r3, r2
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d117      	bne.n	80035da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fb01 	bl	8003bc4 <DMA_CheckFifoParam>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2240      	movs	r2, #64	@ 0x40
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035d6:	2301      	movs	r3, #1
 80035d8:	e016      	b.n	8003608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fab8 	bl	8003b58 <DMA_CalcBaseAndBitshift>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	223f      	movs	r2, #63	@ 0x3f
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	f010803f 	.word	0xf010803f

08003614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_DMA_Start_IT+0x26>
 8003636:	2302      	movs	r3, #2
 8003638:	e040      	b.n	80036bc <HAL_DMA_Start_IT+0xa8>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d12f      	bne.n	80036ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa4a 	bl	8003afc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	223f      	movs	r2, #63	@ 0x3f
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0216 	orr.w	r2, r2, #22
 8003682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e005      	b.n	80036ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036d2:	f7ff fdaf 	bl	8003234 <HAL_GetTick>
 80036d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e052      	b.n	800379c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0216 	bic.w	r2, r2, #22
 8003704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_DMA_Abort+0x62>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0208 	bic.w	r2, r2, #8
 8003734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003746:	e013      	b.n	8003770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003748:	f7ff fd74 	bl	8003234 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b05      	cmp	r3, #5
 8003754:	d90c      	bls.n	8003770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e015      	b.n	800379c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e4      	bne.n	8003748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	223f      	movs	r2, #63	@ 0x3f
 8003784:	409a      	lsls	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2280      	movs	r2, #128	@ 0x80
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e00c      	b.n	80037dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2205      	movs	r2, #5
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003a30 <HAL_DMA_IRQHandler+0x248>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003a34 <HAL_DMA_IRQHandler+0x24c>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0a9b      	lsrs	r3, r3, #10
 8003800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	2208      	movs	r2, #8
 8003814:	409a      	lsls	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01a      	beq.n	8003854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	2208      	movs	r2, #8
 8003842:	409a      	lsls	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	2201      	movs	r2, #1
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003876:	2201      	movs	r2, #1
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	2204      	movs	r2, #4
 8003890:	409a      	lsls	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d012      	beq.n	80038c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	2204      	movs	r2, #4
 80038ae:	409a      	lsls	r2, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	f043 0204 	orr.w	r2, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	2210      	movs	r2, #16
 80038c6:	409a      	lsls	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d043      	beq.n	8003958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d03c      	beq.n	8003958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	2210      	movs	r2, #16
 80038e4:	409a      	lsls	r2, r3
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d018      	beq.n	800392a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d108      	bne.n	8003918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d024      	beq.n	8003958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
 8003916:	e01f      	b.n	8003958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01b      	beq.n	8003958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
 8003928:	e016      	b.n	8003958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0208 	bic.w	r2, r2, #8
 8003946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	2220      	movs	r2, #32
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 808f 	beq.w	8003a88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8087 	beq.w	8003a88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	2220      	movs	r2, #32
 8003980:	409a      	lsls	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b05      	cmp	r3, #5
 8003990:	d136      	bne.n	8003a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0216 	bic.w	r2, r2, #22
 80039a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <HAL_DMA_IRQHandler+0x1da>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0208 	bic.w	r2, r2, #8
 80039d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d6:	223f      	movs	r2, #63	@ 0x3f
 80039d8:	409a      	lsls	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d07e      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
        }
        return;
 80039fe:	e079      	b.n	8003af4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01d      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d031      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
 8003a2c:	e02c      	b.n	8003a88 <HAL_DMA_IRQHandler+0x2a0>
 8003a2e:	bf00      	nop
 8003a30:	2000029c 	.word	0x2000029c
 8003a34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d023      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
 8003a48:	e01e      	b.n	8003a88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10f      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0210 	bic.w	r2, r2, #16
 8003a66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d032      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d307      	bcc.n	8003ad0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f2      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x2cc>
 8003ace:	e000      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ad0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
 8003af2:	e000      	b.n	8003af6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003af4:	bf00      	nop
    }
  }
}
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b40      	cmp	r3, #64	@ 0x40
 8003b28:	d108      	bne.n	8003b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b3a:	e007      	b.n	8003b4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	3b10      	subs	r3, #16
 8003b68:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <DMA_CalcBaseAndBitshift+0x64>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b72:	4a13      	ldr	r2, [pc, #76]	@ (8003bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d909      	bls.n	8003b9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b98:	e007      	b.n	8003baa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	aaaaaaab 	.word	0xaaaaaaab
 8003bc0:	0800a8dc 	.word	0x0800a8dc

08003bc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11f      	bne.n	8003c1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d856      	bhi.n	8003c92 <DMA_CheckFifoParam+0xce>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <DMA_CheckFifoParam+0x28>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c0f 	.word	0x08003c0f
 8003bf4:	08003bfd 	.word	0x08003bfd
 8003bf8:	08003c93 	.word	0x08003c93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d046      	beq.n	8003c96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e043      	b.n	8003c96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c16:	d140      	bne.n	8003c9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e03d      	b.n	8003c9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c26:	d121      	bne.n	8003c6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d837      	bhi.n	8003c9e <DMA_CheckFifoParam+0xda>
 8003c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <DMA_CheckFifoParam+0x70>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c4b 	.word	0x08003c4b
 8003c3c:	08003c45 	.word	0x08003c45
 8003c40:	08003c5d 	.word	0x08003c5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      break;
 8003c48:	e030      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d025      	beq.n	8003ca2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5a:	e022      	b.n	8003ca2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c64:	d11f      	bne.n	8003ca6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c6a:	e01c      	b.n	8003ca6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d903      	bls.n	8003c7a <DMA_CheckFifoParam+0xb6>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d003      	beq.n	8003c80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c78:	e018      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7e:	e015      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e00b      	b.n	8003caa <DMA_CheckFifoParam+0xe6>
      break;
 8003c92:	bf00      	nop
 8003c94:	e00a      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      break;
 8003c96:	bf00      	nop
 8003c98:	e008      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e006      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      break;
 8003c9e:	bf00      	nop
 8003ca0:	e004      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      break;   
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <DMA_CheckFifoParam+0xe8>
      break;
 8003caa:	bf00      	nop
    }
  } 
  
  return status; 
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	@ 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e165      	b.n	8003fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f040 8154 	bne.w	8003f9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d005      	beq.n	8003d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d130      	bne.n	8003d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d44:	2201      	movs	r2, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 0201 	and.w	r2, r3, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d017      	beq.n	8003dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d123      	bne.n	8003e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	220f      	movs	r2, #15
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	08da      	lsrs	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80ae 	beq.w	8003f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4b5d      	ldr	r3, [pc, #372]	@ (8003fbc <HAL_GPIO_Init+0x300>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8003fbc <HAL_GPIO_Init+0x300>)
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e52:	4b5a      	ldr	r3, [pc, #360]	@ (8003fbc <HAL_GPIO_Init+0x300>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e5e:	4a58      	ldr	r2, [pc, #352]	@ (8003fc0 <HAL_GPIO_Init+0x304>)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	3302      	adds	r3, #2
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	220f      	movs	r2, #15
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc4 <HAL_GPIO_Init+0x308>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_Init+0x21a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc8 <HAL_GPIO_Init+0x30c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_Init+0x216>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4d      	ldr	r2, [pc, #308]	@ (8003fcc <HAL_GPIO_Init+0x310>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_Init+0x212>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fd0 <HAL_GPIO_Init+0x314>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x20e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd4 <HAL_GPIO_Init+0x318>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x20a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd8 <HAL_GPIO_Init+0x31c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a49      	ldr	r2, [pc, #292]	@ (8003fdc <HAL_GPIO_Init+0x320>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x202>
 8003eba:	2306      	movs	r3, #6
 8003ebc:	e00c      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	e00a      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e008      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e004      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f002 0203 	and.w	r2, r2, #3
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee8:	4935      	ldr	r1, [pc, #212]	@ (8003fc0 <HAL_GPIO_Init+0x304>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f1a:	4a31      	ldr	r2, [pc, #196]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f20:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f44:	4a26      	ldr	r2, [pc, #152]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f4a:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f98:	4a11      	ldr	r2, [pc, #68]	@ (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	f67f ae96 	bls.w	8003cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3724      	adds	r7, #36	@ 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40013c00 	.word	0x40013c00

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004000:	e003      	b.n	800400a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004022:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800402e:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fbea 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4b20      	ldr	r3, [pc, #128]	@ (80040d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	@ 0x40
 8004062:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800406e:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <HAL_PWREx_EnableOverDrive+0x94>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004074:	f7ff f8de 	bl	8003234 <HAL_GetTick>
 8004078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800407a:	e009      	b.n	8004090 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800407c:	f7ff f8da 	bl	8003234 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800408a:	d901      	bls.n	8004090 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e01f      	b.n	80040d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004090:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d1ee      	bne.n	800407c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800409e:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a4:	f7ff f8c6 	bl	8003234 <HAL_GetTick>
 80040a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040aa:	e009      	b.n	80040c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040ac:	f7ff f8c2 	bl	8003234 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040ba:	d901      	bls.n	80040c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e007      	b.n	80040d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040cc:	d1ee      	bne.n	80040ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	420e0040 	.word	0x420e0040
 80040e0:	40007000 	.word	0x40007000
 80040e4:	420e0044 	.word	0x420e0044

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cc      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b68      	ldr	r3, [pc, #416]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90c      	bls.n	8004124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b65      	ldr	r3, [pc, #404]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d119      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b3f      	ldr	r3, [pc, #252]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e067      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b37      	ldr	r3, [pc, #220]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4934      	ldr	r1, [pc, #208]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7ff f82c 	bl	8003234 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7ff f828 	bl	8003234 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20c      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b22      	ldr	r3, [pc, #136]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f855 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe ff8c 	bl	80031ac <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800a8c4 	.word	0x0800a8c4
 80042ac:	2000029c 	.word	0x2000029c
 80042b0:	200002a0 	.word	0x200002a0

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	@ (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000029c 	.word	0x2000029c

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	@ (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0800a8d4 	.word	0x0800a8d4

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	@ (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	0800a8d4 	.word	0x0800a8d4

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004320:	b0ae      	sub	sp, #184	@ 0xb8
 8004322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004342:	4bcb      	ldr	r3, [pc, #812]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b0c      	cmp	r3, #12
 800434c:	f200 8206 	bhi.w	800475c <HAL_RCC_GetSysClockFreq+0x440>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800438d 	.word	0x0800438d
 800435c:	0800475d 	.word	0x0800475d
 8004360:	0800475d 	.word	0x0800475d
 8004364:	0800475d 	.word	0x0800475d
 8004368:	08004395 	.word	0x08004395
 800436c:	0800475d 	.word	0x0800475d
 8004370:	0800475d 	.word	0x0800475d
 8004374:	0800475d 	.word	0x0800475d
 8004378:	0800439d 	.word	0x0800439d
 800437c:	0800475d 	.word	0x0800475d
 8004380:	0800475d 	.word	0x0800475d
 8004384:	0800475d 	.word	0x0800475d
 8004388:	0800458d 	.word	0x0800458d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4bb9      	ldr	r3, [pc, #740]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x358>)
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004392:	e1e7      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004394:	4bb8      	ldr	r3, [pc, #736]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800439a:	e1e3      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4bb4      	ldr	r3, [pc, #720]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a8:	4bb1      	ldr	r3, [pc, #708]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d071      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b4:	4bae      	ldr	r3, [pc, #696]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043da:	4622      	mov	r2, r4
 80043dc:	462b      	mov	r3, r5
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	0159      	lsls	r1, r3, #5
 80043e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ec:	0150      	lsls	r0, r2, #5
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4621      	mov	r1, r4
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80043f8:	4629      	mov	r1, r5
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800440c:	4649      	mov	r1, r9
 800440e:	018b      	lsls	r3, r1, #6
 8004410:	4641      	mov	r1, r8
 8004412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004416:	4641      	mov	r1, r8
 8004418:	018a      	lsls	r2, r1, #6
 800441a:	4641      	mov	r1, r8
 800441c:	1a51      	subs	r1, r2, r1
 800441e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004420:	4649      	mov	r1, r9
 8004422:	eb63 0301 	sbc.w	r3, r3, r1
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004434:	4649      	mov	r1, r9
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4641      	mov	r1, r8
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4641      	mov	r1, r8
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4622      	mov	r2, r4
 800444a:	189b      	adds	r3, r3, r2
 800444c:	633b      	str	r3, [r7, #48]	@ 0x30
 800444e:	462b      	mov	r3, r5
 8004450:	460a      	mov	r2, r1
 8004452:	eb42 0303 	adc.w	r3, r2, r3
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004464:	4629      	mov	r1, r5
 8004466:	024b      	lsls	r3, r1, #9
 8004468:	4621      	mov	r1, r4
 800446a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800446e:	4621      	mov	r1, r4
 8004470:	024a      	lsls	r2, r1, #9
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004480:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004488:	f7fc fbbe 	bl	8000c08 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004496:	e067      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004498:	4b75      	ldr	r3, [pc, #468]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80044a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044b2:	2300      	movs	r3, #0
 80044b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	f04f 0000 	mov.w	r0, #0
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	0159      	lsls	r1, r3, #5
 80044c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044cc:	0150      	lsls	r0, r2, #5
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4621      	mov	r1, r4
 80044d4:	1a51      	subs	r1, r2, r1
 80044d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044d8:	4629      	mov	r1, r5
 80044da:	eb63 0301 	sbc.w	r3, r3, r1
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80044ec:	4649      	mov	r1, r9
 80044ee:	018b      	lsls	r3, r1, #6
 80044f0:	4641      	mov	r1, r8
 80044f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044f6:	4641      	mov	r1, r8
 80044f8:	018a      	lsls	r2, r1, #6
 80044fa:	4641      	mov	r1, r8
 80044fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004500:	4649      	mov	r1, r9
 8004502:	eb63 0b01 	sbc.w	fp, r3, r1
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451a:	4692      	mov	sl, r2
 800451c:	469b      	mov	fp, r3
 800451e:	4623      	mov	r3, r4
 8004520:	eb1a 0303 	adds.w	r3, sl, r3
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	462b      	mov	r3, r5
 8004528:	eb4b 0303 	adc.w	r3, fp, r3
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800453a:	4629      	mov	r1, r5
 800453c:	028b      	lsls	r3, r1, #10
 800453e:	4621      	mov	r1, r4
 8004540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004544:	4621      	mov	r1, r4
 8004546:	028a      	lsls	r2, r1, #10
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004550:	2200      	movs	r2, #0
 8004552:	673b      	str	r3, [r7, #112]	@ 0x70
 8004554:	677a      	str	r2, [r7, #116]	@ 0x74
 8004556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800455a:	f7fc fb55 	bl	8000c08 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4613      	mov	r3, r2
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004568:	4b41      	ldr	r3, [pc, #260]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800457a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800457e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800458a:	e0eb      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800458c:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004598:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d06b      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a4:	4b32      	ldr	r3, [pc, #200]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	2200      	movs	r2, #0
 80045ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045b8:	2300      	movs	r3, #0
 80045ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80045bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	0159      	lsls	r1, r3, #5
 80045ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d2:	0150      	lsls	r0, r2, #5
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4621      	mov	r1, r4
 80045da:	1a51      	subs	r1, r2, r1
 80045dc:	61b9      	str	r1, [r7, #24]
 80045de:	4629      	mov	r1, r5
 80045e0:	eb63 0301 	sbc.w	r3, r3, r1
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045f2:	4659      	mov	r1, fp
 80045f4:	018b      	lsls	r3, r1, #6
 80045f6:	4651      	mov	r1, sl
 80045f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045fc:	4651      	mov	r1, sl
 80045fe:	018a      	lsls	r2, r1, #6
 8004600:	4651      	mov	r1, sl
 8004602:	ebb2 0801 	subs.w	r8, r2, r1
 8004606:	4659      	mov	r1, fp
 8004608:	eb63 0901 	sbc.w	r9, r3, r1
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800461c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004620:	4690      	mov	r8, r2
 8004622:	4699      	mov	r9, r3
 8004624:	4623      	mov	r3, r4
 8004626:	eb18 0303 	adds.w	r3, r8, r3
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	462b      	mov	r3, r5
 800462e:	eb49 0303 	adc.w	r3, r9, r3
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004640:	4629      	mov	r1, r5
 8004642:	024b      	lsls	r3, r1, #9
 8004644:	4621      	mov	r1, r4
 8004646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800464a:	4621      	mov	r1, r4
 800464c:	024a      	lsls	r2, r1, #9
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004656:	2200      	movs	r2, #0
 8004658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800465a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800465c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004660:	f7fc fad2 	bl	8000c08 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800466e:	e065      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x420>
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400
 8004678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467c:	4b3d      	ldr	r3, [pc, #244]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x458>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	2200      	movs	r2, #0
 8004684:	4618      	mov	r0, r3
 8004686:	4611      	mov	r1, r2
 8004688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468c:	653b      	str	r3, [r7, #80]	@ 0x50
 800468e:	2300      	movs	r3, #0
 8004690:	657b      	str	r3, [r7, #84]	@ 0x54
 8004692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004696:	4642      	mov	r2, r8
 8004698:	464b      	mov	r3, r9
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4641      	mov	r1, r8
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4649      	mov	r1, r9
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046c8:	4659      	mov	r1, fp
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	4651      	mov	r1, sl
 80046ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d2:	4651      	mov	r1, sl
 80046d4:	018a      	lsls	r2, r1, #6
 80046d6:	4651      	mov	r1, sl
 80046d8:	1a54      	subs	r4, r2, r1
 80046da:	4659      	mov	r1, fp
 80046dc:	eb63 0501 	sbc.w	r5, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	18e3      	adds	r3, r4, r3
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	464b      	mov	r3, r9
 80046fc:	eb45 0303 	adc.w	r3, r5, r3
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470e:	4629      	mov	r1, r5
 8004710:	028b      	lsls	r3, r1, #10
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004718:	4621      	mov	r1, r4
 800471a:	028a      	lsls	r2, r1, #10
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004724:	2200      	movs	r2, #0
 8004726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004728:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800472a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800472e:	f7fc fa6b 	bl	8000c08 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4613      	mov	r3, r2
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800473c:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x458>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0f1b      	lsrs	r3, r3, #28
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800474a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800474e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800475a:	e003      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004768:	4618      	mov	r0, r3
 800476a:	37b8      	adds	r7, #184	@ 0xb8
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400

0800477c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e28d      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8083 	beq.w	80048a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800479c:	4b94      	ldr	r3, [pc, #592]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d019      	beq.n	80047dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80047a8:	4b91      	ldr	r3, [pc, #580]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80047b4:	4b8e      	ldr	r3, [pc, #568]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047c0:	d00c      	beq.n	80047dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c2:	4b8b      	ldr	r3, [pc, #556]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d112      	bne.n	80047f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ce:	4b88      	ldr	r3, [pc, #544]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047da:	d10b      	bne.n	80047f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	4b84      	ldr	r3, [pc, #528]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d05b      	beq.n	80048a0 <HAL_RCC_OscConfig+0x124>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d157      	bne.n	80048a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e25a      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d106      	bne.n	800480c <HAL_RCC_OscConfig+0x90>
 80047fe:	4b7c      	ldr	r3, [pc, #496]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a7b      	ldr	r2, [pc, #492]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e01d      	b.n	8004848 <HAL_RCC_OscConfig+0xcc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0xb4>
 8004816:	4b76      	ldr	r3, [pc, #472]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800481c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b73      	ldr	r3, [pc, #460]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a72      	ldr	r2, [pc, #456]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e00b      	b.n	8004848 <HAL_RCC_OscConfig+0xcc>
 8004830:	4b6f      	ldr	r3, [pc, #444]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6e      	ldr	r2, [pc, #440]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6b      	ldr	r2, [pc, #428]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe fcf0 	bl	8003234 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fe fcec 	bl	8003234 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	@ 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e21f      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	4b61      	ldr	r3, [pc, #388]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0xdc>
 8004876:	e014      	b.n	80048a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe fcdc 	bl	8003234 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fe fcd8 	bl	8003234 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	@ 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e20b      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004892:	4b57      	ldr	r3, [pc, #348]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x104>
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06f      	beq.n	800498e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ae:	4b50      	ldr	r3, [pc, #320]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048ba:	4b4d      	ldr	r3, [pc, #308]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
        || \
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d105      	bne.n	80048d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048c6:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d2:	4b47      	ldr	r3, [pc, #284]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d11c      	bne.n	8004918 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b44      	ldr	r3, [pc, #272]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d116      	bne.n	8004918 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCC_OscConfig+0x186>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e1d3      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4937      	ldr	r1, [pc, #220]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	e03a      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <HAL_RCC_OscConfig+0x278>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe fc85 	bl	8003234 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492e:	f7fe fc81 	bl	8003234 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e1b4      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b28      	ldr	r3, [pc, #160]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4925      	ldr	r1, [pc, #148]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <HAL_RCC_OscConfig+0x278>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe fc64 	bl	8003234 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004970:	f7fe fc60 	bl	8003234 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e193      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d036      	beq.n	8004a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b15      	ldr	r3, [pc, #84]	@ (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe fc44 	bl	8003234 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fe fc40 	bl	8003234 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e173      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x234>
 80049ce:	e01b      	b.n	8004a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fe fc2d 	bl	8003234 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	e00e      	b.n	80049fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049de:	f7fe fc29 	bl	8003234 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d907      	bls.n	80049fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e15c      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	42470000 	.word	0x42470000
 80049f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ea      	bne.n	80049de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8097 	beq.w	8004b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b83      	ldr	r3, [pc, #524]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a36:	4b7c      	ldr	r3, [pc, #496]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b79      	ldr	r3, [pc, #484]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b76      	ldr	r3, [pc, #472]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe fbe9 	bl	8003234 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fe fbe5 	bl	8003234 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e118      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b6c      	ldr	r3, [pc, #432]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x31e>
 8004a8c:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x358>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x340>
 8004aa2:	4b61      	ldr	r3, [pc, #388]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a60      	ldr	r2, [pc, #384]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aae:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x358>
 8004abc:	4b5a      	ldr	r3, [pc, #360]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	4a59      	ldr	r2, [pc, #356]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac8:	4b57      	ldr	r3, [pc, #348]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	4a56      	ldr	r2, [pc, #344]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ace:	f023 0304 	bic.w	r3, r3, #4
 8004ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe fbaa 	bl	8003234 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe fba6 	bl	8003234 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0d7      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b4b      	ldr	r3, [pc, #300]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ee      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x368>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fe fb94 	bl	8003234 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe fb90 	bl	8003234 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0c1      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	4b40      	ldr	r3, [pc, #256]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ee      	bne.n	8004b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b3b      	ldr	r3, [pc, #236]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80ad 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b4e:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d060      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d145      	bne.n	8004bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b33      	ldr	r3, [pc, #204]	@ (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fe fb64 	bl	8003234 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fe fb60 	bl	8003234 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e093      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	491b      	ldr	r1, [pc, #108]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fb35 	bl	8003234 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fe fb31 	bl	8003234 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e064      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x452>
 8004bec:	e05c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fb1e 	bl	8003234 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe fb1a 	bl	8003234 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04d      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
 8004c1a:	e045      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e040      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c34:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCC_OscConfig+0x538>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d030      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d129      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d122      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d119      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d10f      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07b      	b.n	8004dc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d108      	bne.n	8004ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cda:	d009      	beq.n	8004cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	61da      	str	r2, [r3, #28]
 8004ce2:	e005      	b.n	8004cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fd ff58 	bl	8002bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d74:	ea42 0103 	orr.w	r1, r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 0104 	and.w	r1, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	f003 0210 	and.w	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b088      	sub	sp, #32
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dda:	f7fe fa2b 	bl	8003234 <HAL_GetTick>
 8004dde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	e12a      	b.n	800504a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Transmit+0x36>
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e122      	b.n	800504a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Transmit+0x48>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e11b      	b.n	800504a <HAL_SPI_Transmit+0x280>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	88fa      	ldrh	r2, [r7, #6]
 8004e32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e60:	d10f      	bne.n	8004e82 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8c:	2b40      	cmp	r3, #64	@ 0x40
 8004e8e:	d007      	beq.n	8004ea0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea8:	d152      	bne.n	8004f50 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_Transmit+0xee>
 8004eb2:	8b7b      	ldrh	r3, [r7, #26]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d145      	bne.n	8004f44 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebc:	881a      	ldrh	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004edc:	e032      	b.n	8004f44 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d112      	bne.n	8004f12 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f10:	e018      	b.n	8004f44 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f12:	f7fe f98f 	bl	8003234 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d803      	bhi.n	8004f2a <HAL_SPI_Transmit+0x160>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d102      	bne.n	8004f30 <HAL_SPI_Transmit+0x166>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e082      	b.n	800504a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1c7      	bne.n	8004ede <HAL_SPI_Transmit+0x114>
 8004f4e:	e053      	b.n	8004ff8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_SPI_Transmit+0x194>
 8004f58:	8b7b      	ldrh	r3, [r7, #26]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d147      	bne.n	8004fee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	7812      	ldrb	r2, [r2, #0]
 8004f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f84:	e033      	b.n	8004fee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d113      	bne.n	8004fbc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	7812      	ldrb	r2, [r2, #0]
 8004fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fba:	e018      	b.n	8004fee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbc:	f7fe f93a 	bl	8003234 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d803      	bhi.n	8004fd4 <HAL_SPI_Transmit+0x20a>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d102      	bne.n	8004fda <HAL_SPI_Transmit+0x210>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e02d      	b.n	800504a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1c6      	bne.n	8004f86 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fbd9 	bl	80057b4 <SPI_EndRxTxTransaction>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005048:	2300      	movs	r3, #0
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b088      	sub	sp, #32
 8005056:	af02      	add	r7, sp, #8
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d001      	beq.n	8005072 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
 8005070:	e104      	b.n	800527c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800507a:	d112      	bne.n	80050a2 <HAL_SPI_Receive+0x50>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10e      	bne.n	80050a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2204      	movs	r2, #4
 8005088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f8f3 	bl	8005284 <HAL_SPI_TransmitReceive>
 800509e:	4603      	mov	r3, r0
 80050a0:	e0ec      	b.n	800527c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a2:	f7fe f8c7 	bl	8003234 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_Receive+0x62>
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0e1      	b.n	800527c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_SPI_Receive+0x74>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0da      	b.n	800527c <HAL_SPI_Receive+0x22a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2204      	movs	r2, #4
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005114:	d10f      	bne.n	8005136 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005124:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005134:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005140:	2b40      	cmp	r3, #64	@ 0x40
 8005142:	d007      	beq.n	8005154 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005152:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d170      	bne.n	800523e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800515c:	e035      	b.n	80051ca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d115      	bne.n	8005198 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f103 020c 	add.w	r2, r3, #12
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005196:	e018      	b.n	80051ca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005198:	f7fe f84c 	bl	8003234 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d803      	bhi.n	80051b0 <HAL_SPI_Receive+0x15e>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Receive+0x164>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e058      	b.n	800527c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1c4      	bne.n	800515e <HAL_SPI_Receive+0x10c>
 80051d4:	e038      	b.n	8005248 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d113      	bne.n	800520c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	b292      	uxth	r2, r2
 80051f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800520a:	e018      	b.n	800523e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520c:	f7fe f812 	bl	8003234 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d803      	bhi.n	8005224 <HAL_SPI_Receive+0x1d2>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d102      	bne.n	800522a <HAL_SPI_Receive+0x1d8>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e01e      	b.n	800527c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1c6      	bne.n	80051d6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fa4b 	bl	80056e8 <SPI_EndRxTransaction>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800527a:	2300      	movs	r3, #0
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	@ 0x28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005292:	2301      	movs	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005296:	f7fd ffcd 	bl	8003234 <HAL_GetTick>
 800529a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052a2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052ae:	7ffb      	ldrb	r3, [r7, #31]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d00c      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x4a>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ba:	d106      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x46>
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d001      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
 80052cc:	e17f      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x5c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x5c>
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e174      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x6e>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e16d      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b04      	cmp	r3, #4
 8005304:	d003      	beq.n	800530e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2205      	movs	r2, #5
 800530a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	887a      	ldrh	r2, [r7, #2]
 800531e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d007      	beq.n	8005362 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800536a:	d17e      	bne.n	800546a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_SPI_TransmitReceive+0xf6>
 8005374:	8afb      	ldrh	r3, [r7, #22]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d16c      	bne.n	8005454 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539e:	e059      	b.n	8005454 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d11b      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x162>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d016      	beq.n	80053e6 <HAL_SPI_TransmitReceive+0x162>
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d113      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	881a      	ldrh	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d119      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x1a4>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d014      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	b292      	uxth	r2, r2
 800540a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	1c9a      	adds	r2, r3, #2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005424:	2301      	movs	r3, #1
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005428:	f7fd ff04 	bl	8003234 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005434:	429a      	cmp	r2, r3
 8005436:	d80d      	bhi.n	8005454 <HAL_SPI_TransmitReceive+0x1d0>
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d009      	beq.n	8005454 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0bc      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1a0      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x11c>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d19b      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x11c>
 8005468:	e082      	b.n	8005570 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_SPI_TransmitReceive+0x1f4>
 8005472:	8afb      	ldrh	r3, [r7, #22]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d171      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800549e:	e05d      	b.n	800555c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d11c      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x264>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d017      	beq.n	80054e8 <HAL_SPI_TransmitReceive+0x264>
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d114      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d119      	bne.n	800552a <HAL_SPI_TransmitReceive+0x2a6>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d014      	beq.n	800552a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005526:	2301      	movs	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800552a:	f7fd fe83 	bl	8003234 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005536:	429a      	cmp	r2, r3
 8005538:	d803      	bhi.n	8005542 <HAL_SPI_TransmitReceive+0x2be>
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d102      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x2c4>
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e038      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d19c      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x21c>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d197      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	6a3a      	ldr	r2, [r7, #32]
 8005572:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f91d 	bl	80057b4 <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e01d      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	@ 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055e8:	f7fd fe24 	bl	8003234 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055f8:	f7fd fe1c 	bl	8003234 <HAL_GetTick>
 80055fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055fe:	4b39      	ldr	r3, [pc, #228]	@ (80056e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	015b      	lsls	r3, r3, #5
 8005604:	0d1b      	lsrs	r3, r3, #20
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800560e:	e054      	b.n	80056ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d050      	beq.n	80056ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005618:	f7fd fe0c 	bl	8003234 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	429a      	cmp	r2, r3
 8005626:	d902      	bls.n	800562e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d13d      	bne.n	80056aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800563c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005646:	d111      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005650:	d004      	beq.n	800565c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800565a:	d107      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800566a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005674:	d10f      	bne.n	8005696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e017      	b.n	80056da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	bf0c      	ite	eq
 80056ca:	2301      	moveq	r3, #1
 80056cc:	2300      	movne	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d19b      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2000029c 	.word	0x2000029c

080056e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056fc:	d111      	bne.n	8005722 <SPI_EndRxTransaction+0x3a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005706:	d004      	beq.n	8005712 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005710:	d107      	bne.n	8005722 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572a:	d12a      	bne.n	8005782 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005734:	d012      	beq.n	800575c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	2180      	movs	r1, #128	@ 0x80
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ff49 	bl	80055d8 <SPI_WaitFlagStateUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02d      	beq.n	80057a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e026      	b.n	80057aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	2101      	movs	r1, #1
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff36 	bl	80055d8 <SPI_WaitFlagStateUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01a      	beq.n	80057a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e013      	b.n	80057aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	2101      	movs	r1, #1
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff ff23 	bl	80055d8 <SPI_WaitFlagStateUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e000      	b.n	80057aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2201      	movs	r2, #1
 80057c8:	2102      	movs	r1, #2
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff ff04 	bl	80055d8 <SPI_WaitFlagStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e032      	b.n	800584c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <SPI_EndRxTxTransaction+0xa0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005858 <SPI_EndRxTxTransaction+0xa4>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	0d5b      	lsrs	r3, r3, #21
 80057f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005804:	d112      	bne.n	800582c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	2180      	movs	r1, #128	@ 0x80
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff fee1 	bl	80055d8 <SPI_WaitFlagStateUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d016      	beq.n	800584a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e00f      	b.n	800584c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	3b01      	subs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005842:	2b80      	cmp	r3, #128	@ 0x80
 8005844:	d0f2      	beq.n	800582c <SPI_EndRxTxTransaction+0x78>
 8005846:	e000      	b.n	800584a <SPI_EndRxTxTransaction+0x96>
        break;
 8005848:	bf00      	nop
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000029c 	.word	0x2000029c
 8005858:	165e9f81 	.word	0x165e9f81

0800585c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e041      	b.n	80058f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fd fa1a 	bl	8002cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fb0e 	bl	8005ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e046      	b.n	80059a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a23      	ldr	r2, [pc, #140]	@ (80059b0 <HAL_TIM_Base_Start+0xb4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592e:	d01d      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <HAL_TIM_Base_Start+0xb8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <HAL_TIM_Base_Start+0xbc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <HAL_TIM_Base_Start+0xc0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <HAL_TIM_Base_Start+0xc4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	@ (80059c4 <HAL_TIM_Base_Start+0xc8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIM_Base_Start+0x70>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <HAL_TIM_Base_Start+0xcc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d111      	bne.n	8005990 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b06      	cmp	r3, #6
 800597c:	d010      	beq.n	80059a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	e007      	b.n	80059a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40001800 	.word	0x40001800

080059cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <HAL_TIM_Base_Stop+0x38>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d107      	bne.n	8005a04 <HAL_TIM_Base_Stop+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d001      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e04e      	b.n	8005ad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a23      	ldr	r2, [pc, #140]	@ (8005ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d022      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5e:	d01d      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d018      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <HAL_TIM_Base_Start_IT+0xd0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00e      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1b      	ldr	r2, [pc, #108]	@ (8005af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	@ (8005af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0x80>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a18      	ldr	r2, [pc, #96]	@ (8005af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d111      	bne.n	8005ac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d010      	beq.n	8005ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0201 	orr.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	e007      	b.n	8005ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40001800 	.word	0x40001800

08005afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d020      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01b      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0202 	mvn.w	r2, #2
 8005b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f999 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f98b 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f99c 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d020      	beq.n	8005bac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0204 	mvn.w	r2, #4
 8005b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f973 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f965 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f976 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d020      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01b      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0208 	mvn.w	r2, #8
 8005bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f94d 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005be4:	e005      	b.n	8005bf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f93f 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f950 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d020      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0210 	mvn.w	r2, #16
 8005c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f927 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005c30:	e005      	b.n	8005c3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f919 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f92a 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0201 	mvn.w	r2, #1
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fc ff46 	bl	8002af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00c      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fae4 	bl	8006254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8fb 	bl	8005ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0220 	mvn.w	r2, #32
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fab6 	bl	8006240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e0b4      	b.n	8005e62 <HAL_TIM_ConfigClockSource+0x186>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d30:	d03e      	beq.n	8005db0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d36:	f200 8087 	bhi.w	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3e:	f000 8086 	beq.w	8005e4e <HAL_TIM_ConfigClockSource+0x172>
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d46:	d87f      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b70      	cmp	r3, #112	@ 0x70
 8005d4a:	d01a      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xa6>
 8005d4c:	2b70      	cmp	r3, #112	@ 0x70
 8005d4e:	d87b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b60      	cmp	r3, #96	@ 0x60
 8005d52:	d050      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d54:	2b60      	cmp	r3, #96	@ 0x60
 8005d56:	d877      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b50      	cmp	r3, #80	@ 0x50
 8005d5a:	d03c      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d5c:	2b50      	cmp	r3, #80	@ 0x50
 8005d5e:	d873      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d058      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x13a>
 8005d64:	2b40      	cmp	r3, #64	@ 0x40
 8005d66:	d86f      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b30      	cmp	r3, #48	@ 0x30
 8005d6a:	d064      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d6c:	2b30      	cmp	r3, #48	@ 0x30
 8005d6e:	d86b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d060      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d867      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d05c      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d05a      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d80:	e062      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	f000 f9b9 	bl	8006108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	609a      	str	r2, [r3, #8]
      break;
 8005dae:	e04f      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dc0:	f000 f9a2 	bl	8006108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd2:	609a      	str	r2, [r3, #8]
      break;
 8005dd4:	e03c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 f916 	bl	8006014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2150      	movs	r1, #80	@ 0x50
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f96f 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005df4:	e02c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 f935 	bl	8006072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2160      	movs	r1, #96	@ 0x60
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f95f 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005e14:	e01c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 f8f6 	bl	8006014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2140      	movs	r1, #64	@ 0x40
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f94f 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005e34:	e00c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 f946 	bl	80060d2 <TIM_ITRx_SetConfig>
      break;
 8005e46:	e003      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4c:	e000      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a46      	ldr	r2, [pc, #280]	@ (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eda:	d00f      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a43      	ldr	r2, [pc, #268]	@ (8005fec <TIM_Base_SetConfig+0x130>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a42      	ldr	r2, [pc, #264]	@ (8005ff0 <TIM_Base_SetConfig+0x134>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a41      	ldr	r2, [pc, #260]	@ (8005ff4 <TIM_Base_SetConfig+0x138>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a40      	ldr	r2, [pc, #256]	@ (8005ff8 <TIM_Base_SetConfig+0x13c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a35      	ldr	r2, [pc, #212]	@ (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d02b      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1c:	d027      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a32      	ldr	r2, [pc, #200]	@ (8005fec <TIM_Base_SetConfig+0x130>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d023      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a31      	ldr	r2, [pc, #196]	@ (8005ff0 <TIM_Base_SetConfig+0x134>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01f      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a30      	ldr	r2, [pc, #192]	@ (8005ff4 <TIM_Base_SetConfig+0x138>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01b      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff8 <TIM_Base_SetConfig+0x13c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d017      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2e      	ldr	r2, [pc, #184]	@ (8005ffc <TIM_Base_SetConfig+0x140>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2d      	ldr	r2, [pc, #180]	@ (8006000 <TIM_Base_SetConfig+0x144>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2c      	ldr	r2, [pc, #176]	@ (8006004 <TIM_Base_SetConfig+0x148>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a2b      	ldr	r2, [pc, #172]	@ (8006008 <TIM_Base_SetConfig+0x14c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2a      	ldr	r2, [pc, #168]	@ (800600c <TIM_Base_SetConfig+0x150>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a29      	ldr	r2, [pc, #164]	@ (8006010 <TIM_Base_SetConfig+0x154>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a10      	ldr	r2, [pc, #64]	@ (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a12      	ldr	r2, [pc, #72]	@ (8005ff8 <TIM_Base_SetConfig+0x13c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40010400 	.word	0x40010400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800
 8006008:	40001800 	.word	0x40001800
 800600c:	40001c00 	.word	0x40001c00
 8006010:	40002000 	.word	0x40002000

08006014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800603e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 030a 	bic.w	r3, r3, #10
 8006050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006072:	b480      	push	{r7}
 8006074:	b087      	sub	sp, #28
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f023 0210 	bic.w	r2, r3, #16
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800609c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	031b      	lsls	r3, r3, #12
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f043 0307 	orr.w	r3, r3, #7
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	021a      	lsls	r2, r3, #8
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	431a      	orrs	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800615c:	2302      	movs	r3, #2
 800615e:	e05a      	b.n	8006216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ac:	d01d      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a18      	ldr	r2, [pc, #96]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a17      	ldr	r2, [pc, #92]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a15      	ldr	r2, [pc, #84]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d10c      	bne.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40010400 	.word	0x40010400
 8006238:	40014000 	.word	0x40014000
 800623c:	40001800 	.word	0x40001800

08006240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e042      	b.n	8006300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fc fd50 	bl	8002d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	@ 0x24
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f8a3 	bl	80073f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	@ 0x28
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b20      	cmp	r3, #32
 8006326:	d175      	bne.n	8006414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_UART_Transmit+0x2c>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e06e      	b.n	8006416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2221      	movs	r2, #33	@ 0x21
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006346:	f7fc ff75 	bl	8003234 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006360:	d108      	bne.n	8006374 <HAL_UART_Transmit+0x6c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d104      	bne.n	8006374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e003      	b.n	800637c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800637c:	e02e      	b.n	80063dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	@ 0x80
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fd7c 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e03a      	b.n	8006416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	3302      	adds	r3, #2
 80063ba:	61bb      	str	r3, [r7, #24]
 80063bc:	e007      	b.n	80063ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	3301      	adds	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1cb      	bne.n	800637e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2140      	movs	r1, #64	@ 0x40
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fd48 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08c      	sub	sp, #48	@ 0x30
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b20      	cmp	r3, #32
 8006438:	d156      	bne.n	80064e8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_UART_Transmit_DMA+0x26>
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e04f      	b.n	80064ea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	88fa      	ldrh	r2, [r7, #6]
 8006454:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2221      	movs	r2, #33	@ 0x21
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	4a21      	ldr	r2, [pc, #132]	@ (80064f4 <HAL_UART_Transmit_DMA+0xd4>)
 8006470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	4a20      	ldr	r2, [pc, #128]	@ (80064f8 <HAL_UART_Transmit_DMA+0xd8>)
 8006478:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	4a1f      	ldr	r2, [pc, #124]	@ (80064fc <HAL_UART_Transmit_DMA+0xdc>)
 8006480:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006486:	2200      	movs	r2, #0
 8006488:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	6819      	ldr	r1, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3304      	adds	r3, #4
 800649e:	461a      	mov	r2, r3
 80064a0:	88fb      	ldrh	r3, [r7, #6]
 80064a2:	f7fd f8b7 	bl	8003614 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3314      	adds	r3, #20
 80064b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	617b      	str	r3, [r7, #20]
   return(result);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80064d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6a39      	ldr	r1, [r7, #32]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e5      	bne.n	80064b0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3730      	adds	r7, #48	@ 0x30
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	08006bd5 	.word	0x08006bd5
 80064f8:	08006c6f 	.word	0x08006c6f
 80064fc:	08006df3 	.word	0x08006df3

08006500 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b20      	cmp	r3, #32
 8006518:	d112      	bne.n	8006540 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Receive_DMA+0x26>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e00b      	b.n	8006542 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	461a      	mov	r2, r3
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fcfe 	bl	8006f38 <UART_Start_Receive_DMA>
 800653c:	4603      	mov	r3, r0
 800653e:	e000      	b.n	8006542 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b090      	sub	sp, #64	@ 0x40
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006552:	2300      	movs	r3, #0
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006560:	2b80      	cmp	r3, #128	@ 0x80
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b21      	cmp	r3, #33	@ 0x21
 8006576:	d128      	bne.n	80065ca <HAL_UART_DMAStop+0x80>
 8006578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d025      	beq.n	80065ca <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	623b      	str	r3, [r7, #32]
   return(result);
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006594:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3314      	adds	r3, #20
 800659c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800659e:	633a      	str	r2, [r7, #48]	@ 0x30
 80065a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fd f880 	bl	80036c4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fd51 	bl	800706c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b22      	cmp	r3, #34	@ 0x22
 80065ea:	d128      	bne.n	800663e <HAL_UART_DMAStop+0xf4>
 80065ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d025      	beq.n	800663e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	60fb      	str	r3, [r7, #12]
   return(result);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006612:	61fa      	str	r2, [r7, #28]
 8006614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	617b      	str	r3, [r7, #20]
   return(result);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006632:	4618      	mov	r0, r3
 8006634:	f7fd f846 	bl	80036c4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fd3f 	bl	80070bc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3740      	adds	r7, #64	@ 0x40
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b0ba      	sub	sp, #232	@ 0xe8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800666e:	2300      	movs	r3, #0
 8006670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006674:	2300      	movs	r3, #0
 8006676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10f      	bne.n	80066ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <HAL_UART_IRQHandler+0x66>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fde7 	bl	800727a <UART_Receive_IT>
      return;
 80066ac:	e25b      	b.n	8006b66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80de 	beq.w	8006874 <HAL_UART_IRQHandler+0x22c>
 80066b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80d1 	beq.w	8006874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xae>
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_UART_IRQHandler+0xd2>
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f043 0202 	orr.w	r2, r3, #2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <HAL_UART_IRQHandler+0xf6>
 8006726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	f043 0204 	orr.w	r2, r3, #4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d011      	beq.n	800676e <HAL_UART_IRQHandler+0x126>
 800674a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d105      	bne.n	8006762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	f043 0208 	orr.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 81f2 	beq.w	8006b5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_UART_IRQHandler+0x14e>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fd72 	bl	800727a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_UART_IRQHandler+0x17a>
 80067ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d04f      	beq.n	8006862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fc7a 	bl	80070bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d141      	bne.n	800685a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3314      	adds	r3, #20
 80067dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800680e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800681a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d9      	bne.n	80067d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a28 <HAL_UART_IRQHandler+0x3e0>)
 8006830:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	4618      	mov	r0, r3
 8006838:	f7fc ffb4 	bl	80037a4 <HAL_DMA_Abort_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	e00e      	b.n	8006870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9a8 	bl	8006ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	e00a      	b.n	8006870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9a4 	bl	8006ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e006      	b.n	8006870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9a0 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800686e:	e175      	b.n	8006b5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	bf00      	nop
    return;
 8006872:	e173      	b.n	8006b5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	2b01      	cmp	r3, #1
 800687a:	f040 814f 	bne.w	8006b1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 8148 	beq.w	8006b1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8141 	beq.w	8006b1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ba:	2b40      	cmp	r3, #64	@ 0x40
 80068bc:	f040 80b6 	bne.w	8006a2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8145 	beq.w	8006b60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068de:	429a      	cmp	r2, r3
 80068e0:	f080 813e 	bcs.w	8006b60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f6:	f000 8088 	beq.w	8006a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800692a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800693e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1d9      	bne.n	80068fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800696a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800696e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800697c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e1      	bne.n	8006946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e3      	bne.n	8006982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e3      	bne.n	80069c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fc fe5d 	bl	80036c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f8cb 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a26:	e09b      	b.n	8006b60 <HAL_UART_IRQHandler+0x518>
 8006a28:	08007183 	.word	0x08007183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 808e 	beq.w	8006b64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8089 	beq.w	8006b64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e3      	bne.n	8006a52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e3      	bne.n	8006a8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0310 	bic.w	r3, r3, #16
 8006ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006af4:	61fa      	str	r2, [r7, #28]
 8006af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69b9      	ldr	r1, [r7, #24]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	617b      	str	r3, [r7, #20]
   return(result);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e3      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f851 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b1a:	e023      	b.n	8006b64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_UART_IRQHandler+0x4f4>
 8006b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fb38 	bl	80071aa <UART_Transmit_IT>
    return;
 8006b3a:	e014      	b.n	8006b66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00e      	beq.n	8006b66 <HAL_UART_IRQHandler+0x51e>
 8006b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fb78 	bl	800724a <UART_EndTransmit_IT>
    return;
 8006b5a:	e004      	b.n	8006b66 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b5c:	bf00      	nop
 8006b5e:	e002      	b.n	8006b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b64:	bf00      	nop
  }
}
 8006b66:	37e8      	adds	r7, #232	@ 0xe8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b090      	sub	sp, #64	@ 0x40
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d137      	bne.n	8006c60 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3314      	adds	r3, #20
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	623b      	str	r3, [r7, #32]
   return(result);
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3314      	adds	r3, #20
 8006c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c4a:	61fa      	str	r2, [r7, #28]
 8006c4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	69b9      	ldr	r1, [r7, #24]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	617b      	str	r3, [r7, #20]
   return(result);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c5e:	e002      	b.n	8006c66 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c62:	f7fb ff3d 	bl	8002ae0 <HAL_UART_TxCpltCallback>
}
 8006c66:	bf00      	nop
 8006c68:	3740      	adds	r7, #64	@ 0x40
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff ff75 	bl	8006b6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b09c      	sub	sp, #112	@ 0x70
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d172      	bne.n	8006d8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006ccc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf2:	f023 0301 	bic.w	r3, r3, #1
 8006cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d00:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	623b      	str	r3, [r7, #32]
   return(result);
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d34:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e5      	bne.n	8006d14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d119      	bne.n	8006d8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0310 	bic.w	r3, r3, #16
 8006d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d78:	61fa      	str	r2, [r7, #28]
 8006d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	69b9      	ldr	r1, [r7, #24]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	617b      	str	r3, [r7, #20]
   return(result);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d8e:	2200      	movs	r2, #0
 8006d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d106      	bne.n	8006da8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006da2:	f7ff ff0b 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006da6:	e002      	b.n	8006dae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006da8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006daa:	f7ff fee9 	bl	8006b80 <HAL_UART_RxCpltCallback>
}
 8006dae:	bf00      	nop
 8006db0:	3770      	adds	r7, #112	@ 0x70
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d108      	bne.n	8006de4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff feed 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006de2:	e002      	b.n	8006dea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fed5 	bl	8006b94 <HAL_UART_RxHalfCpltCallback>
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b80      	cmp	r3, #128	@ 0x80
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b21      	cmp	r3, #33	@ 0x21
 8006e24:	d108      	bne.n	8006e38 <UART_DMAError+0x46>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 f91a 	bl	800706c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	bf0c      	ite	eq
 8006e46:	2301      	moveq	r3, #1
 8006e48:	2300      	movne	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b22      	cmp	r3, #34	@ 0x22
 8006e58:	d108      	bne.n	8006e6c <UART_DMAError+0x7a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e66:	68b8      	ldr	r0, [r7, #8]
 8006e68:	f000 f928 	bl	80070bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e70:	f043 0210 	orr.w	r2, r3, #16
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f7ff fe95 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e96:	e03b      	b.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d037      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea0:	f7fc f9c8 	bl	8003234 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	6a3a      	ldr	r2, [r7, #32]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e03a      	b.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d023      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b80      	cmp	r3, #128	@ 0x80
 8006ecc:	d020      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d01d      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d116      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f8df 	bl	80070bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2208      	movs	r2, #8
 8006f02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e00f      	b.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d0b4      	beq.n	8006e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b098      	sub	sp, #96	@ 0x60
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2222      	movs	r2, #34	@ 0x22
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f64:	4a3e      	ldr	r2, [pc, #248]	@ (8007060 <UART_Start_Receive_DMA+0x128>)
 8006f66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8007064 <UART_Start_Receive_DMA+0x12c>)
 8006f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f74:	4a3c      	ldr	r2, [pc, #240]	@ (8007068 <UART_Start_Receive_DMA+0x130>)
 8006f76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f80:	f107 0308 	add.w	r3, r7, #8
 8006f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4619      	mov	r1, r3
 8006f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	f7fc fb3c 	bl	8003614 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d019      	beq.n	8006fee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e5      	bne.n	8006fba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	657b      	str	r3, [r7, #84]	@ 0x54
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3314      	adds	r3, #20
 800700c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800700e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e5      	bne.n	8006fee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3314      	adds	r3, #20
 8007028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	617b      	str	r3, [r7, #20]
   return(result);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007038:	653b      	str	r3, [r7, #80]	@ 0x50
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3314      	adds	r3, #20
 8007040:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007042:	627a      	str	r2, [r7, #36]	@ 0x24
 8007044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6a39      	ldr	r1, [r7, #32]
 8007048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e5      	bne.n	8007022 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3760      	adds	r7, #96	@ 0x60
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	08006c8b 	.word	0x08006c8b
 8007064:	08006db7 	.word	0x08006db7
 8007068:	08006df3 	.word	0x08006df3

0800706c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	60bb      	str	r3, [r7, #8]
   return(result);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	61ba      	str	r2, [r7, #24]
 8007096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6979      	ldr	r1, [r7, #20]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	613b      	str	r3, [r7, #16]
   return(result);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e5      	bne.n	8007074 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80070b0:	bf00      	nop
 80070b2:	3724      	adds	r7, #36	@ 0x24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b095      	sub	sp, #84	@ 0x54
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e5      	bne.n	80070c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3314      	adds	r3, #20
 80070fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	61fb      	str	r3, [r7, #28]
   return(result);
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3314      	adds	r3, #20
 8007116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800711a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800711e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	2b01      	cmp	r3, #1
 8007132:	d119      	bne.n	8007168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	60bb      	str	r3, [r7, #8]
   return(result);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f023 0310 	bic.w	r3, r3, #16
 800714a:	647b      	str	r3, [r7, #68]	@ 0x44
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007154:	61ba      	str	r2, [r7, #24]
 8007156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6979      	ldr	r1, [r7, #20]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	613b      	str	r3, [r7, #16]
   return(result);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e5      	bne.n	8007134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007176:	bf00      	nop
 8007178:	3754      	adds	r7, #84	@ 0x54
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fd03 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b21      	cmp	r3, #33	@ 0x21
 80071bc:	d13e      	bne.n	800723c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071c6:	d114      	bne.n	80071f2 <UART_Transmit_IT+0x48>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d110      	bne.n	80071f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	1c9a      	adds	r2, r3, #2
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	621a      	str	r2, [r3, #32]
 80071f0:	e008      	b.n	8007204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	1c59      	adds	r1, r3, #1
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6211      	str	r1, [r2, #32]
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4619      	mov	r1, r3
 8007212:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10f      	bne.n	8007238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e000      	b.n	800723e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fb fc38 	bl	8002ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b08c      	sub	sp, #48	@ 0x30
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b22      	cmp	r3, #34	@ 0x22
 800728c:	f040 80ae 	bne.w	80073ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007298:	d117      	bne.n	80072ca <UART_Receive_IT+0x50>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80072c8:	e026      	b.n	8007318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d007      	beq.n	80072ee <UART_Receive_IT+0x74>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <UART_Receive_IT+0x82>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e008      	b.n	800730e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007308:	b2da      	uxtb	r2, r3
 800730a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29b      	uxth	r3, r3
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4619      	mov	r1, r3
 8007326:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007328:	2b00      	cmp	r3, #0
 800732a:	d15d      	bne.n	80073e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0220 	bic.w	r2, r2, #32
 800733a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800734a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	2b01      	cmp	r3, #1
 8007370:	d135      	bne.n	80073de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f023 0310 	bic.w	r3, r3, #16
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007398:	623a      	str	r2, [r7, #32]
 800739a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	69f9      	ldr	r1, [r7, #28]
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d10a      	bne.n	80073d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fbf0 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
 80073dc:	e002      	b.n	80073e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fbce 	bl	8006b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e002      	b.n	80073ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3730      	adds	r7, #48	@ 0x30
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073fc:	b0c0      	sub	sp, #256	@ 0x100
 80073fe:	af00      	add	r7, sp, #0
 8007400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	68d9      	ldr	r1, [r3, #12]
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	ea40 0301 	orr.w	r3, r0, r1
 8007420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	431a      	orrs	r2, r3
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	431a      	orrs	r2, r3
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007450:	f021 010c 	bic.w	r1, r1, #12
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800745e:	430b      	orrs	r3, r1
 8007460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007472:	6999      	ldr	r1, [r3, #24]
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	ea40 0301 	orr.w	r3, r0, r1
 800747e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4b8f      	ldr	r3, [pc, #572]	@ (80076c4 <UART_SetConfig+0x2cc>)
 8007488:	429a      	cmp	r2, r3
 800748a:	d005      	beq.n	8007498 <UART_SetConfig+0xa0>
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b8d      	ldr	r3, [pc, #564]	@ (80076c8 <UART_SetConfig+0x2d0>)
 8007494:	429a      	cmp	r2, r3
 8007496:	d104      	bne.n	80074a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007498:	f7fc ff2c 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 800749c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074a0:	e003      	b.n	80074aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074a2:	f7fc ff13 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 80074a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074b4:	f040 810c 	bne.w	80076d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	1891      	adds	r1, r2, r2
 80074d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074d2:	415b      	adcs	r3, r3
 80074d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074da:	4621      	mov	r1, r4
 80074dc:	eb12 0801 	adds.w	r8, r2, r1
 80074e0:	4629      	mov	r1, r5
 80074e2:	eb43 0901 	adc.w	r9, r3, r1
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074fa:	4690      	mov	r8, r2
 80074fc:	4699      	mov	r9, r3
 80074fe:	4623      	mov	r3, r4
 8007500:	eb18 0303 	adds.w	r3, r8, r3
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007508:	462b      	mov	r3, r5
 800750a:	eb49 0303 	adc.w	r3, r9, r3
 800750e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800751e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007526:	460b      	mov	r3, r1
 8007528:	18db      	adds	r3, r3, r3
 800752a:	653b      	str	r3, [r7, #80]	@ 0x50
 800752c:	4613      	mov	r3, r2
 800752e:	eb42 0303 	adc.w	r3, r2, r3
 8007532:	657b      	str	r3, [r7, #84]	@ 0x54
 8007534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800753c:	f7f9 fb64 	bl	8000c08 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4b61      	ldr	r3, [pc, #388]	@ (80076cc <UART_SetConfig+0x2d4>)
 8007546:	fba3 2302 	umull	r2, r3, r3, r2
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	011c      	lsls	r4, r3, #4
 800754e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007552:	2200      	movs	r2, #0
 8007554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800755c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	1891      	adds	r1, r2, r2
 8007566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007568:	415b      	adcs	r3, r3
 800756a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007570:	4641      	mov	r1, r8
 8007572:	eb12 0a01 	adds.w	sl, r2, r1
 8007576:	4649      	mov	r1, r9
 8007578:	eb43 0b01 	adc.w	fp, r3, r1
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800758c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007590:	4692      	mov	sl, r2
 8007592:	469b      	mov	fp, r3
 8007594:	4643      	mov	r3, r8
 8007596:	eb1a 0303 	adds.w	r3, sl, r3
 800759a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800759e:	464b      	mov	r3, r9
 80075a0:	eb4b 0303 	adc.w	r3, fp, r3
 80075a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075bc:	460b      	mov	r3, r1
 80075be:	18db      	adds	r3, r3, r3
 80075c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c2:	4613      	mov	r3, r2
 80075c4:	eb42 0303 	adc.w	r3, r2, r3
 80075c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075d2:	f7f9 fb19 	bl	8000c08 <__aeabi_uldivmod>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	4b3b      	ldr	r3, [pc, #236]	@ (80076cc <UART_SetConfig+0x2d4>)
 80075de:	fba3 2301 	umull	r2, r3, r3, r1
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	2264      	movs	r2, #100	@ 0x64
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	1acb      	subs	r3, r1, r3
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075f2:	4b36      	ldr	r3, [pc, #216]	@ (80076cc <UART_SetConfig+0x2d4>)
 80075f4:	fba3 2302 	umull	r2, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007600:	441c      	add	r4, r3
 8007602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007606:	2200      	movs	r2, #0
 8007608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800760c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007614:	4642      	mov	r2, r8
 8007616:	464b      	mov	r3, r9
 8007618:	1891      	adds	r1, r2, r2
 800761a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800761c:	415b      	adcs	r3, r3
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007624:	4641      	mov	r1, r8
 8007626:	1851      	adds	r1, r2, r1
 8007628:	6339      	str	r1, [r7, #48]	@ 0x30
 800762a:	4649      	mov	r1, r9
 800762c:	414b      	adcs	r3, r1
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800763c:	4659      	mov	r1, fp
 800763e:	00cb      	lsls	r3, r1, #3
 8007640:	4651      	mov	r1, sl
 8007642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007646:	4651      	mov	r1, sl
 8007648:	00ca      	lsls	r2, r1, #3
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	4603      	mov	r3, r0
 8007650:	4642      	mov	r2, r8
 8007652:	189b      	adds	r3, r3, r2
 8007654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007658:	464b      	mov	r3, r9
 800765a:	460a      	mov	r2, r1
 800765c:	eb42 0303 	adc.w	r3, r2, r3
 8007660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007670:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007678:	460b      	mov	r3, r1
 800767a:	18db      	adds	r3, r3, r3
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800767e:	4613      	mov	r3, r2
 8007680:	eb42 0303 	adc.w	r3, r2, r3
 8007684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800768a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800768e:	f7f9 fabb 	bl	8000c08 <__aeabi_uldivmod>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4b0d      	ldr	r3, [pc, #52]	@ (80076cc <UART_SetConfig+0x2d4>)
 8007698:	fba3 1302 	umull	r1, r3, r3, r2
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2164      	movs	r1, #100	@ 0x64
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	3332      	adds	r3, #50	@ 0x32
 80076aa:	4a08      	ldr	r2, [pc, #32]	@ (80076cc <UART_SetConfig+0x2d4>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f003 0207 	and.w	r2, r3, #7
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4422      	add	r2, r4
 80076be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076c0:	e106      	b.n	80078d0 <UART_SetConfig+0x4d8>
 80076c2:	bf00      	nop
 80076c4:	40011000 	.word	0x40011000
 80076c8:	40011400 	.word	0x40011400
 80076cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076e2:	4642      	mov	r2, r8
 80076e4:	464b      	mov	r3, r9
 80076e6:	1891      	adds	r1, r2, r2
 80076e8:	6239      	str	r1, [r7, #32]
 80076ea:	415b      	adcs	r3, r3
 80076ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076f2:	4641      	mov	r1, r8
 80076f4:	1854      	adds	r4, r2, r1
 80076f6:	4649      	mov	r1, r9
 80076f8:	eb43 0501 	adc.w	r5, r3, r1
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	00eb      	lsls	r3, r5, #3
 8007706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800770a:	00e2      	lsls	r2, r4, #3
 800770c:	4614      	mov	r4, r2
 800770e:	461d      	mov	r5, r3
 8007710:	4643      	mov	r3, r8
 8007712:	18e3      	adds	r3, r4, r3
 8007714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007718:	464b      	mov	r3, r9
 800771a:	eb45 0303 	adc.w	r3, r5, r3
 800771e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800772e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800773e:	4629      	mov	r1, r5
 8007740:	008b      	lsls	r3, r1, #2
 8007742:	4621      	mov	r1, r4
 8007744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007748:	4621      	mov	r1, r4
 800774a:	008a      	lsls	r2, r1, #2
 800774c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007750:	f7f9 fa5a 	bl	8000c08 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4b60      	ldr	r3, [pc, #384]	@ (80078dc <UART_SetConfig+0x4e4>)
 800775a:	fba3 2302 	umull	r2, r3, r3, r2
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	011c      	lsls	r4, r3, #4
 8007762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007766:	2200      	movs	r2, #0
 8007768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800776c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	1891      	adds	r1, r2, r2
 800777a:	61b9      	str	r1, [r7, #24]
 800777c:	415b      	adcs	r3, r3
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007784:	4641      	mov	r1, r8
 8007786:	1851      	adds	r1, r2, r1
 8007788:	6139      	str	r1, [r7, #16]
 800778a:	4649      	mov	r1, r9
 800778c:	414b      	adcs	r3, r1
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800779c:	4659      	mov	r1, fp
 800779e:	00cb      	lsls	r3, r1, #3
 80077a0:	4651      	mov	r1, sl
 80077a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077a6:	4651      	mov	r1, sl
 80077a8:	00ca      	lsls	r2, r1, #3
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	4642      	mov	r2, r8
 80077b2:	189b      	adds	r3, r3, r2
 80077b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077b8:	464b      	mov	r3, r9
 80077ba:	460a      	mov	r2, r1
 80077bc:	eb42 0303 	adc.w	r3, r2, r3
 80077c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077dc:	4649      	mov	r1, r9
 80077de:	008b      	lsls	r3, r1, #2
 80077e0:	4641      	mov	r1, r8
 80077e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e6:	4641      	mov	r1, r8
 80077e8:	008a      	lsls	r2, r1, #2
 80077ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077ee:	f7f9 fa0b 	bl	8000c08 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	4b38      	ldr	r3, [pc, #224]	@ (80078dc <UART_SetConfig+0x4e4>)
 80077fa:	fba3 2301 	umull	r2, r3, r3, r1
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	2264      	movs	r2, #100	@ 0x64
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	1acb      	subs	r3, r1, r3
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	3332      	adds	r3, #50	@ 0x32
 800780c:	4a33      	ldr	r2, [pc, #204]	@ (80078dc <UART_SetConfig+0x4e4>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007818:	441c      	add	r4, r3
 800781a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800781e:	2200      	movs	r2, #0
 8007820:	673b      	str	r3, [r7, #112]	@ 0x70
 8007822:	677a      	str	r2, [r7, #116]	@ 0x74
 8007824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007828:	4642      	mov	r2, r8
 800782a:	464b      	mov	r3, r9
 800782c:	1891      	adds	r1, r2, r2
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	415b      	adcs	r3, r3
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007838:	4641      	mov	r1, r8
 800783a:	1851      	adds	r1, r2, r1
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	4649      	mov	r1, r9
 8007840:	414b      	adcs	r3, r1
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007850:	4659      	mov	r1, fp
 8007852:	00cb      	lsls	r3, r1, #3
 8007854:	4651      	mov	r1, sl
 8007856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800785a:	4651      	mov	r1, sl
 800785c:	00ca      	lsls	r2, r1, #3
 800785e:	4610      	mov	r0, r2
 8007860:	4619      	mov	r1, r3
 8007862:	4603      	mov	r3, r0
 8007864:	4642      	mov	r2, r8
 8007866:	189b      	adds	r3, r3, r2
 8007868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800786a:	464b      	mov	r3, r9
 800786c:	460a      	mov	r2, r1
 800786e:	eb42 0303 	adc.w	r3, r2, r3
 8007872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	663b      	str	r3, [r7, #96]	@ 0x60
 800787e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800788c:	4649      	mov	r1, r9
 800788e:	008b      	lsls	r3, r1, #2
 8007890:	4641      	mov	r1, r8
 8007892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007896:	4641      	mov	r1, r8
 8007898:	008a      	lsls	r2, r1, #2
 800789a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800789e:	f7f9 f9b3 	bl	8000c08 <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4b0d      	ldr	r3, [pc, #52]	@ (80078dc <UART_SetConfig+0x4e4>)
 80078a8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	2164      	movs	r1, #100	@ 0x64
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	3332      	adds	r3, #50	@ 0x32
 80078ba:	4a08      	ldr	r2, [pc, #32]	@ (80078dc <UART_SetConfig+0x4e4>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	f003 020f 	and.w	r2, r3, #15
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4422      	add	r2, r4
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078d6:	46bd      	mov	sp, r7
 80078d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078dc:	51eb851f 	.word	0x51eb851f

080078e0 <malloc>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	@ (80078ec <malloc+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f000 b82d 	b.w	8007944 <_malloc_r>
 80078ea:	bf00      	nop
 80078ec:	200002b4 	.word	0x200002b4

080078f0 <free>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <free+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f001 bdc7 	b.w	8009488 <_free_r>
 80078fa:	bf00      	nop
 80078fc:	200002b4 	.word	0x200002b4

08007900 <sbrk_aligned>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4e0f      	ldr	r6, [pc, #60]	@ (8007940 <sbrk_aligned+0x40>)
 8007904:	460c      	mov	r4, r1
 8007906:	6831      	ldr	r1, [r6, #0]
 8007908:	4605      	mov	r5, r0
 800790a:	b911      	cbnz	r1, 8007912 <sbrk_aligned+0x12>
 800790c:	f000 ff12 	bl	8008734 <_sbrk_r>
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f000 ff0d 	bl	8008734 <_sbrk_r>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d103      	bne.n	8007926 <sbrk_aligned+0x26>
 800791e:	f04f 34ff 	mov.w	r4, #4294967295
 8007922:	4620      	mov	r0, r4
 8007924:	bd70      	pop	{r4, r5, r6, pc}
 8007926:	1cc4      	adds	r4, r0, #3
 8007928:	f024 0403 	bic.w	r4, r4, #3
 800792c:	42a0      	cmp	r0, r4
 800792e:	d0f8      	beq.n	8007922 <sbrk_aligned+0x22>
 8007930:	1a21      	subs	r1, r4, r0
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fefe 	bl	8008734 <_sbrk_r>
 8007938:	3001      	adds	r0, #1
 800793a:	d1f2      	bne.n	8007922 <sbrk_aligned+0x22>
 800793c:	e7ef      	b.n	800791e <sbrk_aligned+0x1e>
 800793e:	bf00      	nop
 8007940:	2001e618 	.word	0x2001e618

08007944 <_malloc_r>:
 8007944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007948:	1ccd      	adds	r5, r1, #3
 800794a:	f025 0503 	bic.w	r5, r5, #3
 800794e:	3508      	adds	r5, #8
 8007950:	2d0c      	cmp	r5, #12
 8007952:	bf38      	it	cc
 8007954:	250c      	movcc	r5, #12
 8007956:	2d00      	cmp	r5, #0
 8007958:	4606      	mov	r6, r0
 800795a:	db01      	blt.n	8007960 <_malloc_r+0x1c>
 800795c:	42a9      	cmp	r1, r5
 800795e:	d904      	bls.n	800796a <_malloc_r+0x26>
 8007960:	230c      	movs	r3, #12
 8007962:	6033      	str	r3, [r6, #0]
 8007964:	2000      	movs	r0, #0
 8007966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a40 <_malloc_r+0xfc>
 800796e:	f000 f869 	bl	8007a44 <__malloc_lock>
 8007972:	f8d8 3000 	ldr.w	r3, [r8]
 8007976:	461c      	mov	r4, r3
 8007978:	bb44      	cbnz	r4, 80079cc <_malloc_r+0x88>
 800797a:	4629      	mov	r1, r5
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff ffbf 	bl	8007900 <sbrk_aligned>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	4604      	mov	r4, r0
 8007986:	d158      	bne.n	8007a3a <_malloc_r+0xf6>
 8007988:	f8d8 4000 	ldr.w	r4, [r8]
 800798c:	4627      	mov	r7, r4
 800798e:	2f00      	cmp	r7, #0
 8007990:	d143      	bne.n	8007a1a <_malloc_r+0xd6>
 8007992:	2c00      	cmp	r4, #0
 8007994:	d04b      	beq.n	8007a2e <_malloc_r+0xea>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	4639      	mov	r1, r7
 800799a:	4630      	mov	r0, r6
 800799c:	eb04 0903 	add.w	r9, r4, r3
 80079a0:	f000 fec8 	bl	8008734 <_sbrk_r>
 80079a4:	4581      	cmp	r9, r0
 80079a6:	d142      	bne.n	8007a2e <_malloc_r+0xea>
 80079a8:	6821      	ldr	r1, [r4, #0]
 80079aa:	1a6d      	subs	r5, r5, r1
 80079ac:	4629      	mov	r1, r5
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff ffa6 	bl	8007900 <sbrk_aligned>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d03a      	beq.n	8007a2e <_malloc_r+0xea>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	442b      	add	r3, r5
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	f8d8 3000 	ldr.w	r3, [r8]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	bb62      	cbnz	r2, 8007a20 <_malloc_r+0xdc>
 80079c6:	f8c8 7000 	str.w	r7, [r8]
 80079ca:	e00f      	b.n	80079ec <_malloc_r+0xa8>
 80079cc:	6822      	ldr	r2, [r4, #0]
 80079ce:	1b52      	subs	r2, r2, r5
 80079d0:	d420      	bmi.n	8007a14 <_malloc_r+0xd0>
 80079d2:	2a0b      	cmp	r2, #11
 80079d4:	d917      	bls.n	8007a06 <_malloc_r+0xc2>
 80079d6:	1961      	adds	r1, r4, r5
 80079d8:	42a3      	cmp	r3, r4
 80079da:	6025      	str	r5, [r4, #0]
 80079dc:	bf18      	it	ne
 80079de:	6059      	strne	r1, [r3, #4]
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	bf08      	it	eq
 80079e4:	f8c8 1000 	streq.w	r1, [r8]
 80079e8:	5162      	str	r2, [r4, r5]
 80079ea:	604b      	str	r3, [r1, #4]
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f82f 	bl	8007a50 <__malloc_unlock>
 80079f2:	f104 000b 	add.w	r0, r4, #11
 80079f6:	1d23      	adds	r3, r4, #4
 80079f8:	f020 0007 	bic.w	r0, r0, #7
 80079fc:	1ac2      	subs	r2, r0, r3
 80079fe:	bf1c      	itt	ne
 8007a00:	1a1b      	subne	r3, r3, r0
 8007a02:	50a3      	strne	r3, [r4, r2]
 8007a04:	e7af      	b.n	8007966 <_malloc_r+0x22>
 8007a06:	6862      	ldr	r2, [r4, #4]
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	bf0c      	ite	eq
 8007a0c:	f8c8 2000 	streq.w	r2, [r8]
 8007a10:	605a      	strne	r2, [r3, #4]
 8007a12:	e7eb      	b.n	80079ec <_malloc_r+0xa8>
 8007a14:	4623      	mov	r3, r4
 8007a16:	6864      	ldr	r4, [r4, #4]
 8007a18:	e7ae      	b.n	8007978 <_malloc_r+0x34>
 8007a1a:	463c      	mov	r4, r7
 8007a1c:	687f      	ldr	r7, [r7, #4]
 8007a1e:	e7b6      	b.n	800798e <_malloc_r+0x4a>
 8007a20:	461a      	mov	r2, r3
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d1fb      	bne.n	8007a20 <_malloc_r+0xdc>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6053      	str	r3, [r2, #4]
 8007a2c:	e7de      	b.n	80079ec <_malloc_r+0xa8>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 f80c 	bl	8007a50 <__malloc_unlock>
 8007a38:	e794      	b.n	8007964 <_malloc_r+0x20>
 8007a3a:	6005      	str	r5, [r0, #0]
 8007a3c:	e7d6      	b.n	80079ec <_malloc_r+0xa8>
 8007a3e:	bf00      	nop
 8007a40:	2001e61c 	.word	0x2001e61c

08007a44 <__malloc_lock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	@ (8007a4c <__malloc_lock+0x8>)
 8007a46:	f000 bec2 	b.w	80087ce <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	2001e760 	.word	0x2001e760

08007a50 <__malloc_unlock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__malloc_unlock+0x8>)
 8007a52:	f000 bebd 	b.w	80087d0 <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	2001e760 	.word	0x2001e760

08007a5c <_strtoul_l.constprop.0>:
 8007a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a60:	4e34      	ldr	r6, [pc, #208]	@ (8007b34 <_strtoul_l.constprop.0+0xd8>)
 8007a62:	4686      	mov	lr, r0
 8007a64:	460d      	mov	r5, r1
 8007a66:	4628      	mov	r0, r5
 8007a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a6c:	5d37      	ldrb	r7, [r6, r4]
 8007a6e:	f017 0708 	ands.w	r7, r7, #8
 8007a72:	d1f8      	bne.n	8007a66 <_strtoul_l.constprop.0+0xa>
 8007a74:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a76:	d12f      	bne.n	8007ad8 <_strtoul_l.constprop.0+0x7c>
 8007a78:	782c      	ldrb	r4, [r5, #0]
 8007a7a:	2701      	movs	r7, #1
 8007a7c:	1c85      	adds	r5, r0, #2
 8007a7e:	f033 0010 	bics.w	r0, r3, #16
 8007a82:	d109      	bne.n	8007a98 <_strtoul_l.constprop.0+0x3c>
 8007a84:	2c30      	cmp	r4, #48	@ 0x30
 8007a86:	d12c      	bne.n	8007ae2 <_strtoul_l.constprop.0+0x86>
 8007a88:	7828      	ldrb	r0, [r5, #0]
 8007a8a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007a8e:	2858      	cmp	r0, #88	@ 0x58
 8007a90:	d127      	bne.n	8007ae2 <_strtoul_l.constprop.0+0x86>
 8007a92:	786c      	ldrb	r4, [r5, #1]
 8007a94:	2310      	movs	r3, #16
 8007a96:	3502      	adds	r5, #2
 8007a98:	f04f 38ff 	mov.w	r8, #4294967295
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007aa2:	fb03 f908 	mul.w	r9, r3, r8
 8007aa6:	ea6f 0909 	mvn.w	r9, r9
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007ab0:	f1bc 0f09 	cmp.w	ip, #9
 8007ab4:	d81c      	bhi.n	8007af0 <_strtoul_l.constprop.0+0x94>
 8007ab6:	4664      	mov	r4, ip
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	dd2a      	ble.n	8007b12 <_strtoul_l.constprop.0+0xb6>
 8007abc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007ac0:	d007      	beq.n	8007ad2 <_strtoul_l.constprop.0+0x76>
 8007ac2:	4580      	cmp	r8, r0
 8007ac4:	d322      	bcc.n	8007b0c <_strtoul_l.constprop.0+0xb0>
 8007ac6:	d101      	bne.n	8007acc <_strtoul_l.constprop.0+0x70>
 8007ac8:	45a1      	cmp	r9, r4
 8007aca:	db1f      	blt.n	8007b0c <_strtoul_l.constprop.0+0xb0>
 8007acc:	fb00 4003 	mla	r0, r0, r3, r4
 8007ad0:	2601      	movs	r6, #1
 8007ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ad6:	e7e9      	b.n	8007aac <_strtoul_l.constprop.0+0x50>
 8007ad8:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ada:	bf04      	itt	eq
 8007adc:	782c      	ldrbeq	r4, [r5, #0]
 8007ade:	1c85      	addeq	r5, r0, #2
 8007ae0:	e7cd      	b.n	8007a7e <_strtoul_l.constprop.0+0x22>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1d8      	bne.n	8007a98 <_strtoul_l.constprop.0+0x3c>
 8007ae6:	2c30      	cmp	r4, #48	@ 0x30
 8007ae8:	bf0c      	ite	eq
 8007aea:	2308      	moveq	r3, #8
 8007aec:	230a      	movne	r3, #10
 8007aee:	e7d3      	b.n	8007a98 <_strtoul_l.constprop.0+0x3c>
 8007af0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007af4:	f1bc 0f19 	cmp.w	ip, #25
 8007af8:	d801      	bhi.n	8007afe <_strtoul_l.constprop.0+0xa2>
 8007afa:	3c37      	subs	r4, #55	@ 0x37
 8007afc:	e7dc      	b.n	8007ab8 <_strtoul_l.constprop.0+0x5c>
 8007afe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007b02:	f1bc 0f19 	cmp.w	ip, #25
 8007b06:	d804      	bhi.n	8007b12 <_strtoul_l.constprop.0+0xb6>
 8007b08:	3c57      	subs	r4, #87	@ 0x57
 8007b0a:	e7d5      	b.n	8007ab8 <_strtoul_l.constprop.0+0x5c>
 8007b0c:	f04f 36ff 	mov.w	r6, #4294967295
 8007b10:	e7df      	b.n	8007ad2 <_strtoul_l.constprop.0+0x76>
 8007b12:	1c73      	adds	r3, r6, #1
 8007b14:	d106      	bne.n	8007b24 <_strtoul_l.constprop.0+0xc8>
 8007b16:	2322      	movs	r3, #34	@ 0x22
 8007b18:	f8ce 3000 	str.w	r3, [lr]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	b932      	cbnz	r2, 8007b2e <_strtoul_l.constprop.0+0xd2>
 8007b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b24:	b107      	cbz	r7, 8007b28 <_strtoul_l.constprop.0+0xcc>
 8007b26:	4240      	negs	r0, r0
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	d0f9      	beq.n	8007b20 <_strtoul_l.constprop.0+0xc4>
 8007b2c:	b106      	cbz	r6, 8007b30 <_strtoul_l.constprop.0+0xd4>
 8007b2e:	1e69      	subs	r1, r5, #1
 8007b30:	6011      	str	r1, [r2, #0]
 8007b32:	e7f5      	b.n	8007b20 <_strtoul_l.constprop.0+0xc4>
 8007b34:	0800a8e5 	.word	0x0800a8e5

08007b38 <strtoul>:
 8007b38:	4613      	mov	r3, r2
 8007b3a:	460a      	mov	r2, r1
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4802      	ldr	r0, [pc, #8]	@ (8007b48 <strtoul+0x10>)
 8007b40:	6800      	ldr	r0, [r0, #0]
 8007b42:	f7ff bf8b 	b.w	8007a5c <_strtoul_l.constprop.0>
 8007b46:	bf00      	nop
 8007b48:	200002b4 	.word	0x200002b4

08007b4c <__cvt>:
 8007b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	ec57 6b10 	vmov	r6, r7, d0
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	bfbb      	ittet	lt
 8007b5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b62:	461f      	movlt	r7, r3
 8007b64:	2300      	movge	r3, #0
 8007b66:	232d      	movlt	r3, #45	@ 0x2d
 8007b68:	700b      	strb	r3, [r1, #0]
 8007b6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b70:	4691      	mov	r9, r2
 8007b72:	f023 0820 	bic.w	r8, r3, #32
 8007b76:	bfbc      	itt	lt
 8007b78:	4632      	movlt	r2, r6
 8007b7a:	4616      	movlt	r6, r2
 8007b7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b80:	d005      	beq.n	8007b8e <__cvt+0x42>
 8007b82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b86:	d100      	bne.n	8007b8a <__cvt+0x3e>
 8007b88:	3401      	adds	r4, #1
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	e000      	b.n	8007b90 <__cvt+0x44>
 8007b8e:	2103      	movs	r1, #3
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	ab02      	add	r3, sp, #8
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	ec47 6b10 	vmov	d0, r6, r7
 8007b9c:	4653      	mov	r3, sl
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	f000 feae 	bl	8008900 <_dtoa_r>
 8007ba4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ba8:	4605      	mov	r5, r0
 8007baa:	d119      	bne.n	8007be0 <__cvt+0x94>
 8007bac:	f019 0f01 	tst.w	r9, #1
 8007bb0:	d00e      	beq.n	8007bd0 <__cvt+0x84>
 8007bb2:	eb00 0904 	add.w	r9, r0, r4
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 ffb3 	bl	8000b28 <__aeabi_dcmpeq>
 8007bc2:	b108      	cbz	r0, 8007bc8 <__cvt+0x7c>
 8007bc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bc8:	2230      	movs	r2, #48	@ 0x30
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	d31e      	bcc.n	8007c0e <__cvt+0xc2>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bd4:	1b5b      	subs	r3, r3, r5
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	b004      	add	sp, #16
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007be4:	eb00 0904 	add.w	r9, r0, r4
 8007be8:	d1e5      	bne.n	8007bb6 <__cvt+0x6a>
 8007bea:	7803      	ldrb	r3, [r0, #0]
 8007bec:	2b30      	cmp	r3, #48	@ 0x30
 8007bee:	d10a      	bne.n	8007c06 <__cvt+0xba>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 ff96 	bl	8000b28 <__aeabi_dcmpeq>
 8007bfc:	b918      	cbnz	r0, 8007c06 <__cvt+0xba>
 8007bfe:	f1c4 0401 	rsb	r4, r4, #1
 8007c02:	f8ca 4000 	str.w	r4, [sl]
 8007c06:	f8da 3000 	ldr.w	r3, [sl]
 8007c0a:	4499      	add	r9, r3
 8007c0c:	e7d3      	b.n	8007bb6 <__cvt+0x6a>
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	9103      	str	r1, [sp, #12]
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e7d9      	b.n	8007bca <__cvt+0x7e>

08007c16 <__exponent>:
 8007c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	bfba      	itte	lt
 8007c1c:	4249      	neglt	r1, r1
 8007c1e:	232d      	movlt	r3, #45	@ 0x2d
 8007c20:	232b      	movge	r3, #43	@ 0x2b
 8007c22:	2909      	cmp	r1, #9
 8007c24:	7002      	strb	r2, [r0, #0]
 8007c26:	7043      	strb	r3, [r0, #1]
 8007c28:	dd29      	ble.n	8007c7e <__exponent+0x68>
 8007c2a:	f10d 0307 	add.w	r3, sp, #7
 8007c2e:	461d      	mov	r5, r3
 8007c30:	270a      	movs	r7, #10
 8007c32:	461a      	mov	r2, r3
 8007c34:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c38:	fb07 1416 	mls	r4, r7, r6, r1
 8007c3c:	3430      	adds	r4, #48	@ 0x30
 8007c3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c42:	460c      	mov	r4, r1
 8007c44:	2c63      	cmp	r4, #99	@ 0x63
 8007c46:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	dcf1      	bgt.n	8007c32 <__exponent+0x1c>
 8007c4e:	3130      	adds	r1, #48	@ 0x30
 8007c50:	1e94      	subs	r4, r2, #2
 8007c52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c56:	1c41      	adds	r1, r0, #1
 8007c58:	4623      	mov	r3, r4
 8007c5a:	42ab      	cmp	r3, r5
 8007c5c:	d30a      	bcc.n	8007c74 <__exponent+0x5e>
 8007c5e:	f10d 0309 	add.w	r3, sp, #9
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	42ac      	cmp	r4, r5
 8007c66:	bf88      	it	hi
 8007c68:	2300      	movhi	r3, #0
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	4403      	add	r3, r0
 8007c6e:	1a18      	subs	r0, r3, r0
 8007c70:	b003      	add	sp, #12
 8007c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c7c:	e7ed      	b.n	8007c5a <__exponent+0x44>
 8007c7e:	2330      	movs	r3, #48	@ 0x30
 8007c80:	3130      	adds	r1, #48	@ 0x30
 8007c82:	7083      	strb	r3, [r0, #2]
 8007c84:	70c1      	strb	r1, [r0, #3]
 8007c86:	1d03      	adds	r3, r0, #4
 8007c88:	e7f1      	b.n	8007c6e <__exponent+0x58>
	...

08007c8c <_printf_float>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	b08d      	sub	sp, #52	@ 0x34
 8007c92:	460c      	mov	r4, r1
 8007c94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c98:	4616      	mov	r6, r2
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	f000 fd11 	bl	80086c4 <_localeconv_r>
 8007ca2:	6803      	ldr	r3, [r0, #0]
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7f8 fb12 	bl	80002d0 <strlen>
 8007cac:	2300      	movs	r3, #0
 8007cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb4:	9005      	str	r0, [sp, #20]
 8007cb6:	3307      	adds	r3, #7
 8007cb8:	f023 0307 	bic.w	r3, r3, #7
 8007cbc:	f103 0208 	add.w	r2, r3, #8
 8007cc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007cc4:	f8d4 b000 	ldr.w	fp, [r4]
 8007cc8:	f8c8 2000 	str.w	r2, [r8]
 8007ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce2:	4b9c      	ldr	r3, [pc, #624]	@ (8007f54 <_printf_float+0x2c8>)
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	f7f8 ff50 	bl	8000b8c <__aeabi_dcmpun>
 8007cec:	bb70      	cbnz	r0, 8007d4c <_printf_float+0xc0>
 8007cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cf2:	4b98      	ldr	r3, [pc, #608]	@ (8007f54 <_printf_float+0x2c8>)
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	f7f8 ff2a 	bl	8000b50 <__aeabi_dcmple>
 8007cfc:	bb30      	cbnz	r0, 8007d4c <_printf_float+0xc0>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 ff19 	bl	8000b3c <__aeabi_dcmplt>
 8007d0a:	b110      	cbz	r0, 8007d12 <_printf_float+0x86>
 8007d0c:	232d      	movs	r3, #45	@ 0x2d
 8007d0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d12:	4a91      	ldr	r2, [pc, #580]	@ (8007f58 <_printf_float+0x2cc>)
 8007d14:	4b91      	ldr	r3, [pc, #580]	@ (8007f5c <_printf_float+0x2d0>)
 8007d16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d1a:	bf94      	ite	ls
 8007d1c:	4690      	movls	r8, r2
 8007d1e:	4698      	movhi	r8, r3
 8007d20:	2303      	movs	r3, #3
 8007d22:	6123      	str	r3, [r4, #16]
 8007d24:	f02b 0304 	bic.w	r3, fp, #4
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	9700      	str	r7, [sp, #0]
 8007d30:	4633      	mov	r3, r6
 8007d32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f9d2 	bl	80080e0 <_printf_common>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f040 808d 	bne.w	8007e5c <_printf_float+0x1d0>
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	b00d      	add	sp, #52	@ 0x34
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 ff1a 	bl	8000b8c <__aeabi_dcmpun>
 8007d58:	b140      	cbz	r0, 8007d6c <_printf_float+0xe0>
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfbc      	itt	lt
 8007d60:	232d      	movlt	r3, #45	@ 0x2d
 8007d62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d66:	4a7e      	ldr	r2, [pc, #504]	@ (8007f60 <_printf_float+0x2d4>)
 8007d68:	4b7e      	ldr	r3, [pc, #504]	@ (8007f64 <_printf_float+0x2d8>)
 8007d6a:	e7d4      	b.n	8007d16 <_printf_float+0x8a>
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d72:	9206      	str	r2, [sp, #24]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	d13b      	bne.n	8007df0 <_printf_float+0x164>
 8007d78:	2306      	movs	r3, #6
 8007d7a:	6063      	str	r3, [r4, #4]
 8007d7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d80:	2300      	movs	r3, #0
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d8c:	ab09      	add	r3, sp, #36	@ 0x24
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	6861      	ldr	r1, [r4, #4]
 8007d92:	ec49 8b10 	vmov	d0, r8, r9
 8007d96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7ff fed6 	bl	8007b4c <__cvt>
 8007da0:	9b06      	ldr	r3, [sp, #24]
 8007da2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007da4:	2b47      	cmp	r3, #71	@ 0x47
 8007da6:	4680      	mov	r8, r0
 8007da8:	d129      	bne.n	8007dfe <_printf_float+0x172>
 8007daa:	1cc8      	adds	r0, r1, #3
 8007dac:	db02      	blt.n	8007db4 <_printf_float+0x128>
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	4299      	cmp	r1, r3
 8007db2:	dd41      	ble.n	8007e38 <_printf_float+0x1ac>
 8007db4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007db8:	fa5f fa8a 	uxtb.w	sl, sl
 8007dbc:	3901      	subs	r1, #1
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007dc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dc6:	f7ff ff26 	bl	8007c16 <__exponent>
 8007dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dcc:	1813      	adds	r3, r2, r0
 8007dce:	2a01      	cmp	r2, #1
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	dc02      	bgt.n	8007ddc <_printf_float+0x150>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	07d2      	lsls	r2, r2, #31
 8007dda:	d501      	bpl.n	8007de0 <_printf_float+0x154>
 8007ddc:	3301      	adds	r3, #1
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0a2      	beq.n	8007d2e <_printf_float+0xa2>
 8007de8:	232d      	movs	r3, #45	@ 0x2d
 8007dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dee:	e79e      	b.n	8007d2e <_printf_float+0xa2>
 8007df0:	9a06      	ldr	r2, [sp, #24]
 8007df2:	2a47      	cmp	r2, #71	@ 0x47
 8007df4:	d1c2      	bne.n	8007d7c <_printf_float+0xf0>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1c0      	bne.n	8007d7c <_printf_float+0xf0>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e7bd      	b.n	8007d7a <_printf_float+0xee>
 8007dfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e02:	d9db      	bls.n	8007dbc <_printf_float+0x130>
 8007e04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e08:	d118      	bne.n	8007e3c <_printf_float+0x1b0>
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	dd0b      	ble.n	8007e28 <_printf_float+0x19c>
 8007e10:	6121      	str	r1, [r4, #16]
 8007e12:	b913      	cbnz	r3, 8007e1a <_printf_float+0x18e>
 8007e14:	6822      	ldr	r2, [r4, #0]
 8007e16:	07d0      	lsls	r0, r2, #31
 8007e18:	d502      	bpl.n	8007e20 <_printf_float+0x194>
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	440b      	add	r3, r1
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	e7db      	b.n	8007de0 <_printf_float+0x154>
 8007e28:	b913      	cbnz	r3, 8007e30 <_printf_float+0x1a4>
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	07d2      	lsls	r2, r2, #31
 8007e2e:	d501      	bpl.n	8007e34 <_printf_float+0x1a8>
 8007e30:	3302      	adds	r3, #2
 8007e32:	e7f4      	b.n	8007e1e <_printf_float+0x192>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e7f2      	b.n	8007e1e <_printf_float+0x192>
 8007e38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	db05      	blt.n	8007e4e <_printf_float+0x1c2>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	6121      	str	r1, [r4, #16]
 8007e46:	07d8      	lsls	r0, r3, #31
 8007e48:	d5ea      	bpl.n	8007e20 <_printf_float+0x194>
 8007e4a:	1c4b      	adds	r3, r1, #1
 8007e4c:	e7e7      	b.n	8007e1e <_printf_float+0x192>
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	bfd4      	ite	le
 8007e52:	f1c1 0202 	rsble	r2, r1, #2
 8007e56:	2201      	movgt	r2, #1
 8007e58:	4413      	add	r3, r2
 8007e5a:	e7e0      	b.n	8007e1e <_printf_float+0x192>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	055a      	lsls	r2, r3, #21
 8007e60:	d407      	bmi.n	8007e72 <_printf_float+0x1e6>
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	4642      	mov	r2, r8
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d12b      	bne.n	8007ec8 <_printf_float+0x23c>
 8007e70:	e767      	b.n	8007d42 <_printf_float+0xb6>
 8007e72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e76:	f240 80dd 	bls.w	8008034 <_printf_float+0x3a8>
 8007e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2300      	movs	r3, #0
 8007e82:	f7f8 fe51 	bl	8000b28 <__aeabi_dcmpeq>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d033      	beq.n	8007ef2 <_printf_float+0x266>
 8007e8a:	4a37      	ldr	r2, [pc, #220]	@ (8007f68 <_printf_float+0x2dc>)
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	f43f af54 	beq.w	8007d42 <_printf_float+0xb6>
 8007e9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e9e:	4543      	cmp	r3, r8
 8007ea0:	db02      	blt.n	8007ea8 <_printf_float+0x21c>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	07d8      	lsls	r0, r3, #31
 8007ea6:	d50f      	bpl.n	8007ec8 <_printf_float+0x23c>
 8007ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f af45 	beq.w	8007d42 <_printf_float+0xb6>
 8007eb8:	f04f 0900 	mov.w	r9, #0
 8007ebc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ec0:	f104 0a1a 	add.w	sl, r4, #26
 8007ec4:	45c8      	cmp	r8, r9
 8007ec6:	dc09      	bgt.n	8007edc <_printf_float+0x250>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	079b      	lsls	r3, r3, #30
 8007ecc:	f100 8103 	bmi.w	80080d6 <_printf_float+0x44a>
 8007ed0:	68e0      	ldr	r0, [r4, #12]
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ed4:	4298      	cmp	r0, r3
 8007ed6:	bfb8      	it	lt
 8007ed8:	4618      	movlt	r0, r3
 8007eda:	e734      	b.n	8007d46 <_printf_float+0xba>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4652      	mov	r2, sl
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f43f af2b 	beq.w	8007d42 <_printf_float+0xb6>
 8007eec:	f109 0901 	add.w	r9, r9, #1
 8007ef0:	e7e8      	b.n	8007ec4 <_printf_float+0x238>
 8007ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dc39      	bgt.n	8007f6c <_printf_float+0x2e0>
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <_printf_float+0x2dc>)
 8007efa:	2301      	movs	r3, #1
 8007efc:	4631      	mov	r1, r6
 8007efe:	4628      	mov	r0, r5
 8007f00:	47b8      	blx	r7
 8007f02:	3001      	adds	r0, #1
 8007f04:	f43f af1d 	beq.w	8007d42 <_printf_float+0xb6>
 8007f08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f0c:	ea59 0303 	orrs.w	r3, r9, r3
 8007f10:	d102      	bne.n	8007f18 <_printf_float+0x28c>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	07d9      	lsls	r1, r3, #31
 8007f16:	d5d7      	bpl.n	8007ec8 <_printf_float+0x23c>
 8007f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f af0d 	beq.w	8007d42 <_printf_float+0xb6>
 8007f28:	f04f 0a00 	mov.w	sl, #0
 8007f2c:	f104 0b1a 	add.w	fp, r4, #26
 8007f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f32:	425b      	negs	r3, r3
 8007f34:	4553      	cmp	r3, sl
 8007f36:	dc01      	bgt.n	8007f3c <_printf_float+0x2b0>
 8007f38:	464b      	mov	r3, r9
 8007f3a:	e793      	b.n	8007e64 <_printf_float+0x1d8>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	465a      	mov	r2, fp
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f aefb 	beq.w	8007d42 <_printf_float+0xb6>
 8007f4c:	f10a 0a01 	add.w	sl, sl, #1
 8007f50:	e7ee      	b.n	8007f30 <_printf_float+0x2a4>
 8007f52:	bf00      	nop
 8007f54:	7fefffff 	.word	0x7fefffff
 8007f58:	0800a9e5 	.word	0x0800a9e5
 8007f5c:	0800a9e9 	.word	0x0800a9e9
 8007f60:	0800a9ed 	.word	0x0800a9ed
 8007f64:	0800a9f1 	.word	0x0800a9f1
 8007f68:	0800a9f5 	.word	0x0800a9f5
 8007f6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f72:	4553      	cmp	r3, sl
 8007f74:	bfa8      	it	ge
 8007f76:	4653      	movge	r3, sl
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	4699      	mov	r9, r3
 8007f7c:	dc36      	bgt.n	8007fec <_printf_float+0x360>
 8007f7e:	f04f 0b00 	mov.w	fp, #0
 8007f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f86:	f104 021a 	add.w	r2, r4, #26
 8007f8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f8c:	9306      	str	r3, [sp, #24]
 8007f8e:	eba3 0309 	sub.w	r3, r3, r9
 8007f92:	455b      	cmp	r3, fp
 8007f94:	dc31      	bgt.n	8007ffa <_printf_float+0x36e>
 8007f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f98:	459a      	cmp	sl, r3
 8007f9a:	dc3a      	bgt.n	8008012 <_printf_float+0x386>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	07da      	lsls	r2, r3, #31
 8007fa0:	d437      	bmi.n	8008012 <_printf_float+0x386>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa4:	ebaa 0903 	sub.w	r9, sl, r3
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	ebaa 0303 	sub.w	r3, sl, r3
 8007fae:	4599      	cmp	r9, r3
 8007fb0:	bfa8      	it	ge
 8007fb2:	4699      	movge	r9, r3
 8007fb4:	f1b9 0f00 	cmp.w	r9, #0
 8007fb8:	dc33      	bgt.n	8008022 <_printf_float+0x396>
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fc2:	f104 0b1a 	add.w	fp, r4, #26
 8007fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007fcc:	eba3 0309 	sub.w	r3, r3, r9
 8007fd0:	4543      	cmp	r3, r8
 8007fd2:	f77f af79 	ble.w	8007ec8 <_printf_float+0x23c>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	465a      	mov	r2, fp
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b8      	blx	r7
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f43f aeae 	beq.w	8007d42 <_printf_float+0xb6>
 8007fe6:	f108 0801 	add.w	r8, r8, #1
 8007fea:	e7ec      	b.n	8007fc6 <_printf_float+0x33a>
 8007fec:	4642      	mov	r2, r8
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d1c2      	bne.n	8007f7e <_printf_float+0x2f2>
 8007ff8:	e6a3      	b.n	8007d42 <_printf_float+0xb6>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	9206      	str	r2, [sp, #24]
 8008002:	47b8      	blx	r7
 8008004:	3001      	adds	r0, #1
 8008006:	f43f ae9c 	beq.w	8007d42 <_printf_float+0xb6>
 800800a:	9a06      	ldr	r2, [sp, #24]
 800800c:	f10b 0b01 	add.w	fp, fp, #1
 8008010:	e7bb      	b.n	8007f8a <_printf_float+0x2fe>
 8008012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	d1c0      	bne.n	8007fa2 <_printf_float+0x316>
 8008020:	e68f      	b.n	8007d42 <_printf_float+0xb6>
 8008022:	9a06      	ldr	r2, [sp, #24]
 8008024:	464b      	mov	r3, r9
 8008026:	4442      	add	r2, r8
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	d1c3      	bne.n	8007fba <_printf_float+0x32e>
 8008032:	e686      	b.n	8007d42 <_printf_float+0xb6>
 8008034:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008038:	f1ba 0f01 	cmp.w	sl, #1
 800803c:	dc01      	bgt.n	8008042 <_printf_float+0x3b6>
 800803e:	07db      	lsls	r3, r3, #31
 8008040:	d536      	bpl.n	80080b0 <_printf_float+0x424>
 8008042:	2301      	movs	r3, #1
 8008044:	4642      	mov	r2, r8
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f ae78 	beq.w	8007d42 <_printf_float+0xb6>
 8008052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f ae70 	beq.w	8007d42 <_printf_float+0xb6>
 8008062:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008066:	2200      	movs	r2, #0
 8008068:	2300      	movs	r3, #0
 800806a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800806e:	f7f8 fd5b 	bl	8000b28 <__aeabi_dcmpeq>
 8008072:	b9c0      	cbnz	r0, 80080a6 <_printf_float+0x41a>
 8008074:	4653      	mov	r3, sl
 8008076:	f108 0201 	add.w	r2, r8, #1
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d10c      	bne.n	800809e <_printf_float+0x412>
 8008084:	e65d      	b.n	8007d42 <_printf_float+0xb6>
 8008086:	2301      	movs	r3, #1
 8008088:	465a      	mov	r2, fp
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae56 	beq.w	8007d42 <_printf_float+0xb6>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	45d0      	cmp	r8, sl
 800809c:	dbf3      	blt.n	8008086 <_printf_float+0x3fa>
 800809e:	464b      	mov	r3, r9
 80080a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080a4:	e6df      	b.n	8007e66 <_printf_float+0x1da>
 80080a6:	f04f 0800 	mov.w	r8, #0
 80080aa:	f104 0b1a 	add.w	fp, r4, #26
 80080ae:	e7f4      	b.n	800809a <_printf_float+0x40e>
 80080b0:	2301      	movs	r3, #1
 80080b2:	4642      	mov	r2, r8
 80080b4:	e7e1      	b.n	800807a <_printf_float+0x3ee>
 80080b6:	2301      	movs	r3, #1
 80080b8:	464a      	mov	r2, r9
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	47b8      	blx	r7
 80080c0:	3001      	adds	r0, #1
 80080c2:	f43f ae3e 	beq.w	8007d42 <_printf_float+0xb6>
 80080c6:	f108 0801 	add.w	r8, r8, #1
 80080ca:	68e3      	ldr	r3, [r4, #12]
 80080cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080ce:	1a5b      	subs	r3, r3, r1
 80080d0:	4543      	cmp	r3, r8
 80080d2:	dcf0      	bgt.n	80080b6 <_printf_float+0x42a>
 80080d4:	e6fc      	b.n	8007ed0 <_printf_float+0x244>
 80080d6:	f04f 0800 	mov.w	r8, #0
 80080da:	f104 0919 	add.w	r9, r4, #25
 80080de:	e7f4      	b.n	80080ca <_printf_float+0x43e>

080080e0 <_printf_common>:
 80080e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e4:	4616      	mov	r6, r2
 80080e6:	4698      	mov	r8, r3
 80080e8:	688a      	ldr	r2, [r1, #8]
 80080ea:	690b      	ldr	r3, [r1, #16]
 80080ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080f0:	4293      	cmp	r3, r2
 80080f2:	bfb8      	it	lt
 80080f4:	4613      	movlt	r3, r2
 80080f6:	6033      	str	r3, [r6, #0]
 80080f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080fc:	4607      	mov	r7, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	b10a      	cbz	r2, 8008106 <_printf_common+0x26>
 8008102:	3301      	adds	r3, #1
 8008104:	6033      	str	r3, [r6, #0]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	0699      	lsls	r1, r3, #26
 800810a:	bf42      	ittt	mi
 800810c:	6833      	ldrmi	r3, [r6, #0]
 800810e:	3302      	addmi	r3, #2
 8008110:	6033      	strmi	r3, [r6, #0]
 8008112:	6825      	ldr	r5, [r4, #0]
 8008114:	f015 0506 	ands.w	r5, r5, #6
 8008118:	d106      	bne.n	8008128 <_printf_common+0x48>
 800811a:	f104 0a19 	add.w	sl, r4, #25
 800811e:	68e3      	ldr	r3, [r4, #12]
 8008120:	6832      	ldr	r2, [r6, #0]
 8008122:	1a9b      	subs	r3, r3, r2
 8008124:	42ab      	cmp	r3, r5
 8008126:	dc26      	bgt.n	8008176 <_printf_common+0x96>
 8008128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800812c:	6822      	ldr	r2, [r4, #0]
 800812e:	3b00      	subs	r3, #0
 8008130:	bf18      	it	ne
 8008132:	2301      	movne	r3, #1
 8008134:	0692      	lsls	r2, r2, #26
 8008136:	d42b      	bmi.n	8008190 <_printf_common+0xb0>
 8008138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800813c:	4641      	mov	r1, r8
 800813e:	4638      	mov	r0, r7
 8008140:	47c8      	blx	r9
 8008142:	3001      	adds	r0, #1
 8008144:	d01e      	beq.n	8008184 <_printf_common+0xa4>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	6922      	ldr	r2, [r4, #16]
 800814a:	f003 0306 	and.w	r3, r3, #6
 800814e:	2b04      	cmp	r3, #4
 8008150:	bf02      	ittt	eq
 8008152:	68e5      	ldreq	r5, [r4, #12]
 8008154:	6833      	ldreq	r3, [r6, #0]
 8008156:	1aed      	subeq	r5, r5, r3
 8008158:	68a3      	ldr	r3, [r4, #8]
 800815a:	bf0c      	ite	eq
 800815c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008160:	2500      	movne	r5, #0
 8008162:	4293      	cmp	r3, r2
 8008164:	bfc4      	itt	gt
 8008166:	1a9b      	subgt	r3, r3, r2
 8008168:	18ed      	addgt	r5, r5, r3
 800816a:	2600      	movs	r6, #0
 800816c:	341a      	adds	r4, #26
 800816e:	42b5      	cmp	r5, r6
 8008170:	d11a      	bne.n	80081a8 <_printf_common+0xc8>
 8008172:	2000      	movs	r0, #0
 8008174:	e008      	b.n	8008188 <_printf_common+0xa8>
 8008176:	2301      	movs	r3, #1
 8008178:	4652      	mov	r2, sl
 800817a:	4641      	mov	r1, r8
 800817c:	4638      	mov	r0, r7
 800817e:	47c8      	blx	r9
 8008180:	3001      	adds	r0, #1
 8008182:	d103      	bne.n	800818c <_printf_common+0xac>
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818c:	3501      	adds	r5, #1
 800818e:	e7c6      	b.n	800811e <_printf_common+0x3e>
 8008190:	18e1      	adds	r1, r4, r3
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	2030      	movs	r0, #48	@ 0x30
 8008196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800819a:	4422      	add	r2, r4
 800819c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081a4:	3302      	adds	r3, #2
 80081a6:	e7c7      	b.n	8008138 <_printf_common+0x58>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4622      	mov	r2, r4
 80081ac:	4641      	mov	r1, r8
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c8      	blx	r9
 80081b2:	3001      	adds	r0, #1
 80081b4:	d0e6      	beq.n	8008184 <_printf_common+0xa4>
 80081b6:	3601      	adds	r6, #1
 80081b8:	e7d9      	b.n	800816e <_printf_common+0x8e>
	...

080081bc <_printf_i>:
 80081bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	7e0f      	ldrb	r7, [r1, #24]
 80081c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081c4:	2f78      	cmp	r7, #120	@ 0x78
 80081c6:	4691      	mov	r9, r2
 80081c8:	4680      	mov	r8, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	469a      	mov	sl, r3
 80081ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081d2:	d807      	bhi.n	80081e4 <_printf_i+0x28>
 80081d4:	2f62      	cmp	r7, #98	@ 0x62
 80081d6:	d80a      	bhi.n	80081ee <_printf_i+0x32>
 80081d8:	2f00      	cmp	r7, #0
 80081da:	f000 80d2 	beq.w	8008382 <_printf_i+0x1c6>
 80081de:	2f58      	cmp	r7, #88	@ 0x58
 80081e0:	f000 80b9 	beq.w	8008356 <_printf_i+0x19a>
 80081e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80081ec:	e03a      	b.n	8008264 <_printf_i+0xa8>
 80081ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80081f2:	2b15      	cmp	r3, #21
 80081f4:	d8f6      	bhi.n	80081e4 <_printf_i+0x28>
 80081f6:	a101      	add	r1, pc, #4	@ (adr r1, 80081fc <_printf_i+0x40>)
 80081f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081fc:	08008255 	.word	0x08008255
 8008200:	08008269 	.word	0x08008269
 8008204:	080081e5 	.word	0x080081e5
 8008208:	080081e5 	.word	0x080081e5
 800820c:	080081e5 	.word	0x080081e5
 8008210:	080081e5 	.word	0x080081e5
 8008214:	08008269 	.word	0x08008269
 8008218:	080081e5 	.word	0x080081e5
 800821c:	080081e5 	.word	0x080081e5
 8008220:	080081e5 	.word	0x080081e5
 8008224:	080081e5 	.word	0x080081e5
 8008228:	08008369 	.word	0x08008369
 800822c:	08008293 	.word	0x08008293
 8008230:	08008323 	.word	0x08008323
 8008234:	080081e5 	.word	0x080081e5
 8008238:	080081e5 	.word	0x080081e5
 800823c:	0800838b 	.word	0x0800838b
 8008240:	080081e5 	.word	0x080081e5
 8008244:	08008293 	.word	0x08008293
 8008248:	080081e5 	.word	0x080081e5
 800824c:	080081e5 	.word	0x080081e5
 8008250:	0800832b 	.word	0x0800832b
 8008254:	6833      	ldr	r3, [r6, #0]
 8008256:	1d1a      	adds	r2, r3, #4
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6032      	str	r2, [r6, #0]
 800825c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008264:	2301      	movs	r3, #1
 8008266:	e09d      	b.n	80083a4 <_printf_i+0x1e8>
 8008268:	6833      	ldr	r3, [r6, #0]
 800826a:	6820      	ldr	r0, [r4, #0]
 800826c:	1d19      	adds	r1, r3, #4
 800826e:	6031      	str	r1, [r6, #0]
 8008270:	0606      	lsls	r6, r0, #24
 8008272:	d501      	bpl.n	8008278 <_printf_i+0xbc>
 8008274:	681d      	ldr	r5, [r3, #0]
 8008276:	e003      	b.n	8008280 <_printf_i+0xc4>
 8008278:	0645      	lsls	r5, r0, #25
 800827a:	d5fb      	bpl.n	8008274 <_printf_i+0xb8>
 800827c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008280:	2d00      	cmp	r5, #0
 8008282:	da03      	bge.n	800828c <_printf_i+0xd0>
 8008284:	232d      	movs	r3, #45	@ 0x2d
 8008286:	426d      	negs	r5, r5
 8008288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800828c:	4859      	ldr	r0, [pc, #356]	@ (80083f4 <_printf_i+0x238>)
 800828e:	230a      	movs	r3, #10
 8008290:	e011      	b.n	80082b6 <_printf_i+0xfa>
 8008292:	6821      	ldr	r1, [r4, #0]
 8008294:	6833      	ldr	r3, [r6, #0]
 8008296:	0608      	lsls	r0, r1, #24
 8008298:	f853 5b04 	ldr.w	r5, [r3], #4
 800829c:	d402      	bmi.n	80082a4 <_printf_i+0xe8>
 800829e:	0649      	lsls	r1, r1, #25
 80082a0:	bf48      	it	mi
 80082a2:	b2ad      	uxthmi	r5, r5
 80082a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80082a6:	4853      	ldr	r0, [pc, #332]	@ (80083f4 <_printf_i+0x238>)
 80082a8:	6033      	str	r3, [r6, #0]
 80082aa:	bf14      	ite	ne
 80082ac:	230a      	movne	r3, #10
 80082ae:	2308      	moveq	r3, #8
 80082b0:	2100      	movs	r1, #0
 80082b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082b6:	6866      	ldr	r6, [r4, #4]
 80082b8:	60a6      	str	r6, [r4, #8]
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	bfa2      	ittt	ge
 80082be:	6821      	ldrge	r1, [r4, #0]
 80082c0:	f021 0104 	bicge.w	r1, r1, #4
 80082c4:	6021      	strge	r1, [r4, #0]
 80082c6:	b90d      	cbnz	r5, 80082cc <_printf_i+0x110>
 80082c8:	2e00      	cmp	r6, #0
 80082ca:	d04b      	beq.n	8008364 <_printf_i+0x1a8>
 80082cc:	4616      	mov	r6, r2
 80082ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80082d2:	fb03 5711 	mls	r7, r3, r1, r5
 80082d6:	5dc7      	ldrb	r7, [r0, r7]
 80082d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082dc:	462f      	mov	r7, r5
 80082de:	42bb      	cmp	r3, r7
 80082e0:	460d      	mov	r5, r1
 80082e2:	d9f4      	bls.n	80082ce <_printf_i+0x112>
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d10b      	bne.n	8008300 <_printf_i+0x144>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	07df      	lsls	r7, r3, #31
 80082ec:	d508      	bpl.n	8008300 <_printf_i+0x144>
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	6861      	ldr	r1, [r4, #4]
 80082f2:	4299      	cmp	r1, r3
 80082f4:	bfde      	ittt	le
 80082f6:	2330      	movle	r3, #48	@ 0x30
 80082f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008300:	1b92      	subs	r2, r2, r6
 8008302:	6122      	str	r2, [r4, #16]
 8008304:	f8cd a000 	str.w	sl, [sp]
 8008308:	464b      	mov	r3, r9
 800830a:	aa03      	add	r2, sp, #12
 800830c:	4621      	mov	r1, r4
 800830e:	4640      	mov	r0, r8
 8008310:	f7ff fee6 	bl	80080e0 <_printf_common>
 8008314:	3001      	adds	r0, #1
 8008316:	d14a      	bne.n	80083ae <_printf_i+0x1f2>
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	b004      	add	sp, #16
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	f043 0320 	orr.w	r3, r3, #32
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	4833      	ldr	r0, [pc, #204]	@ (80083f8 <_printf_i+0x23c>)
 800832c:	2778      	movs	r7, #120	@ 0x78
 800832e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	6831      	ldr	r1, [r6, #0]
 8008336:	061f      	lsls	r7, r3, #24
 8008338:	f851 5b04 	ldr.w	r5, [r1], #4
 800833c:	d402      	bmi.n	8008344 <_printf_i+0x188>
 800833e:	065f      	lsls	r7, r3, #25
 8008340:	bf48      	it	mi
 8008342:	b2ad      	uxthmi	r5, r5
 8008344:	6031      	str	r1, [r6, #0]
 8008346:	07d9      	lsls	r1, r3, #31
 8008348:	bf44      	itt	mi
 800834a:	f043 0320 	orrmi.w	r3, r3, #32
 800834e:	6023      	strmi	r3, [r4, #0]
 8008350:	b11d      	cbz	r5, 800835a <_printf_i+0x19e>
 8008352:	2310      	movs	r3, #16
 8008354:	e7ac      	b.n	80082b0 <_printf_i+0xf4>
 8008356:	4827      	ldr	r0, [pc, #156]	@ (80083f4 <_printf_i+0x238>)
 8008358:	e7e9      	b.n	800832e <_printf_i+0x172>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f023 0320 	bic.w	r3, r3, #32
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	e7f6      	b.n	8008352 <_printf_i+0x196>
 8008364:	4616      	mov	r6, r2
 8008366:	e7bd      	b.n	80082e4 <_printf_i+0x128>
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	6825      	ldr	r5, [r4, #0]
 800836c:	6961      	ldr	r1, [r4, #20]
 800836e:	1d18      	adds	r0, r3, #4
 8008370:	6030      	str	r0, [r6, #0]
 8008372:	062e      	lsls	r6, r5, #24
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	d501      	bpl.n	800837c <_printf_i+0x1c0>
 8008378:	6019      	str	r1, [r3, #0]
 800837a:	e002      	b.n	8008382 <_printf_i+0x1c6>
 800837c:	0668      	lsls	r0, r5, #25
 800837e:	d5fb      	bpl.n	8008378 <_printf_i+0x1bc>
 8008380:	8019      	strh	r1, [r3, #0]
 8008382:	2300      	movs	r3, #0
 8008384:	6123      	str	r3, [r4, #16]
 8008386:	4616      	mov	r6, r2
 8008388:	e7bc      	b.n	8008304 <_printf_i+0x148>
 800838a:	6833      	ldr	r3, [r6, #0]
 800838c:	1d1a      	adds	r2, r3, #4
 800838e:	6032      	str	r2, [r6, #0]
 8008390:	681e      	ldr	r6, [r3, #0]
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	2100      	movs	r1, #0
 8008396:	4630      	mov	r0, r6
 8008398:	f7f7 ff4a 	bl	8000230 <memchr>
 800839c:	b108      	cbz	r0, 80083a2 <_printf_i+0x1e6>
 800839e:	1b80      	subs	r0, r0, r6
 80083a0:	6060      	str	r0, [r4, #4]
 80083a2:	6863      	ldr	r3, [r4, #4]
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	2300      	movs	r3, #0
 80083a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083ac:	e7aa      	b.n	8008304 <_printf_i+0x148>
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	4632      	mov	r2, r6
 80083b2:	4649      	mov	r1, r9
 80083b4:	4640      	mov	r0, r8
 80083b6:	47d0      	blx	sl
 80083b8:	3001      	adds	r0, #1
 80083ba:	d0ad      	beq.n	8008318 <_printf_i+0x15c>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	079b      	lsls	r3, r3, #30
 80083c0:	d413      	bmi.n	80083ea <_printf_i+0x22e>
 80083c2:	68e0      	ldr	r0, [r4, #12]
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	4298      	cmp	r0, r3
 80083c8:	bfb8      	it	lt
 80083ca:	4618      	movlt	r0, r3
 80083cc:	e7a6      	b.n	800831c <_printf_i+0x160>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4632      	mov	r2, r6
 80083d2:	4649      	mov	r1, r9
 80083d4:	4640      	mov	r0, r8
 80083d6:	47d0      	blx	sl
 80083d8:	3001      	adds	r0, #1
 80083da:	d09d      	beq.n	8008318 <_printf_i+0x15c>
 80083dc:	3501      	adds	r5, #1
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	9903      	ldr	r1, [sp, #12]
 80083e2:	1a5b      	subs	r3, r3, r1
 80083e4:	42ab      	cmp	r3, r5
 80083e6:	dcf2      	bgt.n	80083ce <_printf_i+0x212>
 80083e8:	e7eb      	b.n	80083c2 <_printf_i+0x206>
 80083ea:	2500      	movs	r5, #0
 80083ec:	f104 0619 	add.w	r6, r4, #25
 80083f0:	e7f5      	b.n	80083de <_printf_i+0x222>
 80083f2:	bf00      	nop
 80083f4:	0800a9f7 	.word	0x0800a9f7
 80083f8:	0800aa08 	.word	0x0800aa08

080083fc <std>:
 80083fc:	2300      	movs	r3, #0
 80083fe:	b510      	push	{r4, lr}
 8008400:	4604      	mov	r4, r0
 8008402:	e9c0 3300 	strd	r3, r3, [r0]
 8008406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800840a:	6083      	str	r3, [r0, #8]
 800840c:	8181      	strh	r1, [r0, #12]
 800840e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008410:	81c2      	strh	r2, [r0, #14]
 8008412:	6183      	str	r3, [r0, #24]
 8008414:	4619      	mov	r1, r3
 8008416:	2208      	movs	r2, #8
 8008418:	305c      	adds	r0, #92	@ 0x5c
 800841a:	f000 f914 	bl	8008646 <memset>
 800841e:	4b0d      	ldr	r3, [pc, #52]	@ (8008454 <std+0x58>)
 8008420:	6263      	str	r3, [r4, #36]	@ 0x24
 8008422:	4b0d      	ldr	r3, [pc, #52]	@ (8008458 <std+0x5c>)
 8008424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008426:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <std+0x60>)
 8008428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800842a:	4b0d      	ldr	r3, [pc, #52]	@ (8008460 <std+0x64>)
 800842c:	6323      	str	r3, [r4, #48]	@ 0x30
 800842e:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <std+0x68>)
 8008430:	6224      	str	r4, [r4, #32]
 8008432:	429c      	cmp	r4, r3
 8008434:	d006      	beq.n	8008444 <std+0x48>
 8008436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800843a:	4294      	cmp	r4, r2
 800843c:	d002      	beq.n	8008444 <std+0x48>
 800843e:	33d0      	adds	r3, #208	@ 0xd0
 8008440:	429c      	cmp	r4, r3
 8008442:	d105      	bne.n	8008450 <std+0x54>
 8008444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844c:	f000 b9be 	b.w	80087cc <__retarget_lock_init_recursive>
 8008450:	bd10      	pop	{r4, pc}
 8008452:	bf00      	nop
 8008454:	080085c1 	.word	0x080085c1
 8008458:	080085e3 	.word	0x080085e3
 800845c:	0800861b 	.word	0x0800861b
 8008460:	0800863f 	.word	0x0800863f
 8008464:	2001e620 	.word	0x2001e620

08008468 <stdio_exit_handler>:
 8008468:	4a02      	ldr	r2, [pc, #8]	@ (8008474 <stdio_exit_handler+0xc>)
 800846a:	4903      	ldr	r1, [pc, #12]	@ (8008478 <stdio_exit_handler+0x10>)
 800846c:	4803      	ldr	r0, [pc, #12]	@ (800847c <stdio_exit_handler+0x14>)
 800846e:	f000 b869 	b.w	8008544 <_fwalk_sglue>
 8008472:	bf00      	nop
 8008474:	200002a8 	.word	0x200002a8
 8008478:	08009fd9 	.word	0x08009fd9
 800847c:	200002b8 	.word	0x200002b8

08008480 <cleanup_stdio>:
 8008480:	6841      	ldr	r1, [r0, #4]
 8008482:	4b0c      	ldr	r3, [pc, #48]	@ (80084b4 <cleanup_stdio+0x34>)
 8008484:	4299      	cmp	r1, r3
 8008486:	b510      	push	{r4, lr}
 8008488:	4604      	mov	r4, r0
 800848a:	d001      	beq.n	8008490 <cleanup_stdio+0x10>
 800848c:	f001 fda4 	bl	8009fd8 <_fflush_r>
 8008490:	68a1      	ldr	r1, [r4, #8]
 8008492:	4b09      	ldr	r3, [pc, #36]	@ (80084b8 <cleanup_stdio+0x38>)
 8008494:	4299      	cmp	r1, r3
 8008496:	d002      	beq.n	800849e <cleanup_stdio+0x1e>
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fd9d 	bl	8009fd8 <_fflush_r>
 800849e:	68e1      	ldr	r1, [r4, #12]
 80084a0:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <cleanup_stdio+0x3c>)
 80084a2:	4299      	cmp	r1, r3
 80084a4:	d004      	beq.n	80084b0 <cleanup_stdio+0x30>
 80084a6:	4620      	mov	r0, r4
 80084a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ac:	f001 bd94 	b.w	8009fd8 <_fflush_r>
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	2001e620 	.word	0x2001e620
 80084b8:	2001e688 	.word	0x2001e688
 80084bc:	2001e6f0 	.word	0x2001e6f0

080084c0 <global_stdio_init.part.0>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	4b0b      	ldr	r3, [pc, #44]	@ (80084f0 <global_stdio_init.part.0+0x30>)
 80084c4:	4c0b      	ldr	r4, [pc, #44]	@ (80084f4 <global_stdio_init.part.0+0x34>)
 80084c6:	4a0c      	ldr	r2, [pc, #48]	@ (80084f8 <global_stdio_init.part.0+0x38>)
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	4620      	mov	r0, r4
 80084cc:	2200      	movs	r2, #0
 80084ce:	2104      	movs	r1, #4
 80084d0:	f7ff ff94 	bl	80083fc <std>
 80084d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084d8:	2201      	movs	r2, #1
 80084da:	2109      	movs	r1, #9
 80084dc:	f7ff ff8e 	bl	80083fc <std>
 80084e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084e4:	2202      	movs	r2, #2
 80084e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ea:	2112      	movs	r1, #18
 80084ec:	f7ff bf86 	b.w	80083fc <std>
 80084f0:	2001e758 	.word	0x2001e758
 80084f4:	2001e620 	.word	0x2001e620
 80084f8:	08008469 	.word	0x08008469

080084fc <__sfp_lock_acquire>:
 80084fc:	4801      	ldr	r0, [pc, #4]	@ (8008504 <__sfp_lock_acquire+0x8>)
 80084fe:	f000 b966 	b.w	80087ce <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	2001e761 	.word	0x2001e761

08008508 <__sfp_lock_release>:
 8008508:	4801      	ldr	r0, [pc, #4]	@ (8008510 <__sfp_lock_release+0x8>)
 800850a:	f000 b961 	b.w	80087d0 <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	2001e761 	.word	0x2001e761

08008514 <__sinit>:
 8008514:	b510      	push	{r4, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	f7ff fff0 	bl	80084fc <__sfp_lock_acquire>
 800851c:	6a23      	ldr	r3, [r4, #32]
 800851e:	b11b      	cbz	r3, 8008528 <__sinit+0x14>
 8008520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008524:	f7ff bff0 	b.w	8008508 <__sfp_lock_release>
 8008528:	4b04      	ldr	r3, [pc, #16]	@ (800853c <__sinit+0x28>)
 800852a:	6223      	str	r3, [r4, #32]
 800852c:	4b04      	ldr	r3, [pc, #16]	@ (8008540 <__sinit+0x2c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1f5      	bne.n	8008520 <__sinit+0xc>
 8008534:	f7ff ffc4 	bl	80084c0 <global_stdio_init.part.0>
 8008538:	e7f2      	b.n	8008520 <__sinit+0xc>
 800853a:	bf00      	nop
 800853c:	08008481 	.word	0x08008481
 8008540:	2001e758 	.word	0x2001e758

08008544 <_fwalk_sglue>:
 8008544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008548:	4607      	mov	r7, r0
 800854a:	4688      	mov	r8, r1
 800854c:	4614      	mov	r4, r2
 800854e:	2600      	movs	r6, #0
 8008550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008554:	f1b9 0901 	subs.w	r9, r9, #1
 8008558:	d505      	bpl.n	8008566 <_fwalk_sglue+0x22>
 800855a:	6824      	ldr	r4, [r4, #0]
 800855c:	2c00      	cmp	r4, #0
 800855e:	d1f7      	bne.n	8008550 <_fwalk_sglue+0xc>
 8008560:	4630      	mov	r0, r6
 8008562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d907      	bls.n	800857c <_fwalk_sglue+0x38>
 800856c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008570:	3301      	adds	r3, #1
 8008572:	d003      	beq.n	800857c <_fwalk_sglue+0x38>
 8008574:	4629      	mov	r1, r5
 8008576:	4638      	mov	r0, r7
 8008578:	47c0      	blx	r8
 800857a:	4306      	orrs	r6, r0
 800857c:	3568      	adds	r5, #104	@ 0x68
 800857e:	e7e9      	b.n	8008554 <_fwalk_sglue+0x10>

08008580 <siprintf>:
 8008580:	b40e      	push	{r1, r2, r3}
 8008582:	b500      	push	{lr}
 8008584:	b09c      	sub	sp, #112	@ 0x70
 8008586:	ab1d      	add	r3, sp, #116	@ 0x74
 8008588:	9002      	str	r0, [sp, #8]
 800858a:	9006      	str	r0, [sp, #24]
 800858c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008590:	4809      	ldr	r0, [pc, #36]	@ (80085b8 <siprintf+0x38>)
 8008592:	9107      	str	r1, [sp, #28]
 8008594:	9104      	str	r1, [sp, #16]
 8008596:	4909      	ldr	r1, [pc, #36]	@ (80085bc <siprintf+0x3c>)
 8008598:	f853 2b04 	ldr.w	r2, [r3], #4
 800859c:	9105      	str	r1, [sp, #20]
 800859e:	6800      	ldr	r0, [r0, #0]
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	a902      	add	r1, sp, #8
 80085a4:	f001 fb98 	bl	8009cd8 <_svfiprintf_r>
 80085a8:	9b02      	ldr	r3, [sp, #8]
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	b01c      	add	sp, #112	@ 0x70
 80085b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085b4:	b003      	add	sp, #12
 80085b6:	4770      	bx	lr
 80085b8:	200002b4 	.word	0x200002b4
 80085bc:	ffff0208 	.word	0xffff0208

080085c0 <__sread>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	460c      	mov	r4, r1
 80085c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c8:	f000 f8a2 	bl	8008710 <_read_r>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	bfab      	itete	ge
 80085d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085d2:	89a3      	ldrhlt	r3, [r4, #12]
 80085d4:	181b      	addge	r3, r3, r0
 80085d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085da:	bfac      	ite	ge
 80085dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085de:	81a3      	strhlt	r3, [r4, #12]
 80085e0:	bd10      	pop	{r4, pc}

080085e2 <__swrite>:
 80085e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e6:	461f      	mov	r7, r3
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	05db      	lsls	r3, r3, #23
 80085ec:	4605      	mov	r5, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	4616      	mov	r6, r2
 80085f2:	d505      	bpl.n	8008600 <__swrite+0x1e>
 80085f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f8:	2302      	movs	r3, #2
 80085fa:	2200      	movs	r2, #0
 80085fc:	f000 f876 	bl	80086ec <_lseek_r>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	4632      	mov	r2, r6
 800860e:	463b      	mov	r3, r7
 8008610:	4628      	mov	r0, r5
 8008612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008616:	f000 b89d 	b.w	8008754 <_write_r>

0800861a <__sseek>:
 800861a:	b510      	push	{r4, lr}
 800861c:	460c      	mov	r4, r1
 800861e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008622:	f000 f863 	bl	80086ec <_lseek_r>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	bf15      	itete	ne
 800862c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800862e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008636:	81a3      	strheq	r3, [r4, #12]
 8008638:	bf18      	it	ne
 800863a:	81a3      	strhne	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__sclose>:
 800863e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008642:	f000 b843 	b.w	80086cc <_close_r>

08008646 <memset>:
 8008646:	4402      	add	r2, r0
 8008648:	4603      	mov	r3, r0
 800864a:	4293      	cmp	r3, r2
 800864c:	d100      	bne.n	8008650 <memset+0xa>
 800864e:	4770      	bx	lr
 8008650:	f803 1b01 	strb.w	r1, [r3], #1
 8008654:	e7f9      	b.n	800864a <memset+0x4>

08008656 <strchr>:
 8008656:	b2c9      	uxtb	r1, r1
 8008658:	4603      	mov	r3, r0
 800865a:	4618      	mov	r0, r3
 800865c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008660:	b112      	cbz	r2, 8008668 <strchr+0x12>
 8008662:	428a      	cmp	r2, r1
 8008664:	d1f9      	bne.n	800865a <strchr+0x4>
 8008666:	4770      	bx	lr
 8008668:	2900      	cmp	r1, #0
 800866a:	bf18      	it	ne
 800866c:	2000      	movne	r0, #0
 800866e:	4770      	bx	lr

08008670 <strncpy>:
 8008670:	b510      	push	{r4, lr}
 8008672:	3901      	subs	r1, #1
 8008674:	4603      	mov	r3, r0
 8008676:	b132      	cbz	r2, 8008686 <strncpy+0x16>
 8008678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800867c:	f803 4b01 	strb.w	r4, [r3], #1
 8008680:	3a01      	subs	r2, #1
 8008682:	2c00      	cmp	r4, #0
 8008684:	d1f7      	bne.n	8008676 <strncpy+0x6>
 8008686:	441a      	add	r2, r3
 8008688:	2100      	movs	r1, #0
 800868a:	4293      	cmp	r3, r2
 800868c:	d100      	bne.n	8008690 <strncpy+0x20>
 800868e:	bd10      	pop	{r4, pc}
 8008690:	f803 1b01 	strb.w	r1, [r3], #1
 8008694:	e7f9      	b.n	800868a <strncpy+0x1a>

08008696 <strstr>:
 8008696:	780a      	ldrb	r2, [r1, #0]
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	b96a      	cbnz	r2, 80086b8 <strstr+0x22>
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	429a      	cmp	r2, r3
 80086a0:	d109      	bne.n	80086b6 <strstr+0x20>
 80086a2:	460c      	mov	r4, r1
 80086a4:	4605      	mov	r5, r0
 80086a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0f6      	beq.n	800869c <strstr+0x6>
 80086ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80086b2:	429e      	cmp	r6, r3
 80086b4:	d0f7      	beq.n	80086a6 <strstr+0x10>
 80086b6:	3001      	adds	r0, #1
 80086b8:	7803      	ldrb	r3, [r0, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1ef      	bne.n	800869e <strstr+0x8>
 80086be:	4618      	mov	r0, r3
 80086c0:	e7ec      	b.n	800869c <strstr+0x6>
	...

080086c4 <_localeconv_r>:
 80086c4:	4800      	ldr	r0, [pc, #0]	@ (80086c8 <_localeconv_r+0x4>)
 80086c6:	4770      	bx	lr
 80086c8:	200003f4 	.word	0x200003f4

080086cc <_close_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	@ (80086e8 <_close_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f7fa fca6 	bl	8003028 <_close>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_close_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_close_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	2001e75c 	.word	0x2001e75c

080086ec <_lseek_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	@ (800870c <_lseek_r+0x20>)
 80086f0:	4604      	mov	r4, r0
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f7fa fcbb 	bl	8003076 <_lseek>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_lseek_r+0x1e>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_lseek_r+0x1e>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	2001e75c 	.word	0x2001e75c

08008710 <_read_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	@ (8008730 <_read_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7fa fc49 	bl	8002fb6 <_read>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_read_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_read_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	2001e75c 	.word	0x2001e75c

08008734 <_sbrk_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	@ (8008750 <_sbrk_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7fa fca6 	bl	8003090 <_sbrk>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_sbrk_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_sbrk_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	2001e75c 	.word	0x2001e75c

08008754 <_write_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d07      	ldr	r5, [pc, #28]	@ (8008774 <_write_r+0x20>)
 8008758:	4604      	mov	r4, r0
 800875a:	4608      	mov	r0, r1
 800875c:	4611      	mov	r1, r2
 800875e:	2200      	movs	r2, #0
 8008760:	602a      	str	r2, [r5, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f7fa fc44 	bl	8002ff0 <_write>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_write_r+0x1e>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_write_r+0x1e>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	2001e75c 	.word	0x2001e75c

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	@ (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	200002b4 	.word	0x200002b4

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4d0d      	ldr	r5, [pc, #52]	@ (80087bc <__libc_init_array+0x38>)
 8008788:	4c0d      	ldr	r4, [pc, #52]	@ (80087c0 <__libc_init_array+0x3c>)
 800878a:	1b64      	subs	r4, r4, r5
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	2600      	movs	r6, #0
 8008790:	42a6      	cmp	r6, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	4d0b      	ldr	r5, [pc, #44]	@ (80087c4 <__libc_init_array+0x40>)
 8008796:	4c0c      	ldr	r4, [pc, #48]	@ (80087c8 <__libc_init_array+0x44>)
 8008798:	f001 ff9e 	bl	800a6d8 <_init>
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	2600      	movs	r6, #0
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ac:	4798      	blx	r3
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b6:	4798      	blx	r3
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	0800ac60 	.word	0x0800ac60
 80087c0:	0800ac60 	.word	0x0800ac60
 80087c4:	0800ac60 	.word	0x0800ac60
 80087c8:	0800ac64 	.word	0x0800ac64

080087cc <__retarget_lock_init_recursive>:
 80087cc:	4770      	bx	lr

080087ce <__retarget_lock_acquire_recursive>:
 80087ce:	4770      	bx	lr

080087d0 <__retarget_lock_release_recursive>:
 80087d0:	4770      	bx	lr

080087d2 <memcpy>:
 80087d2:	440a      	add	r2, r1
 80087d4:	4291      	cmp	r1, r2
 80087d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80087da:	d100      	bne.n	80087de <memcpy+0xc>
 80087dc:	4770      	bx	lr
 80087de:	b510      	push	{r4, lr}
 80087e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e8:	4291      	cmp	r1, r2
 80087ea:	d1f9      	bne.n	80087e0 <memcpy+0xe>
 80087ec:	bd10      	pop	{r4, pc}

080087ee <quorem>:
 80087ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f2:	6903      	ldr	r3, [r0, #16]
 80087f4:	690c      	ldr	r4, [r1, #16]
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	4607      	mov	r7, r0
 80087fa:	db7e      	blt.n	80088fa <quorem+0x10c>
 80087fc:	3c01      	subs	r4, #1
 80087fe:	f101 0814 	add.w	r8, r1, #20
 8008802:	00a3      	lsls	r3, r4, #2
 8008804:	f100 0514 	add.w	r5, r0, #20
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008814:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008818:	3301      	adds	r3, #1
 800881a:	429a      	cmp	r2, r3
 800881c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008820:	fbb2 f6f3 	udiv	r6, r2, r3
 8008824:	d32e      	bcc.n	8008884 <quorem+0x96>
 8008826:	f04f 0a00 	mov.w	sl, #0
 800882a:	46c4      	mov	ip, r8
 800882c:	46ae      	mov	lr, r5
 800882e:	46d3      	mov	fp, sl
 8008830:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008834:	b298      	uxth	r0, r3
 8008836:	fb06 a000 	mla	r0, r6, r0, sl
 800883a:	0c02      	lsrs	r2, r0, #16
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	fb06 2303 	mla	r3, r6, r3, r2
 8008842:	f8de 2000 	ldr.w	r2, [lr]
 8008846:	b280      	uxth	r0, r0
 8008848:	b292      	uxth	r2, r2
 800884a:	1a12      	subs	r2, r2, r0
 800884c:	445a      	add	r2, fp
 800884e:	f8de 0000 	ldr.w	r0, [lr]
 8008852:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008856:	b29b      	uxth	r3, r3
 8008858:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800885c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008860:	b292      	uxth	r2, r2
 8008862:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008866:	45e1      	cmp	r9, ip
 8008868:	f84e 2b04 	str.w	r2, [lr], #4
 800886c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008870:	d2de      	bcs.n	8008830 <quorem+0x42>
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	58eb      	ldr	r3, [r5, r3]
 8008876:	b92b      	cbnz	r3, 8008884 <quorem+0x96>
 8008878:	9b01      	ldr	r3, [sp, #4]
 800887a:	3b04      	subs	r3, #4
 800887c:	429d      	cmp	r5, r3
 800887e:	461a      	mov	r2, r3
 8008880:	d32f      	bcc.n	80088e2 <quorem+0xf4>
 8008882:	613c      	str	r4, [r7, #16]
 8008884:	4638      	mov	r0, r7
 8008886:	f001 f8c3 	bl	8009a10 <__mcmp>
 800888a:	2800      	cmp	r0, #0
 800888c:	db25      	blt.n	80088da <quorem+0xec>
 800888e:	4629      	mov	r1, r5
 8008890:	2000      	movs	r0, #0
 8008892:	f858 2b04 	ldr.w	r2, [r8], #4
 8008896:	f8d1 c000 	ldr.w	ip, [r1]
 800889a:	fa1f fe82 	uxth.w	lr, r2
 800889e:	fa1f f38c 	uxth.w	r3, ip
 80088a2:	eba3 030e 	sub.w	r3, r3, lr
 80088a6:	4403      	add	r3, r0
 80088a8:	0c12      	lsrs	r2, r2, #16
 80088aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80088ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b8:	45c1      	cmp	r9, r8
 80088ba:	f841 3b04 	str.w	r3, [r1], #4
 80088be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088c2:	d2e6      	bcs.n	8008892 <quorem+0xa4>
 80088c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088cc:	b922      	cbnz	r2, 80088d8 <quorem+0xea>
 80088ce:	3b04      	subs	r3, #4
 80088d0:	429d      	cmp	r5, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	d30b      	bcc.n	80088ee <quorem+0x100>
 80088d6:	613c      	str	r4, [r7, #16]
 80088d8:	3601      	adds	r6, #1
 80088da:	4630      	mov	r0, r6
 80088dc:	b003      	add	sp, #12
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	6812      	ldr	r2, [r2, #0]
 80088e4:	3b04      	subs	r3, #4
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	d1cb      	bne.n	8008882 <quorem+0x94>
 80088ea:	3c01      	subs	r4, #1
 80088ec:	e7c6      	b.n	800887c <quorem+0x8e>
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	d1ef      	bne.n	80088d6 <quorem+0xe8>
 80088f6:	3c01      	subs	r4, #1
 80088f8:	e7ea      	b.n	80088d0 <quorem+0xe2>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e7ee      	b.n	80088dc <quorem+0xee>
	...

08008900 <_dtoa_r>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	69c7      	ldr	r7, [r0, #28]
 8008906:	b099      	sub	sp, #100	@ 0x64
 8008908:	ed8d 0b02 	vstr	d0, [sp, #8]
 800890c:	ec55 4b10 	vmov	r4, r5, d0
 8008910:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008912:	9109      	str	r1, [sp, #36]	@ 0x24
 8008914:	4683      	mov	fp, r0
 8008916:	920e      	str	r2, [sp, #56]	@ 0x38
 8008918:	9313      	str	r3, [sp, #76]	@ 0x4c
 800891a:	b97f      	cbnz	r7, 800893c <_dtoa_r+0x3c>
 800891c:	2010      	movs	r0, #16
 800891e:	f7fe ffdf 	bl	80078e0 <malloc>
 8008922:	4602      	mov	r2, r0
 8008924:	f8cb 001c 	str.w	r0, [fp, #28]
 8008928:	b920      	cbnz	r0, 8008934 <_dtoa_r+0x34>
 800892a:	4ba7      	ldr	r3, [pc, #668]	@ (8008bc8 <_dtoa_r+0x2c8>)
 800892c:	21ef      	movs	r1, #239	@ 0xef
 800892e:	48a7      	ldr	r0, [pc, #668]	@ (8008bcc <_dtoa_r+0x2cc>)
 8008930:	f001 fb94 	bl	800a05c <__assert_func>
 8008934:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008938:	6007      	str	r7, [r0, #0]
 800893a:	60c7      	str	r7, [r0, #12]
 800893c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008940:	6819      	ldr	r1, [r3, #0]
 8008942:	b159      	cbz	r1, 800895c <_dtoa_r+0x5c>
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	604a      	str	r2, [r1, #4]
 8008948:	2301      	movs	r3, #1
 800894a:	4093      	lsls	r3, r2
 800894c:	608b      	str	r3, [r1, #8]
 800894e:	4658      	mov	r0, fp
 8008950:	f000 fe24 	bl	800959c <_Bfree>
 8008954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	1e2b      	subs	r3, r5, #0
 800895e:	bfb9      	ittee	lt
 8008960:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008964:	9303      	strlt	r3, [sp, #12]
 8008966:	2300      	movge	r3, #0
 8008968:	6033      	strge	r3, [r6, #0]
 800896a:	9f03      	ldr	r7, [sp, #12]
 800896c:	4b98      	ldr	r3, [pc, #608]	@ (8008bd0 <_dtoa_r+0x2d0>)
 800896e:	bfbc      	itt	lt
 8008970:	2201      	movlt	r2, #1
 8008972:	6032      	strlt	r2, [r6, #0]
 8008974:	43bb      	bics	r3, r7
 8008976:	d112      	bne.n	800899e <_dtoa_r+0x9e>
 8008978:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800897a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008984:	4323      	orrs	r3, r4
 8008986:	f000 854d 	beq.w	8009424 <_dtoa_r+0xb24>
 800898a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800898c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008be4 <_dtoa_r+0x2e4>
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 854f 	beq.w	8009434 <_dtoa_r+0xb34>
 8008996:	f10a 0303 	add.w	r3, sl, #3
 800899a:	f000 bd49 	b.w	8009430 <_dtoa_r+0xb30>
 800899e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089a2:	2200      	movs	r2, #0
 80089a4:	ec51 0b17 	vmov	r0, r1, d7
 80089a8:	2300      	movs	r3, #0
 80089aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80089ae:	f7f8 f8bb 	bl	8000b28 <__aeabi_dcmpeq>
 80089b2:	4680      	mov	r8, r0
 80089b4:	b158      	cbz	r0, 80089ce <_dtoa_r+0xce>
 80089b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089b8:	2301      	movs	r3, #1
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089be:	b113      	cbz	r3, 80089c6 <_dtoa_r+0xc6>
 80089c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089c2:	4b84      	ldr	r3, [pc, #528]	@ (8008bd4 <_dtoa_r+0x2d4>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008be8 <_dtoa_r+0x2e8>
 80089ca:	f000 bd33 	b.w	8009434 <_dtoa_r+0xb34>
 80089ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089d2:	aa16      	add	r2, sp, #88	@ 0x58
 80089d4:	a917      	add	r1, sp, #92	@ 0x5c
 80089d6:	4658      	mov	r0, fp
 80089d8:	f001 f8ca 	bl	8009b70 <__d2b>
 80089dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80089e0:	4681      	mov	r9, r0
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d077      	beq.n	8008ad6 <_dtoa_r+0x1d6>
 80089e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80089ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a00:	4619      	mov	r1, r3
 8008a02:	2200      	movs	r2, #0
 8008a04:	4b74      	ldr	r3, [pc, #464]	@ (8008bd8 <_dtoa_r+0x2d8>)
 8008a06:	f7f7 fc6f 	bl	80002e8 <__aeabi_dsub>
 8008a0a:	a369      	add	r3, pc, #420	@ (adr r3, 8008bb0 <_dtoa_r+0x2b0>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f7f7 fe22 	bl	8000658 <__aeabi_dmul>
 8008a14:	a368      	add	r3, pc, #416	@ (adr r3, 8008bb8 <_dtoa_r+0x2b8>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fc67 	bl	80002ec <__adddf3>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4630      	mov	r0, r6
 8008a22:	460d      	mov	r5, r1
 8008a24:	f7f7 fdae 	bl	8000584 <__aeabi_i2d>
 8008a28:	a365      	add	r3, pc, #404	@ (adr r3, 8008bc0 <_dtoa_r+0x2c0>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 fe13 	bl	8000658 <__aeabi_dmul>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4620      	mov	r0, r4
 8008a38:	4629      	mov	r1, r5
 8008a3a:	f7f7 fc57 	bl	80002ec <__adddf3>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	460d      	mov	r5, r1
 8008a42:	f7f8 f8b9 	bl	8000bb8 <__aeabi_d2iz>
 8008a46:	2200      	movs	r2, #0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f8 f874 	bl	8000b3c <__aeabi_dcmplt>
 8008a54:	b140      	cbz	r0, 8008a68 <_dtoa_r+0x168>
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7f7 fd94 	bl	8000584 <__aeabi_i2d>
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	462b      	mov	r3, r5
 8008a60:	f7f8 f862 	bl	8000b28 <__aeabi_dcmpeq>
 8008a64:	b900      	cbnz	r0, 8008a68 <_dtoa_r+0x168>
 8008a66:	3f01      	subs	r7, #1
 8008a68:	2f16      	cmp	r7, #22
 8008a6a:	d851      	bhi.n	8008b10 <_dtoa_r+0x210>
 8008a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8008bdc <_dtoa_r+0x2dc>)
 8008a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a7a:	f7f8 f85f 	bl	8000b3c <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d048      	beq.n	8008b14 <_dtoa_r+0x214>
 8008a82:	3f01      	subs	r7, #1
 8008a84:	2300      	movs	r3, #0
 8008a86:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a8a:	1b9b      	subs	r3, r3, r6
 8008a8c:	1e5a      	subs	r2, r3, #1
 8008a8e:	bf44      	itt	mi
 8008a90:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a94:	2300      	movmi	r3, #0
 8008a96:	9208      	str	r2, [sp, #32]
 8008a98:	bf54      	ite	pl
 8008a9a:	f04f 0800 	movpl.w	r8, #0
 8008a9e:	9308      	strmi	r3, [sp, #32]
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	db39      	blt.n	8008b18 <_dtoa_r+0x218>
 8008aa4:	9b08      	ldr	r3, [sp, #32]
 8008aa6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008aa8:	443b      	add	r3, r7
 8008aaa:	9308      	str	r3, [sp, #32]
 8008aac:	2300      	movs	r3, #0
 8008aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab2:	2b09      	cmp	r3, #9
 8008ab4:	d864      	bhi.n	8008b80 <_dtoa_r+0x280>
 8008ab6:	2b05      	cmp	r3, #5
 8008ab8:	bfc4      	itt	gt
 8008aba:	3b04      	subgt	r3, #4
 8008abc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac0:	f1a3 0302 	sub.w	r3, r3, #2
 8008ac4:	bfcc      	ite	gt
 8008ac6:	2400      	movgt	r4, #0
 8008ac8:	2401      	movle	r4, #1
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d863      	bhi.n	8008b96 <_dtoa_r+0x296>
 8008ace:	e8df f003 	tbb	[pc, r3]
 8008ad2:	372a      	.short	0x372a
 8008ad4:	5535      	.short	0x5535
 8008ad6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008ada:	441e      	add	r6, r3
 8008adc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	bfc1      	itttt	gt
 8008ae4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ae8:	409f      	lslgt	r7, r3
 8008aea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008aee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008af2:	bfd6      	itet	le
 8008af4:	f1c3 0320 	rsble	r3, r3, #32
 8008af8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008afc:	fa04 f003 	lslle.w	r0, r4, r3
 8008b00:	f7f7 fd30 	bl	8000564 <__aeabi_ui2d>
 8008b04:	2201      	movs	r2, #1
 8008b06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b0a:	3e01      	subs	r6, #1
 8008b0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b0e:	e777      	b.n	8008a00 <_dtoa_r+0x100>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e7b8      	b.n	8008a86 <_dtoa_r+0x186>
 8008b14:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b16:	e7b7      	b.n	8008a88 <_dtoa_r+0x188>
 8008b18:	427b      	negs	r3, r7
 8008b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	eba8 0807 	sub.w	r8, r8, r7
 8008b22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b24:	e7c4      	b.n	8008ab0 <_dtoa_r+0x1b0>
 8008b26:	2300      	movs	r3, #0
 8008b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dc35      	bgt.n	8008b9c <_dtoa_r+0x29c>
 8008b30:	2301      	movs	r3, #1
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	9307      	str	r3, [sp, #28]
 8008b36:	461a      	mov	r2, r3
 8008b38:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b3a:	e00b      	b.n	8008b54 <_dtoa_r+0x254>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e7f3      	b.n	8008b28 <_dtoa_r+0x228>
 8008b40:	2300      	movs	r3, #0
 8008b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b46:	18fb      	adds	r3, r7, r3
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	bfb8      	it	lt
 8008b52:	2301      	movlt	r3, #1
 8008b54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b58:	2100      	movs	r1, #0
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	f102 0514 	add.w	r5, r2, #20
 8008b60:	429d      	cmp	r5, r3
 8008b62:	d91f      	bls.n	8008ba4 <_dtoa_r+0x2a4>
 8008b64:	6041      	str	r1, [r0, #4]
 8008b66:	4658      	mov	r0, fp
 8008b68:	f000 fcd8 	bl	800951c <_Balloc>
 8008b6c:	4682      	mov	sl, r0
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d13c      	bne.n	8008bec <_dtoa_r+0x2ec>
 8008b72:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <_dtoa_r+0x2e0>)
 8008b74:	4602      	mov	r2, r0
 8008b76:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b7a:	e6d8      	b.n	800892e <_dtoa_r+0x2e>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e7e0      	b.n	8008b42 <_dtoa_r+0x242>
 8008b80:	2401      	movs	r4, #1
 8008b82:	2300      	movs	r3, #0
 8008b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b88:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	2200      	movs	r2, #0
 8008b92:	2312      	movs	r3, #18
 8008b94:	e7d0      	b.n	8008b38 <_dtoa_r+0x238>
 8008b96:	2301      	movs	r3, #1
 8008b98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b9a:	e7f5      	b.n	8008b88 <_dtoa_r+0x288>
 8008b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	9307      	str	r3, [sp, #28]
 8008ba2:	e7d7      	b.n	8008b54 <_dtoa_r+0x254>
 8008ba4:	3101      	adds	r1, #1
 8008ba6:	0052      	lsls	r2, r2, #1
 8008ba8:	e7d8      	b.n	8008b5c <_dtoa_r+0x25c>
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w
 8008bb0:	636f4361 	.word	0x636f4361
 8008bb4:	3fd287a7 	.word	0x3fd287a7
 8008bb8:	8b60c8b3 	.word	0x8b60c8b3
 8008bbc:	3fc68a28 	.word	0x3fc68a28
 8008bc0:	509f79fb 	.word	0x509f79fb
 8008bc4:	3fd34413 	.word	0x3fd34413
 8008bc8:	0800aa26 	.word	0x0800aa26
 8008bcc:	0800aa3d 	.word	0x0800aa3d
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	0800a9f6 	.word	0x0800a9f6
 8008bd8:	3ff80000 	.word	0x3ff80000
 8008bdc:	0800ab38 	.word	0x0800ab38
 8008be0:	0800aa95 	.word	0x0800aa95
 8008be4:	0800aa22 	.word	0x0800aa22
 8008be8:	0800a9f5 	.word	0x0800a9f5
 8008bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008bf0:	6018      	str	r0, [r3, #0]
 8008bf2:	9b07      	ldr	r3, [sp, #28]
 8008bf4:	2b0e      	cmp	r3, #14
 8008bf6:	f200 80a4 	bhi.w	8008d42 <_dtoa_r+0x442>
 8008bfa:	2c00      	cmp	r4, #0
 8008bfc:	f000 80a1 	beq.w	8008d42 <_dtoa_r+0x442>
 8008c00:	2f00      	cmp	r7, #0
 8008c02:	dd33      	ble.n	8008c6c <_dtoa_r+0x36c>
 8008c04:	4bad      	ldr	r3, [pc, #692]	@ (8008ebc <_dtoa_r+0x5bc>)
 8008c06:	f007 020f 	and.w	r2, r7, #15
 8008c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c0e:	ed93 7b00 	vldr	d7, [r3]
 8008c12:	05f8      	lsls	r0, r7, #23
 8008c14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c1c:	d516      	bpl.n	8008c4c <_dtoa_r+0x34c>
 8008c1e:	4ba8      	ldr	r3, [pc, #672]	@ (8008ec0 <_dtoa_r+0x5c0>)
 8008c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c28:	f7f7 fe40 	bl	80008ac <__aeabi_ddiv>
 8008c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c30:	f004 040f 	and.w	r4, r4, #15
 8008c34:	2603      	movs	r6, #3
 8008c36:	4da2      	ldr	r5, [pc, #648]	@ (8008ec0 <_dtoa_r+0x5c0>)
 8008c38:	b954      	cbnz	r4, 8008c50 <_dtoa_r+0x350>
 8008c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c42:	f7f7 fe33 	bl	80008ac <__aeabi_ddiv>
 8008c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4a:	e028      	b.n	8008c9e <_dtoa_r+0x39e>
 8008c4c:	2602      	movs	r6, #2
 8008c4e:	e7f2      	b.n	8008c36 <_dtoa_r+0x336>
 8008c50:	07e1      	lsls	r1, r4, #31
 8008c52:	d508      	bpl.n	8008c66 <_dtoa_r+0x366>
 8008c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c5c:	f7f7 fcfc 	bl	8000658 <__aeabi_dmul>
 8008c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c64:	3601      	adds	r6, #1
 8008c66:	1064      	asrs	r4, r4, #1
 8008c68:	3508      	adds	r5, #8
 8008c6a:	e7e5      	b.n	8008c38 <_dtoa_r+0x338>
 8008c6c:	f000 80d2 	beq.w	8008e14 <_dtoa_r+0x514>
 8008c70:	427c      	negs	r4, r7
 8008c72:	4b92      	ldr	r3, [pc, #584]	@ (8008ebc <_dtoa_r+0x5bc>)
 8008c74:	4d92      	ldr	r5, [pc, #584]	@ (8008ec0 <_dtoa_r+0x5c0>)
 8008c76:	f004 020f 	and.w	r2, r4, #15
 8008c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c86:	f7f7 fce7 	bl	8000658 <__aeabi_dmul>
 8008c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8e:	1124      	asrs	r4, r4, #4
 8008c90:	2300      	movs	r3, #0
 8008c92:	2602      	movs	r6, #2
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	f040 80b2 	bne.w	8008dfe <_dtoa_r+0x4fe>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1d3      	bne.n	8008c46 <_dtoa_r+0x346>
 8008c9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ca0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80b7 	beq.w	8008e18 <_dtoa_r+0x518>
 8008caa:	4b86      	ldr	r3, [pc, #536]	@ (8008ec4 <_dtoa_r+0x5c4>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 ff43 	bl	8000b3c <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f000 80ae 	beq.w	8008e18 <_dtoa_r+0x518>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 80aa 	beq.w	8008e18 <_dtoa_r+0x518>
 8008cc4:	9b00      	ldr	r3, [sp, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	dd37      	ble.n	8008d3a <_dtoa_r+0x43a>
 8008cca:	1e7b      	subs	r3, r7, #1
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4b7d      	ldr	r3, [pc, #500]	@ (8008ec8 <_dtoa_r+0x5c8>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fcbf 	bl	8000658 <__aeabi_dmul>
 8008cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cde:	9c00      	ldr	r4, [sp, #0]
 8008ce0:	3601      	adds	r6, #1
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7f7 fc4e 	bl	8000584 <__aeabi_i2d>
 8008ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cec:	f7f7 fcb4 	bl	8000658 <__aeabi_dmul>
 8008cf0:	4b76      	ldr	r3, [pc, #472]	@ (8008ecc <_dtoa_r+0x5cc>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 fafa 	bl	80002ec <__adddf3>
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cfe:	2c00      	cmp	r4, #0
 8008d00:	f040 808d 	bne.w	8008e1e <_dtoa_r+0x51e>
 8008d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d08:	4b71      	ldr	r3, [pc, #452]	@ (8008ed0 <_dtoa_r+0x5d0>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7f7 faec 	bl	80002e8 <__aeabi_dsub>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4633      	mov	r3, r6
 8008d1c:	f7f7 ff2c 	bl	8000b78 <__aeabi_dcmpgt>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f040 828b 	bne.w	800923c <_dtoa_r+0x93c>
 8008d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d30:	f7f7 ff04 	bl	8000b3c <__aeabi_dcmplt>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	f040 8128 	bne.w	8008f8a <_dtoa_r+0x68a>
 8008d3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f2c0 815a 	blt.w	8008ffe <_dtoa_r+0x6fe>
 8008d4a:	2f0e      	cmp	r7, #14
 8008d4c:	f300 8157 	bgt.w	8008ffe <_dtoa_r+0x6fe>
 8008d50:	4b5a      	ldr	r3, [pc, #360]	@ (8008ebc <_dtoa_r+0x5bc>)
 8008d52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d56:	ed93 7b00 	vldr	d7, [r3]
 8008d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	ed8d 7b00 	vstr	d7, [sp]
 8008d62:	da03      	bge.n	8008d6c <_dtoa_r+0x46c>
 8008d64:	9b07      	ldr	r3, [sp, #28]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f340 8101 	ble.w	8008f6e <_dtoa_r+0x66e>
 8008d6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d70:	4656      	mov	r6, sl
 8008d72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fd97 	bl	80008ac <__aeabi_ddiv>
 8008d7e:	f7f7 ff1b 	bl	8000bb8 <__aeabi_d2iz>
 8008d82:	4680      	mov	r8, r0
 8008d84:	f7f7 fbfe 	bl	8000584 <__aeabi_i2d>
 8008d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d8c:	f7f7 fc64 	bl	8000658 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4620      	mov	r0, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d9c:	f7f7 faa4 	bl	80002e8 <__aeabi_dsub>
 8008da0:	f806 4b01 	strb.w	r4, [r6], #1
 8008da4:	9d07      	ldr	r5, [sp, #28]
 8008da6:	eba6 040a 	sub.w	r4, r6, sl
 8008daa:	42a5      	cmp	r5, r4
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	f040 8117 	bne.w	8008fe2 <_dtoa_r+0x6e2>
 8008db4:	f7f7 fa9a 	bl	80002ec <__adddf3>
 8008db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	460d      	mov	r5, r1
 8008dc0:	f7f7 feda 	bl	8000b78 <__aeabi_dcmpgt>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f040 80f9 	bne.w	8008fbc <_dtoa_r+0x6bc>
 8008dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fea9 	bl	8000b28 <__aeabi_dcmpeq>
 8008dd6:	b118      	cbz	r0, 8008de0 <_dtoa_r+0x4e0>
 8008dd8:	f018 0f01 	tst.w	r8, #1
 8008ddc:	f040 80ee 	bne.w	8008fbc <_dtoa_r+0x6bc>
 8008de0:	4649      	mov	r1, r9
 8008de2:	4658      	mov	r0, fp
 8008de4:	f000 fbda 	bl	800959c <_Bfree>
 8008de8:	2300      	movs	r3, #0
 8008dea:	7033      	strb	r3, [r6, #0]
 8008dec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dee:	3701      	adds	r7, #1
 8008df0:	601f      	str	r7, [r3, #0]
 8008df2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 831d 	beq.w	8009434 <_dtoa_r+0xb34>
 8008dfa:	601e      	str	r6, [r3, #0]
 8008dfc:	e31a      	b.n	8009434 <_dtoa_r+0xb34>
 8008dfe:	07e2      	lsls	r2, r4, #31
 8008e00:	d505      	bpl.n	8008e0e <_dtoa_r+0x50e>
 8008e02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e06:	f7f7 fc27 	bl	8000658 <__aeabi_dmul>
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	1064      	asrs	r4, r4, #1
 8008e10:	3508      	adds	r5, #8
 8008e12:	e73f      	b.n	8008c94 <_dtoa_r+0x394>
 8008e14:	2602      	movs	r6, #2
 8008e16:	e742      	b.n	8008c9e <_dtoa_r+0x39e>
 8008e18:	9c07      	ldr	r4, [sp, #28]
 8008e1a:	9704      	str	r7, [sp, #16]
 8008e1c:	e761      	b.n	8008ce2 <_dtoa_r+0x3e2>
 8008e1e:	4b27      	ldr	r3, [pc, #156]	@ (8008ebc <_dtoa_r+0x5bc>)
 8008e20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e2a:	4454      	add	r4, sl
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d053      	beq.n	8008ed8 <_dtoa_r+0x5d8>
 8008e30:	4928      	ldr	r1, [pc, #160]	@ (8008ed4 <_dtoa_r+0x5d4>)
 8008e32:	2000      	movs	r0, #0
 8008e34:	f7f7 fd3a 	bl	80008ac <__aeabi_ddiv>
 8008e38:	4633      	mov	r3, r6
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	f7f7 fa54 	bl	80002e8 <__aeabi_dsub>
 8008e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e44:	4656      	mov	r6, sl
 8008e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e4a:	f7f7 feb5 	bl	8000bb8 <__aeabi_d2iz>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	f7f7 fb98 	bl	8000584 <__aeabi_i2d>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5c:	f7f7 fa44 	bl	80002e8 <__aeabi_dsub>
 8008e60:	3530      	adds	r5, #48	@ 0x30
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e6a:	f806 5b01 	strb.w	r5, [r6], #1
 8008e6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e72:	f7f7 fe63 	bl	8000b3c <__aeabi_dcmplt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d171      	bne.n	8008f5e <_dtoa_r+0x65e>
 8008e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e7e:	4911      	ldr	r1, [pc, #68]	@ (8008ec4 <_dtoa_r+0x5c4>)
 8008e80:	2000      	movs	r0, #0
 8008e82:	f7f7 fa31 	bl	80002e8 <__aeabi_dsub>
 8008e86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e8a:	f7f7 fe57 	bl	8000b3c <__aeabi_dcmplt>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f040 8095 	bne.w	8008fbe <_dtoa_r+0x6be>
 8008e94:	42a6      	cmp	r6, r4
 8008e96:	f43f af50 	beq.w	8008d3a <_dtoa_r+0x43a>
 8008e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec8 <_dtoa_r+0x5c8>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f7f7 fbd9 	bl	8000658 <__aeabi_dmul>
 8008ea6:	4b08      	ldr	r3, [pc, #32]	@ (8008ec8 <_dtoa_r+0x5c8>)
 8008ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008eac:	2200      	movs	r2, #0
 8008eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb2:	f7f7 fbd1 	bl	8000658 <__aeabi_dmul>
 8008eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eba:	e7c4      	b.n	8008e46 <_dtoa_r+0x546>
 8008ebc:	0800ab38 	.word	0x0800ab38
 8008ec0:	0800ab10 	.word	0x0800ab10
 8008ec4:	3ff00000 	.word	0x3ff00000
 8008ec8:	40240000 	.word	0x40240000
 8008ecc:	401c0000 	.word	0x401c0000
 8008ed0:	40140000 	.word	0x40140000
 8008ed4:	3fe00000 	.word	0x3fe00000
 8008ed8:	4631      	mov	r1, r6
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7f7 fbbc 	bl	8000658 <__aeabi_dmul>
 8008ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ee4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008ee6:	4656      	mov	r6, sl
 8008ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eec:	f7f7 fe64 	bl	8000bb8 <__aeabi_d2iz>
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	f7f7 fb47 	bl	8000584 <__aeabi_i2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efe:	f7f7 f9f3 	bl	80002e8 <__aeabi_dsub>
 8008f02:	3530      	adds	r5, #48	@ 0x30
 8008f04:	f806 5b01 	strb.w	r5, [r6], #1
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	42a6      	cmp	r6, r4
 8008f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	d124      	bne.n	8008f62 <_dtoa_r+0x662>
 8008f18:	4bac      	ldr	r3, [pc, #688]	@ (80091cc <_dtoa_r+0x8cc>)
 8008f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f1e:	f7f7 f9e5 	bl	80002ec <__adddf3>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f2a:	f7f7 fe25 	bl	8000b78 <__aeabi_dcmpgt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d145      	bne.n	8008fbe <_dtoa_r+0x6be>
 8008f32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f36:	49a5      	ldr	r1, [pc, #660]	@ (80091cc <_dtoa_r+0x8cc>)
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f7f7 f9d5 	bl	80002e8 <__aeabi_dsub>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f46:	f7f7 fdf9 	bl	8000b3c <__aeabi_dcmplt>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	f43f aef5 	beq.w	8008d3a <_dtoa_r+0x43a>
 8008f50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f52:	1e73      	subs	r3, r6, #1
 8008f54:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f5a:	2b30      	cmp	r3, #48	@ 0x30
 8008f5c:	d0f8      	beq.n	8008f50 <_dtoa_r+0x650>
 8008f5e:	9f04      	ldr	r7, [sp, #16]
 8008f60:	e73e      	b.n	8008de0 <_dtoa_r+0x4e0>
 8008f62:	4b9b      	ldr	r3, [pc, #620]	@ (80091d0 <_dtoa_r+0x8d0>)
 8008f64:	f7f7 fb78 	bl	8000658 <__aeabi_dmul>
 8008f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f6c:	e7bc      	b.n	8008ee8 <_dtoa_r+0x5e8>
 8008f6e:	d10c      	bne.n	8008f8a <_dtoa_r+0x68a>
 8008f70:	4b98      	ldr	r3, [pc, #608]	@ (80091d4 <_dtoa_r+0x8d4>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f78:	f7f7 fb6e 	bl	8000658 <__aeabi_dmul>
 8008f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f80:	f7f7 fdf0 	bl	8000b64 <__aeabi_dcmpge>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f000 8157 	beq.w	8009238 <_dtoa_r+0x938>
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	4625      	mov	r5, r4
 8008f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f90:	43db      	mvns	r3, r3
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	4656      	mov	r6, sl
 8008f96:	2700      	movs	r7, #0
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4658      	mov	r0, fp
 8008f9c:	f000 fafe 	bl	800959c <_Bfree>
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	d0dc      	beq.n	8008f5e <_dtoa_r+0x65e>
 8008fa4:	b12f      	cbz	r7, 8008fb2 <_dtoa_r+0x6b2>
 8008fa6:	42af      	cmp	r7, r5
 8008fa8:	d003      	beq.n	8008fb2 <_dtoa_r+0x6b2>
 8008faa:	4639      	mov	r1, r7
 8008fac:	4658      	mov	r0, fp
 8008fae:	f000 faf5 	bl	800959c <_Bfree>
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	f000 faf1 	bl	800959c <_Bfree>
 8008fba:	e7d0      	b.n	8008f5e <_dtoa_r+0x65e>
 8008fbc:	9704      	str	r7, [sp, #16]
 8008fbe:	4633      	mov	r3, r6
 8008fc0:	461e      	mov	r6, r3
 8008fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fc6:	2a39      	cmp	r2, #57	@ 0x39
 8008fc8:	d107      	bne.n	8008fda <_dtoa_r+0x6da>
 8008fca:	459a      	cmp	sl, r3
 8008fcc:	d1f8      	bne.n	8008fc0 <_dtoa_r+0x6c0>
 8008fce:	9a04      	ldr	r2, [sp, #16]
 8008fd0:	3201      	adds	r2, #1
 8008fd2:	9204      	str	r2, [sp, #16]
 8008fd4:	2230      	movs	r2, #48	@ 0x30
 8008fd6:	f88a 2000 	strb.w	r2, [sl]
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	3201      	adds	r2, #1
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	e7bd      	b.n	8008f5e <_dtoa_r+0x65e>
 8008fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80091d0 <_dtoa_r+0x8d0>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f7f7 fb37 	bl	8000658 <__aeabi_dmul>
 8008fea:	2200      	movs	r2, #0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	f7f7 fd99 	bl	8000b28 <__aeabi_dcmpeq>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f aebb 	beq.w	8008d72 <_dtoa_r+0x472>
 8008ffc:	e6f0      	b.n	8008de0 <_dtoa_r+0x4e0>
 8008ffe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009000:	2a00      	cmp	r2, #0
 8009002:	f000 80db 	beq.w	80091bc <_dtoa_r+0x8bc>
 8009006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009008:	2a01      	cmp	r2, #1
 800900a:	f300 80bf 	bgt.w	800918c <_dtoa_r+0x88c>
 800900e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009010:	2a00      	cmp	r2, #0
 8009012:	f000 80b7 	beq.w	8009184 <_dtoa_r+0x884>
 8009016:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800901a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800901c:	4646      	mov	r6, r8
 800901e:	9a08      	ldr	r2, [sp, #32]
 8009020:	2101      	movs	r1, #1
 8009022:	441a      	add	r2, r3
 8009024:	4658      	mov	r0, fp
 8009026:	4498      	add	r8, r3
 8009028:	9208      	str	r2, [sp, #32]
 800902a:	f000 fb6b 	bl	8009704 <__i2b>
 800902e:	4605      	mov	r5, r0
 8009030:	b15e      	cbz	r6, 800904a <_dtoa_r+0x74a>
 8009032:	9b08      	ldr	r3, [sp, #32]
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd08      	ble.n	800904a <_dtoa_r+0x74a>
 8009038:	42b3      	cmp	r3, r6
 800903a:	9a08      	ldr	r2, [sp, #32]
 800903c:	bfa8      	it	ge
 800903e:	4633      	movge	r3, r6
 8009040:	eba8 0803 	sub.w	r8, r8, r3
 8009044:	1af6      	subs	r6, r6, r3
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	9308      	str	r3, [sp, #32]
 800904a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800904c:	b1f3      	cbz	r3, 800908c <_dtoa_r+0x78c>
 800904e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80b7 	beq.w	80091c4 <_dtoa_r+0x8c4>
 8009056:	b18c      	cbz	r4, 800907c <_dtoa_r+0x77c>
 8009058:	4629      	mov	r1, r5
 800905a:	4622      	mov	r2, r4
 800905c:	4658      	mov	r0, fp
 800905e:	f000 fc11 	bl	8009884 <__pow5mult>
 8009062:	464a      	mov	r2, r9
 8009064:	4601      	mov	r1, r0
 8009066:	4605      	mov	r5, r0
 8009068:	4658      	mov	r0, fp
 800906a:	f000 fb61 	bl	8009730 <__multiply>
 800906e:	4649      	mov	r1, r9
 8009070:	9004      	str	r0, [sp, #16]
 8009072:	4658      	mov	r0, fp
 8009074:	f000 fa92 	bl	800959c <_Bfree>
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	4699      	mov	r9, r3
 800907c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907e:	1b1a      	subs	r2, r3, r4
 8009080:	d004      	beq.n	800908c <_dtoa_r+0x78c>
 8009082:	4649      	mov	r1, r9
 8009084:	4658      	mov	r0, fp
 8009086:	f000 fbfd 	bl	8009884 <__pow5mult>
 800908a:	4681      	mov	r9, r0
 800908c:	2101      	movs	r1, #1
 800908e:	4658      	mov	r0, fp
 8009090:	f000 fb38 	bl	8009704 <__i2b>
 8009094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009096:	4604      	mov	r4, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 81cf 	beq.w	800943c <_dtoa_r+0xb3c>
 800909e:	461a      	mov	r2, r3
 80090a0:	4601      	mov	r1, r0
 80090a2:	4658      	mov	r0, fp
 80090a4:	f000 fbee 	bl	8009884 <__pow5mult>
 80090a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	4604      	mov	r4, r0
 80090ae:	f300 8095 	bgt.w	80091dc <_dtoa_r+0x8dc>
 80090b2:	9b02      	ldr	r3, [sp, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f040 8087 	bne.w	80091c8 <_dtoa_r+0x8c8>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 8089 	bne.w	80091d8 <_dtoa_r+0x8d8>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090cc:	0d1b      	lsrs	r3, r3, #20
 80090ce:	051b      	lsls	r3, r3, #20
 80090d0:	b12b      	cbz	r3, 80090de <_dtoa_r+0x7de>
 80090d2:	9b08      	ldr	r3, [sp, #32]
 80090d4:	3301      	adds	r3, #1
 80090d6:	9308      	str	r3, [sp, #32]
 80090d8:	f108 0801 	add.w	r8, r8, #1
 80090dc:	2301      	movs	r3, #1
 80090de:	930a      	str	r3, [sp, #40]	@ 0x28
 80090e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 81b0 	beq.w	8009448 <_dtoa_r+0xb48>
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090ee:	6918      	ldr	r0, [r3, #16]
 80090f0:	f000 fabc 	bl	800966c <__hi0bits>
 80090f4:	f1c0 0020 	rsb	r0, r0, #32
 80090f8:	9b08      	ldr	r3, [sp, #32]
 80090fa:	4418      	add	r0, r3
 80090fc:	f010 001f 	ands.w	r0, r0, #31
 8009100:	d077      	beq.n	80091f2 <_dtoa_r+0x8f2>
 8009102:	f1c0 0320 	rsb	r3, r0, #32
 8009106:	2b04      	cmp	r3, #4
 8009108:	dd6b      	ble.n	80091e2 <_dtoa_r+0x8e2>
 800910a:	9b08      	ldr	r3, [sp, #32]
 800910c:	f1c0 001c 	rsb	r0, r0, #28
 8009110:	4403      	add	r3, r0
 8009112:	4480      	add	r8, r0
 8009114:	4406      	add	r6, r0
 8009116:	9308      	str	r3, [sp, #32]
 8009118:	f1b8 0f00 	cmp.w	r8, #0
 800911c:	dd05      	ble.n	800912a <_dtoa_r+0x82a>
 800911e:	4649      	mov	r1, r9
 8009120:	4642      	mov	r2, r8
 8009122:	4658      	mov	r0, fp
 8009124:	f000 fc08 	bl	8009938 <__lshift>
 8009128:	4681      	mov	r9, r0
 800912a:	9b08      	ldr	r3, [sp, #32]
 800912c:	2b00      	cmp	r3, #0
 800912e:	dd05      	ble.n	800913c <_dtoa_r+0x83c>
 8009130:	4621      	mov	r1, r4
 8009132:	461a      	mov	r2, r3
 8009134:	4658      	mov	r0, fp
 8009136:	f000 fbff 	bl	8009938 <__lshift>
 800913a:	4604      	mov	r4, r0
 800913c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800913e:	2b00      	cmp	r3, #0
 8009140:	d059      	beq.n	80091f6 <_dtoa_r+0x8f6>
 8009142:	4621      	mov	r1, r4
 8009144:	4648      	mov	r0, r9
 8009146:	f000 fc63 	bl	8009a10 <__mcmp>
 800914a:	2800      	cmp	r0, #0
 800914c:	da53      	bge.n	80091f6 <_dtoa_r+0x8f6>
 800914e:	1e7b      	subs	r3, r7, #1
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	4649      	mov	r1, r9
 8009154:	2300      	movs	r3, #0
 8009156:	220a      	movs	r2, #10
 8009158:	4658      	mov	r0, fp
 800915a:	f000 fa41 	bl	80095e0 <__multadd>
 800915e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009160:	4681      	mov	r9, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 8172 	beq.w	800944c <_dtoa_r+0xb4c>
 8009168:	2300      	movs	r3, #0
 800916a:	4629      	mov	r1, r5
 800916c:	220a      	movs	r2, #10
 800916e:	4658      	mov	r0, fp
 8009170:	f000 fa36 	bl	80095e0 <__multadd>
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	4605      	mov	r5, r0
 800917a:	dc67      	bgt.n	800924c <_dtoa_r+0x94c>
 800917c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800917e:	2b02      	cmp	r3, #2
 8009180:	dc41      	bgt.n	8009206 <_dtoa_r+0x906>
 8009182:	e063      	b.n	800924c <_dtoa_r+0x94c>
 8009184:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009186:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800918a:	e746      	b.n	800901a <_dtoa_r+0x71a>
 800918c:	9b07      	ldr	r3, [sp, #28]
 800918e:	1e5c      	subs	r4, r3, #1
 8009190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009192:	42a3      	cmp	r3, r4
 8009194:	bfbf      	itttt	lt
 8009196:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009198:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800919a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800919c:	1ae3      	sublt	r3, r4, r3
 800919e:	bfb4      	ite	lt
 80091a0:	18d2      	addlt	r2, r2, r3
 80091a2:	1b1c      	subge	r4, r3, r4
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	bfbc      	itt	lt
 80091a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80091aa:	2400      	movlt	r4, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfb5      	itete	lt
 80091b0:	eba8 0603 	sublt.w	r6, r8, r3
 80091b4:	9b07      	ldrge	r3, [sp, #28]
 80091b6:	2300      	movlt	r3, #0
 80091b8:	4646      	movge	r6, r8
 80091ba:	e730      	b.n	800901e <_dtoa_r+0x71e>
 80091bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80091be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80091c0:	4646      	mov	r6, r8
 80091c2:	e735      	b.n	8009030 <_dtoa_r+0x730>
 80091c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091c6:	e75c      	b.n	8009082 <_dtoa_r+0x782>
 80091c8:	2300      	movs	r3, #0
 80091ca:	e788      	b.n	80090de <_dtoa_r+0x7de>
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	40240000 	.word	0x40240000
 80091d4:	40140000 	.word	0x40140000
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	e780      	b.n	80090de <_dtoa_r+0x7de>
 80091dc:	2300      	movs	r3, #0
 80091de:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e0:	e782      	b.n	80090e8 <_dtoa_r+0x7e8>
 80091e2:	d099      	beq.n	8009118 <_dtoa_r+0x818>
 80091e4:	9a08      	ldr	r2, [sp, #32]
 80091e6:	331c      	adds	r3, #28
 80091e8:	441a      	add	r2, r3
 80091ea:	4498      	add	r8, r3
 80091ec:	441e      	add	r6, r3
 80091ee:	9208      	str	r2, [sp, #32]
 80091f0:	e792      	b.n	8009118 <_dtoa_r+0x818>
 80091f2:	4603      	mov	r3, r0
 80091f4:	e7f6      	b.n	80091e4 <_dtoa_r+0x8e4>
 80091f6:	9b07      	ldr	r3, [sp, #28]
 80091f8:	9704      	str	r7, [sp, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc20      	bgt.n	8009240 <_dtoa_r+0x940>
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009202:	2b02      	cmp	r3, #2
 8009204:	dd1e      	ble.n	8009244 <_dtoa_r+0x944>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f47f aec0 	bne.w	8008f8e <_dtoa_r+0x68e>
 800920e:	4621      	mov	r1, r4
 8009210:	2205      	movs	r2, #5
 8009212:	4658      	mov	r0, fp
 8009214:	f000 f9e4 	bl	80095e0 <__multadd>
 8009218:	4601      	mov	r1, r0
 800921a:	4604      	mov	r4, r0
 800921c:	4648      	mov	r0, r9
 800921e:	f000 fbf7 	bl	8009a10 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	f77f aeb3 	ble.w	8008f8e <_dtoa_r+0x68e>
 8009228:	4656      	mov	r6, sl
 800922a:	2331      	movs	r3, #49	@ 0x31
 800922c:	f806 3b01 	strb.w	r3, [r6], #1
 8009230:	9b04      	ldr	r3, [sp, #16]
 8009232:	3301      	adds	r3, #1
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	e6ae      	b.n	8008f96 <_dtoa_r+0x696>
 8009238:	9c07      	ldr	r4, [sp, #28]
 800923a:	9704      	str	r7, [sp, #16]
 800923c:	4625      	mov	r5, r4
 800923e:	e7f3      	b.n	8009228 <_dtoa_r+0x928>
 8009240:	9b07      	ldr	r3, [sp, #28]
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 8104 	beq.w	8009454 <_dtoa_r+0xb54>
 800924c:	2e00      	cmp	r6, #0
 800924e:	dd05      	ble.n	800925c <_dtoa_r+0x95c>
 8009250:	4629      	mov	r1, r5
 8009252:	4632      	mov	r2, r6
 8009254:	4658      	mov	r0, fp
 8009256:	f000 fb6f 	bl	8009938 <__lshift>
 800925a:	4605      	mov	r5, r0
 800925c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d05a      	beq.n	8009318 <_dtoa_r+0xa18>
 8009262:	6869      	ldr	r1, [r5, #4]
 8009264:	4658      	mov	r0, fp
 8009266:	f000 f959 	bl	800951c <_Balloc>
 800926a:	4606      	mov	r6, r0
 800926c:	b928      	cbnz	r0, 800927a <_dtoa_r+0x97a>
 800926e:	4b84      	ldr	r3, [pc, #528]	@ (8009480 <_dtoa_r+0xb80>)
 8009270:	4602      	mov	r2, r0
 8009272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009276:	f7ff bb5a 	b.w	800892e <_dtoa_r+0x2e>
 800927a:	692a      	ldr	r2, [r5, #16]
 800927c:	3202      	adds	r2, #2
 800927e:	0092      	lsls	r2, r2, #2
 8009280:	f105 010c 	add.w	r1, r5, #12
 8009284:	300c      	adds	r0, #12
 8009286:	f7ff faa4 	bl	80087d2 <memcpy>
 800928a:	2201      	movs	r2, #1
 800928c:	4631      	mov	r1, r6
 800928e:	4658      	mov	r0, fp
 8009290:	f000 fb52 	bl	8009938 <__lshift>
 8009294:	f10a 0301 	add.w	r3, sl, #1
 8009298:	9307      	str	r3, [sp, #28]
 800929a:	9b00      	ldr	r3, [sp, #0]
 800929c:	4453      	add	r3, sl
 800929e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	462f      	mov	r7, r5
 80092a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80092aa:	4605      	mov	r5, r0
 80092ac:	9b07      	ldr	r3, [sp, #28]
 80092ae:	4621      	mov	r1, r4
 80092b0:	3b01      	subs	r3, #1
 80092b2:	4648      	mov	r0, r9
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	f7ff fa9a 	bl	80087ee <quorem>
 80092ba:	4639      	mov	r1, r7
 80092bc:	9002      	str	r0, [sp, #8]
 80092be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80092c2:	4648      	mov	r0, r9
 80092c4:	f000 fba4 	bl	8009a10 <__mcmp>
 80092c8:	462a      	mov	r2, r5
 80092ca:	9008      	str	r0, [sp, #32]
 80092cc:	4621      	mov	r1, r4
 80092ce:	4658      	mov	r0, fp
 80092d0:	f000 fbba 	bl	8009a48 <__mdiff>
 80092d4:	68c2      	ldr	r2, [r0, #12]
 80092d6:	4606      	mov	r6, r0
 80092d8:	bb02      	cbnz	r2, 800931c <_dtoa_r+0xa1c>
 80092da:	4601      	mov	r1, r0
 80092dc:	4648      	mov	r0, r9
 80092de:	f000 fb97 	bl	8009a10 <__mcmp>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4631      	mov	r1, r6
 80092e6:	4658      	mov	r0, fp
 80092e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80092ea:	f000 f957 	bl	800959c <_Bfree>
 80092ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092f2:	9e07      	ldr	r6, [sp, #28]
 80092f4:	ea43 0102 	orr.w	r1, r3, r2
 80092f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092fa:	4319      	orrs	r1, r3
 80092fc:	d110      	bne.n	8009320 <_dtoa_r+0xa20>
 80092fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009302:	d029      	beq.n	8009358 <_dtoa_r+0xa58>
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	2b00      	cmp	r3, #0
 8009308:	dd02      	ble.n	8009310 <_dtoa_r+0xa10>
 800930a:	9b02      	ldr	r3, [sp, #8]
 800930c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009310:	9b00      	ldr	r3, [sp, #0]
 8009312:	f883 8000 	strb.w	r8, [r3]
 8009316:	e63f      	b.n	8008f98 <_dtoa_r+0x698>
 8009318:	4628      	mov	r0, r5
 800931a:	e7bb      	b.n	8009294 <_dtoa_r+0x994>
 800931c:	2201      	movs	r2, #1
 800931e:	e7e1      	b.n	80092e4 <_dtoa_r+0x9e4>
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	db04      	blt.n	8009330 <_dtoa_r+0xa30>
 8009326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009328:	430b      	orrs	r3, r1
 800932a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800932c:	430b      	orrs	r3, r1
 800932e:	d120      	bne.n	8009372 <_dtoa_r+0xa72>
 8009330:	2a00      	cmp	r2, #0
 8009332:	dded      	ble.n	8009310 <_dtoa_r+0xa10>
 8009334:	4649      	mov	r1, r9
 8009336:	2201      	movs	r2, #1
 8009338:	4658      	mov	r0, fp
 800933a:	f000 fafd 	bl	8009938 <__lshift>
 800933e:	4621      	mov	r1, r4
 8009340:	4681      	mov	r9, r0
 8009342:	f000 fb65 	bl	8009a10 <__mcmp>
 8009346:	2800      	cmp	r0, #0
 8009348:	dc03      	bgt.n	8009352 <_dtoa_r+0xa52>
 800934a:	d1e1      	bne.n	8009310 <_dtoa_r+0xa10>
 800934c:	f018 0f01 	tst.w	r8, #1
 8009350:	d0de      	beq.n	8009310 <_dtoa_r+0xa10>
 8009352:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009356:	d1d8      	bne.n	800930a <_dtoa_r+0xa0a>
 8009358:	9a00      	ldr	r2, [sp, #0]
 800935a:	2339      	movs	r3, #57	@ 0x39
 800935c:	7013      	strb	r3, [r2, #0]
 800935e:	4633      	mov	r3, r6
 8009360:	461e      	mov	r6, r3
 8009362:	3b01      	subs	r3, #1
 8009364:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009368:	2a39      	cmp	r2, #57	@ 0x39
 800936a:	d052      	beq.n	8009412 <_dtoa_r+0xb12>
 800936c:	3201      	adds	r2, #1
 800936e:	701a      	strb	r2, [r3, #0]
 8009370:	e612      	b.n	8008f98 <_dtoa_r+0x698>
 8009372:	2a00      	cmp	r2, #0
 8009374:	dd07      	ble.n	8009386 <_dtoa_r+0xa86>
 8009376:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800937a:	d0ed      	beq.n	8009358 <_dtoa_r+0xa58>
 800937c:	9a00      	ldr	r2, [sp, #0]
 800937e:	f108 0301 	add.w	r3, r8, #1
 8009382:	7013      	strb	r3, [r2, #0]
 8009384:	e608      	b.n	8008f98 <_dtoa_r+0x698>
 8009386:	9b07      	ldr	r3, [sp, #28]
 8009388:	9a07      	ldr	r2, [sp, #28]
 800938a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800938e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009390:	4293      	cmp	r3, r2
 8009392:	d028      	beq.n	80093e6 <_dtoa_r+0xae6>
 8009394:	4649      	mov	r1, r9
 8009396:	2300      	movs	r3, #0
 8009398:	220a      	movs	r2, #10
 800939a:	4658      	mov	r0, fp
 800939c:	f000 f920 	bl	80095e0 <__multadd>
 80093a0:	42af      	cmp	r7, r5
 80093a2:	4681      	mov	r9, r0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	f04f 020a 	mov.w	r2, #10
 80093ac:	4639      	mov	r1, r7
 80093ae:	4658      	mov	r0, fp
 80093b0:	d107      	bne.n	80093c2 <_dtoa_r+0xac2>
 80093b2:	f000 f915 	bl	80095e0 <__multadd>
 80093b6:	4607      	mov	r7, r0
 80093b8:	4605      	mov	r5, r0
 80093ba:	9b07      	ldr	r3, [sp, #28]
 80093bc:	3301      	adds	r3, #1
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	e774      	b.n	80092ac <_dtoa_r+0x9ac>
 80093c2:	f000 f90d 	bl	80095e0 <__multadd>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4607      	mov	r7, r0
 80093ca:	2300      	movs	r3, #0
 80093cc:	220a      	movs	r2, #10
 80093ce:	4658      	mov	r0, fp
 80093d0:	f000 f906 	bl	80095e0 <__multadd>
 80093d4:	4605      	mov	r5, r0
 80093d6:	e7f0      	b.n	80093ba <_dtoa_r+0xaba>
 80093d8:	9b00      	ldr	r3, [sp, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bfcc      	ite	gt
 80093de:	461e      	movgt	r6, r3
 80093e0:	2601      	movle	r6, #1
 80093e2:	4456      	add	r6, sl
 80093e4:	2700      	movs	r7, #0
 80093e6:	4649      	mov	r1, r9
 80093e8:	2201      	movs	r2, #1
 80093ea:	4658      	mov	r0, fp
 80093ec:	f000 faa4 	bl	8009938 <__lshift>
 80093f0:	4621      	mov	r1, r4
 80093f2:	4681      	mov	r9, r0
 80093f4:	f000 fb0c 	bl	8009a10 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dcb0      	bgt.n	800935e <_dtoa_r+0xa5e>
 80093fc:	d102      	bne.n	8009404 <_dtoa_r+0xb04>
 80093fe:	f018 0f01 	tst.w	r8, #1
 8009402:	d1ac      	bne.n	800935e <_dtoa_r+0xa5e>
 8009404:	4633      	mov	r3, r6
 8009406:	461e      	mov	r6, r3
 8009408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800940c:	2a30      	cmp	r2, #48	@ 0x30
 800940e:	d0fa      	beq.n	8009406 <_dtoa_r+0xb06>
 8009410:	e5c2      	b.n	8008f98 <_dtoa_r+0x698>
 8009412:	459a      	cmp	sl, r3
 8009414:	d1a4      	bne.n	8009360 <_dtoa_r+0xa60>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	2331      	movs	r3, #49	@ 0x31
 800941e:	f88a 3000 	strb.w	r3, [sl]
 8009422:	e5b9      	b.n	8008f98 <_dtoa_r+0x698>
 8009424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009426:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009484 <_dtoa_r+0xb84>
 800942a:	b11b      	cbz	r3, 8009434 <_dtoa_r+0xb34>
 800942c:	f10a 0308 	add.w	r3, sl, #8
 8009430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	4650      	mov	r0, sl
 8009436:	b019      	add	sp, #100	@ 0x64
 8009438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943e:	2b01      	cmp	r3, #1
 8009440:	f77f ae37 	ble.w	80090b2 <_dtoa_r+0x7b2>
 8009444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009446:	930a      	str	r3, [sp, #40]	@ 0x28
 8009448:	2001      	movs	r0, #1
 800944a:	e655      	b.n	80090f8 <_dtoa_r+0x7f8>
 800944c:	9b00      	ldr	r3, [sp, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	f77f aed6 	ble.w	8009200 <_dtoa_r+0x900>
 8009454:	4656      	mov	r6, sl
 8009456:	4621      	mov	r1, r4
 8009458:	4648      	mov	r0, r9
 800945a:	f7ff f9c8 	bl	80087ee <quorem>
 800945e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009462:	f806 8b01 	strb.w	r8, [r6], #1
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	eba6 020a 	sub.w	r2, r6, sl
 800946c:	4293      	cmp	r3, r2
 800946e:	ddb3      	ble.n	80093d8 <_dtoa_r+0xad8>
 8009470:	4649      	mov	r1, r9
 8009472:	2300      	movs	r3, #0
 8009474:	220a      	movs	r2, #10
 8009476:	4658      	mov	r0, fp
 8009478:	f000 f8b2 	bl	80095e0 <__multadd>
 800947c:	4681      	mov	r9, r0
 800947e:	e7ea      	b.n	8009456 <_dtoa_r+0xb56>
 8009480:	0800aa95 	.word	0x0800aa95
 8009484:	0800aa19 	.word	0x0800aa19

08009488 <_free_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4605      	mov	r5, r0
 800948c:	2900      	cmp	r1, #0
 800948e:	d041      	beq.n	8009514 <_free_r+0x8c>
 8009490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009494:	1f0c      	subs	r4, r1, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfb8      	it	lt
 800949a:	18e4      	addlt	r4, r4, r3
 800949c:	f7fe fad2 	bl	8007a44 <__malloc_lock>
 80094a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009518 <_free_r+0x90>)
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	b933      	cbnz	r3, 80094b4 <_free_r+0x2c>
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	6014      	str	r4, [r2, #0]
 80094aa:	4628      	mov	r0, r5
 80094ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b0:	f7fe bace 	b.w	8007a50 <__malloc_unlock>
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	d908      	bls.n	80094ca <_free_r+0x42>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	1821      	adds	r1, r4, r0
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf01      	itttt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	1809      	addeq	r1, r1, r0
 80094c6:	6021      	streq	r1, [r4, #0]
 80094c8:	e7ed      	b.n	80094a6 <_free_r+0x1e>
 80094ca:	461a      	mov	r2, r3
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b10b      	cbz	r3, 80094d4 <_free_r+0x4c>
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d9fa      	bls.n	80094ca <_free_r+0x42>
 80094d4:	6811      	ldr	r1, [r2, #0]
 80094d6:	1850      	adds	r0, r2, r1
 80094d8:	42a0      	cmp	r0, r4
 80094da:	d10b      	bne.n	80094f4 <_free_r+0x6c>
 80094dc:	6820      	ldr	r0, [r4, #0]
 80094de:	4401      	add	r1, r0
 80094e0:	1850      	adds	r0, r2, r1
 80094e2:	4283      	cmp	r3, r0
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	d1e0      	bne.n	80094aa <_free_r+0x22>
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	6053      	str	r3, [r2, #4]
 80094ee:	4408      	add	r0, r1
 80094f0:	6010      	str	r0, [r2, #0]
 80094f2:	e7da      	b.n	80094aa <_free_r+0x22>
 80094f4:	d902      	bls.n	80094fc <_free_r+0x74>
 80094f6:	230c      	movs	r3, #12
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	e7d6      	b.n	80094aa <_free_r+0x22>
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	1821      	adds	r1, r4, r0
 8009500:	428b      	cmp	r3, r1
 8009502:	bf04      	itt	eq
 8009504:	6819      	ldreq	r1, [r3, #0]
 8009506:	685b      	ldreq	r3, [r3, #4]
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	bf04      	itt	eq
 800950c:	1809      	addeq	r1, r1, r0
 800950e:	6021      	streq	r1, [r4, #0]
 8009510:	6054      	str	r4, [r2, #4]
 8009512:	e7ca      	b.n	80094aa <_free_r+0x22>
 8009514:	bd38      	pop	{r3, r4, r5, pc}
 8009516:	bf00      	nop
 8009518:	2001e61c 	.word	0x2001e61c

0800951c <_Balloc>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	69c6      	ldr	r6, [r0, #28]
 8009520:	4604      	mov	r4, r0
 8009522:	460d      	mov	r5, r1
 8009524:	b976      	cbnz	r6, 8009544 <_Balloc+0x28>
 8009526:	2010      	movs	r0, #16
 8009528:	f7fe f9da 	bl	80078e0 <malloc>
 800952c:	4602      	mov	r2, r0
 800952e:	61e0      	str	r0, [r4, #28]
 8009530:	b920      	cbnz	r0, 800953c <_Balloc+0x20>
 8009532:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <_Balloc+0x78>)
 8009534:	4818      	ldr	r0, [pc, #96]	@ (8009598 <_Balloc+0x7c>)
 8009536:	216b      	movs	r1, #107	@ 0x6b
 8009538:	f000 fd90 	bl	800a05c <__assert_func>
 800953c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009540:	6006      	str	r6, [r0, #0]
 8009542:	60c6      	str	r6, [r0, #12]
 8009544:	69e6      	ldr	r6, [r4, #28]
 8009546:	68f3      	ldr	r3, [r6, #12]
 8009548:	b183      	cbz	r3, 800956c <_Balloc+0x50>
 800954a:	69e3      	ldr	r3, [r4, #28]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009552:	b9b8      	cbnz	r0, 8009584 <_Balloc+0x68>
 8009554:	2101      	movs	r1, #1
 8009556:	fa01 f605 	lsl.w	r6, r1, r5
 800955a:	1d72      	adds	r2, r6, #5
 800955c:	0092      	lsls	r2, r2, #2
 800955e:	4620      	mov	r0, r4
 8009560:	f000 fd9a 	bl	800a098 <_calloc_r>
 8009564:	b160      	cbz	r0, 8009580 <_Balloc+0x64>
 8009566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800956a:	e00e      	b.n	800958a <_Balloc+0x6e>
 800956c:	2221      	movs	r2, #33	@ 0x21
 800956e:	2104      	movs	r1, #4
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fd91 	bl	800a098 <_calloc_r>
 8009576:	69e3      	ldr	r3, [r4, #28]
 8009578:	60f0      	str	r0, [r6, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e4      	bne.n	800954a <_Balloc+0x2e>
 8009580:	2000      	movs	r0, #0
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	6802      	ldr	r2, [r0, #0]
 8009586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800958a:	2300      	movs	r3, #0
 800958c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009590:	e7f7      	b.n	8009582 <_Balloc+0x66>
 8009592:	bf00      	nop
 8009594:	0800aa26 	.word	0x0800aa26
 8009598:	0800aaa6 	.word	0x0800aaa6

0800959c <_Bfree>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	69c6      	ldr	r6, [r0, #28]
 80095a0:	4605      	mov	r5, r0
 80095a2:	460c      	mov	r4, r1
 80095a4:	b976      	cbnz	r6, 80095c4 <_Bfree+0x28>
 80095a6:	2010      	movs	r0, #16
 80095a8:	f7fe f99a 	bl	80078e0 <malloc>
 80095ac:	4602      	mov	r2, r0
 80095ae:	61e8      	str	r0, [r5, #28]
 80095b0:	b920      	cbnz	r0, 80095bc <_Bfree+0x20>
 80095b2:	4b09      	ldr	r3, [pc, #36]	@ (80095d8 <_Bfree+0x3c>)
 80095b4:	4809      	ldr	r0, [pc, #36]	@ (80095dc <_Bfree+0x40>)
 80095b6:	218f      	movs	r1, #143	@ 0x8f
 80095b8:	f000 fd50 	bl	800a05c <__assert_func>
 80095bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c0:	6006      	str	r6, [r0, #0]
 80095c2:	60c6      	str	r6, [r0, #12]
 80095c4:	b13c      	cbz	r4, 80095d6 <_Bfree+0x3a>
 80095c6:	69eb      	ldr	r3, [r5, #28]
 80095c8:	6862      	ldr	r2, [r4, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095d0:	6021      	str	r1, [r4, #0]
 80095d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	0800aa26 	.word	0x0800aa26
 80095dc:	0800aaa6 	.word	0x0800aaa6

080095e0 <__multadd>:
 80095e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e4:	690d      	ldr	r5, [r1, #16]
 80095e6:	4607      	mov	r7, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	461e      	mov	r6, r3
 80095ec:	f101 0c14 	add.w	ip, r1, #20
 80095f0:	2000      	movs	r0, #0
 80095f2:	f8dc 3000 	ldr.w	r3, [ip]
 80095f6:	b299      	uxth	r1, r3
 80095f8:	fb02 6101 	mla	r1, r2, r1, r6
 80095fc:	0c1e      	lsrs	r6, r3, #16
 80095fe:	0c0b      	lsrs	r3, r1, #16
 8009600:	fb02 3306 	mla	r3, r2, r6, r3
 8009604:	b289      	uxth	r1, r1
 8009606:	3001      	adds	r0, #1
 8009608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800960c:	4285      	cmp	r5, r0
 800960e:	f84c 1b04 	str.w	r1, [ip], #4
 8009612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009616:	dcec      	bgt.n	80095f2 <__multadd+0x12>
 8009618:	b30e      	cbz	r6, 800965e <__multadd+0x7e>
 800961a:	68a3      	ldr	r3, [r4, #8]
 800961c:	42ab      	cmp	r3, r5
 800961e:	dc19      	bgt.n	8009654 <__multadd+0x74>
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	4638      	mov	r0, r7
 8009624:	3101      	adds	r1, #1
 8009626:	f7ff ff79 	bl	800951c <_Balloc>
 800962a:	4680      	mov	r8, r0
 800962c:	b928      	cbnz	r0, 800963a <__multadd+0x5a>
 800962e:	4602      	mov	r2, r0
 8009630:	4b0c      	ldr	r3, [pc, #48]	@ (8009664 <__multadd+0x84>)
 8009632:	480d      	ldr	r0, [pc, #52]	@ (8009668 <__multadd+0x88>)
 8009634:	21ba      	movs	r1, #186	@ 0xba
 8009636:	f000 fd11 	bl	800a05c <__assert_func>
 800963a:	6922      	ldr	r2, [r4, #16]
 800963c:	3202      	adds	r2, #2
 800963e:	f104 010c 	add.w	r1, r4, #12
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	300c      	adds	r0, #12
 8009646:	f7ff f8c4 	bl	80087d2 <memcpy>
 800964a:	4621      	mov	r1, r4
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ffa5 	bl	800959c <_Bfree>
 8009652:	4644      	mov	r4, r8
 8009654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009658:	3501      	adds	r5, #1
 800965a:	615e      	str	r6, [r3, #20]
 800965c:	6125      	str	r5, [r4, #16]
 800965e:	4620      	mov	r0, r4
 8009660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009664:	0800aa95 	.word	0x0800aa95
 8009668:	0800aaa6 	.word	0x0800aaa6

0800966c <__hi0bits>:
 800966c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009670:	4603      	mov	r3, r0
 8009672:	bf36      	itet	cc
 8009674:	0403      	lslcc	r3, r0, #16
 8009676:	2000      	movcs	r0, #0
 8009678:	2010      	movcc	r0, #16
 800967a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800967e:	bf3c      	itt	cc
 8009680:	021b      	lslcc	r3, r3, #8
 8009682:	3008      	addcc	r0, #8
 8009684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009688:	bf3c      	itt	cc
 800968a:	011b      	lslcc	r3, r3, #4
 800968c:	3004      	addcc	r0, #4
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009692:	bf3c      	itt	cc
 8009694:	009b      	lslcc	r3, r3, #2
 8009696:	3002      	addcc	r0, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	db05      	blt.n	80096a8 <__hi0bits+0x3c>
 800969c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096a0:	f100 0001 	add.w	r0, r0, #1
 80096a4:	bf08      	it	eq
 80096a6:	2020      	moveq	r0, #32
 80096a8:	4770      	bx	lr

080096aa <__lo0bits>:
 80096aa:	6803      	ldr	r3, [r0, #0]
 80096ac:	4602      	mov	r2, r0
 80096ae:	f013 0007 	ands.w	r0, r3, #7
 80096b2:	d00b      	beq.n	80096cc <__lo0bits+0x22>
 80096b4:	07d9      	lsls	r1, r3, #31
 80096b6:	d421      	bmi.n	80096fc <__lo0bits+0x52>
 80096b8:	0798      	lsls	r0, r3, #30
 80096ba:	bf49      	itett	mi
 80096bc:	085b      	lsrmi	r3, r3, #1
 80096be:	089b      	lsrpl	r3, r3, #2
 80096c0:	2001      	movmi	r0, #1
 80096c2:	6013      	strmi	r3, [r2, #0]
 80096c4:	bf5c      	itt	pl
 80096c6:	6013      	strpl	r3, [r2, #0]
 80096c8:	2002      	movpl	r0, #2
 80096ca:	4770      	bx	lr
 80096cc:	b299      	uxth	r1, r3
 80096ce:	b909      	cbnz	r1, 80096d4 <__lo0bits+0x2a>
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	2010      	movs	r0, #16
 80096d4:	b2d9      	uxtb	r1, r3
 80096d6:	b909      	cbnz	r1, 80096dc <__lo0bits+0x32>
 80096d8:	3008      	adds	r0, #8
 80096da:	0a1b      	lsrs	r3, r3, #8
 80096dc:	0719      	lsls	r1, r3, #28
 80096de:	bf04      	itt	eq
 80096e0:	091b      	lsreq	r3, r3, #4
 80096e2:	3004      	addeq	r0, #4
 80096e4:	0799      	lsls	r1, r3, #30
 80096e6:	bf04      	itt	eq
 80096e8:	089b      	lsreq	r3, r3, #2
 80096ea:	3002      	addeq	r0, #2
 80096ec:	07d9      	lsls	r1, r3, #31
 80096ee:	d403      	bmi.n	80096f8 <__lo0bits+0x4e>
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	f100 0001 	add.w	r0, r0, #1
 80096f6:	d003      	beq.n	8009700 <__lo0bits+0x56>
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	4770      	bx	lr
 80096fc:	2000      	movs	r0, #0
 80096fe:	4770      	bx	lr
 8009700:	2020      	movs	r0, #32
 8009702:	4770      	bx	lr

08009704 <__i2b>:
 8009704:	b510      	push	{r4, lr}
 8009706:	460c      	mov	r4, r1
 8009708:	2101      	movs	r1, #1
 800970a:	f7ff ff07 	bl	800951c <_Balloc>
 800970e:	4602      	mov	r2, r0
 8009710:	b928      	cbnz	r0, 800971e <__i2b+0x1a>
 8009712:	4b05      	ldr	r3, [pc, #20]	@ (8009728 <__i2b+0x24>)
 8009714:	4805      	ldr	r0, [pc, #20]	@ (800972c <__i2b+0x28>)
 8009716:	f240 1145 	movw	r1, #325	@ 0x145
 800971a:	f000 fc9f 	bl	800a05c <__assert_func>
 800971e:	2301      	movs	r3, #1
 8009720:	6144      	str	r4, [r0, #20]
 8009722:	6103      	str	r3, [r0, #16]
 8009724:	bd10      	pop	{r4, pc}
 8009726:	bf00      	nop
 8009728:	0800aa95 	.word	0x0800aa95
 800972c:	0800aaa6 	.word	0x0800aaa6

08009730 <__multiply>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	4614      	mov	r4, r2
 8009736:	690a      	ldr	r2, [r1, #16]
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	429a      	cmp	r2, r3
 800973c:	bfa8      	it	ge
 800973e:	4623      	movge	r3, r4
 8009740:	460f      	mov	r7, r1
 8009742:	bfa4      	itt	ge
 8009744:	460c      	movge	r4, r1
 8009746:	461f      	movge	r7, r3
 8009748:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800974c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009750:	68a3      	ldr	r3, [r4, #8]
 8009752:	6861      	ldr	r1, [r4, #4]
 8009754:	eb0a 0609 	add.w	r6, sl, r9
 8009758:	42b3      	cmp	r3, r6
 800975a:	b085      	sub	sp, #20
 800975c:	bfb8      	it	lt
 800975e:	3101      	addlt	r1, #1
 8009760:	f7ff fedc 	bl	800951c <_Balloc>
 8009764:	b930      	cbnz	r0, 8009774 <__multiply+0x44>
 8009766:	4602      	mov	r2, r0
 8009768:	4b44      	ldr	r3, [pc, #272]	@ (800987c <__multiply+0x14c>)
 800976a:	4845      	ldr	r0, [pc, #276]	@ (8009880 <__multiply+0x150>)
 800976c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009770:	f000 fc74 	bl	800a05c <__assert_func>
 8009774:	f100 0514 	add.w	r5, r0, #20
 8009778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800977c:	462b      	mov	r3, r5
 800977e:	2200      	movs	r2, #0
 8009780:	4543      	cmp	r3, r8
 8009782:	d321      	bcc.n	80097c8 <__multiply+0x98>
 8009784:	f107 0114 	add.w	r1, r7, #20
 8009788:	f104 0214 	add.w	r2, r4, #20
 800978c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009790:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	1b13      	subs	r3, r2, r4
 8009798:	3b15      	subs	r3, #21
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	3304      	adds	r3, #4
 80097a0:	f104 0715 	add.w	r7, r4, #21
 80097a4:	42ba      	cmp	r2, r7
 80097a6:	bf38      	it	cc
 80097a8:	2304      	movcc	r3, #4
 80097aa:	9301      	str	r3, [sp, #4]
 80097ac:	9b02      	ldr	r3, [sp, #8]
 80097ae:	9103      	str	r1, [sp, #12]
 80097b0:	428b      	cmp	r3, r1
 80097b2:	d80c      	bhi.n	80097ce <__multiply+0x9e>
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	dd03      	ble.n	80097c0 <__multiply+0x90>
 80097b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d05b      	beq.n	8009878 <__multiply+0x148>
 80097c0:	6106      	str	r6, [r0, #16]
 80097c2:	b005      	add	sp, #20
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	f843 2b04 	str.w	r2, [r3], #4
 80097cc:	e7d8      	b.n	8009780 <__multiply+0x50>
 80097ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80097d2:	f1ba 0f00 	cmp.w	sl, #0
 80097d6:	d024      	beq.n	8009822 <__multiply+0xf2>
 80097d8:	f104 0e14 	add.w	lr, r4, #20
 80097dc:	46a9      	mov	r9, r5
 80097de:	f04f 0c00 	mov.w	ip, #0
 80097e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097e6:	f8d9 3000 	ldr.w	r3, [r9]
 80097ea:	fa1f fb87 	uxth.w	fp, r7
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80097f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80097f8:	f8d9 7000 	ldr.w	r7, [r9]
 80097fc:	4463      	add	r3, ip
 80097fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009802:	fb0a c70b 	mla	r7, sl, fp, ip
 8009806:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800980a:	b29b      	uxth	r3, r3
 800980c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009810:	4572      	cmp	r2, lr
 8009812:	f849 3b04 	str.w	r3, [r9], #4
 8009816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800981a:	d8e2      	bhi.n	80097e2 <__multiply+0xb2>
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	f845 c003 	str.w	ip, [r5, r3]
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009828:	3104      	adds	r1, #4
 800982a:	f1b9 0f00 	cmp.w	r9, #0
 800982e:	d021      	beq.n	8009874 <__multiply+0x144>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	f104 0c14 	add.w	ip, r4, #20
 8009836:	46ae      	mov	lr, r5
 8009838:	f04f 0a00 	mov.w	sl, #0
 800983c:	f8bc b000 	ldrh.w	fp, [ip]
 8009840:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009844:	fb09 770b 	mla	r7, r9, fp, r7
 8009848:	4457      	add	r7, sl
 800984a:	b29b      	uxth	r3, r3
 800984c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009850:	f84e 3b04 	str.w	r3, [lr], #4
 8009854:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800985c:	f8be 3000 	ldrh.w	r3, [lr]
 8009860:	fb09 330a 	mla	r3, r9, sl, r3
 8009864:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009868:	4562      	cmp	r2, ip
 800986a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800986e:	d8e5      	bhi.n	800983c <__multiply+0x10c>
 8009870:	9f01      	ldr	r7, [sp, #4]
 8009872:	51eb      	str	r3, [r5, r7]
 8009874:	3504      	adds	r5, #4
 8009876:	e799      	b.n	80097ac <__multiply+0x7c>
 8009878:	3e01      	subs	r6, #1
 800987a:	e79b      	b.n	80097b4 <__multiply+0x84>
 800987c:	0800aa95 	.word	0x0800aa95
 8009880:	0800aaa6 	.word	0x0800aaa6

08009884 <__pow5mult>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	4615      	mov	r5, r2
 800988a:	f012 0203 	ands.w	r2, r2, #3
 800988e:	4607      	mov	r7, r0
 8009890:	460e      	mov	r6, r1
 8009892:	d007      	beq.n	80098a4 <__pow5mult+0x20>
 8009894:	4c25      	ldr	r4, [pc, #148]	@ (800992c <__pow5mult+0xa8>)
 8009896:	3a01      	subs	r2, #1
 8009898:	2300      	movs	r3, #0
 800989a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800989e:	f7ff fe9f 	bl	80095e0 <__multadd>
 80098a2:	4606      	mov	r6, r0
 80098a4:	10ad      	asrs	r5, r5, #2
 80098a6:	d03d      	beq.n	8009924 <__pow5mult+0xa0>
 80098a8:	69fc      	ldr	r4, [r7, #28]
 80098aa:	b97c      	cbnz	r4, 80098cc <__pow5mult+0x48>
 80098ac:	2010      	movs	r0, #16
 80098ae:	f7fe f817 	bl	80078e0 <malloc>
 80098b2:	4602      	mov	r2, r0
 80098b4:	61f8      	str	r0, [r7, #28]
 80098b6:	b928      	cbnz	r0, 80098c4 <__pow5mult+0x40>
 80098b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009930 <__pow5mult+0xac>)
 80098ba:	481e      	ldr	r0, [pc, #120]	@ (8009934 <__pow5mult+0xb0>)
 80098bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80098c0:	f000 fbcc 	bl	800a05c <__assert_func>
 80098c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098c8:	6004      	str	r4, [r0, #0]
 80098ca:	60c4      	str	r4, [r0, #12]
 80098cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098d4:	b94c      	cbnz	r4, 80098ea <__pow5mult+0x66>
 80098d6:	f240 2171 	movw	r1, #625	@ 0x271
 80098da:	4638      	mov	r0, r7
 80098dc:	f7ff ff12 	bl	8009704 <__i2b>
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098e6:	4604      	mov	r4, r0
 80098e8:	6003      	str	r3, [r0, #0]
 80098ea:	f04f 0900 	mov.w	r9, #0
 80098ee:	07eb      	lsls	r3, r5, #31
 80098f0:	d50a      	bpl.n	8009908 <__pow5mult+0x84>
 80098f2:	4631      	mov	r1, r6
 80098f4:	4622      	mov	r2, r4
 80098f6:	4638      	mov	r0, r7
 80098f8:	f7ff ff1a 	bl	8009730 <__multiply>
 80098fc:	4631      	mov	r1, r6
 80098fe:	4680      	mov	r8, r0
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff fe4b 	bl	800959c <_Bfree>
 8009906:	4646      	mov	r6, r8
 8009908:	106d      	asrs	r5, r5, #1
 800990a:	d00b      	beq.n	8009924 <__pow5mult+0xa0>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	b938      	cbnz	r0, 8009920 <__pow5mult+0x9c>
 8009910:	4622      	mov	r2, r4
 8009912:	4621      	mov	r1, r4
 8009914:	4638      	mov	r0, r7
 8009916:	f7ff ff0b 	bl	8009730 <__multiply>
 800991a:	6020      	str	r0, [r4, #0]
 800991c:	f8c0 9000 	str.w	r9, [r0]
 8009920:	4604      	mov	r4, r0
 8009922:	e7e4      	b.n	80098ee <__pow5mult+0x6a>
 8009924:	4630      	mov	r0, r6
 8009926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992a:	bf00      	nop
 800992c:	0800ab00 	.word	0x0800ab00
 8009930:	0800aa26 	.word	0x0800aa26
 8009934:	0800aaa6 	.word	0x0800aaa6

08009938 <__lshift>:
 8009938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	6849      	ldr	r1, [r1, #4]
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	4607      	mov	r7, r0
 800994a:	4691      	mov	r9, r2
 800994c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009950:	f108 0601 	add.w	r6, r8, #1
 8009954:	42b3      	cmp	r3, r6
 8009956:	db0b      	blt.n	8009970 <__lshift+0x38>
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff fddf 	bl	800951c <_Balloc>
 800995e:	4605      	mov	r5, r0
 8009960:	b948      	cbnz	r0, 8009976 <__lshift+0x3e>
 8009962:	4602      	mov	r2, r0
 8009964:	4b28      	ldr	r3, [pc, #160]	@ (8009a08 <__lshift+0xd0>)
 8009966:	4829      	ldr	r0, [pc, #164]	@ (8009a0c <__lshift+0xd4>)
 8009968:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800996c:	f000 fb76 	bl	800a05c <__assert_func>
 8009970:	3101      	adds	r1, #1
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	e7ee      	b.n	8009954 <__lshift+0x1c>
 8009976:	2300      	movs	r3, #0
 8009978:	f100 0114 	add.w	r1, r0, #20
 800997c:	f100 0210 	add.w	r2, r0, #16
 8009980:	4618      	mov	r0, r3
 8009982:	4553      	cmp	r3, sl
 8009984:	db33      	blt.n	80099ee <__lshift+0xb6>
 8009986:	6920      	ldr	r0, [r4, #16]
 8009988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800998c:	f104 0314 	add.w	r3, r4, #20
 8009990:	f019 091f 	ands.w	r9, r9, #31
 8009994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800999c:	d02b      	beq.n	80099f6 <__lshift+0xbe>
 800999e:	f1c9 0e20 	rsb	lr, r9, #32
 80099a2:	468a      	mov	sl, r1
 80099a4:	2200      	movs	r2, #0
 80099a6:	6818      	ldr	r0, [r3, #0]
 80099a8:	fa00 f009 	lsl.w	r0, r0, r9
 80099ac:	4310      	orrs	r0, r2
 80099ae:	f84a 0b04 	str.w	r0, [sl], #4
 80099b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b6:	459c      	cmp	ip, r3
 80099b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80099bc:	d8f3      	bhi.n	80099a6 <__lshift+0x6e>
 80099be:	ebac 0304 	sub.w	r3, ip, r4
 80099c2:	3b15      	subs	r3, #21
 80099c4:	f023 0303 	bic.w	r3, r3, #3
 80099c8:	3304      	adds	r3, #4
 80099ca:	f104 0015 	add.w	r0, r4, #21
 80099ce:	4584      	cmp	ip, r0
 80099d0:	bf38      	it	cc
 80099d2:	2304      	movcc	r3, #4
 80099d4:	50ca      	str	r2, [r1, r3]
 80099d6:	b10a      	cbz	r2, 80099dc <__lshift+0xa4>
 80099d8:	f108 0602 	add.w	r6, r8, #2
 80099dc:	3e01      	subs	r6, #1
 80099de:	4638      	mov	r0, r7
 80099e0:	612e      	str	r6, [r5, #16]
 80099e2:	4621      	mov	r1, r4
 80099e4:	f7ff fdda 	bl	800959c <_Bfree>
 80099e8:	4628      	mov	r0, r5
 80099ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80099f2:	3301      	adds	r3, #1
 80099f4:	e7c5      	b.n	8009982 <__lshift+0x4a>
 80099f6:	3904      	subs	r1, #4
 80099f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a00:	459c      	cmp	ip, r3
 8009a02:	d8f9      	bhi.n	80099f8 <__lshift+0xc0>
 8009a04:	e7ea      	b.n	80099dc <__lshift+0xa4>
 8009a06:	bf00      	nop
 8009a08:	0800aa95 	.word	0x0800aa95
 8009a0c:	0800aaa6 	.word	0x0800aaa6

08009a10 <__mcmp>:
 8009a10:	690a      	ldr	r2, [r1, #16]
 8009a12:	4603      	mov	r3, r0
 8009a14:	6900      	ldr	r0, [r0, #16]
 8009a16:	1a80      	subs	r0, r0, r2
 8009a18:	b530      	push	{r4, r5, lr}
 8009a1a:	d10e      	bne.n	8009a3a <__mcmp+0x2a>
 8009a1c:	3314      	adds	r3, #20
 8009a1e:	3114      	adds	r1, #20
 8009a20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a30:	4295      	cmp	r5, r2
 8009a32:	d003      	beq.n	8009a3c <__mcmp+0x2c>
 8009a34:	d205      	bcs.n	8009a42 <__mcmp+0x32>
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	bd30      	pop	{r4, r5, pc}
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	d3f3      	bcc.n	8009a28 <__mcmp+0x18>
 8009a40:	e7fb      	b.n	8009a3a <__mcmp+0x2a>
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7f9      	b.n	8009a3a <__mcmp+0x2a>
	...

08009a48 <__mdiff>:
 8009a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4689      	mov	r9, r1
 8009a4e:	4606      	mov	r6, r0
 8009a50:	4611      	mov	r1, r2
 8009a52:	4648      	mov	r0, r9
 8009a54:	4614      	mov	r4, r2
 8009a56:	f7ff ffdb 	bl	8009a10 <__mcmp>
 8009a5a:	1e05      	subs	r5, r0, #0
 8009a5c:	d112      	bne.n	8009a84 <__mdiff+0x3c>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff fd5b 	bl	800951c <_Balloc>
 8009a66:	4602      	mov	r2, r0
 8009a68:	b928      	cbnz	r0, 8009a76 <__mdiff+0x2e>
 8009a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b68 <__mdiff+0x120>)
 8009a6c:	f240 2137 	movw	r1, #567	@ 0x237
 8009a70:	483e      	ldr	r0, [pc, #248]	@ (8009b6c <__mdiff+0x124>)
 8009a72:	f000 faf3 	bl	800a05c <__assert_func>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	b003      	add	sp, #12
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	bfbc      	itt	lt
 8009a86:	464b      	movlt	r3, r9
 8009a88:	46a1      	movlt	r9, r4
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a90:	bfba      	itte	lt
 8009a92:	461c      	movlt	r4, r3
 8009a94:	2501      	movlt	r5, #1
 8009a96:	2500      	movge	r5, #0
 8009a98:	f7ff fd40 	bl	800951c <_Balloc>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	b918      	cbnz	r0, 8009aa8 <__mdiff+0x60>
 8009aa0:	4b31      	ldr	r3, [pc, #196]	@ (8009b68 <__mdiff+0x120>)
 8009aa2:	f240 2145 	movw	r1, #581	@ 0x245
 8009aa6:	e7e3      	b.n	8009a70 <__mdiff+0x28>
 8009aa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009aac:	6926      	ldr	r6, [r4, #16]
 8009aae:	60c5      	str	r5, [r0, #12]
 8009ab0:	f109 0310 	add.w	r3, r9, #16
 8009ab4:	f109 0514 	add.w	r5, r9, #20
 8009ab8:	f104 0e14 	add.w	lr, r4, #20
 8009abc:	f100 0b14 	add.w	fp, r0, #20
 8009ac0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ac4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	46d9      	mov	r9, fp
 8009acc:	f04f 0c00 	mov.w	ip, #0
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ad6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	fa1f f38a 	uxth.w	r3, sl
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	b283      	uxth	r3, r0
 8009ae4:	1acb      	subs	r3, r1, r3
 8009ae6:	0c00      	lsrs	r0, r0, #16
 8009ae8:	4463      	add	r3, ip
 8009aea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009aee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009af8:	4576      	cmp	r6, lr
 8009afa:	f849 3b04 	str.w	r3, [r9], #4
 8009afe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b02:	d8e5      	bhi.n	8009ad0 <__mdiff+0x88>
 8009b04:	1b33      	subs	r3, r6, r4
 8009b06:	3b15      	subs	r3, #21
 8009b08:	f023 0303 	bic.w	r3, r3, #3
 8009b0c:	3415      	adds	r4, #21
 8009b0e:	3304      	adds	r3, #4
 8009b10:	42a6      	cmp	r6, r4
 8009b12:	bf38      	it	cc
 8009b14:	2304      	movcc	r3, #4
 8009b16:	441d      	add	r5, r3
 8009b18:	445b      	add	r3, fp
 8009b1a:	461e      	mov	r6, r3
 8009b1c:	462c      	mov	r4, r5
 8009b1e:	4544      	cmp	r4, r8
 8009b20:	d30e      	bcc.n	8009b40 <__mdiff+0xf8>
 8009b22:	f108 0103 	add.w	r1, r8, #3
 8009b26:	1b49      	subs	r1, r1, r5
 8009b28:	f021 0103 	bic.w	r1, r1, #3
 8009b2c:	3d03      	subs	r5, #3
 8009b2e:	45a8      	cmp	r8, r5
 8009b30:	bf38      	it	cc
 8009b32:	2100      	movcc	r1, #0
 8009b34:	440b      	add	r3, r1
 8009b36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b3a:	b191      	cbz	r1, 8009b62 <__mdiff+0x11a>
 8009b3c:	6117      	str	r7, [r2, #16]
 8009b3e:	e79d      	b.n	8009a7c <__mdiff+0x34>
 8009b40:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b44:	46e6      	mov	lr, ip
 8009b46:	0c08      	lsrs	r0, r1, #16
 8009b48:	fa1c fc81 	uxtah	ip, ip, r1
 8009b4c:	4471      	add	r1, lr
 8009b4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b52:	b289      	uxth	r1, r1
 8009b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b58:	f846 1b04 	str.w	r1, [r6], #4
 8009b5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b60:	e7dd      	b.n	8009b1e <__mdiff+0xd6>
 8009b62:	3f01      	subs	r7, #1
 8009b64:	e7e7      	b.n	8009b36 <__mdiff+0xee>
 8009b66:	bf00      	nop
 8009b68:	0800aa95 	.word	0x0800aa95
 8009b6c:	0800aaa6 	.word	0x0800aaa6

08009b70 <__d2b>:
 8009b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	460f      	mov	r7, r1
 8009b76:	2101      	movs	r1, #1
 8009b78:	ec59 8b10 	vmov	r8, r9, d0
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	f7ff fccd 	bl	800951c <_Balloc>
 8009b82:	4604      	mov	r4, r0
 8009b84:	b930      	cbnz	r0, 8009b94 <__d2b+0x24>
 8009b86:	4602      	mov	r2, r0
 8009b88:	4b23      	ldr	r3, [pc, #140]	@ (8009c18 <__d2b+0xa8>)
 8009b8a:	4824      	ldr	r0, [pc, #144]	@ (8009c1c <__d2b+0xac>)
 8009b8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b90:	f000 fa64 	bl	800a05c <__assert_func>
 8009b94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b9c:	b10d      	cbz	r5, 8009ba2 <__d2b+0x32>
 8009b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ba8:	d023      	beq.n	8009bf2 <__d2b+0x82>
 8009baa:	4668      	mov	r0, sp
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	f7ff fd7c 	bl	80096aa <__lo0bits>
 8009bb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bb6:	b1d0      	cbz	r0, 8009bee <__d2b+0x7e>
 8009bb8:	f1c0 0320 	rsb	r3, r0, #32
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	430b      	orrs	r3, r1
 8009bc2:	40c2      	lsrs	r2, r0
 8009bc4:	6163      	str	r3, [r4, #20]
 8009bc6:	9201      	str	r2, [sp, #4]
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	61a3      	str	r3, [r4, #24]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bf0c      	ite	eq
 8009bd0:	2201      	moveq	r2, #1
 8009bd2:	2202      	movne	r2, #2
 8009bd4:	6122      	str	r2, [r4, #16]
 8009bd6:	b1a5      	cbz	r5, 8009c02 <__d2b+0x92>
 8009bd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009bdc:	4405      	add	r5, r0
 8009bde:	603d      	str	r5, [r7, #0]
 8009be0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009be4:	6030      	str	r0, [r6, #0]
 8009be6:	4620      	mov	r0, r4
 8009be8:	b003      	add	sp, #12
 8009bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bee:	6161      	str	r1, [r4, #20]
 8009bf0:	e7ea      	b.n	8009bc8 <__d2b+0x58>
 8009bf2:	a801      	add	r0, sp, #4
 8009bf4:	f7ff fd59 	bl	80096aa <__lo0bits>
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	6163      	str	r3, [r4, #20]
 8009bfc:	3020      	adds	r0, #32
 8009bfe:	2201      	movs	r2, #1
 8009c00:	e7e8      	b.n	8009bd4 <__d2b+0x64>
 8009c02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c0a:	6038      	str	r0, [r7, #0]
 8009c0c:	6918      	ldr	r0, [r3, #16]
 8009c0e:	f7ff fd2d 	bl	800966c <__hi0bits>
 8009c12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c16:	e7e5      	b.n	8009be4 <__d2b+0x74>
 8009c18:	0800aa95 	.word	0x0800aa95
 8009c1c:	0800aaa6 	.word	0x0800aaa6

08009c20 <__ssputs_r>:
 8009c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	688e      	ldr	r6, [r1, #8]
 8009c26:	461f      	mov	r7, r3
 8009c28:	42be      	cmp	r6, r7
 8009c2a:	680b      	ldr	r3, [r1, #0]
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4690      	mov	r8, r2
 8009c32:	d82d      	bhi.n	8009c90 <__ssputs_r+0x70>
 8009c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c3c:	d026      	beq.n	8009c8c <__ssputs_r+0x6c>
 8009c3e:	6965      	ldr	r5, [r4, #20]
 8009c40:	6909      	ldr	r1, [r1, #16]
 8009c42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c46:	eba3 0901 	sub.w	r9, r3, r1
 8009c4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c4e:	1c7b      	adds	r3, r7, #1
 8009c50:	444b      	add	r3, r9
 8009c52:	106d      	asrs	r5, r5, #1
 8009c54:	429d      	cmp	r5, r3
 8009c56:	bf38      	it	cc
 8009c58:	461d      	movcc	r5, r3
 8009c5a:	0553      	lsls	r3, r2, #21
 8009c5c:	d527      	bpl.n	8009cae <__ssputs_r+0x8e>
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7fd fe70 	bl	8007944 <_malloc_r>
 8009c64:	4606      	mov	r6, r0
 8009c66:	b360      	cbz	r0, 8009cc2 <__ssputs_r+0xa2>
 8009c68:	6921      	ldr	r1, [r4, #16]
 8009c6a:	464a      	mov	r2, r9
 8009c6c:	f7fe fdb1 	bl	80087d2 <memcpy>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	6126      	str	r6, [r4, #16]
 8009c7e:	6165      	str	r5, [r4, #20]
 8009c80:	444e      	add	r6, r9
 8009c82:	eba5 0509 	sub.w	r5, r5, r9
 8009c86:	6026      	str	r6, [r4, #0]
 8009c88:	60a5      	str	r5, [r4, #8]
 8009c8a:	463e      	mov	r6, r7
 8009c8c:	42be      	cmp	r6, r7
 8009c8e:	d900      	bls.n	8009c92 <__ssputs_r+0x72>
 8009c90:	463e      	mov	r6, r7
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	4632      	mov	r2, r6
 8009c96:	4641      	mov	r1, r8
 8009c98:	f000 f9c6 	bl	800a028 <memmove>
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	1b9b      	subs	r3, r3, r6
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	4433      	add	r3, r6
 8009ca6:	6023      	str	r3, [r4, #0]
 8009ca8:	2000      	movs	r0, #0
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	462a      	mov	r2, r5
 8009cb0:	f000 fa18 	bl	800a0e4 <_realloc_r>
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1e0      	bne.n	8009c7c <__ssputs_r+0x5c>
 8009cba:	6921      	ldr	r1, [r4, #16]
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	f7ff fbe3 	bl	8009488 <_free_r>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	f8ca 3000 	str.w	r3, [sl]
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e7e9      	b.n	8009caa <__ssputs_r+0x8a>
	...

08009cd8 <_svfiprintf_r>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	4698      	mov	r8, r3
 8009cde:	898b      	ldrh	r3, [r1, #12]
 8009ce0:	061b      	lsls	r3, r3, #24
 8009ce2:	b09d      	sub	sp, #116	@ 0x74
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	4614      	mov	r4, r2
 8009cea:	d510      	bpl.n	8009d0e <_svfiprintf_r+0x36>
 8009cec:	690b      	ldr	r3, [r1, #16]
 8009cee:	b973      	cbnz	r3, 8009d0e <_svfiprintf_r+0x36>
 8009cf0:	2140      	movs	r1, #64	@ 0x40
 8009cf2:	f7fd fe27 	bl	8007944 <_malloc_r>
 8009cf6:	6028      	str	r0, [r5, #0]
 8009cf8:	6128      	str	r0, [r5, #16]
 8009cfa:	b930      	cbnz	r0, 8009d0a <_svfiprintf_r+0x32>
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295
 8009d04:	b01d      	add	sp, #116	@ 0x74
 8009d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	2340      	movs	r3, #64	@ 0x40
 8009d0c:	616b      	str	r3, [r5, #20]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d12:	2320      	movs	r3, #32
 8009d14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1c:	2330      	movs	r3, #48	@ 0x30
 8009d1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ebc <_svfiprintf_r+0x1e4>
 8009d22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d26:	f04f 0901 	mov.w	r9, #1
 8009d2a:	4623      	mov	r3, r4
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d32:	b10a      	cbz	r2, 8009d38 <_svfiprintf_r+0x60>
 8009d34:	2a25      	cmp	r2, #37	@ 0x25
 8009d36:	d1f9      	bne.n	8009d2c <_svfiprintf_r+0x54>
 8009d38:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x7e>
 8009d3e:	465b      	mov	r3, fp
 8009d40:	4622      	mov	r2, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	4638      	mov	r0, r7
 8009d46:	f7ff ff6b 	bl	8009c20 <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80a7 	beq.w	8009e9e <_svfiprintf_r+0x1c6>
 8009d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d52:	445a      	add	r2, fp
 8009d54:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 809f 	beq.w	8009e9e <_svfiprintf_r+0x1c6>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6a:	f10a 0a01 	add.w	sl, sl, #1
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d76:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d78:	4654      	mov	r4, sl
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	484e      	ldr	r0, [pc, #312]	@ (8009ebc <_svfiprintf_r+0x1e4>)
 8009d82:	f7f6 fa55 	bl	8000230 <memchr>
 8009d86:	9a04      	ldr	r2, [sp, #16]
 8009d88:	b9d8      	cbnz	r0, 8009dc2 <_svfiprintf_r+0xea>
 8009d8a:	06d0      	lsls	r0, r2, #27
 8009d8c:	bf44      	itt	mi
 8009d8e:	2320      	movmi	r3, #32
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d94:	0711      	lsls	r1, r2, #28
 8009d96:	bf44      	itt	mi
 8009d98:	232b      	movmi	r3, #43	@ 0x2b
 8009d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da4:	d015      	beq.n	8009dd2 <_svfiprintf_r+0xfa>
 8009da6:	9a07      	ldr	r2, [sp, #28]
 8009da8:	4654      	mov	r4, sl
 8009daa:	2000      	movs	r0, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4621      	mov	r1, r4
 8009db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db6:	3b30      	subs	r3, #48	@ 0x30
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d94b      	bls.n	8009e54 <_svfiprintf_r+0x17c>
 8009dbc:	b1b0      	cbz	r0, 8009dec <_svfiprintf_r+0x114>
 8009dbe:	9207      	str	r2, [sp, #28]
 8009dc0:	e014      	b.n	8009dec <_svfiprintf_r+0x114>
 8009dc2:	eba0 0308 	sub.w	r3, r0, r8
 8009dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	e7d2      	b.n	8009d78 <_svfiprintf_r+0xa0>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	1d19      	adds	r1, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9103      	str	r1, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfbb      	ittet	lt
 8009dde:	425b      	neglt	r3, r3
 8009de0:	f042 0202 	orrlt.w	r2, r2, #2
 8009de4:	9307      	strge	r3, [sp, #28]
 8009de6:	9307      	strlt	r3, [sp, #28]
 8009de8:	bfb8      	it	lt
 8009dea:	9204      	strlt	r2, [sp, #16]
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df0:	d10a      	bne.n	8009e08 <_svfiprintf_r+0x130>
 8009df2:	7863      	ldrb	r3, [r4, #1]
 8009df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df6:	d132      	bne.n	8009e5e <_svfiprintf_r+0x186>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9203      	str	r2, [sp, #12]
 8009e00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e04:	3402      	adds	r4, #2
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ecc <_svfiprintf_r+0x1f4>
 8009e0c:	7821      	ldrb	r1, [r4, #0]
 8009e0e:	2203      	movs	r2, #3
 8009e10:	4650      	mov	r0, sl
 8009e12:	f7f6 fa0d 	bl	8000230 <memchr>
 8009e16:	b138      	cbz	r0, 8009e28 <_svfiprintf_r+0x150>
 8009e18:	9b04      	ldr	r3, [sp, #16]
 8009e1a:	eba0 000a 	sub.w	r0, r0, sl
 8009e1e:	2240      	movs	r2, #64	@ 0x40
 8009e20:	4082      	lsls	r2, r0
 8009e22:	4313      	orrs	r3, r2
 8009e24:	3401      	adds	r4, #1
 8009e26:	9304      	str	r3, [sp, #16]
 8009e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2c:	4824      	ldr	r0, [pc, #144]	@ (8009ec0 <_svfiprintf_r+0x1e8>)
 8009e2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e32:	2206      	movs	r2, #6
 8009e34:	f7f6 f9fc 	bl	8000230 <memchr>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d036      	beq.n	8009eaa <_svfiprintf_r+0x1d2>
 8009e3c:	4b21      	ldr	r3, [pc, #132]	@ (8009ec4 <_svfiprintf_r+0x1ec>)
 8009e3e:	bb1b      	cbnz	r3, 8009e88 <_svfiprintf_r+0x1b0>
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	3307      	adds	r3, #7
 8009e44:	f023 0307 	bic.w	r3, r3, #7
 8009e48:	3308      	adds	r3, #8
 8009e4a:	9303      	str	r3, [sp, #12]
 8009e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4e:	4433      	add	r3, r6
 8009e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e52:	e76a      	b.n	8009d2a <_svfiprintf_r+0x52>
 8009e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e58:	460c      	mov	r4, r1
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	e7a8      	b.n	8009db0 <_svfiprintf_r+0xd8>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	3401      	adds	r4, #1
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	4619      	mov	r1, r3
 8009e66:	f04f 0c0a 	mov.w	ip, #10
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e70:	3a30      	subs	r2, #48	@ 0x30
 8009e72:	2a09      	cmp	r2, #9
 8009e74:	d903      	bls.n	8009e7e <_svfiprintf_r+0x1a6>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0c6      	beq.n	8009e08 <_svfiprintf_r+0x130>
 8009e7a:	9105      	str	r1, [sp, #20]
 8009e7c:	e7c4      	b.n	8009e08 <_svfiprintf_r+0x130>
 8009e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e82:	4604      	mov	r4, r0
 8009e84:	2301      	movs	r3, #1
 8009e86:	e7f0      	b.n	8009e6a <_svfiprintf_r+0x192>
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec8 <_svfiprintf_r+0x1f0>)
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	4638      	mov	r0, r7
 8009e94:	f7fd fefa 	bl	8007c8c <_printf_float>
 8009e98:	1c42      	adds	r2, r0, #1
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	d1d6      	bne.n	8009e4c <_svfiprintf_r+0x174>
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	065b      	lsls	r3, r3, #25
 8009ea2:	f53f af2d 	bmi.w	8009d00 <_svfiprintf_r+0x28>
 8009ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ea8:	e72c      	b.n	8009d04 <_svfiprintf_r+0x2c>
 8009eaa:	ab03      	add	r3, sp, #12
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4b05      	ldr	r3, [pc, #20]	@ (8009ec8 <_svfiprintf_r+0x1f0>)
 8009eb2:	a904      	add	r1, sp, #16
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	f7fe f981 	bl	80081bc <_printf_i>
 8009eba:	e7ed      	b.n	8009e98 <_svfiprintf_r+0x1c0>
 8009ebc:	0800ac00 	.word	0x0800ac00
 8009ec0:	0800ac0a 	.word	0x0800ac0a
 8009ec4:	08007c8d 	.word	0x08007c8d
 8009ec8:	08009c21 	.word	0x08009c21
 8009ecc:	0800ac06 	.word	0x0800ac06

08009ed0 <__sflush_r>:
 8009ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	0716      	lsls	r6, r2, #28
 8009eda:	4605      	mov	r5, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	d454      	bmi.n	8009f8a <__sflush_r+0xba>
 8009ee0:	684b      	ldr	r3, [r1, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dc02      	bgt.n	8009eec <__sflush_r+0x1c>
 8009ee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dd48      	ble.n	8009f7e <__sflush_r+0xae>
 8009eec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009eee:	2e00      	cmp	r6, #0
 8009ef0:	d045      	beq.n	8009f7e <__sflush_r+0xae>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ef8:	682f      	ldr	r7, [r5, #0]
 8009efa:	6a21      	ldr	r1, [r4, #32]
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	d030      	beq.n	8009f62 <__sflush_r+0x92>
 8009f00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	0759      	lsls	r1, r3, #29
 8009f06:	d505      	bpl.n	8009f14 <__sflush_r+0x44>
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	1ad2      	subs	r2, r2, r3
 8009f0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f0e:	b10b      	cbz	r3, 8009f14 <__sflush_r+0x44>
 8009f10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f12:	1ad2      	subs	r2, r2, r3
 8009f14:	2300      	movs	r3, #0
 8009f16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f18:	6a21      	ldr	r1, [r4, #32]
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b0      	blx	r6
 8009f1e:	1c43      	adds	r3, r0, #1
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	d106      	bne.n	8009f32 <__sflush_r+0x62>
 8009f24:	6829      	ldr	r1, [r5, #0]
 8009f26:	291d      	cmp	r1, #29
 8009f28:	d82b      	bhi.n	8009f82 <__sflush_r+0xb2>
 8009f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8009fd4 <__sflush_r+0x104>)
 8009f2c:	410a      	asrs	r2, r1
 8009f2e:	07d6      	lsls	r6, r2, #31
 8009f30:	d427      	bmi.n	8009f82 <__sflush_r+0xb2>
 8009f32:	2200      	movs	r2, #0
 8009f34:	6062      	str	r2, [r4, #4]
 8009f36:	04d9      	lsls	r1, r3, #19
 8009f38:	6922      	ldr	r2, [r4, #16]
 8009f3a:	6022      	str	r2, [r4, #0]
 8009f3c:	d504      	bpl.n	8009f48 <__sflush_r+0x78>
 8009f3e:	1c42      	adds	r2, r0, #1
 8009f40:	d101      	bne.n	8009f46 <__sflush_r+0x76>
 8009f42:	682b      	ldr	r3, [r5, #0]
 8009f44:	b903      	cbnz	r3, 8009f48 <__sflush_r+0x78>
 8009f46:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f4a:	602f      	str	r7, [r5, #0]
 8009f4c:	b1b9      	cbz	r1, 8009f7e <__sflush_r+0xae>
 8009f4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f52:	4299      	cmp	r1, r3
 8009f54:	d002      	beq.n	8009f5c <__sflush_r+0x8c>
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7ff fa96 	bl	8009488 <_free_r>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f60:	e00d      	b.n	8009f7e <__sflush_r+0xae>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b0      	blx	r6
 8009f68:	4602      	mov	r2, r0
 8009f6a:	1c50      	adds	r0, r2, #1
 8009f6c:	d1c9      	bne.n	8009f02 <__sflush_r+0x32>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0c6      	beq.n	8009f02 <__sflush_r+0x32>
 8009f74:	2b1d      	cmp	r3, #29
 8009f76:	d001      	beq.n	8009f7c <__sflush_r+0xac>
 8009f78:	2b16      	cmp	r3, #22
 8009f7a:	d11e      	bne.n	8009fba <__sflush_r+0xea>
 8009f7c:	602f      	str	r7, [r5, #0]
 8009f7e:	2000      	movs	r0, #0
 8009f80:	e022      	b.n	8009fc8 <__sflush_r+0xf8>
 8009f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f86:	b21b      	sxth	r3, r3
 8009f88:	e01b      	b.n	8009fc2 <__sflush_r+0xf2>
 8009f8a:	690f      	ldr	r7, [r1, #16]
 8009f8c:	2f00      	cmp	r7, #0
 8009f8e:	d0f6      	beq.n	8009f7e <__sflush_r+0xae>
 8009f90:	0793      	lsls	r3, r2, #30
 8009f92:	680e      	ldr	r6, [r1, #0]
 8009f94:	bf08      	it	eq
 8009f96:	694b      	ldreq	r3, [r1, #20]
 8009f98:	600f      	str	r7, [r1, #0]
 8009f9a:	bf18      	it	ne
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	eba6 0807 	sub.w	r8, r6, r7
 8009fa2:	608b      	str	r3, [r1, #8]
 8009fa4:	f1b8 0f00 	cmp.w	r8, #0
 8009fa8:	dde9      	ble.n	8009f7e <__sflush_r+0xae>
 8009faa:	6a21      	ldr	r1, [r4, #32]
 8009fac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009fae:	4643      	mov	r3, r8
 8009fb0:	463a      	mov	r2, r7
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b0      	blx	r6
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	dc08      	bgt.n	8009fcc <__sflush_r+0xfc>
 8009fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fcc:	4407      	add	r7, r0
 8009fce:	eba8 0800 	sub.w	r8, r8, r0
 8009fd2:	e7e7      	b.n	8009fa4 <__sflush_r+0xd4>
 8009fd4:	dfbffffe 	.word	0xdfbffffe

08009fd8 <_fflush_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	690b      	ldr	r3, [r1, #16]
 8009fdc:	4605      	mov	r5, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	b913      	cbnz	r3, 8009fe8 <_fflush_r+0x10>
 8009fe2:	2500      	movs	r5, #0
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	b118      	cbz	r0, 8009ff2 <_fflush_r+0x1a>
 8009fea:	6a03      	ldr	r3, [r0, #32]
 8009fec:	b90b      	cbnz	r3, 8009ff2 <_fflush_r+0x1a>
 8009fee:	f7fe fa91 	bl	8008514 <__sinit>
 8009ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0f3      	beq.n	8009fe2 <_fflush_r+0xa>
 8009ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ffc:	07d0      	lsls	r0, r2, #31
 8009ffe:	d404      	bmi.n	800a00a <_fflush_r+0x32>
 800a000:	0599      	lsls	r1, r3, #22
 800a002:	d402      	bmi.n	800a00a <_fflush_r+0x32>
 800a004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a006:	f7fe fbe2 	bl	80087ce <__retarget_lock_acquire_recursive>
 800a00a:	4628      	mov	r0, r5
 800a00c:	4621      	mov	r1, r4
 800a00e:	f7ff ff5f 	bl	8009ed0 <__sflush_r>
 800a012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a014:	07da      	lsls	r2, r3, #31
 800a016:	4605      	mov	r5, r0
 800a018:	d4e4      	bmi.n	8009fe4 <_fflush_r+0xc>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	059b      	lsls	r3, r3, #22
 800a01e:	d4e1      	bmi.n	8009fe4 <_fflush_r+0xc>
 800a020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a022:	f7fe fbd5 	bl	80087d0 <__retarget_lock_release_recursive>
 800a026:	e7dd      	b.n	8009fe4 <_fflush_r+0xc>

0800a028 <memmove>:
 800a028:	4288      	cmp	r0, r1
 800a02a:	b510      	push	{r4, lr}
 800a02c:	eb01 0402 	add.w	r4, r1, r2
 800a030:	d902      	bls.n	800a038 <memmove+0x10>
 800a032:	4284      	cmp	r4, r0
 800a034:	4623      	mov	r3, r4
 800a036:	d807      	bhi.n	800a048 <memmove+0x20>
 800a038:	1e43      	subs	r3, r0, #1
 800a03a:	42a1      	cmp	r1, r4
 800a03c:	d008      	beq.n	800a050 <memmove+0x28>
 800a03e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a042:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a046:	e7f8      	b.n	800a03a <memmove+0x12>
 800a048:	4402      	add	r2, r0
 800a04a:	4601      	mov	r1, r0
 800a04c:	428a      	cmp	r2, r1
 800a04e:	d100      	bne.n	800a052 <memmove+0x2a>
 800a050:	bd10      	pop	{r4, pc}
 800a052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a05a:	e7f7      	b.n	800a04c <memmove+0x24>

0800a05c <__assert_func>:
 800a05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a05e:	4614      	mov	r4, r2
 800a060:	461a      	mov	r2, r3
 800a062:	4b09      	ldr	r3, [pc, #36]	@ (800a088 <__assert_func+0x2c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4605      	mov	r5, r0
 800a068:	68d8      	ldr	r0, [r3, #12]
 800a06a:	b954      	cbnz	r4, 800a082 <__assert_func+0x26>
 800a06c:	4b07      	ldr	r3, [pc, #28]	@ (800a08c <__assert_func+0x30>)
 800a06e:	461c      	mov	r4, r3
 800a070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a074:	9100      	str	r1, [sp, #0]
 800a076:	462b      	mov	r3, r5
 800a078:	4905      	ldr	r1, [pc, #20]	@ (800a090 <__assert_func+0x34>)
 800a07a:	f000 f86f 	bl	800a15c <fiprintf>
 800a07e:	f000 f87f 	bl	800a180 <abort>
 800a082:	4b04      	ldr	r3, [pc, #16]	@ (800a094 <__assert_func+0x38>)
 800a084:	e7f4      	b.n	800a070 <__assert_func+0x14>
 800a086:	bf00      	nop
 800a088:	200002b4 	.word	0x200002b4
 800a08c:	0800ac56 	.word	0x0800ac56
 800a090:	0800ac28 	.word	0x0800ac28
 800a094:	0800ac1b 	.word	0x0800ac1b

0800a098 <_calloc_r>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	fba1 5402 	umull	r5, r4, r1, r2
 800a09e:	b93c      	cbnz	r4, 800a0b0 <_calloc_r+0x18>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7fd fc4f 	bl	8007944 <_malloc_r>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	b928      	cbnz	r0, 800a0b6 <_calloc_r+0x1e>
 800a0aa:	2600      	movs	r6, #0
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	220c      	movs	r2, #12
 800a0b2:	6002      	str	r2, [r0, #0]
 800a0b4:	e7f9      	b.n	800a0aa <_calloc_r+0x12>
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	f7fe fac4 	bl	8008646 <memset>
 800a0be:	e7f5      	b.n	800a0ac <_calloc_r+0x14>

0800a0c0 <__ascii_mbtowc>:
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	b901      	cbnz	r1, 800a0c6 <__ascii_mbtowc+0x6>
 800a0c4:	a901      	add	r1, sp, #4
 800a0c6:	b142      	cbz	r2, 800a0da <__ascii_mbtowc+0x1a>
 800a0c8:	b14b      	cbz	r3, 800a0de <__ascii_mbtowc+0x1e>
 800a0ca:	7813      	ldrb	r3, [r2, #0]
 800a0cc:	600b      	str	r3, [r1, #0]
 800a0ce:	7812      	ldrb	r2, [r2, #0]
 800a0d0:	1e10      	subs	r0, r2, #0
 800a0d2:	bf18      	it	ne
 800a0d4:	2001      	movne	r0, #1
 800a0d6:	b002      	add	sp, #8
 800a0d8:	4770      	bx	lr
 800a0da:	4610      	mov	r0, r2
 800a0dc:	e7fb      	b.n	800a0d6 <__ascii_mbtowc+0x16>
 800a0de:	f06f 0001 	mvn.w	r0, #1
 800a0e2:	e7f8      	b.n	800a0d6 <__ascii_mbtowc+0x16>

0800a0e4 <_realloc_r>:
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4615      	mov	r5, r2
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	b921      	cbnz	r1, 800a0fa <_realloc_r+0x16>
 800a0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	f7fd bc25 	b.w	8007944 <_malloc_r>
 800a0fa:	b92a      	cbnz	r2, 800a108 <_realloc_r+0x24>
 800a0fc:	f7ff f9c4 	bl	8009488 <_free_r>
 800a100:	2400      	movs	r4, #0
 800a102:	4620      	mov	r0, r4
 800a104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a108:	f000 f841 	bl	800a18e <_malloc_usable_size_r>
 800a10c:	4285      	cmp	r5, r0
 800a10e:	4606      	mov	r6, r0
 800a110:	d802      	bhi.n	800a118 <_realloc_r+0x34>
 800a112:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a116:	d8f4      	bhi.n	800a102 <_realloc_r+0x1e>
 800a118:	4629      	mov	r1, r5
 800a11a:	4640      	mov	r0, r8
 800a11c:	f7fd fc12 	bl	8007944 <_malloc_r>
 800a120:	4607      	mov	r7, r0
 800a122:	2800      	cmp	r0, #0
 800a124:	d0ec      	beq.n	800a100 <_realloc_r+0x1c>
 800a126:	42b5      	cmp	r5, r6
 800a128:	462a      	mov	r2, r5
 800a12a:	4621      	mov	r1, r4
 800a12c:	bf28      	it	cs
 800a12e:	4632      	movcs	r2, r6
 800a130:	f7fe fb4f 	bl	80087d2 <memcpy>
 800a134:	4621      	mov	r1, r4
 800a136:	4640      	mov	r0, r8
 800a138:	f7ff f9a6 	bl	8009488 <_free_r>
 800a13c:	463c      	mov	r4, r7
 800a13e:	e7e0      	b.n	800a102 <_realloc_r+0x1e>

0800a140 <__ascii_wctomb>:
 800a140:	4603      	mov	r3, r0
 800a142:	4608      	mov	r0, r1
 800a144:	b141      	cbz	r1, 800a158 <__ascii_wctomb+0x18>
 800a146:	2aff      	cmp	r2, #255	@ 0xff
 800a148:	d904      	bls.n	800a154 <__ascii_wctomb+0x14>
 800a14a:	228a      	movs	r2, #138	@ 0x8a
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	f04f 30ff 	mov.w	r0, #4294967295
 800a152:	4770      	bx	lr
 800a154:	700a      	strb	r2, [r1, #0]
 800a156:	2001      	movs	r0, #1
 800a158:	4770      	bx	lr
	...

0800a15c <fiprintf>:
 800a15c:	b40e      	push	{r1, r2, r3}
 800a15e:	b503      	push	{r0, r1, lr}
 800a160:	4601      	mov	r1, r0
 800a162:	ab03      	add	r3, sp, #12
 800a164:	4805      	ldr	r0, [pc, #20]	@ (800a17c <fiprintf+0x20>)
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	f000 f83f 	bl	800a1f0 <_vfiprintf_r>
 800a172:	b002      	add	sp, #8
 800a174:	f85d eb04 	ldr.w	lr, [sp], #4
 800a178:	b003      	add	sp, #12
 800a17a:	4770      	bx	lr
 800a17c:	200002b4 	.word	0x200002b4

0800a180 <abort>:
 800a180:	b508      	push	{r3, lr}
 800a182:	2006      	movs	r0, #6
 800a184:	f000 fa08 	bl	800a598 <raise>
 800a188:	2001      	movs	r0, #1
 800a18a:	f7f8 ff09 	bl	8002fa0 <_exit>

0800a18e <_malloc_usable_size_r>:
 800a18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a192:	1f18      	subs	r0, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfbc      	itt	lt
 800a198:	580b      	ldrlt	r3, [r1, r0]
 800a19a:	18c0      	addlt	r0, r0, r3
 800a19c:	4770      	bx	lr

0800a19e <__sfputc_r>:
 800a19e:	6893      	ldr	r3, [r2, #8]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	b410      	push	{r4}
 800a1a6:	6093      	str	r3, [r2, #8]
 800a1a8:	da08      	bge.n	800a1bc <__sfputc_r+0x1e>
 800a1aa:	6994      	ldr	r4, [r2, #24]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	db01      	blt.n	800a1b4 <__sfputc_r+0x16>
 800a1b0:	290a      	cmp	r1, #10
 800a1b2:	d103      	bne.n	800a1bc <__sfputc_r+0x1e>
 800a1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b8:	f000 b932 	b.w	800a420 <__swbuf_r>
 800a1bc:	6813      	ldr	r3, [r2, #0]
 800a1be:	1c58      	adds	r0, r3, #1
 800a1c0:	6010      	str	r0, [r2, #0]
 800a1c2:	7019      	strb	r1, [r3, #0]
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <__sfputs_r>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	4614      	mov	r4, r2
 800a1d4:	18d5      	adds	r5, r2, r3
 800a1d6:	42ac      	cmp	r4, r5
 800a1d8:	d101      	bne.n	800a1de <__sfputs_r+0x12>
 800a1da:	2000      	movs	r0, #0
 800a1dc:	e007      	b.n	800a1ee <__sfputs_r+0x22>
 800a1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e2:	463a      	mov	r2, r7
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff ffda 	bl	800a19e <__sfputc_r>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d1f3      	bne.n	800a1d6 <__sfputs_r+0xa>
 800a1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1f0 <_vfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	b09d      	sub	sp, #116	@ 0x74
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	4698      	mov	r8, r3
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	b118      	cbz	r0, 800a208 <_vfiprintf_r+0x18>
 800a200:	6a03      	ldr	r3, [r0, #32]
 800a202:	b90b      	cbnz	r3, 800a208 <_vfiprintf_r+0x18>
 800a204:	f7fe f986 	bl	8008514 <__sinit>
 800a208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a20a:	07d9      	lsls	r1, r3, #31
 800a20c:	d405      	bmi.n	800a21a <_vfiprintf_r+0x2a>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	059a      	lsls	r2, r3, #22
 800a212:	d402      	bmi.n	800a21a <_vfiprintf_r+0x2a>
 800a214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a216:	f7fe fada 	bl	80087ce <__retarget_lock_acquire_recursive>
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	071b      	lsls	r3, r3, #28
 800a21e:	d501      	bpl.n	800a224 <_vfiprintf_r+0x34>
 800a220:	692b      	ldr	r3, [r5, #16]
 800a222:	b99b      	cbnz	r3, 800a24c <_vfiprintf_r+0x5c>
 800a224:	4629      	mov	r1, r5
 800a226:	4630      	mov	r0, r6
 800a228:	f000 f938 	bl	800a49c <__swsetup_r>
 800a22c:	b170      	cbz	r0, 800a24c <_vfiprintf_r+0x5c>
 800a22e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a230:	07dc      	lsls	r4, r3, #31
 800a232:	d504      	bpl.n	800a23e <_vfiprintf_r+0x4e>
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	b01d      	add	sp, #116	@ 0x74
 800a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	0598      	lsls	r0, r3, #22
 800a242:	d4f7      	bmi.n	800a234 <_vfiprintf_r+0x44>
 800a244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a246:	f7fe fac3 	bl	80087d0 <__retarget_lock_release_recursive>
 800a24a:	e7f3      	b.n	800a234 <_vfiprintf_r+0x44>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a250:	2320      	movs	r3, #32
 800a252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a256:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25a:	2330      	movs	r3, #48	@ 0x30
 800a25c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a40c <_vfiprintf_r+0x21c>
 800a260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a264:	f04f 0901 	mov.w	r9, #1
 800a268:	4623      	mov	r3, r4
 800a26a:	469a      	mov	sl, r3
 800a26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a270:	b10a      	cbz	r2, 800a276 <_vfiprintf_r+0x86>
 800a272:	2a25      	cmp	r2, #37	@ 0x25
 800a274:	d1f9      	bne.n	800a26a <_vfiprintf_r+0x7a>
 800a276:	ebba 0b04 	subs.w	fp, sl, r4
 800a27a:	d00b      	beq.n	800a294 <_vfiprintf_r+0xa4>
 800a27c:	465b      	mov	r3, fp
 800a27e:	4622      	mov	r2, r4
 800a280:	4629      	mov	r1, r5
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ffa2 	bl	800a1cc <__sfputs_r>
 800a288:	3001      	adds	r0, #1
 800a28a:	f000 80a7 	beq.w	800a3dc <_vfiprintf_r+0x1ec>
 800a28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a290:	445a      	add	r2, fp
 800a292:	9209      	str	r2, [sp, #36]	@ 0x24
 800a294:	f89a 3000 	ldrb.w	r3, [sl]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 809f 	beq.w	800a3dc <_vfiprintf_r+0x1ec>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2205      	movs	r2, #5
 800a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2be:	4853      	ldr	r0, [pc, #332]	@ (800a40c <_vfiprintf_r+0x21c>)
 800a2c0:	f7f5 ffb6 	bl	8000230 <memchr>
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	b9d8      	cbnz	r0, 800a300 <_vfiprintf_r+0x110>
 800a2c8:	06d1      	lsls	r1, r2, #27
 800a2ca:	bf44      	itt	mi
 800a2cc:	2320      	movmi	r3, #32
 800a2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2d2:	0713      	lsls	r3, r2, #28
 800a2d4:	bf44      	itt	mi
 800a2d6:	232b      	movmi	r3, #43	@ 0x2b
 800a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2e2:	d015      	beq.n	800a310 <_vfiprintf_r+0x120>
 800a2e4:	9a07      	ldr	r2, [sp, #28]
 800a2e6:	4654      	mov	r4, sl
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f04f 0c0a 	mov.w	ip, #10
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f4:	3b30      	subs	r3, #48	@ 0x30
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d94b      	bls.n	800a392 <_vfiprintf_r+0x1a2>
 800a2fa:	b1b0      	cbz	r0, 800a32a <_vfiprintf_r+0x13a>
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	e014      	b.n	800a32a <_vfiprintf_r+0x13a>
 800a300:	eba0 0308 	sub.w	r3, r0, r8
 800a304:	fa09 f303 	lsl.w	r3, r9, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	46a2      	mov	sl, r4
 800a30e:	e7d2      	b.n	800a2b6 <_vfiprintf_r+0xc6>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	1d19      	adds	r1, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9103      	str	r1, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbb      	ittet	lt
 800a31c:	425b      	neglt	r3, r3
 800a31e:	f042 0202 	orrlt.w	r2, r2, #2
 800a322:	9307      	strge	r3, [sp, #28]
 800a324:	9307      	strlt	r3, [sp, #28]
 800a326:	bfb8      	it	lt
 800a328:	9204      	strlt	r2, [sp, #16]
 800a32a:	7823      	ldrb	r3, [r4, #0]
 800a32c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a32e:	d10a      	bne.n	800a346 <_vfiprintf_r+0x156>
 800a330:	7863      	ldrb	r3, [r4, #1]
 800a332:	2b2a      	cmp	r3, #42	@ 0x2a
 800a334:	d132      	bne.n	800a39c <_vfiprintf_r+0x1ac>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	1d1a      	adds	r2, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9203      	str	r2, [sp, #12]
 800a33e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a342:	3402      	adds	r4, #2
 800a344:	9305      	str	r3, [sp, #20]
 800a346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a41c <_vfiprintf_r+0x22c>
 800a34a:	7821      	ldrb	r1, [r4, #0]
 800a34c:	2203      	movs	r2, #3
 800a34e:	4650      	mov	r0, sl
 800a350:	f7f5 ff6e 	bl	8000230 <memchr>
 800a354:	b138      	cbz	r0, 800a366 <_vfiprintf_r+0x176>
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	eba0 000a 	sub.w	r0, r0, sl
 800a35c:	2240      	movs	r2, #64	@ 0x40
 800a35e:	4082      	lsls	r2, r0
 800a360:	4313      	orrs	r3, r2
 800a362:	3401      	adds	r4, #1
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36a:	4829      	ldr	r0, [pc, #164]	@ (800a410 <_vfiprintf_r+0x220>)
 800a36c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a370:	2206      	movs	r2, #6
 800a372:	f7f5 ff5d 	bl	8000230 <memchr>
 800a376:	2800      	cmp	r0, #0
 800a378:	d03f      	beq.n	800a3fa <_vfiprintf_r+0x20a>
 800a37a:	4b26      	ldr	r3, [pc, #152]	@ (800a414 <_vfiprintf_r+0x224>)
 800a37c:	bb1b      	cbnz	r3, 800a3c6 <_vfiprintf_r+0x1d6>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	f023 0307 	bic.w	r3, r3, #7
 800a386:	3308      	adds	r3, #8
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a38c:	443b      	add	r3, r7
 800a38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a390:	e76a      	b.n	800a268 <_vfiprintf_r+0x78>
 800a392:	fb0c 3202 	mla	r2, ip, r2, r3
 800a396:	460c      	mov	r4, r1
 800a398:	2001      	movs	r0, #1
 800a39a:	e7a8      	b.n	800a2ee <_vfiprintf_r+0xfe>
 800a39c:	2300      	movs	r3, #0
 800a39e:	3401      	adds	r4, #1
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f04f 0c0a 	mov.w	ip, #10
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ae:	3a30      	subs	r2, #48	@ 0x30
 800a3b0:	2a09      	cmp	r2, #9
 800a3b2:	d903      	bls.n	800a3bc <_vfiprintf_r+0x1cc>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0c6      	beq.n	800a346 <_vfiprintf_r+0x156>
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	e7c4      	b.n	800a346 <_vfiprintf_r+0x156>
 800a3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7f0      	b.n	800a3a8 <_vfiprintf_r+0x1b8>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b12      	ldr	r3, [pc, #72]	@ (800a418 <_vfiprintf_r+0x228>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f7fd fc5b 	bl	8007c8c <_printf_float>
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	1c78      	adds	r0, r7, #1
 800a3da:	d1d6      	bne.n	800a38a <_vfiprintf_r+0x19a>
 800a3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3de:	07d9      	lsls	r1, r3, #31
 800a3e0:	d405      	bmi.n	800a3ee <_vfiprintf_r+0x1fe>
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	059a      	lsls	r2, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_vfiprintf_r+0x1fe>
 800a3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ea:	f7fe f9f1 	bl	80087d0 <__retarget_lock_release_recursive>
 800a3ee:	89ab      	ldrh	r3, [r5, #12]
 800a3f0:	065b      	lsls	r3, r3, #25
 800a3f2:	f53f af1f 	bmi.w	800a234 <_vfiprintf_r+0x44>
 800a3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3f8:	e71e      	b.n	800a238 <_vfiprintf_r+0x48>
 800a3fa:	ab03      	add	r3, sp, #12
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	462a      	mov	r2, r5
 800a400:	4b05      	ldr	r3, [pc, #20]	@ (800a418 <_vfiprintf_r+0x228>)
 800a402:	a904      	add	r1, sp, #16
 800a404:	4630      	mov	r0, r6
 800a406:	f7fd fed9 	bl	80081bc <_printf_i>
 800a40a:	e7e4      	b.n	800a3d6 <_vfiprintf_r+0x1e6>
 800a40c:	0800ac00 	.word	0x0800ac00
 800a410:	0800ac0a 	.word	0x0800ac0a
 800a414:	08007c8d 	.word	0x08007c8d
 800a418:	0800a1cd 	.word	0x0800a1cd
 800a41c:	0800ac06 	.word	0x0800ac06

0800a420 <__swbuf_r>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	460e      	mov	r6, r1
 800a424:	4614      	mov	r4, r2
 800a426:	4605      	mov	r5, r0
 800a428:	b118      	cbz	r0, 800a432 <__swbuf_r+0x12>
 800a42a:	6a03      	ldr	r3, [r0, #32]
 800a42c:	b90b      	cbnz	r3, 800a432 <__swbuf_r+0x12>
 800a42e:	f7fe f871 	bl	8008514 <__sinit>
 800a432:	69a3      	ldr	r3, [r4, #24]
 800a434:	60a3      	str	r3, [r4, #8]
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	071a      	lsls	r2, r3, #28
 800a43a:	d501      	bpl.n	800a440 <__swbuf_r+0x20>
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	b943      	cbnz	r3, 800a452 <__swbuf_r+0x32>
 800a440:	4621      	mov	r1, r4
 800a442:	4628      	mov	r0, r5
 800a444:	f000 f82a 	bl	800a49c <__swsetup_r>
 800a448:	b118      	cbz	r0, 800a452 <__swbuf_r+0x32>
 800a44a:	f04f 37ff 	mov.w	r7, #4294967295
 800a44e:	4638      	mov	r0, r7
 800a450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	6922      	ldr	r2, [r4, #16]
 800a456:	1a98      	subs	r0, r3, r2
 800a458:	6963      	ldr	r3, [r4, #20]
 800a45a:	b2f6      	uxtb	r6, r6
 800a45c:	4283      	cmp	r3, r0
 800a45e:	4637      	mov	r7, r6
 800a460:	dc05      	bgt.n	800a46e <__swbuf_r+0x4e>
 800a462:	4621      	mov	r1, r4
 800a464:	4628      	mov	r0, r5
 800a466:	f7ff fdb7 	bl	8009fd8 <_fflush_r>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d1ed      	bne.n	800a44a <__swbuf_r+0x2a>
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	3b01      	subs	r3, #1
 800a472:	60a3      	str	r3, [r4, #8]
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	6022      	str	r2, [r4, #0]
 800a47a:	701e      	strb	r6, [r3, #0]
 800a47c:	6962      	ldr	r2, [r4, #20]
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	429a      	cmp	r2, r3
 800a482:	d004      	beq.n	800a48e <__swbuf_r+0x6e>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	07db      	lsls	r3, r3, #31
 800a488:	d5e1      	bpl.n	800a44e <__swbuf_r+0x2e>
 800a48a:	2e0a      	cmp	r6, #10
 800a48c:	d1df      	bne.n	800a44e <__swbuf_r+0x2e>
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f7ff fda1 	bl	8009fd8 <_fflush_r>
 800a496:	2800      	cmp	r0, #0
 800a498:	d0d9      	beq.n	800a44e <__swbuf_r+0x2e>
 800a49a:	e7d6      	b.n	800a44a <__swbuf_r+0x2a>

0800a49c <__swsetup_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4b29      	ldr	r3, [pc, #164]	@ (800a544 <__swsetup_r+0xa8>)
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	b118      	cbz	r0, 800a4b0 <__swsetup_r+0x14>
 800a4a8:	6a03      	ldr	r3, [r0, #32]
 800a4aa:	b90b      	cbnz	r3, 800a4b0 <__swsetup_r+0x14>
 800a4ac:	f7fe f832 	bl	8008514 <__sinit>
 800a4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4b4:	0719      	lsls	r1, r3, #28
 800a4b6:	d422      	bmi.n	800a4fe <__swsetup_r+0x62>
 800a4b8:	06da      	lsls	r2, r3, #27
 800a4ba:	d407      	bmi.n	800a4cc <__swsetup_r+0x30>
 800a4bc:	2209      	movs	r2, #9
 800a4be:	602a      	str	r2, [r5, #0]
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ca:	e033      	b.n	800a534 <__swsetup_r+0x98>
 800a4cc:	0758      	lsls	r0, r3, #29
 800a4ce:	d512      	bpl.n	800a4f6 <__swsetup_r+0x5a>
 800a4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4d2:	b141      	cbz	r1, 800a4e6 <__swsetup_r+0x4a>
 800a4d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4d8:	4299      	cmp	r1, r3
 800a4da:	d002      	beq.n	800a4e2 <__swsetup_r+0x46>
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f7fe ffd3 	bl	8009488 <_free_r>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	6063      	str	r3, [r4, #4]
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f043 0308 	orr.w	r3, r3, #8
 800a4fc:	81a3      	strh	r3, [r4, #12]
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	b94b      	cbnz	r3, 800a516 <__swsetup_r+0x7a>
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a50c:	d003      	beq.n	800a516 <__swsetup_r+0x7a>
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f000 f883 	bl	800a61c <__smakebuf_r>
 800a516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a51a:	f013 0201 	ands.w	r2, r3, #1
 800a51e:	d00a      	beq.n	800a536 <__swsetup_r+0x9a>
 800a520:	2200      	movs	r2, #0
 800a522:	60a2      	str	r2, [r4, #8]
 800a524:	6962      	ldr	r2, [r4, #20]
 800a526:	4252      	negs	r2, r2
 800a528:	61a2      	str	r2, [r4, #24]
 800a52a:	6922      	ldr	r2, [r4, #16]
 800a52c:	b942      	cbnz	r2, 800a540 <__swsetup_r+0xa4>
 800a52e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a532:	d1c5      	bne.n	800a4c0 <__swsetup_r+0x24>
 800a534:	bd38      	pop	{r3, r4, r5, pc}
 800a536:	0799      	lsls	r1, r3, #30
 800a538:	bf58      	it	pl
 800a53a:	6962      	ldrpl	r2, [r4, #20]
 800a53c:	60a2      	str	r2, [r4, #8]
 800a53e:	e7f4      	b.n	800a52a <__swsetup_r+0x8e>
 800a540:	2000      	movs	r0, #0
 800a542:	e7f7      	b.n	800a534 <__swsetup_r+0x98>
 800a544:	200002b4 	.word	0x200002b4

0800a548 <_raise_r>:
 800a548:	291f      	cmp	r1, #31
 800a54a:	b538      	push	{r3, r4, r5, lr}
 800a54c:	4605      	mov	r5, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	d904      	bls.n	800a55c <_raise_r+0x14>
 800a552:	2316      	movs	r3, #22
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	f04f 30ff 	mov.w	r0, #4294967295
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a55e:	b112      	cbz	r2, 800a566 <_raise_r+0x1e>
 800a560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a564:	b94b      	cbnz	r3, 800a57a <_raise_r+0x32>
 800a566:	4628      	mov	r0, r5
 800a568:	f000 f830 	bl	800a5cc <_getpid_r>
 800a56c:	4622      	mov	r2, r4
 800a56e:	4601      	mov	r1, r0
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a576:	f000 b817 	b.w	800a5a8 <_kill_r>
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d00a      	beq.n	800a594 <_raise_r+0x4c>
 800a57e:	1c59      	adds	r1, r3, #1
 800a580:	d103      	bne.n	800a58a <_raise_r+0x42>
 800a582:	2316      	movs	r3, #22
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	2001      	movs	r0, #1
 800a588:	e7e7      	b.n	800a55a <_raise_r+0x12>
 800a58a:	2100      	movs	r1, #0
 800a58c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a590:	4620      	mov	r0, r4
 800a592:	4798      	blx	r3
 800a594:	2000      	movs	r0, #0
 800a596:	e7e0      	b.n	800a55a <_raise_r+0x12>

0800a598 <raise>:
 800a598:	4b02      	ldr	r3, [pc, #8]	@ (800a5a4 <raise+0xc>)
 800a59a:	4601      	mov	r1, r0
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	f7ff bfd3 	b.w	800a548 <_raise_r>
 800a5a2:	bf00      	nop
 800a5a4:	200002b4 	.word	0x200002b4

0800a5a8 <_kill_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	@ (800a5c8 <_kill_r+0x20>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	602b      	str	r3, [r5, #0]
 800a5b6:	f7f8 fce3 	bl	8002f80 <_kill>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	d102      	bne.n	800a5c4 <_kill_r+0x1c>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	b103      	cbz	r3, 800a5c4 <_kill_r+0x1c>
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	bf00      	nop
 800a5c8:	2001e75c 	.word	0x2001e75c

0800a5cc <_getpid_r>:
 800a5cc:	f7f8 bcd0 	b.w	8002f70 <_getpid>

0800a5d0 <__swhatbuf_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	b096      	sub	sp, #88	@ 0x58
 800a5dc:	4615      	mov	r5, r2
 800a5de:	461e      	mov	r6, r3
 800a5e0:	da0d      	bge.n	800a5fe <__swhatbuf_r+0x2e>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5e8:	f04f 0100 	mov.w	r1, #0
 800a5ec:	bf14      	ite	ne
 800a5ee:	2340      	movne	r3, #64	@ 0x40
 800a5f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	6031      	str	r1, [r6, #0]
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	b016      	add	sp, #88	@ 0x58
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	466a      	mov	r2, sp
 800a600:	f000 f848 	bl	800a694 <_fstat_r>
 800a604:	2800      	cmp	r0, #0
 800a606:	dbec      	blt.n	800a5e2 <__swhatbuf_r+0x12>
 800a608:	9901      	ldr	r1, [sp, #4]
 800a60a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a60e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a612:	4259      	negs	r1, r3
 800a614:	4159      	adcs	r1, r3
 800a616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a61a:	e7eb      	b.n	800a5f4 <__swhatbuf_r+0x24>

0800a61c <__smakebuf_r>:
 800a61c:	898b      	ldrh	r3, [r1, #12]
 800a61e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a620:	079d      	lsls	r5, r3, #30
 800a622:	4606      	mov	r6, r0
 800a624:	460c      	mov	r4, r1
 800a626:	d507      	bpl.n	800a638 <__smakebuf_r+0x1c>
 800a628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	2301      	movs	r3, #1
 800a632:	6163      	str	r3, [r4, #20]
 800a634:	b003      	add	sp, #12
 800a636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a638:	ab01      	add	r3, sp, #4
 800a63a:	466a      	mov	r2, sp
 800a63c:	f7ff ffc8 	bl	800a5d0 <__swhatbuf_r>
 800a640:	9f00      	ldr	r7, [sp, #0]
 800a642:	4605      	mov	r5, r0
 800a644:	4639      	mov	r1, r7
 800a646:	4630      	mov	r0, r6
 800a648:	f7fd f97c 	bl	8007944 <_malloc_r>
 800a64c:	b948      	cbnz	r0, 800a662 <__smakebuf_r+0x46>
 800a64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a652:	059a      	lsls	r2, r3, #22
 800a654:	d4ee      	bmi.n	800a634 <__smakebuf_r+0x18>
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	e7e2      	b.n	800a628 <__smakebuf_r+0xc>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	6020      	str	r0, [r4, #0]
 800a666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a672:	b15b      	cbz	r3, 800a68c <__smakebuf_r+0x70>
 800a674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 f81d 	bl	800a6b8 <_isatty_r>
 800a67e:	b128      	cbz	r0, 800a68c <__smakebuf_r+0x70>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	431d      	orrs	r5, r3
 800a690:	81a5      	strh	r5, [r4, #12]
 800a692:	e7cf      	b.n	800a634 <__smakebuf_r+0x18>

0800a694 <_fstat_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d07      	ldr	r5, [pc, #28]	@ (800a6b4 <_fstat_r+0x20>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	4611      	mov	r1, r2
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	f7f8 fccd 	bl	8003040 <_fstat>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	d102      	bne.n	800a6b0 <_fstat_r+0x1c>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	b103      	cbz	r3, 800a6b0 <_fstat_r+0x1c>
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	bd38      	pop	{r3, r4, r5, pc}
 800a6b2:	bf00      	nop
 800a6b4:	2001e75c 	.word	0x2001e75c

0800a6b8 <_isatty_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d06      	ldr	r5, [pc, #24]	@ (800a6d4 <_isatty_r+0x1c>)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4604      	mov	r4, r0
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	602b      	str	r3, [r5, #0]
 800a6c4:	f7f8 fccc 	bl	8003060 <_isatty>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_isatty_r+0x1a>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_isatty_r+0x1a>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	2001e75c 	.word	0x2001e75c

0800a6d8 <_init>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	bf00      	nop
 800a6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6de:	bc08      	pop	{r3}
 800a6e0:	469e      	mov	lr, r3
 800a6e2:	4770      	bx	lr

0800a6e4 <_fini>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	bf00      	nop
 800a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ea:	bc08      	pop	{r3}
 800a6ec:	469e      	mov	lr, r3
 800a6ee:	4770      	bx	lr
