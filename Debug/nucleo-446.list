
nucleo-446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800a178  0800a178  0000b178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b8  0800a6b8  0000c470  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b8  0800a6b8  0000b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6c0  0800a6c0  0000c470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c0  0800a6c0  0000b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c4  0800a6c4  0000b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800a6c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e2ac  20000470  0800ab38  0000c470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e71c  0800ab38  0000c71c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152df  00000000  00000000  0000c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc5  00000000  00000000  0002177f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00024748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc4  00000000  00000000  000258d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ea8  00000000  00000000  00026694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016da6  00000000  00000000  0004a53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6d73  00000000  00000000  000612e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b60  00000000  00000000  00138098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000470 	.word	0x20000470
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a160 	.word	0x0800a160

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000474 	.word	0x20000474
 800020c:	0800a160 	.word	0x0800a160

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <ad717x_set_channel_status>:
 *			    	and False in case of Disable
 * @return Returns 0 for success or negative error code in case of failure.
*******************************************************************************/
int ad717x_set_channel_status(ad717x_dev *device, uint8_t channel_id,
			      bool channel_status)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *chn_register;
	int ret;

	if (!device)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <ad717x_set_channel_status+0x1a>
		return -EINVAL;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f10:	e031      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	/* Point to the Channel register */
	chn_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	3310      	adds	r3, #16
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fa40 	bl	80013a0 <AD717X_GetReg>
 8000f20:	60f8      	str	r0, [r7, #12]
	if (!chn_register)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <ad717x_set_channel_status+0x34>
		return -EINVAL;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f2a:	e024      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	if (channel_status)
 8000f2c:	78bb      	ldrb	r3, [r7, #2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <ad717x_set_channel_status+0x48>
		/* Assign the Channel enable bit and write to channel register */
		chn_register->value |= AD717X_CHMAP_REG_CH_EN;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	e005      	b.n	8000f4c <ad717x_set_channel_status+0x54>
	else
		chn_register->value &= ~(AD717X_CHMAP_REG_CH_EN);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id);
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fae3 	bl	8001520 <AD717X_WriteRegister>
 8000f5a:	60b8      	str	r0, [r7, #8]
	if (ret < 0)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da01      	bge.n	8000f66 <ad717x_set_channel_status+0x6e>
		return ret;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	e007      	b.n	8000f76 <ad717x_set_channel_status+0x7e>
	device->chan_map[channel_id].channel_enable = channel_status;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	330a      	adds	r3, #10
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	78ba      	ldrb	r2, [r7, #2]
 8000f72:	719a      	strb	r2, [r3, #6]

	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	ffffd929 	.word	0xffffd929

08000f84 <ad717x_set_adc_mode>:
 * @param device - AD717x Device Descriptor
 * @param adc_mode - ADC Mode to be configured
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_adc_mode(ad717x_dev *device, enum ad717x_mode adc_mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <ad717x_set_adc_mode+0x16>
		return -EINVAL;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000f98:	e026      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Retrieve the ADC Mode reigster */
	adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f9ff 	bl	80013a0 <AD717X_GetReg>
 8000fa2:	60f8      	str	r0, [r7, #12]
	if (!adc_mode_reg)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <ad717x_set_adc_mode+0x2a>
		return -EINVAL;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fac:	e01c      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Clear the Mode[6:4] bits in the ADC Mode Register */
	adc_mode_reg->value &= ~(AD717X_ADCMODE_REG_MODE_MSK);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	605a      	str	r2, [r3, #4]

	/* Set the required conversion mode, write to register */
	adc_mode_reg->value |= AD717X_ADCMODE_REG_MODE(adc_mode);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	605a      	str	r2, [r3, #4]
	device->mode = adc_mode;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 faa2 	bl	8001520 <AD717X_WriteRegister>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da01      	bge.n	8000fe6 <ad717x_set_adc_mode+0x62>
		return -EINVAL;
 8000fe2:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fe4:	e000      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>



	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffd929 	.word	0xffffd929

08000ff4 <ad717x_connect_analog_input>:
 * @param analog_input - Analog Inputs to the Channel
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_connect_analog_input(ad717x_dev *device, uint8_t channel_id,
				union ad717x_analog_inputs analog_input)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803a      	strh	r2, [r7, #0]
 8001000:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *channel_reg;

	if (!device)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <ad717x_connect_analog_input+0x18>
		return -EINVAL;
 8001008:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 800100a:	e079      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	/* Retrieve the channel register */
	channel_reg = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	3310      	adds	r3, #16
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f9c3 	bl	80013a0 <AD717X_GetReg>
 800101a:	60f8      	str	r0, [r7, #12]
	if (!channel_reg)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <ad717x_connect_analog_input+0x32>
		return -EINVAL;
 8001022:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001024:	e06c      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	switch ((uint8_t)device->active_device) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	2b04      	cmp	r3, #4
 800102c:	dc02      	bgt.n	8001034 <ad717x_connect_analog_input+0x40>
 800102e:	2b00      	cmp	r3, #0
 8001030:	da04      	bge.n	800103c <ad717x_connect_analog_input+0x48>
 8001032:	e062      	b.n	80010fa <ad717x_connect_analog_input+0x106>
 8001034:	3b05      	subs	r3, #5
 8001036:	2b06      	cmp	r3, #6
 8001038:	d85f      	bhi.n	80010fa <ad717x_connect_analog_input+0x106>
 800103a:	e024      	b.n	8001086 <ad717x_connect_analog_input+0x92>
	case ID_AD4112 :
	case ID_AD4114 :
	case ID_AD4115 :
	case ID_AD4116 :
		/* Clear and Set the required analog input pair to channel */
		channel_reg->value  &= ~AD717x_CHANNEL_INPUT_MASK;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	6053      	str	r3, [r2, #4]
		channel_reg->value |= AD4111_CHMAP_REG_INPUT(analog_input.analog_input_pairs);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001056:	431a      	orrs	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3310      	adds	r3, #16
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fa5b 	bl	8001520 <AD717X_WriteRegister>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da01      	bge.n	8001074 <ad717x_connect_analog_input+0x80>
			return -EINVAL;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001072:	e045      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001074:	78fb      	ldrb	r3, [r7, #3]
			analog_input.analog_input_pairs;
 8001076:	8839      	ldrh	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	330a      	adds	r3, #10
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	460a      	mov	r2, r1
 8001082:	811a      	strh	r2, [r3, #8]
		break;
 8001084:	e03b      	b.n	80010fe <ad717x_connect_analog_input+0x10a>
	case ID_AD7175_8:
	case ID_AD7176_2:
	case ID_AD7177_2:
	case ID_AD7172_2:
		/* Select the Positive Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINPOS_MSK;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]
		channel_reg->value |=  AD717X_CHMAP_REG_AINPOS(
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	783b      	ldrb	r3, [r7, #0]
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
					       analog_input.ainp.pos_analog_input);

		/* Select the Negative Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINNEG_MSK;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 021f 	bic.w	r2, r3, #31
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	605a      	str	r2, [r3, #4]
		channel_reg->value |= AD717X_CHMAP_REG_AINNEG(
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	431a      	orrs	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	605a      	str	r2, [r3, #4]
					      analog_input.ainp.neg_analog_input);
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	3310      	adds	r3, #16
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fa29 	bl	8001520 <AD717X_WriteRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da01      	bge.n	80010d8 <ad717x_connect_analog_input+0xe4>
			return -EINVAL;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010d6:	e013      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010d8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.pos_analog_input;
 80010da:	7839      	ldrb	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	330a      	adds	r3, #10
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	460a      	mov	r2, r1
 80010e6:	721a      	strb	r2, [r3, #8]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010e8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.neg_analog_input;
 80010ea:	7879      	ldrb	r1, [r7, #1]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	330a      	adds	r3, #10
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	725a      	strb	r2, [r3, #9]
		break;
 80010f8:	e001      	b.n	80010fe <ad717x_connect_analog_input+0x10a>

	default :
		return -EINVAL;
 80010fa:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010fc:	e000      	b.n	8001100 <ad717x_connect_analog_input+0x10c>
	}

	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	ffffd929 	.word	0xffffd929

0800110c <ad717x_assign_setup>:
 * @param channel_id - Channel ID (number)
 * @param setup - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_assign_setup(ad717x_dev *device, uint8_t channel_id, uint8_t setup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *p_register;

	if (!device)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <ad717x_assign_setup+0x1a>
		return -EINVAL;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001124:	e02f      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Retrieve the Channel Register */
	p_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	3310      	adds	r3, #16
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f936 	bl	80013a0 <AD717X_GetReg>
 8001134:	60f8      	str	r0, [r7, #12]
	if (!p_register)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <ad717x_assign_setup+0x34>
		return -EINVAL;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <ad717x_assign_setup+0x84>)
 800113e:	e022      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Assign set up to the chosen channel */
	p_register->value &= ~AD717X_CHMAP_REG_SETUP_SEL_MSK;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
	p_register->value |= AD717X_CHMAP_REG_SETUP_SEL(setup);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	78bb      	ldrb	r3, [r7, #2]
 8001152:	031b      	lsls	r3, r3, #12
 8001154:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	3310      	adds	r3, #16
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9da 	bl	8001520 <AD717X_WriteRegister>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <ad717x_assign_setup+0x6a>
		return -EINVAL;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001174:	e007      	b.n	8001186 <ad717x_assign_setup+0x7a>
	device->chan_map[channel_id].setup_sel = setup;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	330a      	adds	r3, #10
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	78ba      	ldrb	r2, [r7, #2]
 8001182:	71da      	strb	r2, [r3, #7]

	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	ffffd929 	.word	0xffffd929

08001194 <ad717x_set_polarity>:
 * @param bipolar - Polarity Select:True in case of Bipolar, False in case of Unipolar
 * @param setup_id - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_set_polarity(ad717x_dev* device, bool bipolar, uint8_t setup_id)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;

	if (!device)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <ad717x_set_polarity+0x1a>
		return -EINVAL;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011ac:	e030      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	3320      	adds	r3, #32
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8f2 	bl	80013a0 <AD717X_GetReg>
 80011bc:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <ad717x_set_polarity+0x34>
		return -EINVAL;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011c6:	e023      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Set the BI_UNIPOLAR bit in case of BIPOLAR operation */
	if (bipolar)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <ad717x_set_polarity+0x48>
		setup_reg->value |= AD717X_SETUP_CONF_REG_BI_UNIPOLAR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e005      	b.n	80011e8 <ad717x_set_polarity+0x54>
	else
		setup_reg->value &= ~(AD717X_SETUP_CONF_REG_BI_UNIPOLAR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	3320      	adds	r3, #32
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f995 	bl	8001520 <AD717X_WriteRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da01      	bge.n	8001200 <ad717x_set_polarity+0x6c>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011fe:	e007      	b.n	8001210 <ad717x_set_polarity+0x7c>
	device->setups[setup_id].bi_unipolar = bipolar;
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	3302      	adds	r3, #2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	715a      	strb	r2, [r3, #5]

	return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	ffffd929 	.word	0xffffd929

0800121c <ad717x_set_reference_source>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_reference_source(ad717x_dev* device,
				enum ad717x_reference_source ref_source, uint8_t setup_id)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <ad717x_set_reference_source+0x1a>
		return -EINVAL;
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001234:	e04e      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	3320      	adds	r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8ae 	bl	80013a0 <AD717X_GetReg>
 8001244:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <ad717x_set_reference_source+0x34>
		return -EINVAL;
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 800124e:	e041      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Choose the reference source for the selected setup */
	setup_reg->value &= ~AD717X_SETUP_CONF_REG_REF_SEL_MSK;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
	setup_reg->value |= (AD717X_SETUP_CONF_REG_REF_SEL(ref_source));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	3320      	adds	r3, #32
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f952 	bl	8001520 <AD717X_WriteRegister>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	da01      	bge.n	8001286 <ad717x_set_reference_source+0x6a>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001284:	e026      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
	device->setups[setup_id].ref_source = ref_source;
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	721a      	strb	r2, [r3, #8]

	/* Enable the REF_EN Bit in case of Internal reference */
	if (ref_source == INTERNAL_REF) {
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d11b      	bne.n	80012d2 <ad717x_set_reference_source+0xb6>
		/* Retrieve the ADC Mode reigster */
		adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f87f 	bl	80013a0 <AD717X_GetReg>
 80012a2:	60b8      	str	r0, [r7, #8]
		if (!adc_mode_reg)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <ad717x_set_reference_source+0x92>
			return -EINVAL;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ac:	e012      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

		/* Set the REF_EN Bit */
		adc_mode_reg->value |= AD717X_ADCMODE_REG_REF_EN;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f92f 	bl	8001520 <AD717X_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da01      	bge.n	80012cc <ad717x_set_reference_source+0xb0>
			return -EINVAL;
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ca:	e003      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
		device->ref_en = true;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	72da      	strb	r2, [r3, #11]
	}

	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	ffffd929 	.word	0xffffd929

080012e0 <ad717x_enable_input_buffer>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_enable_input_buffer(ad717x_dev* device,
			       bool inbuf_en, bool refbuf_en, uint8_t setup_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	70fb      	strb	r3, [r7, #3]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70bb      	strb	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	707b      	strb	r3, [r7, #1]
	ad717x_st_reg* setup_reg;

	if (!device)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <ad717x_enable_input_buffer+0x24>
		return -EINVAL;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001302:	e047      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	3320      	adds	r3, #32
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f847 	bl	80013a0 <AD717X_GetReg>
 8001312:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <ad717x_enable_input_buffer+0x3e>
		return -EINVAL;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 800131c:	e03a      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	if (inbuf_en)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <ad717x_enable_input_buffer+0x52>
		/* Enable input buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_AINBUF_P |
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	e005      	b.n	800133e <ad717x_enable_input_buffer+0x5e>
				     AD717X_SETUP_CONF_REG_AINBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_AINBUF_P |
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_AINBUF_N));
	if (refbuf_en)
 800133e:	78bb      	ldrb	r3, [r7, #2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <ad717x_enable_input_buffer+0x72>
		/* Enable reference buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_REFBUF_P |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f443 6240 	orr.w	r2, r3, #3072	@ 0xc00
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	e005      	b.n	800135e <ad717x_enable_input_buffer+0x7e>
				     AD717X_SETUP_CONF_REG_REFBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_REFBUF_P |
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_REFBUF_N));

	if (AD717X_WriteRegister(device,
 800135e:	787b      	ldrb	r3, [r7, #1]
 8001360:	3320      	adds	r3, #32
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f8da 	bl	8001520 <AD717X_WriteRegister>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	da01      	bge.n	8001376 <ad717x_enable_input_buffer+0x96>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001374:	e00e      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>
	device->setups[setup_id].input_buff = inbuf_en;
 8001376:	787b      	ldrb	r3, [r7, #1]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	71da      	strb	r2, [r3, #7]
	device->setups[setup_id].ref_buff = refbuf_en;
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	78ba      	ldrb	r2, [r7, #2]
 8001390:	719a      	strb	r2, [r3, #6]

	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	ffffd929 	.word	0xffffd929

080013a0 <AD717X_GetReg>:
*
* @return A pointer to the register if found or 0.
*******************************************************************************/
ad717x_st_reg *AD717X_GetReg(ad717x_dev *device,
			     uint8_t reg_address)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	ad717x_st_reg *reg = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]

	if (!device || !device->regs)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <AD717X_GetReg+0x1e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <AD717X_GetReg+0x22>
		return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e021      	b.n	8001406 <AD717X_GetReg+0x66>

	for (i = 0; i < device->num_regs; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e018      	b.n	80013fa <AD717X_GetReg+0x5a>
		if (device->regs[i].addr == reg_address) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d109      	bne.n	80013f4 <AD717X_GetReg+0x54>
			reg = &device->regs[i];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	60bb      	str	r3, [r7, #8]
			break;
 80013f2:	e007      	b.n	8001404 <AD717X_GetReg+0x64>
	for (i = 0; i < device->num_regs; i++) {
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a1b      	ldrb	r3, [r3, #8]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3e1      	bcc.n	80013c8 <AD717X_GetReg+0x28>
		}
	}

	return reg;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <AD717X_ReadRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_ReadRegister(ad717x_dev *device,
			    uint8_t addr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	@ 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	int32_t ret       = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t Tx = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t Rx [8] = {0};
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
//	uint8_t i         = 0;
//	uint8_t check8    = 0;
//	uint8_t msgBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	ad717x_st_reg *pReg;

	if(!device)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <AD717X_ReadRegister+0x2a>
		return INVALID_VAL;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	e063      	b.n	8001506 <AD717X_ReadRegister+0xf2>

	pReg = AD717X_GetReg(device, addr);
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	4619      	mov	r1, r3
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffac 	bl	80013a0 <AD717X_GetReg>
 8001448:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (!pReg)
 800144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <AD717X_ReadRegister+0x42>
		return INVALID_VAL;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	e057      	b.n	8001506 <AD717X_ReadRegister+0xf2>

	/* Build the Command word */
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
		    AD717X_COMM_REG_RA(pReg->addr);
 8001456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001460:	b25b      	sxtb	r3, r3
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
 8001462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 800146c:	701a      	strb	r2, [r3, #0]
	Tx = spi_read_reg.Tx;
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	spi_read_reg.pReg = pReg;
 8001476:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 8001478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147a:	6053      	str	r3, [r2, #4]
//	spi_read_reg.size = pReg->size;

	/* Read data from the device */

	if(device->mode == CONTINUOUS)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d103      	bne.n	800148e <AD717X_ReadRegister+0x7a>
		spi_status = READING;
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <AD717X_ReadRegister+0x100>)
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e03a      	b.n	8001504 <AD717X_ReadRegister+0xf0>
	else
	{
		HAL_SPI_Transmit(SPI, &Tx, 1, 100);
 800148e:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8001492:	2364      	movs	r3, #100	@ 0x64
 8001494:	2201      	movs	r2, #1
 8001496:	4820      	ldr	r0, [pc, #128]	@ (8001518 <AD717X_ReadRegister+0x104>)
 8001498:	f003 fb9d 	bl	8004bd6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0120 	add.w	r1, r7, #32
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <AD717X_ReadRegister+0x104>)
 80014aa:	f003 fcd8 	bl	8004e5e <HAL_SPI_Receive>
		pReg->value = 0;
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b8:	e011      	b.n	80014de <AD717X_ReadRegister+0xca>
			pReg->value <<= 8;
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	021a      	lsls	r2, r3, #8
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c2:	605a      	str	r2, [r3, #4]
			pReg->value += Rx[i];
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f107 0120 	add.w	r1, r7, #32
 80014cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014ce:	440a      	add	r2, r1
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	441a      	add	r2, r3
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80014d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014da:	3301      	adds	r3, #1
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbe8      	blt.n	80014ba <AD717X_ReadRegister+0xa6>
		}
		char hexString[24];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	461a      	mov	r2, r3
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	490a      	ldr	r1, [pc, #40]	@ (800151c <AD717X_ReadRegister+0x108>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 fd85 	bl	8008004 <siprintf>
		send_string(hexString);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fc6c 	bl	8001ddc <send_string>
	*/
	/* Build the result */

//	}

	return ret;
 8001504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001506:	4618      	mov	r0, r3
 8001508:	3738      	adds	r7, #56	@ 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2001e5b0 	.word	0x2001e5b0
 8001514:	2001e5ac 	.word	0x2001e5ac
 8001518:	2000048c 	.word	0x2000048c
 800151c:	0800a178 	.word	0x0800a178

08001520 <AD717X_WriteRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_WriteRegister(ad717x_dev *device,
			     uint8_t addr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	int32_t ret      = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
	int32_t regValue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint8_t wrBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001534:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <AD717X_WriteRegister+0xe0>)
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i        = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	76fb      	strb	r3, [r7, #27]
//	uint8_t crc8     = 0;
	ad717x_st_reg *preg;

	if(!device)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <AD717X_WriteRegister+0x32>
		return INVALID_VAL;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e051      	b.n	80015f6 <AD717X_WriteRegister+0xd6>

	preg = AD717X_GetReg(device, addr);
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff22 	bl	80013a0 <AD717X_GetReg>
 800155c:	6138      	str	r0, [r7, #16]
	if (!preg)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <AD717X_WriteRegister+0x4a>
		return INVALID_VAL;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e045      	b.n	80015f6 <AD717X_WriteRegister+0xd6>

	/* Build the Command word */
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
		   AD717X_COMM_REG_RA(preg->addr);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	681b      	ldr	r3, [r3, #0]
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001574:	b2db      	uxtb	r3, r3
 8001576:	723b      	strb	r3, [r7, #8]

	/* Fill the write buffer */
	regValue = preg->value;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	76fb      	strb	r3, [r7, #27]
 8001582:	e00f      	b.n	80015a4 <AD717X_WriteRegister+0x84>
		wrBuf[preg->size - i] = regValue & 0xFF;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	7efb      	ldrb	r3, [r7, #27]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	3320      	adds	r3, #32
 8001592:	443b      	add	r3, r7
 8001594:	f803 2c18 	strb.w	r2, [r3, #-24]
		regValue >>= 8;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	121b      	asrs	r3, r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800159e:	7efb      	ldrb	r3, [r7, #27]
 80015a0:	3301      	adds	r3, #1
 80015a2:	76fb      	strb	r3, [r7, #27]
 80015a4:	7efa      	ldrb	r2, [r7, #27]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbea      	blt.n	8001584 <AD717X_WriteRegister+0x64>
	/* Write data to the device */
//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       (device->useCRC != AD717X_DISABLE) ?
//				       preg->size + 2 : preg->size + 1);
	memcpy(spi_write_reg.Tx, wrBuf, 8);
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <AD717X_WriteRegister+0xe4>)
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ba:	e882 0003 	stmia.w	r2, {r0, r1}
	spi_write_reg.pReg = preg;
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <AD717X_WriteRegister+0xe4>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	60d3      	str	r3, [r2, #12]
//			ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
//
//		}
//
//	}
	if(device->mode == CONTINUOUS)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <AD717X_WriteRegister+0xb6>
		spi_status = WRITING;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <AD717X_WriteRegister+0xe8>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e00c      	b.n	80015f0 <AD717X_WriteRegister+0xd0>
	else
	{
		ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 0108 	add.w	r1, r7, #8
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <AD717X_WriteRegister+0xec>)
 80015e8:	f003 faf5 	bl	8004bd6 <HAL_SPI_Transmit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]
	}
//	ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
	ret = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
	return ret;
 80015f4:	697b      	ldr	r3, [r7, #20]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800a190 	.word	0x0800a190
 8001604:	2001e5b8 	.word	0x2001e5b8
 8001608:	2001e5ac 	.word	0x2001e5ac
 800160c:	2000048c 	.word	0x2000048c

08001610 <AD717X_Reset>:
* @param device - The handler of the instance of the driver.
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Reset(ad717x_dev *device)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
	uint8_t wrBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <AD717X_Reset+0x40>)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001626:	e883 0003 	stmia.w	r3, {r0, r1}

	if(!device)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <AD717X_Reset+0x26>
		return INVALID_VAL;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	e007      	b.n	8001646 <AD717X_Reset+0x36>

//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       8);
	HAL_SPI_Transmit(SPI, wrBuf, 8, 100);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	2364      	movs	r3, #100	@ 0x64
 800163c:	2208      	movs	r2, #8
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <AD717X_Reset+0x44>)
 8001640:	f003 fac9 	bl	8004bd6 <HAL_SPI_Transmit>
	return ret;
 8001644:	697b      	ldr	r3, [r7, #20]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	0800a198 	.word	0x0800a198
 8001654:	2000048c 	.word	0x2000048c

08001658 <AD717X_ComputeDataregSize>:
* @param device - The handler of the instance of the driver.
*
* @return 0in case of success or negative code in case of failure.
*******************************************************************************/
int32_t AD717X_ComputeDataregSize(ad717x_dev *device)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	ad717x_st_reg *reg_ptr;
	ad717x_st_reg *datareg_ptr;
	uint16_t case_var;

	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_IFMODE_REG);
 8001660:	2102      	movs	r1, #2
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe9c 	bl	80013a0 <AD717X_GetReg>
 8001668:	6178      	str	r0, [r7, #20]
	/* Get data register pointer */
	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
 800166a:	2104      	movs	r1, #4
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe97 	bl	80013a0 <AD717X_GetReg>
 8001672:	6138      	str	r0, [r7, #16]
	case_var = reg_ptr->value & (AD717X_IFMODE_REG_DATA_STAT |
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 800167e:	81fb      	strh	r3, [r7, #14]
				     AD717X_IFMODE_REG_DATA_WL16);

	/* Compute data register size */
	datareg_ptr->size = 3;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2203      	movs	r2, #3
 8001684:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_WL16) == AD717X_IFMODE_REG_DATA_WL16)
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <AD717X_ComputeDataregSize+0x42>
		datareg_ptr->size--;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_STAT) == AD717X_IFMODE_REG_DATA_STAT)
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <AD717X_ComputeDataregSize+0x56>
		datareg_ptr->size++;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]

	/* Get ID register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_ID_REG);
 80016ae:	2107      	movs	r1, #7
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe75 	bl	80013a0 <AD717X_GetReg>
 80016b6:	6178      	str	r0, [r7, #20]

	/* If the part is 32/24 bit wide add a byte to the read */
	if((reg_ptr->value & AD717X_ID_REG_MASK) == AD7177_2_ID_REG_VALUE)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80016c0:	4013      	ands	r3, r2
 80016c2:	f644 72d0 	movw	r2, #20432	@ 0x4fd0
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d104      	bne.n	80016d4 <AD717X_ComputeDataregSize+0x7c>
		datareg_ptr->size++;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <ad717x_configure_device_odr>:
 * @return 0 in case of success, negative error code otherwise
 */
int32_t ad717x_configure_device_odr(ad717x_dev *dev,
				    uint8_t filtcon_id,
				    uint8_t odr_sel)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *filtcon_reg;
	int32_t ret;

	/* Retrieve the FILTCON register */
	filtcon_reg = AD717X_GetReg(dev,
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	3328      	adds	r3, #40	@ 0x28
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe51 	bl	80013a0 <AD717X_GetReg>
 80016fe:	60f8      	str	r0, [r7, #12]
				    AD717X_FILTCON0_REG + filtcon_id);
	if (!filtcon_reg) {
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <ad717x_configure_device_odr+0x2a>
		return -EINVAL;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <ad717x_configure_device_odr+0x6c>)
 8001708:	e01b      	b.n	8001742 <ad717x_configure_device_odr+0x62>
	}

	/* Clear the ODR bits, configure the requested ODR */
	filtcon_reg->value &= ~(AD717x_ODR_MSK);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 021f 	bic.w	r2, r3, #31
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
	filtcon_reg->value |= AD717X_FILT_CONF_REG_ODR(odr_sel);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	431a      	orrs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(dev, AD717X_FILTCON0_REG + filtcon_id);
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	3328      	adds	r3, #40	@ 0x28
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fef6 	bl	8001520 <AD717X_WriteRegister>
 8001734:	60b8      	str	r0, [r7, #8]
	if (ret) {
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <ad717x_configure_device_odr+0x60>
		return ret;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	e000      	b.n	8001742 <ad717x_configure_device_odr+0x62>
	}

	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	ffffd929 	.word	0xffffd929

08001750 <AD717X_Init>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Init(ad717x_dev **device,
		    ad717x_init_param init_param)
{
 8001750:	b084      	sub	sp, #16
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800175e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;
	ad717x_st_reg *preg;
	uint8_t setup_index;
	uint8_t ch_index;

	dev = (ad717x_dev *)malloc(sizeof(*dev));
 8001762:	20bc      	movs	r0, #188	@ 0xbc
 8001764:	f005 fdfe 	bl	8007364 <malloc>
 8001768:	4603      	mov	r3, r0
 800176a:	613b      	str	r3, [r7, #16]
	if (!dev)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <AD717X_Init+0x28>
		return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e07d      	b.n	8001874 <AD717X_Init+0x124>

	dev->regs = init_param.regs;
 8001778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
	dev->num_regs = init_param.num_regs;
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	721a      	strb	r2, [r3, #8]
//	ret = no_os_spi_init(&dev->spi_desc, &init_param.spi_init);
//	if (ret < 0)
//		return ret;

	/*  Reset the device interface.*/
	ret = AD717X_Reset(dev);
 8001786:	6938      	ldr	r0, [r7, #16]
 8001788:	f7ff ff42 	bl	8001610 <AD717X_Reset>
 800178c:	60f8      	str	r0, [r7, #12]
	if (ret < 0)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da01      	bge.n	8001798 <AD717X_Init+0x48>
		return ret;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	e06d      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize ADC mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
	if(ret < 0)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	da01      	bge.n	80017a2 <AD717X_Init+0x52>
		return ret;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	e068      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize Interface mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
	if(ret < 0)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da01      	bge.n	80017ac <AD717X_Init+0x5c>
		return ret;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e063      	b.n	8001874 <AD717X_Init+0x124>

	/* Get CRC State */
//	ret = AD717X_UpdateCRCSetting(dev);
	if(ret < 0)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da01      	bge.n	80017b6 <AD717X_Init+0x66>
		return ret;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	e05e      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize registers AD717X_GPIOCON_REG through AD717X_OFFSET0_REG */
	preg = AD717X_GetReg(dev, AD717X_GPIOCON_REG);
 80017b6:	2106      	movs	r1, #6
 80017b8:	6938      	ldr	r0, [r7, #16]
 80017ba:	f7ff fdf1 	bl	80013a0 <AD717X_GetReg>
 80017be:	60b8      	str	r0, [r7, #8]
	if (!preg)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <AD717X_Init+0x7c>
		return INVALID_VAL;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e053      	b.n	8001874 <AD717X_Init+0x124>
//			break;
//		preg ++;
//	}

	/* Read ID register to identify the part */
	ret = AD717X_ReadRegister(dev, AD717X_ID_REG);
 80017cc:	2107      	movs	r1, #7
 80017ce:	6938      	ldr	r0, [r7, #16]
 80017d0:	f7ff fe20 	bl	8001414 <AD717X_ReadRegister>
 80017d4:	60f8      	str	r0, [r7, #12]
	if(ret < 0)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da01      	bge.n	80017e0 <AD717X_Init+0x90>
		return ret;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	e049      	b.n	8001874 <AD717X_Init+0x124>
	dev->active_device = init_param.active_device;
 80017e0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	729a      	strb	r2, [r3, #10]
	dev->num_channels = init_param.num_channels;
 80017e8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	731a      	strb	r2, [r3, #12]

	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
 80017f4:	e016      	b.n	8001824 <AD717X_Init+0xd4>
		/* Set Polarity */
//		ret = ad717x_set_polarity(dev, init_param.setups[setup_index].bi_unipolar,
//					  setup_index);
		if (ret < 0)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da01      	bge.n	8001800 <AD717X_Init+0xb0>
			return ret;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e039      	b.n	8001874 <AD717X_Init+0x124>

		/* Select the reference source */
//		ret = ad717x_set_reference_source(dev,
//						  init_param.setups[setup_index].ref_source, setup_index);
		if (ret < 0)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da01      	bge.n	800180a <AD717X_Init+0xba>
			return ret;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	e034      	b.n	8001874 <AD717X_Init+0x124>
		/* Enable reference and input buffers */
//		ret = ad717x_enable_input_buffer(dev,
//						 init_param.setups[setup_index].input_buff,
//						 init_param.setups[setup_index].ref_buff,
//						 setup_index);
		if (ret < 0)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da01      	bge.n	8001814 <AD717X_Init+0xc4>
			return ret;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e02f      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_configure_device_odr(dev, setup_index,
//						  init_param.filter_configuration[setup_index].odr);
		if (ret < 0)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	da01      	bge.n	800181e <AD717X_Init+0xce>
			return ret;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e02a      	b.n	8001874 <AD717X_Init+0x124>
	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	3301      	adds	r3, #1
 8001822:	75fb      	strb	r3, [r7, #23]
 8001824:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001828:	7dfa      	ldrb	r2, [r7, #23]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3e3      	bcc.n	80017f6 <AD717X_Init+0xa6>
	}

	/* Set Conversion Mode */
//	ret = ad717x_set_adc_mode(dev, init_param.mode);
	if (ret < 0)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da01      	bge.n	8001838 <AD717X_Init+0xe8>
		return ret;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	e01d      	b.n	8001874 <AD717X_Init+0x124>

	/*  Connect Analog Inputs, Assign Setup, Disable all channels */
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 8001838:	2300      	movs	r3, #0
 800183a:	75bb      	strb	r3, [r7, #22]
 800183c:	e011      	b.n	8001862 <AD717X_Init+0x112>
//		ret = ad717x_connect_analog_input(dev, ch_index,
//						  init_param.chan_map[ch_index].analog_inputs);
		if (ret < 0)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	da01      	bge.n	8001848 <AD717X_Init+0xf8>
			return ret;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	e015      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_assign_setup(dev, ch_index,
//					  init_param.chan_map[ch_index].setup_sel);
		if (ret < 0)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <AD717X_Init+0x102>
			return ret;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	e010      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_set_channel_status(dev,ch_index,
//						init_param.chan_map[ch_index].channel_enable);
		if (ret < 0)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da01      	bge.n	800185c <AD717X_Init+0x10c>
			return ret;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	e00b      	b.n	8001874 <AD717X_Init+0x124>
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	3301      	adds	r3, #1
 8001860:	75bb      	strb	r3, [r7, #22]
 8001862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001866:	7dba      	ldrb	r2, [r7, #22]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3e8      	bcc.n	800183e <AD717X_Init+0xee>
	}
	*device = dev;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

	return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800187e:	b004      	add	sp, #16
 8001880:	4770      	bx	lr
	...

08001884 <ad717x_set_clock>:

	return ret;
}

void ad717x_set_clock(ad717x_dev *dev, uint32_t clcck_sel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	ad717x_st_reg *pReg = AD717X_GetReg(dev, AD717X_ADCMODE_REG);
 800188e:	2101      	movs	r1, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fd85 	bl	80013a0 <AD717X_GetReg>
 8001896:	60f8      	str	r0, [r7, #12]

	pReg->value |= AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	4313      	orrs	r3, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	605a      	str	r2, [r3, #4]
	spi_write_reg.value = AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <ad717x_set_clock+0x48>)
 80018b8:	6093      	str	r3, [r2, #8]
	AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe2f 	bl	8001520 <AD717X_WriteRegister>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2001e5b8 	.word	0x2001e5b8

080018d0 <ad717x_set_data_stat>:

void ad717x_set_data_stat(ad717x_dev *dev, bool stat)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *reg_ptr;
//	ad717x_st_reg *datareg_ptr;
	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(dev, AD717X_IFMODE_REG);
 80018dc:	2102      	movs	r1, #2
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd5e 	bl	80013a0 <AD717X_GetReg>
 80018e4:	60f8      	str	r0, [r7, #12]
	/* Get data register pointer */
//	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
	if(stat)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <ad717x_set_data_stat+0x2a>
		reg_ptr->value |= AD717X_IFMODE_REG_DATA_STAT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	e005      	b.n	8001906 <ad717x_set_data_stat+0x36>
	else
		reg_ptr->value &= ~(AD717X_IFMODE_REG_DATA_STAT);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
	AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
 8001906:	2102      	movs	r1, #2
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fe09 	bl	8001520 <AD717X_WriteRegister>
	AD717X_ComputeDataregSize(dev);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fea2 	bl	8001658 <AD717X_ComputeDataregSize>

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <adc_to_buf>:
#include "ad717x.h"

void send_adc_data();

void adc_to_buf(uint32_t new_val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
//	if(adc_buff_idx == 0 && adc_channel_offset > 0)
//	{
//		adc_channel_offset -= 2;
//		return;
//	}
	if(adc_channel_offset == 0)
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <adc_to_buf+0x94>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d116      	bne.n	800195a <adc_to_buf+0x3e>
	{
		time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
 800192c:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <adc_to_buf+0x98>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <adc_to_buf+0x9c>)
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	b292      	uxth	r2, r2
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	b292      	uxth	r2, r2
 800193a:	4611      	mov	r1, r2
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <adc_to_buf+0xa0>)
 8001940:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_buff[adc_buff_idx / 2] = new_val;
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <adc_to_buf+0x9c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <adc_to_buf+0xa4>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001958:	e015      	b.n	8001986 <adc_to_buf+0x6a>
	}
	else
	{
		tq_time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <adc_to_buf+0x98>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <adc_to_buf+0x9c>)
 8001960:	8812      	ldrh	r2, [r2, #0]
 8001962:	b292      	uxth	r2, r2
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	b292      	uxth	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <adc_to_buf+0xa8>)
 800196e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		tq_buff[adc_buff_idx / 2] = new_val;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <adc_to_buf+0x9c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <adc_to_buf+0xac>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	adc_buff_idx ++;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <adc_to_buf+0x9c>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <adc_to_buf+0x9c>)
 8001992:	801a      	strh	r2, [r3, #0]
	if(adc_buff_idx >= ADC_BUFFER_SIZE * ENABLED_CHANNELS)
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <adc_to_buf+0x9c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b63      	cmp	r3, #99	@ 0x63
 800199c:	d904      	bls.n	80019a8 <adc_to_buf+0x8c>
	{
		send_adc_data();
 800199e:	f000 f815 	bl	80019cc <send_adc_data>
		adc_buff_idx = 0;
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <adc_to_buf+0x9c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
//		TIM.Instance->CNT = 0;
	}
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200010e0 	.word	0x200010e0
 80019b4:	2000053c 	.word	0x2000053c
 80019b8:	200010dc 	.word	0x200010dc
 80019bc:	20000dbc 	.word	0x20000dbc
 80019c0:	20000e84 	.word	0x20000e84
 80019c4:	20000f4c 	.word	0x20000f4c
 80019c8:	20001014 	.word	0x20001014

080019cc <send_adc_data>:

void send_adc_data()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	int array_length = sizeof(uint32_t) * ADC_BUFFER_SIZE;
 80019d2:	23c8      	movs	r3, #200	@ 0xc8
 80019d4:	607b      	str	r3, [r7, #4]

	sprintf((char*)tx_buffer, "{fdb,\r\n");
 80019d6:	4920      	ldr	r1, [pc, #128]	@ (8001a58 <send_adc_data+0x8c>)
 80019d8:	4820      	ldr	r0, [pc, #128]	@ (8001a5c <send_adc_data+0x90>)
 80019da:	f006 fb13 	bl	8008004 <siprintf>
	memcpy(tx_buffer + 7, (uint8_t*) time_buff, array_length);
 80019de:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <send_adc_data+0x94>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	491f      	ldr	r1, [pc, #124]	@ (8001a64 <send_adc_data+0x98>)
 80019e6:	f006 fc36 	bl	8008256 <memcpy>
	memcpy(tx_buffer + 7 + array_length, (uint8_t*) adc_buff, array_length);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3307      	adds	r3, #7
 80019ee:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <send_adc_data+0x90>)
 80019f0:	4413      	add	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	491c      	ldr	r1, [pc, #112]	@ (8001a68 <send_adc_data+0x9c>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 fc2d 	bl	8008256 <memcpy>
	memcpy(tx_buffer + 7 + 2 * array_length, (uint8_t*) tq_time_buff, array_length);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	3307      	adds	r3, #7
 8001a02:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <send_adc_data+0x90>)
 8001a04:	4413      	add	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4918      	ldr	r1, [pc, #96]	@ (8001a6c <send_adc_data+0xa0>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 fc23 	bl	8008256 <memcpy>
	memcpy(tx_buffer + 7 + 3 * array_length, (uint8_t*) tq_buff, array_length);
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3307      	adds	r3, #7
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <send_adc_data+0x90>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4913      	ldr	r1, [pc, #76]	@ (8001a70 <send_adc_data+0xa4>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f006 fc17 	bl	8008256 <memcpy>
	sprintf((char*)tx_buffer+ 7 + 4 * array_length, ",end}\r\n");
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <send_adc_data+0x90>)
 8001a30:	4413      	add	r3, r2
 8001a32:	4910      	ldr	r1, [pc, #64]	@ (8001a74 <send_adc_data+0xa8>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f006 fae5 	bl	8008004 <siprintf>

	HAL_UART_Transmit_DMA(PC_UART, tx_buffer, 4 * array_length + 14);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	330e      	adds	r3, #14
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4904      	ldr	r1, [pc, #16]	@ (8001a5c <send_adc_data+0x90>)
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <send_adc_data+0xac>)
 8001a4c:	f004 fa2a 	bl	8005ea4 <HAL_UART_Transmit_DMA>
//	HAL_UART_Transmit(PC_UART, (uint8_t*)"{fb,", 4, 10);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)time_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)adc_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)",end}\r\n", 8, 10);
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800a1a0 	.word	0x0800a1a0
 8001a5c:	20000a8c 	.word	0x20000a8c
 8001a60:	20000a93 	.word	0x20000a93
 8001a64:	20000dbc 	.word	0x20000dbc
 8001a68:	20000e84 	.word	0x20000e84
 8001a6c:	20000f4c 	.word	0x20000f4c
 8001a70:	20001014 	.word	0x20001014
 8001a74:	0800a1a8 	.word	0x0800a1a8
 8001a78:	20000584 	.word	0x20000584

08001a7c <dac_read>:
#include "global.h"



uint32_t dac_read(uint8_t addr, int print)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	@ 0x40
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx[3] = {addr,0,0};
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t Rx[3] = {0};
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b58 <dac_read+0xdc>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	482c      	ldr	r0, [pc, #176]	@ (8001b5c <dac_read+0xe0>)
 8001aac:	f002 f9a0 	bl	8003df0 <HAL_GPIO_WritePin>
	delay_us(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f000 ff5f 	bl	8002974 <delay_us>
	HAL_SPI_Transmit(DAC_SPI, Tx, 3, 100);
 8001ab6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001aba:	2364      	movs	r3, #100	@ 0x64
 8001abc:	2203      	movs	r2, #3
 8001abe:	4828      	ldr	r0, [pc, #160]	@ (8001b60 <dac_read+0xe4>)
 8001ac0:	f003 f889 	bl	8004bd6 <HAL_SPI_Transmit>
	delay_us(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 ff55 	bl	8002974 <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2102      	movs	r1, #2
 8001ace:	4823      	ldr	r0, [pc, #140]	@ (8001b5c <dac_read+0xe0>)
 8001ad0:	f002 f98e 	bl	8003df0 <HAL_GPIO_WritePin>
	delay_us(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f000 ff4d 	bl	8002974 <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2102      	movs	r1, #2
 8001ade:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <dac_read+0xe0>)
 8001ae0:	f002 f986 	bl	8003df0 <HAL_GPIO_WritePin>
	delay_us(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f000 ff45 	bl	8002974 <delay_us>
	HAL_SPI_Receive(&hspi2, Rx, 3, 100);
 8001aea:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001aee:	2364      	movs	r3, #100	@ 0x64
 8001af0:	2203      	movs	r2, #3
 8001af2:	481b      	ldr	r0, [pc, #108]	@ (8001b60 <dac_read+0xe4>)
 8001af4:	f003 f9b3 	bl	8004e5e <HAL_SPI_Receive>
	delay_us(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f000 ff3b 	bl	8002974 <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2102      	movs	r1, #2
 8001b02:	4816      	ldr	r0, [pc, #88]	@ (8001b5c <dac_read+0xe0>)
 8001b04:	f002 f974 	bl	8003df0 <HAL_GPIO_WritePin>
	uint32_t reg_data = (Rx[0] << 16) | (Rx[1] << 8) | Rx[2];
 8001b08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	637b      	str	r3, [r7, #52]	@ 0x34
	if(print)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <dac_read+0xd0>
	{
		char hexString[35];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\ndac,0x%02x%02x%02x,end}\r\n", Rx[0], Rx[1], Rx[2]);  // Format as hex string with "0x" prefix
 8001b24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b34:	f107 0008 	add.w	r0, r7, #8
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <dac_read+0xe8>)
 8001b3e:	f006 fa61 	bl	8008004 <siprintf>
		send_string(hexString);
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f948 	bl	8001ddc <send_string>
	}
	return reg_data;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3738      	adds	r7, #56	@ 0x38
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0800a1d4 	.word	0x0800a1d4
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	200004e4 	.word	0x200004e4
 8001b64:	0800a1b0 	.word	0x0800a1b0

08001b68 <dac_write>:

void dac_write(uint8_t addr, uint16_t value)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	80bb      	strh	r3, [r7, #4]
	uint8_t Tx[3] = {addr,(value & 0xFF00) >> 8, (value & 0x00FF) >> 0};
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	723b      	strb	r3, [r7, #8]
 8001b7c:	88bb      	ldrh	r3, [r7, #4]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	727b      	strb	r3, [r7, #9]
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	72bb      	strb	r3, [r7, #10]
	for(int i = 0; i < 1; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e019      	b.n	8001bc6 <dac_write+0x5e>
	{
		HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2102      	movs	r1, #2
 8001b96:	4810      	ldr	r0, [pc, #64]	@ (8001bd8 <dac_write+0x70>)
 8001b98:	f002 f92a 	bl	8003df0 <HAL_GPIO_WritePin>
		delay_us(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f000 fee9 	bl	8002974 <delay_us>
		HAL_SPI_Transmit(DAC_SPI, Tx, 3, 100);
 8001ba2:	f107 0108 	add.w	r1, r7, #8
 8001ba6:	2364      	movs	r3, #100	@ 0x64
 8001ba8:	2203      	movs	r2, #3
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <dac_write+0x74>)
 8001bac:	f003 f813 	bl	8004bd6 <HAL_SPI_Transmit>
		delay_us(1);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 fedf 	bl	8002974 <delay_us>
		HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <dac_write+0x70>)
 8001bbc:	f002 f918 	bl	8003df0 <HAL_GPIO_WritePin>
	for(int i = 0; i < 1; i++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dde2      	ble.n	8001b92 <dac_write+0x2a>
	}
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	200004e4 	.word	0x200004e4

08001be0 <dac_update>:

void dac_update(float v)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t val = (uint16_t) (((v+10) / 20) * (1 << 16));
 8001bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bf6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bfe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001c24 <dac_update+0x44>
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	81fb      	strh	r3, [r7, #14]
	dac_write(0x01, val);
 8001c10:	89fb      	ldrh	r3, [r7, #14]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff ffa7 	bl	8001b68 <dac_write>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	47800000 	.word	0x47800000

08001c28 <dac_init>:

void dac_init(int num)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	//send full reset
	for(int i = 0; i < 3; i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e006      	b.n	8001c44 <dac_init+0x1c>
		dac_write(0x0f, 0x00);
 8001c36:	2100      	movs	r1, #0
 8001c38:	200f      	movs	r0, #15
 8001c3a:	f7ff ff95 	bl	8001b68 <dac_write>
	for(int i = 0; i < 3; i++)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	ddf5      	ble.n	8001c36 <dac_init+0xe>
	for(int i = 0; i < 3; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	e006      	b.n	8001c5e <dac_init+0x36>
		dac_write(0x04, 0x08); // Set Control Register to mid scale and -+10V so V_out = 0
 8001c50:	2108      	movs	r1, #8
 8001c52:	2004      	movs	r0, #4
 8001c54:	f7ff ff88 	bl	8001b68 <dac_write>
	for(int i = 0; i < 3; i++)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	ddf5      	ble.n	8001c50 <dac_init+0x28>
//		}
//
//	}


}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <new_pattern>:

void new_pattern(uint16_t length, uint8_t* pattern_ptr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	80fb      	strh	r3, [r7, #6]
	DAC_idx = 0;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <new_pattern+0x70>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	801a      	strh	r2, [r3, #0]
	DAC_length = length;
 8001c82:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <new_pattern+0x74>)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	8013      	strh	r3, [r2, #0]
	memset(DAC_pattern, 0, DAC_PATTERN_SIZE);
 8001c88:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4816      	ldr	r0, [pc, #88]	@ (8001ce8 <new_pattern+0x78>)
 8001c90:	f006 fa1b 	bl	80080ca <memset>
	length = (length < DAC_BULK_SIZE) ? length : DAC_BULK_SIZE; // if length is more than BULK_SIZE, just copy the BULK
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	2bfa      	cmp	r3, #250	@ 0xfa
 8001c98:	bf28      	it	cs
 8001c9a:	23fa      	movcs	r3, #250	@ 0xfa
 8001c9c:	80fb      	strh	r3, [r7, #6]
	memcpy(DAC_pattern, pattern_ptr, length * sizeof(float));
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <new_pattern+0x78>)
 8001ca8:	f006 fad5 	bl	8008256 <memcpy>
	DAC_idx += length;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <new_pattern+0x70>)
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <new_pattern+0x70>)
 8001cb8:	801a      	strh	r2, [r3, #0]

//	send_string("{dac,\r\n");
	char message[30];
	sprintf(message, "{dac,\r\n%d,end}\r\n", DAC_idx);
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <new_pattern+0x70>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	4909      	ldr	r1, [pc, #36]	@ (8001cec <new_pattern+0x7c>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f006 f99c 	bl	8008004 <siprintf>
	send_string(message);
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f883 	bl	8001ddc <send_string>
}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	@ 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2001e5a6 	.word	0x2001e5a6
 8001ce4:	2001e5a4 	.word	0x2001e5a4
 8001ce8:	200010e4 	.word	0x200010e4
 8001cec:	0800a1d8 	.word	0x0800a1d8

08001cf0 <bulk_pattern>:

void bulk_pattern(uint16_t length, uint8_t* pattern_ptr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	80fb      	strh	r3, [r7, #6]
	memcpy(DAC_pattern + DAC_idx, pattern_ptr, length * sizeof(float));
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <bulk_pattern+0x54>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4a11      	ldr	r2, [pc, #68]	@ (8001d48 <bulk_pattern+0x58>)
 8001d04:	1898      	adds	r0, r3, r2
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	f006 faa2 	bl	8008256 <memcpy>
	DAC_idx += length;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <bulk_pattern+0x54>)
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <bulk_pattern+0x54>)
 8001d1e:	801a      	strh	r2, [r3, #0]

//	send_string("{dac,end}\r\n");
	char message[30];
	sprintf(message, "{dac,\r\n%d,end}\r\n", DAC_idx);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <bulk_pattern+0x54>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <bulk_pattern+0x5c>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f006 f969 	bl	8008004 <siprintf>
	send_string(message);
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f850 	bl	8001ddc <send_string>
}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	@ 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2001e5a6 	.word	0x2001e5a6
 8001d48:	200010e4 	.word	0x200010e4
 8001d4c:	0800a1d8 	.word	0x0800a1d8

08001d50 <check_pattern>:
// Check if pattern loads correctly -> To-Do
void check_pattern()
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <check_command>:
extern struct spi_write spi_write_reg;

extern ad717x_dev *pad717x_dev;
//extern enum SPI_STATUS spi_status;
extern int check_command(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0

	if(strchr((char*)uart_buffer, ',') != NULL)
 8001d66:	212c      	movs	r1, #44	@ 0x2c
 8001d68:	481a      	ldr	r0, [pc, #104]	@ (8001dd4 <check_command+0x74>)
 8001d6a:	f006 f9b6 	bl	80080da <strchr>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d022      	beq.n	8001dba <check_command+0x5a>
	{
		char *command;
		char *endptr = strchr((char*)uart_buffer, ',');
 8001d74:	212c      	movs	r1, #44	@ 0x2c
 8001d76:	4817      	ldr	r0, [pc, #92]	@ (8001dd4 <check_command+0x74>)
 8001d78:	f006 f9af 	bl	80080da <strchr>
 8001d7c:	60f8      	str	r0, [r7, #12]
		int length = endptr - (char*)uart_buffer;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <check_command+0x74>)
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]
		command = (char*) malloc(length);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 faeb 	bl	8007364 <malloc>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	607b      	str	r3, [r7, #4]
		strncpy(command, (char*) (uart_buffer+1), length);
 8001d92:	4911      	ldr	r1, [pc, #68]	@ (8001dd8 <check_command+0x78>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	461a      	mov	r2, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f006 f9ab 	bl	80080f4 <strncpy>
		command[length-1] = '\0';
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
		handle_command(command);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f844 	bl	8001e38 <handle_command>
		free(command);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f005 fadf 	bl	8007374 <free>
		return 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e008      	b.n	8001dcc <check_command+0x6c>
	}
	else if(strlen((char*) uart_buffer) > 200){
 8001dba:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <check_command+0x74>)
 8001dbc:	f7fe fa88 	bl	80002d0 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8001dc4:	d901      	bls.n	8001dca <check_command+0x6a>
		reset_uart();
 8001dc6:	f000 f81d 	bl	8001e04 <reset_uart>
	}
	return 0;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2000068c 	.word	0x2000068c
 8001dd8:	2000068d 	.word	0x2000068d

08001ddc <send_string>:

extern void send_string(const char *msg)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(PC_UART, (uint8_t *)msg, strlen(msg), 100);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7fe fa73 	bl	80002d0 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	2364      	movs	r3, #100	@ 0x64
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4803      	ldr	r0, [pc, #12]	@ (8001e00 <send_string+0x24>)
 8001df4:	f003 ffca 	bl	8005d8c <HAL_UART_Transmit>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000584 	.word	0x20000584

08001e04 <reset_uart>:

extern void reset_uart(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	strncpy((char*)uart_buffer, "", UART_BUFFER_SIZE);
 8001e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e0c:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <reset_uart+0x28>)
 8001e0e:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <reset_uart+0x2c>)
 8001e10:	f006 f970 	bl	80080f4 <strncpy>
	HAL_UART_DMAStop(PC_UART);
 8001e14:	4807      	ldr	r0, [pc, #28]	@ (8001e34 <reset_uart+0x30>)
 8001e16:	f004 f8da 	bl	8005fce <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 8001e1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1e:	4904      	ldr	r1, [pc, #16]	@ (8001e30 <reset_uart+0x2c>)
 8001e20:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <reset_uart+0x30>)
 8001e22:	f004 f8af 	bl	8005f84 <HAL_UART_Receive_DMA>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	0800a1ec 	.word	0x0800a1ec
 8001e30:	2000068c 	.word	0x2000068c
 8001e34:	20000584 	.word	0x20000584

08001e38 <handle_command>:


extern void handle_command(char* txt_in)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	@ 0x30
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	uint8_t addr = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t value = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
	char *command = txt_in;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
	char *addr_str = (char*)uart_buffer + strlen(command) + 2;
 8001e4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e50:	f7fe fa3e 	bl	80002d0 <strlen>
 8001e54:	4603      	mov	r3, r0
 8001e56:	3302      	adds	r3, #2
 8001e58:	4a92      	ldr	r2, [pc, #584]	@ (80020a4 <handle_command+0x26c>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	623b      	str	r3, [r7, #32]

	char *endptr = strchr((char*)addr_str, ',');
 8001e5e:	212c      	movs	r1, #44	@ 0x2c
 8001e60:	6a38      	ldr	r0, [r7, #32]
 8001e62:	f006 f93a 	bl	80080da <strchr>
 8001e66:	61f8      	str	r0, [r7, #28]
	int length = endptr - (char*)addr_str;
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	61bb      	str	r3, [r7, #24]
	char *value_str = (char*)addr_str + length + 1;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	3301      	adds	r3, #1
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
	if(strchr((char*)uart_buffer, '}') != NULL)
 8001e7a:	217d      	movs	r1, #125	@ 0x7d
 8001e7c:	4889      	ldr	r0, [pc, #548]	@ (80020a4 <handle_command+0x26c>)
 8001e7e:	f006 f92c 	bl	80080da <strchr>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <handle_command+0x7c>
	{
		addr = (uint8_t)strtoul(addr_str, NULL, 16);
 8001e88:	2210      	movs	r2, #16
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	6a38      	ldr	r0, [r7, #32]
 8001e8e:	f005 fb95 	bl	80075bc <strtoul>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		value = (uint32_t)strtoul(value_str, NULL, 16);
 8001e98:	2210      	movs	r2, #16
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f005 fb8d 	bl	80075bc <strtoul>
 8001ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

		reset_uart();
		return;
	}
	else return;
	if(!strcmp(command, "get_id")){
 8001ea4:	4980      	ldr	r1, [pc, #512]	@ (80020a8 <handle_command+0x270>)
 8001ea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ea8:	f7fe f9b2 	bl	8000210 <strcmp>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d14a      	bne.n	8001f48 <handle_command+0x110>
 8001eb2:	e045      	b.n	8001f40 <handle_command+0x108>
	else if(strstr(command, "pattern") != NULL) // if command contains "pattern", it may have '\0' and string search doens't work. so check it separately
 8001eb4:	497d      	ldr	r1, [pc, #500]	@ (80020ac <handle_command+0x274>)
 8001eb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eb8:	f006 f92f 	bl	800811a <strstr>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80ea 	beq.w	8002098 <handle_command+0x260>
		uint16_t bulk = (uint16_t)strtoul(addr_str, NULL, 10);
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6a38      	ldr	r0, [r7, #32]
 8001eca:	f005 fb77 	bl	80075bc <strtoul>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	827b      	strh	r3, [r7, #18]
		endptr = (bulk < 250) ? value_str + bulk * sizeof(float) : value_str + DAC_BULK_SIZE * sizeof(float);
 8001ed2:	8a7b      	ldrh	r3, [r7, #18]
 8001ed4:	2bf9      	cmp	r3, #249	@ 0xf9
 8001ed6:	d804      	bhi.n	8001ee2 <handle_command+0xaa>
 8001ed8:	8a7b      	ldrh	r3, [r7, #18]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4413      	add	r3, r2
 8001ee0:	e002      	b.n	8001ee8 <handle_command+0xb0>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ee8:	61fb      	str	r3, [r7, #28]
		if(*(endptr) != '}') return;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ef0:	f040 80d4 	bne.w	800209c <handle_command+0x264>
		if(!strcmp(command, "pattern_init"))
 8001ef4:	496e      	ldr	r1, [pc, #440]	@ (80020b0 <handle_command+0x278>)
 8001ef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ef8:	f7fe f98a 	bl	8000210 <strcmp>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <handle_command+0xd6>
			new_pattern(bulk, (uint8_t*)value_str);
 8001f02:	8a7b      	ldrh	r3, [r7, #18]
 8001f04:	6979      	ldr	r1, [r7, #20]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff feb2 	bl	8001c70 <new_pattern>
 8001f0c:	e015      	b.n	8001f3a <handle_command+0x102>
		else if(!strcmp(command, "pattern_bulk"))
 8001f0e:	4969      	ldr	r1, [pc, #420]	@ (80020b4 <handle_command+0x27c>)
 8001f10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f12:	f7fe f97d 	bl	8000210 <strcmp>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <handle_command+0xf0>
			bulk_pattern(bulk, (uint8_t*)value_str);
 8001f1c:	8a7b      	ldrh	r3, [r7, #18]
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fee5 	bl	8001cf0 <bulk_pattern>
 8001f26:	e008      	b.n	8001f3a <handle_command+0x102>
		else if(!strcmp(command, "pattern_end"))
 8001f28:	4963      	ldr	r1, [pc, #396]	@ (80020b8 <handle_command+0x280>)
 8001f2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f2c:	f7fe f970 	bl	8000210 <strcmp>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <handle_command+0x102>
			check_pattern();
 8001f36:	f7ff ff0b 	bl	8001d50 <check_pattern>
		reset_uart();
 8001f3a:	f7ff ff63 	bl	8001e04 <reset_uart>
		return;
 8001f3e:	e0ae      	b.n	800209e <handle_command+0x266>
		spi_status = GETID;
 8001f40:	4b5e      	ldr	r3, [pc, #376]	@ (80020bc <handle_command+0x284>)
 8001f42:	2204      	movs	r2, #4
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e0a4      	b.n	8002092 <handle_command+0x25a>
	}
	else if(!strcmp(command, "getreg"))
 8001f48:	495d      	ldr	r1, [pc, #372]	@ (80020c0 <handle_command+0x288>)
 8001f4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f4c:	f7fe f960 	bl	8000210 <strcmp>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d108      	bne.n	8001f68 <handle_command+0x130>
	{
		AD717X_ReadRegister(pad717x_dev, addr);
 8001f56:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <handle_command+0x28c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fa57 	bl	8001414 <AD717X_ReadRegister>
 8001f66:	e094      	b.n	8002092 <handle_command+0x25a>
	}
	else if(!strcmp(command, "writereg"))
 8001f68:	4957      	ldr	r1, [pc, #348]	@ (80020c8 <handle_command+0x290>)
 8001f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f6c:	f7fe f950 	bl	8000210 <strcmp>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d117      	bne.n	8001fa6 <handle_command+0x16e>
	{
		ad717x_st_reg *pReg = AD717X_GetReg(pad717x_dev, addr);
 8001f76:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <handle_command+0x28c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fa0d 	bl	80013a0 <AD717X_GetReg>
 8001f86:	60f8      	str	r0, [r7, #12]
		pReg->value = value;
 8001f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	605a      	str	r2, [r3, #4]
		spi_write_reg.value = value;
 8001f8e:	4a4f      	ldr	r2, [pc, #316]	@ (80020cc <handle_command+0x294>)
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	6093      	str	r3, [r2, #8]
		AD717X_WriteRegister(pad717x_dev, addr);
 8001f94:	4b4b      	ldr	r3, [pc, #300]	@ (80020c4 <handle_command+0x28c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fabe 	bl	8001520 <AD717X_WriteRegister>
 8001fa4:	e075      	b.n	8002092 <handle_command+0x25a>
	}
	else if(!strcmp(command, "send"))
 8001fa6:	494a      	ldr	r1, [pc, #296]	@ (80020d0 <handle_command+0x298>)
 8001fa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001faa:	f7fe f931 	bl	8000210 <strcmp>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d11b      	bne.n	8001fec <handle_command+0x1b4>
	{
		if(spi_status != SENDING && adc_sm == ADC_IDLE)
 8001fb4:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <handle_command+0x284>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d00f      	beq.n	8001fde <handle_command+0x1a6>
 8001fbe:	4b45      	ldr	r3, [pc, #276]	@ (80020d4 <handle_command+0x29c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <handle_command+0x1a6>
		{

			adc_buff_idx = 0;
 8001fc8:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <handle_command+0x2a0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	801a      	strh	r2, [r3, #0]
			TIM.Instance->CNT = 0;
 8001fce:	4b43      	ldr	r3, [pc, #268]	@ (80020dc <handle_command+0x2a4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24
//			delay_us(100);
//			spi_status = READING;
//			adc_sm = ADC_READING;
//			AD717X_ReadRegister(pad717x_dev, 0x04);
//			adc_channel_offset = AD717X_GetReg(pad717x_dev, AD717X_STATUS_REG)->value & 0x000f;
			spi_status = SENDING;
 8001fd6:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <handle_command+0x284>)
 8001fd8:	2206      	movs	r2, #6
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e059      	b.n	8002092 <handle_command+0x25a>
//			ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
		}
		else
		{
			spi_status = IDLE;
 8001fde:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <handle_command+0x284>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
			adc_sm = ADC_IDLE;
 8001fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <handle_command+0x29c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e052      	b.n	8002092 <handle_command+0x25a>
		}
	}
	else if(!strcmp(command, "adc_mode"))
 8001fec:	493c      	ldr	r1, [pc, #240]	@ (80020e0 <handle_command+0x2a8>)
 8001fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff0:	f7fe f90e 	bl	8000210 <strcmp>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <handle_command+0x1d4>
	{
//		if(addr == 0)
		ad717x_set_adc_mode(pad717x_dev, addr);
 8001ffa:	4b32      	ldr	r3, [pc, #200]	@ (80020c4 <handle_command+0x28c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ffbd 	bl	8000f84 <ad717x_set_adc_mode>
 800200a:	e042      	b.n	8002092 <handle_command+0x25a>
	}
	else if(!strcmp(command, "dac_read"))
 800200c:	4935      	ldr	r1, [pc, #212]	@ (80020e4 <handle_command+0x2ac>)
 800200e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002010:	f7fe f8fe 	bl	8000210 <strcmp>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <handle_command+0x1f0>
	{
		dac_read(addr, 1);
 800201a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800201e:	2101      	movs	r1, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fd2b 	bl	8001a7c <dac_read>
 8002026:	e034      	b.n	8002092 <handle_command+0x25a>
	}
	else if(!strcmp(command, "dac_write"))
 8002028:	492f      	ldr	r1, [pc, #188]	@ (80020e8 <handle_command+0x2b0>)
 800202a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800202c:	f7fe f8f0 	bl	8000210 <strcmp>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <handle_command+0x210>
	{
		dac_write(addr, (uint16_t)value);
 8002036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002038:	b29a      	uxth	r2, r3
 800203a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fd91 	bl	8001b68 <dac_write>
 8002046:	e024      	b.n	8002092 <handle_command+0x25a>
	}
	else if(!strcmp(command, "dac_update"))
 8002048:	4928      	ldr	r1, [pc, #160]	@ (80020ec <handle_command+0x2b4>)
 800204a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800204c:	f7fe f8e0 	bl	8000210 <strcmp>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d115      	bne.n	8002082 <handle_command+0x24a>
	{
		value = (uint16_t)strtoul(value_str, NULL, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f005 faae 	bl	80075bc <strtoul>
 8002060:	4603      	mov	r3, r0
 8002062:	b29b      	uxth	r3, r3
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
		dac_update((float)value/1000);
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002070:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80020f0 <handle_command+0x2b8>
 8002074:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002078:	eeb0 0a47 	vmov.f32	s0, s14
 800207c:	f7ff fdb0 	bl	8001be0 <dac_update>
 8002080:	e007      	b.n	8002092 <handle_command+0x25a>
	}

	else{
		send_string("{Unknown msg,end}\r\n");
 8002082:	481c      	ldr	r0, [pc, #112]	@ (80020f4 <handle_command+0x2bc>)
 8002084:	f7ff feaa 	bl	8001ddc <send_string>
		send_string(command);
 8002088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800208a:	f7ff fea7 	bl	8001ddc <send_string>
		reset_uart();
 800208e:	f7ff feb9 	bl	8001e04 <reset_uart>
	}
	reset_uart();
 8002092:	f7ff feb7 	bl	8001e04 <reset_uart>
 8002096:	e002      	b.n	800209e <handle_command+0x266>
	else return;
 8002098:	bf00      	nop
 800209a:	e000      	b.n	800209e <handle_command+0x266>
		if(*(endptr) != '}') return;
 800209c:	bf00      	nop

}
 800209e:	3730      	adds	r7, #48	@ 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000068c 	.word	0x2000068c
 80020a8:	0800a224 	.word	0x0800a224
 80020ac:	0800a1f0 	.word	0x0800a1f0
 80020b0:	0800a1f8 	.word	0x0800a1f8
 80020b4:	0800a208 	.word	0x0800a208
 80020b8:	0800a218 	.word	0x0800a218
 80020bc:	2001e5ac 	.word	0x2001e5ac
 80020c0:	0800a22c 	.word	0x0800a22c
 80020c4:	2001e5a8 	.word	0x2001e5a8
 80020c8:	0800a234 	.word	0x0800a234
 80020cc:	2001e5b8 	.word	0x2001e5b8
 80020d0:	0800a240 	.word	0x0800a240
 80020d4:	2001e5ad 	.word	0x2001e5ad
 80020d8:	200010dc 	.word	0x200010dc
 80020dc:	2000053c 	.word	0x2000053c
 80020e0:	0800a248 	.word	0x0800a248
 80020e4:	0800a254 	.word	0x0800a254
 80020e8:	0800a260 	.word	0x0800a260
 80020ec:	0800a26c 	.word	0x0800a26c
 80020f0:	447a0000 	.word	0x447a0000
 80020f4:	0800a278 	.word	0x0800a278

080020f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fe:	f000 ff3f 	bl	8002f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002102:	f000 f8bb 	bl	800227c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002106:	f000 fa35 	bl	8002574 <MX_GPIO_Init>
  MX_DMA_Init();
 800210a:	f000 fa0b 	bl	8002524 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800210e:	f000 f9df 	bl	80024d0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002112:	f000 f925 	bl	8002360 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002116:	f000 f98f 	bl	8002438 <MX_TIM2_Init>
  MX_SPI2_Init();
 800211a:	f000 f957 	bl	80023cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ad717x_app_initialize();
 800211e:	f000 faad 	bl	800267c <ad717x_app_initialize>


  ad717x_configure_device_odr(pad717x_dev, 0, sps_1007);
 8002122:	4b51      	ldr	r3, [pc, #324]	@ (8002268 <main+0x170>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	220a      	movs	r2, #10
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fad8 	bl	80016e0 <ad717x_configure_device_odr>
  HAL_Delay(10);
 8002130:	200a      	movs	r0, #10
 8002132:	f000 ff91 	bl	8003058 <HAL_Delay>
  ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
 8002136:	4b4c      	ldr	r3, [pc, #304]	@ (8002268 <main+0x170>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ff21 	bl	8000f84 <ad717x_set_adc_mode>

  ad717x_set_clock(pad717x_dev, 3);
 8002142:	4b49      	ldr	r3, [pc, #292]	@ (8002268 <main+0x170>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fb9b 	bl	8001884 <ad717x_set_clock>
  union ad717x_analog_inputs AIN_0;
  AIN_0.analog_input_pairs = VIN0_VIN1;
 800214e:	2301      	movs	r3, #1
 8002150:	813b      	strh	r3, [r7, #8]
  HAL_Delay(10);
 8002152:	200a      	movs	r0, #10
 8002154:	f000 ff80 	bl	8003058 <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 0, AIN_0);
 8002158:	4b43      	ldr	r3, [pc, #268]	@ (8002268 <main+0x170>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	893a      	ldrh	r2, [r7, #8]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe ff47 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8002166:	200a      	movs	r0, #10
 8002168:	f000 ff76 	bl	8003058 <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 0, 0);
 800216c:	4b3e      	ldr	r3, [pc, #248]	@ (8002268 <main+0x170>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ffc9 	bl	800110c <ad717x_assign_setup>
  HAL_Delay(10);
 800217a:	200a      	movs	r0, #10
 800217c:	f000 ff6c 	bl	8003058 <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 0, 1);
 8002180:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <main+0x170>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe feb5 	bl	8000ef8 <ad717x_set_channel_status>



  union ad717x_analog_inputs AIN_2;
  AIN_2.analog_input_pairs = VIN2_VIN3;
 800218e:	2343      	movs	r3, #67	@ 0x43
 8002190:	80bb      	strh	r3, [r7, #4]
  HAL_Delay(10);
 8002192:	200a      	movs	r0, #10
 8002194:	f000 ff60 	bl	8003058 <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 2, AIN_2);
 8002198:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <main+0x170>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	88ba      	ldrh	r2, [r7, #4]
 800219e:	2102      	movs	r1, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff27 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f000 ff56 	bl	8003058 <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 2, 1);
 80021ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002268 <main+0x170>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fe9f 	bl	8000ef8 <ad717x_set_channel_status>
  HAL_Delay(10);
 80021ba:	200a      	movs	r0, #10
 80021bc:	f000 ff4c 	bl	8003058 <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 2, 0);
 80021c0:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <main+0x170>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe ff9f 	bl	800110c <ad717x_assign_setup>


  HAL_Delay(10);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f000 ff42 	bl	8003058 <HAL_Delay>
  ad717x_set_polarity(pad717x_dev, 1, 0);
 80021d4:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <main+0x170>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	2101      	movs	r1, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe ffd9 	bl	8001194 <ad717x_set_polarity>
  HAL_Delay(10);
 80021e2:	200a      	movs	r0, #10
 80021e4:	f000 ff38 	bl	8003058 <HAL_Delay>
  ad717x_set_reference_source(pad717x_dev, EXTERNAL_REF, 0);
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <main+0x170>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f813 	bl	800121c <ad717x_set_reference_source>
  HAL_Delay(10);
 80021f6:	200a      	movs	r0, #10
 80021f8:	f000 ff2e 	bl	8003058 <HAL_Delay>

  HAL_Delay(10);
 80021fc:	200a      	movs	r0, #10
 80021fe:	f000 ff2b 	bl	8003058 <HAL_Delay>
  ad717x_enable_input_buffer(pad717x_dev, 1, 0, 0);
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <main+0x170>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	f7ff f868 	bl	80012e0 <ad717x_enable_input_buffer>
  HAL_Delay(10);
 8002210:	200a      	movs	r0, #10
 8002212:	f000 ff21 	bl	8003058 <HAL_Delay>

  ad717x_set_data_stat(pad717x_dev, true);
 8002216:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <main+0x170>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fb57 	bl	80018d0 <ad717x_set_data_stat>



  // Initial Message for PC:
  char *init_msg = "{inf,\r\nWelcome to Pourostad Project,end}\r\n";
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <main+0x174>)
 8002224:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(PC_UART, (uint8_t*)init_msg, strlen(init_msg), 10);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7fe f852 	bl	80002d0 <strlen>
 800222c:	4603      	mov	r3, r0
 800222e:	b29a      	uxth	r2, r3
 8002230:	230a      	movs	r3, #10
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	480e      	ldr	r0, [pc, #56]	@ (8002270 <main+0x178>)
 8002236:	f003 fda9 	bl	8005d8c <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 800223a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <main+0x17c>)
 8002240:	480b      	ldr	r0, [pc, #44]	@ (8002270 <main+0x178>)
 8002242:	f003 fe9f 	bl	8005f84 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim2.Instance->CNT = 0;
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <main+0x180>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 800224e:	480a      	ldr	r0, [pc, #40]	@ (8002278 <main+0x180>)
 8002250:	f003 fa5a 	bl	8005708 <HAL_TIM_Base_Start>
  dac_init(0); // init DAC for the first time
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff fce7 	bl	8001c28 <dac_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uart_buffer[0]!='\0')
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <main+0x17c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0fb      	beq.n	800225a <main+0x162>
	  {
		  check_command();
 8002262:	f7ff fd7d 	bl	8001d60 <check_command>
	  if(uart_buffer[0]!='\0')
 8002266:	e7f8      	b.n	800225a <main+0x162>
 8002268:	2001e5a8 	.word	0x2001e5a8
 800226c:	0800a28c 	.word	0x0800a28c
 8002270:	20000584 	.word	0x20000584
 8002274:	2000068c 	.word	0x2000068c
 8002278:	2000053c 	.word	0x2000053c

0800227c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b094      	sub	sp, #80	@ 0x50
 8002280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	2234      	movs	r2, #52	@ 0x34
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f005 ff1d 	bl	80080ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002358 <SystemClock_Config+0xdc>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <SystemClock_Config+0xdc>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b0:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <SystemClock_Config+0xdc>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022bc:	2300      	movs	r3, #0
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4b26      	ldr	r3, [pc, #152]	@ (800235c <SystemClock_Config+0xe0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a25      	ldr	r2, [pc, #148]	@ (800235c <SystemClock_Config+0xe0>)
 80022c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <SystemClock_Config+0xe0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d8:	2301      	movs	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	2302      	movs	r3, #2
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022ec:	2304      	movs	r3, #4
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80022f0:	23b4      	movs	r3, #180	@ 0xb4
 80022f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80022f8:	2306      	movs	r3, #6
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022fc:	2302      	movs	r3, #2
 80022fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4618      	mov	r0, r3
 8002306:	f002 f93f 	bl	8004588 <HAL_RCC_OscConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002310:	f000 fb54 	bl	80029bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002314:	f001 fd9e 	bl	8003e54 <HAL_PWREx_EnableOverDrive>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800231e:	f000 fb4d 	bl	80029bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002322:	230f      	movs	r3, #15
 8002324:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002326:	2302      	movs	r3, #2
 8002328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800232e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002338:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	2105      	movs	r1, #5
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fdd7 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800234c:	f000 fb36 	bl	80029bc <Error_Handler>
  }
}
 8002350:	bf00      	nop
 8002352:	3750      	adds	r7, #80	@ 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000

08002360 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002364:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <MX_SPI1_Init+0x64>)
 8002366:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <MX_SPI1_Init+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800236a:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <MX_SPI1_Init+0x64>)
 800236c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <MX_SPI1_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <MX_SPI1_Init+0x64>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <MX_SPI1_Init+0x64>)
 8002380:	2202      	movs	r2, #2
 8002382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <MX_SPI1_Init+0x64>)
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <MX_SPI1_Init+0x64>)
 800238c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002392:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <MX_SPI1_Init+0x64>)
 8002394:	2210      	movs	r2, #16
 8002396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <MX_SPI1_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <MX_SPI1_Init+0x64>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <MX_SPI1_Init+0x64>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <MX_SPI1_Init+0x64>)
 80023ac:	220a      	movs	r2, #10
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023b0:	4804      	ldr	r0, [pc, #16]	@ (80023c4 <MX_SPI1_Init+0x64>)
 80023b2:	f002 fb87 	bl	8004ac4 <HAL_SPI_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023bc:	f000 fafe 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	2000048c 	.word	0x2000048c
 80023c8:	40013000 	.word	0x40013000

080023cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023d0:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023d2:	4a18      	ldr	r2, [pc, #96]	@ (8002434 <MX_SPI2_Init+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023d6:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <MX_SPI2_Init+0x64>)
 80023f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <MX_SPI2_Init+0x64>)
 8002400:	2218      	movs	r2, #24
 8002402:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <MX_SPI2_Init+0x64>)
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <MX_SPI2_Init+0x64>)
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <MX_SPI2_Init+0x64>)
 8002412:	2200      	movs	r2, #0
 8002414:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_SPI2_Init+0x64>)
 8002418:	220a      	movs	r2, #10
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <MX_SPI2_Init+0x64>)
 800241e:	f002 fb51 	bl	8004ac4 <HAL_SPI_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002428:	f000 fac8 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200004e4 	.word	0x200004e4
 8002434:	40003800 	.word	0x40003800

08002438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	463b      	mov	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800245a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800245c:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <MX_TIM2_Init+0x94>)
 800245e:	2259      	movs	r2, #89	@ 0x59
 8002460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <MX_TIM2_Init+0x94>)
 800246a:	f04f 32ff 	mov.w	r2, #4294967295
 800246e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247c:	4813      	ldr	r0, [pc, #76]	@ (80024cc <MX_TIM2_Init+0x94>)
 800247e:	f003 f8f3 	bl	8005668 <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002488:	f000 fa98 	bl	80029bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	4619      	mov	r1, r3
 8002498:	480c      	ldr	r0, [pc, #48]	@ (80024cc <MX_TIM2_Init+0x94>)
 800249a:	f003 f99d 	bl	80057d8 <HAL_TIM_ConfigClockSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024a4:	f000 fa8a 	bl	80029bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	@ (80024cc <MX_TIM2_Init+0x94>)
 80024b6:	f003 fb9d 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024c0:	f000 fa7c 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2000053c 	.word	0x2000053c

080024d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d4:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024d6:	4a11      	ldr	r2, [pc, #68]	@ (800251c <MX_USART2_UART_Init+0x4c>)
 80024d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024dc:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <MX_USART2_UART_Init+0x50>)
 80024de:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024f4:	220c      	movs	r2, #12
 80024f6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	@ (8002518 <MX_USART2_UART_Init+0x48>)
 8002506:	f003 fbf1 	bl	8005cec <HAL_UART_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002510:	f000 fa54 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000584 	.word	0x20000584
 800251c:	40004400 	.word	0x40004400
 8002520:	00119400 	.word	0x00119400

08002524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <MX_DMA_Init+0x4c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <MX_DMA_Init+0x4c>)
 8002534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <MX_DMA_Init+0x4c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 1);
 8002546:	2201      	movs	r2, #1
 8002548:	2100      	movs	r1, #0
 800254a:	2010      	movs	r0, #16
 800254c:	f000 fe83 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002550:	2010      	movs	r0, #16
 8002552:	f000 fe9c 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 2);
 8002556:	2202      	movs	r2, #2
 8002558:	2100      	movs	r1, #0
 800255a:	2011      	movs	r0, #17
 800255c:	f000 fe7b 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002560:	2011      	movs	r0, #17
 8002562:	f000 fe94 	bl	800328e <HAL_NVIC_EnableIRQ>

}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <MX_GPIO_Init+0xfc>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a37      	ldr	r2, [pc, #220]	@ (8002670 <MX_GPIO_Init+0xfc>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <MX_GPIO_Init+0xfc>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a29      	ldr	r2, [pc, #164]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <MX_GPIO_Init+0xfc>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 80025fa:	2201      	movs	r2, #1
 80025fc:	2102      	movs	r1, #2
 80025fe:	481d      	ldr	r0, [pc, #116]	@ (8002674 <MX_GPIO_Init+0x100>)
 8002600:	f001 fbf6 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	@ 0x40
 8002608:	481a      	ldr	r0, [pc, #104]	@ (8002674 <MX_GPIO_Init+0x100>)
 800260a:	f001 fbf1 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin DRY_Pin */
  GPIO_InitStruct.Pin = B1_Pin|DRY_Pin;
 800260e:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8002612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002614:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	4814      	ldr	r0, [pc, #80]	@ (8002678 <MX_GPIO_Init+0x104>)
 8002626:	f001 fa4f 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin|SPI1_CS_Pin;
 800262a:	2342      	movs	r3, #66	@ 0x42
 800262c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	@ (8002674 <MX_GPIO_Init+0x100>)
 8002642:	f001 fa41 	bl	8003ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2017      	movs	r0, #23
 800264c:	f000 fe03 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002650:	2017      	movs	r0, #23
 8002652:	f000 fe1c 	bl	800328e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 8002656:	2202      	movs	r2, #2
 8002658:	2100      	movs	r1, #0
 800265a:	2028      	movs	r0, #40	@ 0x28
 800265c:	f000 fdfb 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002660:	2028      	movs	r0, #40	@ 0x28
 8002662:	f000 fe14 	bl	800328e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	@ 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800

0800267c <ad717x_app_initialize>:

/* USER CODE BEGIN 4 */
int32_t ad717x_app_initialize(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0dc      	sub	sp, #368	@ 0x170
 8002680:	af2c      	add	r7, sp, #176	@ 0xb0
	// Used to create the ad717x device
	ad717x_init_param ad717x_init = {
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	22bc      	movs	r2, #188	@ 0xbc
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f005 fd1e 	bl	80080ca <memset>
 800268e:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <ad717x_app_initialize+0x50>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <ad717x_app_initialize+0x54>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	733b      	strb	r3, [r7, #12]
 800269a:	2303      	movs	r3, #3
 800269c:	737b      	strb	r3, [r7, #13]
 800269e:	2301      	movs	r3, #1
 80026a0:	73bb      	strb	r3, [r7, #14]
 80026a2:	2310      	movs	r3, #16
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	2308      	movs	r3, #8
 80026a8:	743b      	strb	r3, [r7, #16]
		8,						// Setup Number

	};

	// Initialze the device
	return (AD717X_Init(&pad717x_dev, ad717x_init));
 80026aa:	4668      	mov	r0, sp
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	22b0      	movs	r2, #176	@ 0xb0
 80026b2:	4619      	mov	r1, r3
 80026b4:	f005 fdcf 	bl	8008256 <memcpy>
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026bc:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <ad717x_app_initialize+0x58>)
 80026be:	f7ff f847 	bl	8001750 <AD717X_Init>
 80026c2:	4603      	mov	r3, r0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	37c0      	adds	r7, #192	@ 0xc0
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000294 	.word	0x20000294
 80026d0:	20000298 	.word	0x20000298
 80026d4:	2001e5a8 	.word	0x2001e5a8

080026d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b0a1      	sub	sp, #132	@ 0x84
 80026dc:	af02      	add	r7, sp, #8
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == DRY_Pin) {
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	2b80      	cmp	r3, #128	@ 0x80
 80026e6:	f040 8129 	bne.w	800293c <HAL_GPIO_EXTI_Callback+0x264>
	  adc_channel_offset++;
 80026ea:	4b97      	ldr	r3, [pc, #604]	@ (8002948 <HAL_GPIO_EXTI_Callback+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a95      	ldr	r2, [pc, #596]	@ (8002948 <HAL_GPIO_EXTI_Callback+0x270>)
 80026f2:	6013      	str	r3, [r2, #0]
	  if(spi_status == READING)
 80026f4:	4b95      	ldr	r3, [pc, #596]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	f040 8091 	bne.w	8002822 <HAL_GPIO_EXTI_Callback+0x14a>
	  {
//		  uint8_t Tx = 0x40;
		  uint8_t Rx[8] = {0};
 8002700:	2300      	movs	r3, #0
 8002702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002704:	2300      	movs	r3, #0
 8002706:	65fb      	str	r3, [r7, #92]	@ 0x5c
//		  Rx[0] = 0x40;
//		  HAL_SPI_TransmitReceive(SPI, &Tx, Rx, 2, 10);
//		  HAL_SPI_Receive(SPI, Rx, 1, 100);
//		  adc_channel_offset = Rx[0] & 0x0f;

			ad717x_st_reg *pReg = (ad717x_st_reg*)spi_read_reg.pReg;
 8002708:	4b91      	ldr	r3, [pc, #580]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x278>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	667b      	str	r3, [r7, #100]	@ 0x64
//			uint8_t Rx[8] = {0};
			HAL_SPI_Transmit(SPI, &spi_read_reg.Tx, 1, 100);
 800270e:	2364      	movs	r3, #100	@ 0x64
 8002710:	2201      	movs	r2, #1
 8002712:	498f      	ldr	r1, [pc, #572]	@ (8002950 <HAL_GPIO_EXTI_Callback+0x278>)
 8002714:	488f      	ldr	r0, [pc, #572]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002716:	f002 fa5e 	bl	8004bd6 <HAL_SPI_Transmit>

			HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 800271a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	b29a      	uxth	r2, r3
 8002720:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002724:	2364      	movs	r3, #100	@ 0x64
 8002726:	488b      	ldr	r0, [pc, #556]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002728:	f002 fb99 	bl	8004e5e <HAL_SPI_Receive>


			pReg->value = 0;
 800272c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
			int data_size = pReg->size;
 8002732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	677b      	str	r3, [r7, #116]	@ 0x74
			if(pReg->addr == 0x04)
 8002738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d101      	bne.n	8002744 <HAL_GPIO_EXTI_Callback+0x6c>
				data_size = 3;
 8002740:	2303      	movs	r3, #3
 8002742:	677b      	str	r3, [r7, #116]	@ 0x74
			for(int i = 0; i < data_size; i++) {
 8002744:	2300      	movs	r3, #0
 8002746:	673b      	str	r3, [r7, #112]	@ 0x70
 8002748:	e011      	b.n	800276e <HAL_GPIO_EXTI_Callback+0x96>
				pReg->value <<= 8;
 800274a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	021a      	lsls	r2, r3, #8
 8002750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002752:	605a      	str	r2, [r3, #4]
				pReg->value += Rx[i];
 8002754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800275c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800275e:	440a      	add	r2, r1
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	441a      	add	r2, r3
 8002764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002766:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < data_size; i++) {
 8002768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800276a:	3301      	adds	r3, #1
 800276c:	673b      	str	r3, [r7, #112]	@ 0x70
 800276e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002772:	429a      	cmp	r2, r3
 8002774:	dbe9      	blt.n	800274a <HAL_GPIO_EXTI_Callback+0x72>
			}
		  	spi_status = IDLE;
 8002776:	4b75      	ldr	r3, [pc, #468]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
		  	if(pReg->addr == 0x04) //if it is read data
 800277c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d13f      	bne.n	8002804 <HAL_GPIO_EXTI_Callback+0x12c>
		  	{

		  		if(adc_sm == ADC_IDLE)
 8002784:	4b74      	ldr	r3, [pc, #464]	@ (8002958 <HAL_GPIO_EXTI_Callback+0x280>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d129      	bne.n	80027e2 <HAL_GPIO_EXTI_Callback+0x10a>
		  		{
		  			float data = (((float) pReg->value / (1<<23))-1) * 25;
 800278e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800295c <HAL_GPIO_EXTI_Callback+0x284>
 800279e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027aa:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80027ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
					char hexString[24];
					sprintf(hexString, "{inf,\r\n%u %.4f,end}", Rx[3], data);
 80027b6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80027ba:	461c      	mov	r4, r3
 80027bc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80027be:	f7fd fef3 	bl	80005a8 <__aeabi_f2d>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80027ca:	e9cd 2300 	strd	r2, r3, [sp]
 80027ce:	4622      	mov	r2, r4
 80027d0:	4963      	ldr	r1, [pc, #396]	@ (8002960 <HAL_GPIO_EXTI_Callback+0x288>)
 80027d2:	f005 fc17 	bl	8008004 <siprintf>
					send_string(hexString);
 80027d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fafe 	bl	8001ddc <send_string>
		  spi_status = SENDING;
	  }
  } else {
      __NOP();
  }
}
 80027e0:	e0ad      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
		  			adc_channel_offset = Rx[3];
 80027e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b57      	ldr	r3, [pc, #348]	@ (8002948 <HAL_GPIO_EXTI_Callback+0x270>)
 80027ea:	601a      	str	r2, [r3, #0]
		  			adc_to_buf(pReg->value);
 80027ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f893 	bl	800191c <adc_to_buf>
		  			adc_sm = ADC_IDLE;
 80027f6:	4b58      	ldr	r3, [pc, #352]	@ (8002958 <HAL_GPIO_EXTI_Callback+0x280>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
		  			spi_status = SENDING;
 80027fc:	4b53      	ldr	r3, [pc, #332]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 80027fe:	2206      	movs	r2, #6
 8002800:	701a      	strb	r2, [r3, #0]
}
 8002802:	e09c      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
				sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 8002804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	461a      	mov	r2, r3
 800280a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800280e:	4955      	ldr	r1, [pc, #340]	@ (8002964 <HAL_GPIO_EXTI_Callback+0x28c>)
 8002810:	4618      	mov	r0, r3
 8002812:	f005 fbf7 	bl	8008004 <siprintf>
				send_string(hexString);
 8002816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fade 	bl	8001ddc <send_string>
}
 8002820:	e08d      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == WRITING)
 8002822:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d11c      	bne.n	8002866 <HAL_GPIO_EXTI_Callback+0x18e>
		  ad717x_st_reg *pReg = (ad717x_st_reg*)spi_write_reg.pReg;
 800282c:	4b4e      	ldr	r3, [pc, #312]	@ (8002968 <HAL_GPIO_EXTI_Callback+0x290>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	66bb      	str	r3, [r7, #104]	@ 0x68
		  HAL_SPI_Transmit(SPI, spi_write_reg.Tx, pReg->size + 1, 100);
 8002832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	2364      	movs	r3, #100	@ 0x64
 800283e:	494a      	ldr	r1, [pc, #296]	@ (8002968 <HAL_GPIO_EXTI_Callback+0x290>)
 8002840:	4844      	ldr	r0, [pc, #272]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002842:	f002 f9c8 	bl	8004bd6 <HAL_SPI_Transmit>
		  send_string("{inf,\r\nwrite done,end}\r\n");
 8002846:	4849      	ldr	r0, [pc, #292]	@ (800296c <HAL_GPIO_EXTI_Callback+0x294>)
 8002848:	f7ff fac8 	bl	8001ddc <send_string>
		  spi_status = IDLE;
 800284c:	4b3f      	ldr	r3, [pc, #252]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, pReg->addr);
 8002852:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_GPIO_EXTI_Callback+0x298>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f7fe fdd8 	bl	8001414 <AD717X_ReadRegister>
}
 8002864:	e06b      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == TRIGGER)
 8002866:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d103      	bne.n	8002878 <HAL_GPIO_EXTI_Callback+0x1a0>
		spi_status = READING;
 8002870:	4b36      	ldr	r3, [pc, #216]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
}
 8002876:	e062      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
	  else if (spi_status == GETID)
 8002878:	4b34      	ldr	r3, [pc, #208]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b04      	cmp	r3, #4
 8002880:	d12e      	bne.n	80028e0 <HAL_GPIO_EXTI_Callback+0x208>
		uint8_t Tx = 0x47;
 8002882:	2347      	movs	r3, #71	@ 0x47
 8002884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		uint8_t Rx[2] = {0};
 8002888:	2300      	movs	r3, #0
 800288a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 800288c:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 8002890:	230a      	movs	r3, #10
 8002892:	2201      	movs	r2, #1
 8002894:	482f      	ldr	r0, [pc, #188]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002896:	f002 f99e 	bl	8004bd6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, 2, 100);
 800289a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800289e:	2364      	movs	r3, #100	@ 0x64
 80028a0:	2202      	movs	r2, #2
 80028a2:	482c      	ldr	r0, [pc, #176]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 80028a4:	f002 fadb 	bl	8004e5e <HAL_SPI_Receive>
		uint16_t receivedData = (Rx[0] << 8) | Rx[1];
 80028a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", receivedData);  // Format as hex string with "0x" prefix
 80028be:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4927      	ldr	r1, [pc, #156]	@ (8002964 <HAL_GPIO_EXTI_Callback+0x28c>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f005 fb9b 	bl	8008004 <siprintf>
		send_string(hexString);
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fa82 	bl	8001ddc <send_string>
		spi_status = IDLE;
 80028d8:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
}
 80028de:	e02e      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == SENDING)
 80028e0:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d109      	bne.n	80028fe <HAL_GPIO_EXTI_Callback+0x226>
		  adc_sm = ADC_READING;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_GPIO_EXTI_Callback+0x280>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, 4);
 80028f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <HAL_GPIO_EXTI_Callback+0x298>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2104      	movs	r1, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fd8c 	bl	8001414 <AD717X_ReadRegister>
}
 80028fc:	e01f      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == CHANNEL_OFFSET)
 80028fe:	4b13      	ldr	r3, [pc, #76]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b07      	cmp	r3, #7
 8002906:	d11a      	bne.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
		  uint8_t Tx = 0x40;
 8002908:	2340      	movs	r3, #64	@ 0x40
 800290a:	72fb      	strb	r3, [r7, #11]
		  uint8_t Rx[2] = {0};
 800290c:	2300      	movs	r3, #0
 800290e:	813b      	strh	r3, [r7, #8]
		  HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 8002910:	f107 010b 	add.w	r1, r7, #11
 8002914:	230a      	movs	r3, #10
 8002916:	2201      	movs	r2, #1
 8002918:	480e      	ldr	r0, [pc, #56]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 800291a:	f002 f95c 	bl	8004bd6 <HAL_SPI_Transmit>
		  HAL_SPI_Receive(SPI, Rx, 2, 100);
 800291e:	f107 0108 	add.w	r1, r7, #8
 8002922:	2364      	movs	r3, #100	@ 0x64
 8002924:	2202      	movs	r2, #2
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002928:	f002 fa99 	bl	8004e5e <HAL_SPI_Receive>
		  adc_channel_offset = Rx[1];
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	461a      	mov	r2, r3
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_GPIO_EXTI_Callback+0x270>)
 8002932:	601a      	str	r2, [r3, #0]
		  spi_status = SENDING;
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <HAL_GPIO_EXTI_Callback+0x274>)
 8002936:	2206      	movs	r2, #6
 8002938:	701a      	strb	r2, [r3, #0]
}
 800293a:	e000      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x266>
      __NOP();
 800293c:	bf00      	nop
}
 800293e:	bf00      	nop
 8002940:	377c      	adds	r7, #124	@ 0x7c
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	200010e0 	.word	0x200010e0
 800294c:	2001e5ac 	.word	0x2001e5ac
 8002950:	2001e5b0 	.word	0x2001e5b0
 8002954:	2000048c 	.word	0x2000048c
 8002958:	2001e5ad 	.word	0x2001e5ad
 800295c:	4b000000 	.word	0x4b000000
 8002960:	0800a2b8 	.word	0x0800a2b8
 8002964:	0800a2cc 	.word	0x0800a2cc
 8002968:	2001e5b8 	.word	0x2001e5b8
 800296c:	0800a2e4 	.word	0x0800a2e4
 8002970:	2001e5a8 	.word	0x2001e5a8

08002974 <delay_us>:

void delay_us(uint32_t us)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	uint32_t t_start = htim2.Instance->CNT;
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <delay_us+0x30>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	60fb      	str	r3, [r7, #12]
	while(htim2.Instance->CNT - t_start < us);
 8002984:	bf00      	nop
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <delay_us+0x30>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d8f7      	bhi.n	8002986 <delay_us+0x12>
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	2000053c 	.word	0x2000053c

080029a8 <HAL_UART_TxCpltCallback>:
//		pReg->value += Rx[i];
//	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c0:	b672      	cpsid	i
}
 80029c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <Error_Handler+0x8>

080029c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_MspInit+0x4c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a14 <HAL_MspInit+0x4c>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_MspInit+0x4c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <HAL_MspInit+0x4c>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_MspInit+0x4c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a06:	2007      	movs	r0, #7
 8002a08:	f000 fc1a 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	@ 0x30
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a32      	ldr	r2, [pc, #200]	@ (8002b00 <HAL_SPI_MspInit+0xe8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12c      	bne.n	8002a94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002a44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a29      	ldr	r2, [pc, #164]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a72:	23e0      	movs	r3, #224	@ 0xe0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a82:	2305      	movs	r3, #5
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	481e      	ldr	r0, [pc, #120]	@ (8002b08 <HAL_SPI_MspInit+0xf0>)
 8002a8e:	f001 f81b 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a92:	e031      	b.n	8002af8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_SPI_MspInit+0xf4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12c      	bne.n	8002af8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a10      	ldr	r2, [pc, #64]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_SPI_MspInit+0xec>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ad6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ae8:	2305      	movs	r3, #5
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	4619      	mov	r1, r3
 8002af2:	4807      	ldr	r0, [pc, #28]	@ (8002b10 <HAL_SPI_MspInit+0xf8>)
 8002af4:	f000 ffe8 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002af8:	bf00      	nop
 8002afa:	3730      	adds	r7, #48	@ 0x30
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40013000 	.word	0x40013000
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40003800 	.word	0x40003800
 8002b10:	40020400 	.word	0x40020400

08002b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b24:	d10d      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_TIM_Base_MspInit+0x3c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_TIM_Base_MspInit+0x3c>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_TIM_Base_MspInit+0x3c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	@ 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca4 <HAL_UART_MspInit+0x150>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	f040 8092 	bne.w	8002c9c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_UART_MspInit+0x154>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	4a49      	ldr	r2, [pc, #292]	@ (8002ca8 <HAL_UART_MspInit+0x154>)
 8002b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b88:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <HAL_UART_MspInit+0x154>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	4b43      	ldr	r3, [pc, #268]	@ (8002ca8 <HAL_UART_MspInit+0x154>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ca8 <HAL_UART_MspInit+0x154>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba4:	4b40      	ldr	r3, [pc, #256]	@ (8002ca8 <HAL_UART_MspInit+0x154>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bc0:	2307      	movs	r3, #7
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4838      	ldr	r0, [pc, #224]	@ (8002cac <HAL_UART_MspInit+0x158>)
 8002bcc:	f000 ff7c 	bl	8003ac8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002bd0:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002bd2:	4a38      	ldr	r2, [pc, #224]	@ (8002cb4 <HAL_UART_MspInit+0x160>)
 8002bd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002bd6:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002bd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bde:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be4:	4b32      	ldr	r3, [pc, #200]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bea:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002bec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bf0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c04:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c06:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c14:	4826      	ldr	r0, [pc, #152]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c16:	f000 fb55 	bl	80032c4 <HAL_DMA_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002c20:	f7ff fecc 	bl	80029bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a22      	ldr	r2, [pc, #136]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c2a:	4a21      	ldr	r2, [pc, #132]	@ (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002c30:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c32:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_UART_MspInit+0x168>)
 8002c34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c40:	2240      	movs	r2, #64	@ 0x40
 8002c42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c44:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c58:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c6a:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c70:	4811      	ldr	r0, [pc, #68]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c72:	f000 fb27 	bl	80032c4 <HAL_DMA_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002c7c:	f7ff fe9e 	bl	80029bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c86:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb8 <HAL_UART_MspInit+0x164>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2026      	movs	r0, #38	@ 0x26
 8002c92:	f000 fae0 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c96:	2026      	movs	r0, #38	@ 0x26
 8002c98:	f000 faf9 	bl	800328e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	@ 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	200005cc 	.word	0x200005cc
 8002cb4:	40026088 	.word	0x40026088
 8002cb8:	2000062c 	.word	0x2000062c
 8002cbc:	400260a0 	.word	0x400260a0

08002cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <NMI_Handler+0x4>

08002cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <HardFault_Handler+0x4>

08002cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <MemManage_Handler+0x4>

08002cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <BusFault_Handler+0x4>

08002ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <UsageFault_Handler+0x4>

08002ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d16:	f000 f97f 	bl	8003018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d24:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <DMA1_Stream5_IRQHandler+0x10>)
 8002d26:	f000 fc65 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200005cc 	.word	0x200005cc

08002d34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <DMA1_Stream6_IRQHandler+0x10>)
 8002d3a:	f000 fc5b 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000062c 	.word	0x2000062c

08002d48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRY_Pin);
 8002d4c:	2080      	movs	r0, #128	@ 0x80
 8002d4e:	f001 f869 	bl	8003e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d5c:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <USART2_IRQHandler+0x10>)
 8002d5e:	f003 f9b5 	bl	80060cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000584 	.word	0x20000584

08002d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d74:	f001 f856 	bl	8003e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_kill>:

int _kill(int pid, int sig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d96:	f005 fa31 	bl	80081fc <__errno>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2216      	movs	r2, #22
 8002d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_exit>:

void _exit (int status)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ffe7 	bl	8002d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <_exit+0x12>

08002dc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e00a      	b.n	8002dea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	4601      	mov	r1, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	60ba      	str	r2, [r7, #8]
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dbf0      	blt.n	8002dd4 <_read+0x12>
  }

  return len;
 8002df2:	687b      	ldr	r3, [r7, #4]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e009      	b.n	8002e22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	60ba      	str	r2, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	dbf1      	blt.n	8002e0e <_write+0x12>
  }
  return len;
 8002e2a:	687b      	ldr	r3, [r7, #4]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_close>:

int _close(int file)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e5c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <_isatty>:

int _isatty(int file)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e74:	2301      	movs	r3, #1
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea4:	4a14      	ldr	r2, [pc, #80]	@ (8002ef8 <_sbrk+0x5c>)
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <_sbrk+0x60>)
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <_sbrk+0x64>)
 8002eba:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <_sbrk+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d207      	bcs.n	8002edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ecc:	f005 f996 	bl	80081fc <__errno>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	e009      	b.n	8002ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002edc:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4a05      	ldr	r2, [pc, #20]	@ (8002f00 <_sbrk+0x64>)
 8002eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20020000 	.word	0x20020000
 8002efc:	00000400 	.word	0x00000400
 8002f00:	2001e5c8 	.word	0x2001e5c8
 8002f04:	2001e720 	.word	0x2001e720

08002f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <SystemInit+0x20>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <SystemInit+0x20>)
 8002f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <Reset_Handler>:
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f64 <LoopFillZerobss+0x12>
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <LoopFillZerobss+0x16>)
 8002f32:	490e      	ldr	r1, [pc, #56]	@ (8002f6c <LoopFillZerobss+0x1a>)
 8002f34:	4a0e      	ldr	r2, [pc, #56]	@ (8002f70 <LoopFillZerobss+0x1e>)
 8002f36:	2300      	movs	r3, #0
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:
 8002f3a:	58d4      	ldr	r4, [r2, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:
 8002f40:	18c4      	adds	r4, r0, r3
 8002f42:	428c      	cmp	r4, r1
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
 8002f46:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <LoopFillZerobss+0x22>)
 8002f48:	4c0b      	ldr	r4, [pc, #44]	@ (8002f78 <LoopFillZerobss+0x26>)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:
 8002f52:	42a2      	cmp	r2, r4
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>
 8002f56:	f7ff ffd7 	bl	8002f08 <SystemInit>
 8002f5a:	f005 f955 	bl	8008208 <__libc_init_array>
 8002f5e:	f7ff f8cb 	bl	80020f8 <main>
 8002f62:	4770      	bx	lr
 8002f64:	20020000 	.word	0x20020000
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	20000470 	.word	0x20000470
 8002f70:	0800a6c8 	.word	0x0800a6c8
 8002f74:	20000470 	.word	0x20000470
 8002f78:	2001e71c 	.word	0x2001e71c

08002f7c <ADC_IRQHandler>:
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_Init+0x34>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_Init+0x34>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_Init+0x34>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <HAL_Init+0x34>)
 8002f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f9a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f000 f94f 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f000 f808 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa8:	f7ff fd0e 	bl	80029c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_InitTick+0x54>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_InitTick+0x58>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f967 	bl	80032aa <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d80a      	bhi.n	8003002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fec:	2200      	movs	r2, #0
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f000 f92f 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <HAL_InitTick+0x5c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	2000029c 	.word	0x2000029c
 8003010:	200002a4 	.word	0x200002a4
 8003014:	200002a0 	.word	0x200002a0

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	200002a4 	.word	0x200002a4
 800303c:	2001e5cc 	.word	0x2001e5cc

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2001e5cc 	.word	0x2001e5cc

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_Delay+0x44>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200002a4 	.word	0x200002a4

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	@ (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	@ (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	@ 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	@ (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff feb6 	bl	8003040 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e099      	b.n	8003414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	e00f      	b.n	8003322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003302:	f7ff fe9d 	bl	8003040 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b05      	cmp	r3, #5
 800330e:	d908      	bls.n	8003322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e078      	b.n	8003414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e8      	bne.n	8003302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4b38      	ldr	r3, [pc, #224]	@ (800341c <HAL_DMA_Init+0x158>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	2b04      	cmp	r3, #4
 800337a:	d107      	bne.n	800338c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	4313      	orrs	r3, r2
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d117      	bne.n	80033e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb01 	bl	80039d0 <DMA_CheckFifoParam>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2240      	movs	r2, #64	@ 0x40
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033e2:	2301      	movs	r3, #1
 80033e4:	e016      	b.n	8003414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fab8 	bl	8003964 <DMA_CalcBaseAndBitshift>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	223f      	movs	r2, #63	@ 0x3f
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	f010803f 	.word	0xf010803f

08003420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_DMA_Start_IT+0x26>
 8003442:	2302      	movs	r3, #2
 8003444:	e040      	b.n	80034c8 <HAL_DMA_Start_IT+0xa8>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d12f      	bne.n	80034ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa4a 	bl	8003908 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	223f      	movs	r2, #63	@ 0x3f
 800347a:	409a      	lsls	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0216 	orr.w	r2, r2, #22
 800348e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e005      	b.n	80034c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
 80034c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7ff fdaf 	bl	8003040 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e052      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003520:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_Abort+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	e013      	b.n	800357c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003554:	f7ff fd74 	bl	8003040 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d90c      	bls.n	800357c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e015      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e4      	bne.n	8003554 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358e:	223f      	movs	r2, #63	@ 0x3f
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	@ 0x80
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00c      	b.n	80035e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003600:	4b8e      	ldr	r3, [pc, #568]	@ (800383c <HAL_DMA_IRQHandler+0x248>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a8e      	ldr	r2, [pc, #568]	@ (8003840 <HAL_DMA_IRQHandler+0x24c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ee:	2210      	movs	r2, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e01f      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e016      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	2220      	movs	r2, #32
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 808f 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8087 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b05      	cmp	r3, #5
 800379c:	d136      	bne.n	800380c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x1da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	223f      	movs	r2, #63	@ 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
        }
        return;
 800380a:	e079      	b.n	8003900 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d031      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e02c      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
 800383a:	bf00      	nop
 800383c:	2000029c 	.word	0x2000029c
 8003840:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e01e      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0210 	bic.w	r2, r2, #16
 8003872:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2205      	movs	r2, #5
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d307      	bcc.n	80038dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f2      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x2cc>
 80038da:	e000      	b.n	80038de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003900:	bf00      	nop
    }
  }
}
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003924:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3b10      	subs	r3, #16
 8003974:	4a14      	ldr	r2, [pc, #80]	@ (80039c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397e:	4a13      	ldr	r2, [pc, #76]	@ (80039cc <DMA_CalcBaseAndBitshift+0x68>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d909      	bls.n	80039a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80039a4:	e007      	b.n	80039b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	aaaaaaab 	.word	0xaaaaaaab
 80039cc:	0800a340 	.word	0x0800a340

080039d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d856      	bhi.n	8003a9e <DMA_CheckFifoParam+0xce>
 80039f0:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <DMA_CheckFifoParam+0x28>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a1b 	.word	0x08003a1b
 8003a00:	08003a09 	.word	0x08003a09
 8003a04:	08003a9f 	.word	0x08003a9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d046      	beq.n	8003aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e043      	b.n	8003aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a22:	d140      	bne.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e03d      	b.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a32:	d121      	bne.n	8003a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d837      	bhi.n	8003aaa <DMA_CheckFifoParam+0xda>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <DMA_CheckFifoParam+0x70>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a57 	.word	0x08003a57
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003a69 	.word	0x08003a69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e030      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d025      	beq.n	8003aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a66:	e022      	b.n	8003aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a70:	d11f      	bne.n	8003ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a76:	e01c      	b.n	8003ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d903      	bls.n	8003a86 <DMA_CheckFifoParam+0xb6>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d003      	beq.n	8003a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a84:	e018      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e015      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e00b      	b.n	8003ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e00a      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e008      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e006      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	@ 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e165      	b.n	8003db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8154 	bne.w	8003daa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80ae 	beq.w	8003daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc8 <HAL_GPIO_Init+0x300>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc8 <HAL_GPIO_Init+0x300>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8003dc8 <HAL_GPIO_Init+0x300>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c6a:	4a58      	ldr	r2, [pc, #352]	@ (8003dcc <HAL_GPIO_Init+0x304>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd0 <HAL_GPIO_Init+0x308>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d025      	beq.n	8003ce2 <HAL_GPIO_Init+0x21a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <HAL_GPIO_Init+0x216>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd8 <HAL_GPIO_Init+0x310>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d019      	beq.n	8003cda <HAL_GPIO_Init+0x212>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8003ddc <HAL_GPIO_Init+0x314>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x20e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003de0 <HAL_GPIO_Init+0x318>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x20a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <HAL_GPIO_Init+0x31c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x206>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a49      	ldr	r2, [pc, #292]	@ (8003de8 <HAL_GPIO_Init+0x320>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x202>
 8003cc6:	2306      	movs	r3, #6
 8003cc8:	e00c      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cca:	2307      	movs	r3, #7
 8003ccc:	e00a      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e008      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	e006      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e004      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f002 0203 	and.w	r2, r2, #3
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	4093      	lsls	r3, r2
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf4:	4935      	ldr	r1, [pc, #212]	@ (8003dcc <HAL_GPIO_Init+0x304>)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d02:	4b3a      	ldr	r3, [pc, #232]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d26:	4a31      	ldr	r2, [pc, #196]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d50:	4a26      	ldr	r2, [pc, #152]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d56:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d80:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da4:	4a11      	ldr	r2, [pc, #68]	@ (8003dec <HAL_GPIO_Init+0x324>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3301      	adds	r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b0f      	cmp	r3, #15
 8003db4:	f67f ae96 	bls.w	8003ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	3724      	adds	r7, #36	@ 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40013800 	.word	0x40013800
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	40020400 	.word	0x40020400
 8003dd8:	40020800 	.word	0x40020800
 8003ddc:	40020c00 	.word	0x40020c00
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40021400 	.word	0x40021400
 8003de8:	40021800 	.word	0x40021800
 8003dec:	40013c00 	.word	0x40013c00

08003df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e00:	787b      	ldrb	r3, [r7, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e0c:	e003      	b.n	8003e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	041a      	lsls	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	619a      	str	r2, [r3, #24]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e2e:	4b08      	ldr	r3, [pc, #32]	@ (8003e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d006      	beq.n	8003e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e3a:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fc48 	bl	80026d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e80:	f7ff f8de 	bl	8003040 <HAL_GetTick>
 8003e84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e86:	e009      	b.n	8003e9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e88:	f7ff f8da 	bl	8003040 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e96:	d901      	bls.n	8003e9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e01f      	b.n	8003edc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e9c:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <HAL_PWREx_EnableOverDrive+0x98>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d1ee      	bne.n	8003e88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003eaa:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb0:	f7ff f8c6 	bl	8003040 <HAL_GetTick>
 8003eb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eb6:	e009      	b.n	8003ecc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eb8:	f7ff f8c2 	bl	8003040 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ec6:	d901      	bls.n	8003ecc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e007      	b.n	8003edc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <HAL_PWREx_EnableOverDrive+0x98>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	420e0040 	.word	0x420e0040
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	420e0044 	.word	0x420e0044

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0cc      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b68      	ldr	r3, [pc, #416]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d90c      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b65      	ldr	r3, [pc, #404]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b63      	ldr	r3, [pc, #396]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0b8      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d020      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f48:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a58      	ldr	r2, [pc, #352]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a52      	ldr	r2, [pc, #328]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	494d      	ldr	r1, [pc, #308]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d044      	beq.n	8004014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b47      	ldr	r3, [pc, #284]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e07f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e06f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e067      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b37      	ldr	r3, [pc, #220]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4934      	ldr	r1, [pc, #208]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7ff f82c 	bl	8003040 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7ff f828 	bl	8003040 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2b      	ldr	r3, [pc, #172]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d20c      	bcs.n	800403c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e032      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4916      	ldr	r1, [pc, #88]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004066:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	490e      	ldr	r1, [pc, #56]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800407a:	f000 f855 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 800407e:	4602      	mov	r2, r0
 8004080:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	490a      	ldr	r1, [pc, #40]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	5ccb      	ldrb	r3, [r1, r3]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004096:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe ff8c 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	0800a328 	.word	0x0800a328
 80040b8:	2000029c 	.word	0x2000029c
 80040bc:	200002a0 	.word	0x200002a0

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000029c 	.word	0x2000029c

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff0 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0a9b      	lsrs	r3, r3, #10
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	@ (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	0800a338 	.word	0x0800a338

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffdc 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0b5b      	lsrs	r3, r3, #13
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	@ (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	0800a338 	.word	0x0800a338

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b0ae      	sub	sp, #184	@ 0xb8
 800412e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414e:	4bcb      	ldr	r3, [pc, #812]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b0c      	cmp	r3, #12
 8004158:	f200 8206 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x440>
 800415c:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <HAL_RCC_GetSysClockFreq+0x3c>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004199 	.word	0x08004199
 8004168:	08004569 	.word	0x08004569
 800416c:	08004569 	.word	0x08004569
 8004170:	08004569 	.word	0x08004569
 8004174:	080041a1 	.word	0x080041a1
 8004178:	08004569 	.word	0x08004569
 800417c:	08004569 	.word	0x08004569
 8004180:	08004569 	.word	0x08004569
 8004184:	080041a9 	.word	0x080041a9
 8004188:	08004569 	.word	0x08004569
 800418c:	08004569 	.word	0x08004569
 8004190:	08004569 	.word	0x08004569
 8004194:	08004399 	.word	0x08004399
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004198:	4bb9      	ldr	r3, [pc, #740]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x358>)
 800419a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800419e:	e1e7      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041a0:	4bb8      	ldr	r3, [pc, #736]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041a6:	e1e3      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a8:	4bb4      	ldr	r3, [pc, #720]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041b4:	4bb1      	ldr	r3, [pc, #708]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d071      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c0:	4bae      	ldr	r3, [pc, #696]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80041d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041e6:	4622      	mov	r2, r4
 80041e8:	462b      	mov	r3, r5
 80041ea:	f04f 0000 	mov.w	r0, #0
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	0159      	lsls	r1, r3, #5
 80041f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f8:	0150      	lsls	r0, r2, #5
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4621      	mov	r1, r4
 8004200:	1a51      	subs	r1, r2, r1
 8004202:	6439      	str	r1, [r7, #64]	@ 0x40
 8004204:	4629      	mov	r1, r5
 8004206:	eb63 0301 	sbc.w	r3, r3, r1
 800420a:	647b      	str	r3, [r7, #68]	@ 0x44
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004218:	4649      	mov	r1, r9
 800421a:	018b      	lsls	r3, r1, #6
 800421c:	4641      	mov	r1, r8
 800421e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004222:	4641      	mov	r1, r8
 8004224:	018a      	lsls	r2, r1, #6
 8004226:	4641      	mov	r1, r8
 8004228:	1a51      	subs	r1, r2, r1
 800422a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800422c:	4649      	mov	r1, r9
 800422e:	eb63 0301 	sbc.w	r3, r3, r1
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004240:	4649      	mov	r1, r9
 8004242:	00cb      	lsls	r3, r1, #3
 8004244:	4641      	mov	r1, r8
 8004246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424a:	4641      	mov	r1, r8
 800424c:	00ca      	lsls	r2, r1, #3
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	4603      	mov	r3, r0
 8004254:	4622      	mov	r2, r4
 8004256:	189b      	adds	r3, r3, r2
 8004258:	633b      	str	r3, [r7, #48]	@ 0x30
 800425a:	462b      	mov	r3, r5
 800425c:	460a      	mov	r2, r1
 800425e:	eb42 0303 	adc.w	r3, r2, r3
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004270:	4629      	mov	r1, r5
 8004272:	024b      	lsls	r3, r1, #9
 8004274:	4621      	mov	r1, r4
 8004276:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800427a:	4621      	mov	r1, r4
 800427c:	024a      	lsls	r2, r1, #9
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004286:	2200      	movs	r2, #0
 8004288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800428c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004290:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004294:	f7fc fcb8 	bl	8000c08 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a2:	e067      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a4:	4b75      	ldr	r3, [pc, #468]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	099b      	lsrs	r3, r3, #6
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042b0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80042b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042be:	2300      	movs	r3, #0
 80042c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4621      	mov	r1, r4
 80042e0:	1a51      	subs	r1, r2, r1
 80042e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042e4:	4629      	mov	r1, r5
 80042e6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80042f8:	4649      	mov	r1, r9
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	4641      	mov	r1, r8
 80042fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004302:	4641      	mov	r1, r8
 8004304:	018a      	lsls	r2, r1, #6
 8004306:	4641      	mov	r1, r8
 8004308:	ebb2 0a01 	subs.w	sl, r2, r1
 800430c:	4649      	mov	r1, r9
 800430e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800431e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004326:	4692      	mov	sl, r2
 8004328:	469b      	mov	fp, r3
 800432a:	4623      	mov	r3, r4
 800432c:	eb1a 0303 	adds.w	r3, sl, r3
 8004330:	623b      	str	r3, [r7, #32]
 8004332:	462b      	mov	r3, r5
 8004334:	eb4b 0303 	adc.w	r3, fp, r3
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004346:	4629      	mov	r1, r5
 8004348:	028b      	lsls	r3, r1, #10
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004350:	4621      	mov	r1, r4
 8004352:	028a      	lsls	r2, r1, #10
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800435c:	2200      	movs	r2, #0
 800435e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004360:	677a      	str	r2, [r7, #116]	@ 0x74
 8004362:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004366:	f7fc fc4f 	bl	8000c08 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4613      	mov	r3, r2
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004374:	4b41      	ldr	r3, [pc, #260]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800438a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004396:	e0eb      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b38      	ldr	r3, [pc, #224]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a4:	4b35      	ldr	r3, [pc, #212]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d06b      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b0:	4b32      	ldr	r3, [pc, #200]	@ (800447c <HAL_RCC_GetSysClockFreq+0x354>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	2200      	movs	r2, #0
 80043b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80043c4:	2300      	movs	r3, #0
 80043c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80043c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80043cc:	4622      	mov	r2, r4
 80043ce:	462b      	mov	r3, r5
 80043d0:	f04f 0000 	mov.w	r0, #0
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	0159      	lsls	r1, r3, #5
 80043da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043de:	0150      	lsls	r0, r2, #5
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4621      	mov	r1, r4
 80043e6:	1a51      	subs	r1, r2, r1
 80043e8:	61b9      	str	r1, [r7, #24]
 80043ea:	4629      	mov	r1, r5
 80043ec:	eb63 0301 	sbc.w	r3, r3, r1
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043fe:	4659      	mov	r1, fp
 8004400:	018b      	lsls	r3, r1, #6
 8004402:	4651      	mov	r1, sl
 8004404:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004408:	4651      	mov	r1, sl
 800440a:	018a      	lsls	r2, r1, #6
 800440c:	4651      	mov	r1, sl
 800440e:	ebb2 0801 	subs.w	r8, r2, r1
 8004412:	4659      	mov	r1, fp
 8004414:	eb63 0901 	sbc.w	r9, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004424:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004428:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442c:	4690      	mov	r8, r2
 800442e:	4699      	mov	r9, r3
 8004430:	4623      	mov	r3, r4
 8004432:	eb18 0303 	adds.w	r3, r8, r3
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	462b      	mov	r3, r5
 800443a:	eb49 0303 	adc.w	r3, r9, r3
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800444c:	4629      	mov	r1, r5
 800444e:	024b      	lsls	r3, r1, #9
 8004450:	4621      	mov	r1, r4
 8004452:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004456:	4621      	mov	r1, r4
 8004458:	024a      	lsls	r2, r1, #9
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004462:	2200      	movs	r2, #0
 8004464:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004466:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004468:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800446c:	f7fc fbcc 	bl	8000c08 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4613      	mov	r3, r2
 8004476:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800447a:	e065      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x420>
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004488:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x458>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	2200      	movs	r2, #0
 8004490:	4618      	mov	r0, r3
 8004492:	4611      	mov	r1, r2
 8004494:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004498:	653b      	str	r3, [r7, #80]	@ 0x50
 800449a:	2300      	movs	r3, #0
 800449c:	657b      	str	r3, [r7, #84]	@ 0x54
 800449e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80044a2:	4642      	mov	r2, r8
 80044a4:	464b      	mov	r3, r9
 80044a6:	f04f 0000 	mov.w	r0, #0
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	0159      	lsls	r1, r3, #5
 80044b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b4:	0150      	lsls	r0, r2, #5
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4641      	mov	r1, r8
 80044bc:	1a51      	subs	r1, r2, r1
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4649      	mov	r1, r9
 80044c2:	eb63 0301 	sbc.w	r3, r3, r1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80044d4:	4659      	mov	r1, fp
 80044d6:	018b      	lsls	r3, r1, #6
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044de:	4651      	mov	r1, sl
 80044e0:	018a      	lsls	r2, r1, #6
 80044e2:	4651      	mov	r1, sl
 80044e4:	1a54      	subs	r4, r2, r1
 80044e6:	4659      	mov	r1, fp
 80044e8:	eb63 0501 	sbc.w	r5, r3, r1
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	00eb      	lsls	r3, r5, #3
 80044f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fa:	00e2      	lsls	r2, r4, #3
 80044fc:	4614      	mov	r4, r2
 80044fe:	461d      	mov	r5, r3
 8004500:	4643      	mov	r3, r8
 8004502:	18e3      	adds	r3, r4, r3
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	464b      	mov	r3, r9
 8004508:	eb45 0303 	adc.w	r3, r5, r3
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451a:	4629      	mov	r1, r5
 800451c:	028b      	lsls	r3, r1, #10
 800451e:	4621      	mov	r1, r4
 8004520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004524:	4621      	mov	r1, r4
 8004526:	028a      	lsls	r2, r1, #10
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004530:	2200      	movs	r2, #0
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004534:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004536:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800453a:	f7fc fb65 	bl	8000c08 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4613      	mov	r3, r2
 8004544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004548:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x458>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0f1b      	lsrs	r3, r3, #28
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800455a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004566:	e003      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x45c>)
 800456a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800456e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004574:	4618      	mov	r0, r3
 8004576:	37b8      	adds	r7, #184	@ 0xb8
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400

08004588 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e28d      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8083 	beq.w	80046ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045a8:	4b94      	ldr	r3, [pc, #592]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d019      	beq.n	80045e8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045b4:	4b91      	ldr	r3, [pc, #580]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
        || \
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045c0:	4b8e      	ldr	r3, [pc, #568]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045cc:	d00c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b8b      	ldr	r3, [pc, #556]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d112      	bne.n	8004600 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4b88      	ldr	r3, [pc, #544]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045e6:	d10b      	bne.n	8004600 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	4b84      	ldr	r3, [pc, #528]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d05b      	beq.n	80046ac <HAL_RCC_OscConfig+0x124>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d157      	bne.n	80046ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e25a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004608:	d106      	bne.n	8004618 <HAL_RCC_OscConfig+0x90>
 800460a:	4b7c      	ldr	r3, [pc, #496]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7b      	ldr	r2, [pc, #492]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e01d      	b.n	8004654 <HAL_RCC_OscConfig+0xcc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0xb4>
 8004622:	4b76      	ldr	r3, [pc, #472]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a75      	ldr	r2, [pc, #468]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b73      	ldr	r3, [pc, #460]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a72      	ldr	r2, [pc, #456]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0xcc>
 800463c:	4b6f      	ldr	r3, [pc, #444]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6e      	ldr	r2, [pc, #440]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b6c      	ldr	r3, [pc, #432]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6b      	ldr	r2, [pc, #428]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fe fcf0 	bl	8003040 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fe fcec 	bl	8003040 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	@ 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e21f      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b61      	ldr	r3, [pc, #388]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0xdc>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fe fcdc 	bl	8003040 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fe fcd8 	bl	8003040 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	@ 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e20b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	4b57      	ldr	r3, [pc, #348]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x104>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d06f      	beq.n	800479a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ba:	4b50      	ldr	r3, [pc, #320]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d017      	beq.n	80046f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046c6:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d105      	bne.n	80046de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046d2:	4b4a      	ldr	r3, [pc, #296]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046de:	4b47      	ldr	r3, [pc, #284]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d11c      	bne.n	8004724 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ea:	4b44      	ldr	r3, [pc, #272]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d116      	bne.n	8004724 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f6:	4b41      	ldr	r3, [pc, #260]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_RCC_OscConfig+0x186>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e1d3      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470e:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4937      	ldr	r1, [pc, #220]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004722:	e03a      	b.n	800479a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800472c:	4b34      	ldr	r3, [pc, #208]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fe fc85 	bl	8003040 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473a:	f7fe fc81 	bl	8003040 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1b4      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	4b2b      	ldr	r3, [pc, #172]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004758:	4b28      	ldr	r3, [pc, #160]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4925      	ldr	r1, [pc, #148]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004768:	4313      	orrs	r3, r2
 800476a:	600b      	str	r3, [r1, #0]
 800476c:	e015      	b.n	800479a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476e:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fe fc64 	bl	8003040 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477c:	f7fe fc60 	bl	8003040 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e193      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d036      	beq.n	8004814 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d016      	beq.n	80047dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <HAL_RCC_OscConfig+0x27c>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fe fc44 	bl	8003040 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047bc:	f7fe fc40 	bl	8003040 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e173      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80047d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x234>
 80047da:	e01b      	b.n	8004814 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047dc:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <HAL_RCC_OscConfig+0x27c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fe fc2d 	bl	8003040 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e8:	e00e      	b.n	8004808 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ea:	f7fe fc29 	bl	8003040 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d907      	bls.n	8004808 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e15c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
 80047fc:	40023800 	.word	0x40023800
 8004800:	42470000 	.word	0x42470000
 8004804:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004808:	4b8a      	ldr	r3, [pc, #552]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 800480a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ea      	bne.n	80047ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8097 	beq.w	8004950 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004826:	4b83      	ldr	r3, [pc, #524]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	4b7f      	ldr	r3, [pc, #508]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004840:	6413      	str	r3, [r2, #64]	@ 0x40
 8004842:	4b7c      	ldr	r3, [pc, #496]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	4b79      	ldr	r3, [pc, #484]	@ (8004a38 <HAL_RCC_OscConfig+0x4b0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d118      	bne.n	8004890 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800485e:	4b76      	ldr	r3, [pc, #472]	@ (8004a38 <HAL_RCC_OscConfig+0x4b0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a75      	ldr	r2, [pc, #468]	@ (8004a38 <HAL_RCC_OscConfig+0x4b0>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486a:	f7fe fbe9 	bl	8003040 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004872:	f7fe fbe5 	bl	8003040 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e118      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	4b6c      	ldr	r3, [pc, #432]	@ (8004a38 <HAL_RCC_OscConfig+0x4b0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x31e>
 8004898:	4b66      	ldr	r3, [pc, #408]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489c:	4a65      	ldr	r2, [pc, #404]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a4:	e01c      	b.n	80048e0 <HAL_RCC_OscConfig+0x358>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x340>
 80048ae:	4b61      	ldr	r3, [pc, #388]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a60      	ldr	r2, [pc, #384]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048b4:	f043 0304 	orr.w	r3, r3, #4
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	4a5d      	ldr	r2, [pc, #372]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0x358>
 80048c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4a59      	ldr	r2, [pc, #356]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d4:	4b57      	ldr	r3, [pc, #348]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d8:	4a56      	ldr	r2, [pc, #344]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80048da:	f023 0304 	bic.w	r3, r3, #4
 80048de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d015      	beq.n	8004914 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fe fbaa 	bl	8003040 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f0:	f7fe fba6 	bl	8003040 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0d7      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	4b4b      	ldr	r3, [pc, #300]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ee      	beq.n	80048f0 <HAL_RCC_OscConfig+0x368>
 8004912:	e014      	b.n	800493e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fe fb94 	bl	8003040 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fe fb90 	bl	8003040 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0c1      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004932:	4b40      	ldr	r3, [pc, #256]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1ee      	bne.n	800491c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	4a3a      	ldr	r2, [pc, #232]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 800494a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800494e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80ad 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800495a:	4b36      	ldr	r3, [pc, #216]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b08      	cmp	r3, #8
 8004964:	d060      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d145      	bne.n	80049fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b33      	ldr	r3, [pc, #204]	@ (8004a3c <HAL_RCC_OscConfig+0x4b4>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe fb64 	bl	8003040 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497c:	f7fe fb60 	bl	8003040 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e093      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	019b      	lsls	r3, r3, #6
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	3b01      	subs	r3, #1
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	491b      	ldr	r1, [pc, #108]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <HAL_RCC_OscConfig+0x4b4>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fe fb35 	bl	8003040 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049da:	f7fe fb31 	bl	8003040 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e064      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x452>
 80049f8:	e05c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <HAL_RCC_OscConfig+0x4b4>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe fb1e 	bl	8003040 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fe fb1a 	bl	8003040 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04d      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x480>
 8004a26:	e045      	b.n	8004ab4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e040      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40007000 	.word	0x40007000
 8004a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a40:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac0 <HAL_RCC_OscConfig+0x538>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d030      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d129      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d122      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d119      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10f      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800

08004ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07b      	b.n	8004bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d108      	bne.n	8004af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ae6:	d009      	beq.n	8004afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	61da      	str	r2, [r3, #28]
 8004aee:	e005      	b.n	8004afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd ff7e 	bl	8002a18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b80:	ea42 0103 	orr.w	r1, r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0104 	and.w	r1, r3, #4
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	f003 0210 	and.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b088      	sub	sp, #32
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be6:	f7fe fa2b 	bl	8003040 <HAL_GetTick>
 8004bea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e12a      	b.n	8004e56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Transmit+0x36>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e122      	b.n	8004e56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_SPI_Transmit+0x48>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e11b      	b.n	8004e56 <HAL_SPI_Transmit+0x280>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6c:	d10f      	bne.n	8004c8e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d007      	beq.n	8004cac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004caa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb4:	d152      	bne.n	8004d5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Transmit+0xee>
 8004cbe:	8b7b      	ldrh	r3, [r7, #26]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d145      	bne.n	8004d50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	1c9a      	adds	r2, r3, #2
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ce8:	e032      	b.n	8004d50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d112      	bne.n	8004d1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	881a      	ldrh	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d1c:	e018      	b.n	8004d50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1e:	f7fe f98f 	bl	8003040 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d803      	bhi.n	8004d36 <HAL_SPI_Transmit+0x160>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d102      	bne.n	8004d3c <HAL_SPI_Transmit+0x166>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e082      	b.n	8004e56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1c7      	bne.n	8004cea <HAL_SPI_Transmit+0x114>
 8004d5a:	e053      	b.n	8004e04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_Transmit+0x194>
 8004d64:	8b7b      	ldrh	r3, [r7, #26]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d147      	bne.n	8004dfa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d90:	e033      	b.n	8004dfa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d113      	bne.n	8004dc8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004dc6:	e018      	b.n	8004dfa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc8:	f7fe f93a 	bl	8003040 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d803      	bhi.n	8004de0 <HAL_SPI_Transmit+0x20a>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d102      	bne.n	8004de6 <HAL_SPI_Transmit+0x210>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e02d      	b.n	8004e56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1c6      	bne.n	8004d92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fbd9 	bl	80055c0 <SPI_EndRxTxTransaction>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af02      	add	r7, sp, #8
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e104      	b.n	8005088 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e86:	d112      	bne.n	8004eae <HAL_SPI_Receive+0x50>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10e      	bne.n	8004eae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2204      	movs	r2, #4
 8004e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f8f3 	bl	8005090 <HAL_SPI_TransmitReceive>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	e0ec      	b.n	8005088 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eae:	f7fe f8c7 	bl	8003040 <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Receive+0x62>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0e1      	b.n	8005088 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_Receive+0x74>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0da      	b.n	8005088 <HAL_SPI_Receive+0x22a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2204      	movs	r2, #4
 8004ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f20:	d10f      	bne.n	8004f42 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4c:	2b40      	cmp	r3, #64	@ 0x40
 8004f4e:	d007      	beq.n	8004f60 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d170      	bne.n	800504a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f68:	e035      	b.n	8004fd6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d115      	bne.n	8004fa4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f103 020c 	add.w	r2, r3, #12
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	7812      	ldrb	r2, [r2, #0]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fa2:	e018      	b.n	8004fd6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa4:	f7fe f84c 	bl	8003040 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d803      	bhi.n	8004fbc <HAL_SPI_Receive+0x15e>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d102      	bne.n	8004fc2 <HAL_SPI_Receive+0x164>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e058      	b.n	8005088 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1c4      	bne.n	8004f6a <HAL_SPI_Receive+0x10c>
 8004fe0:	e038      	b.n	8005054 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d113      	bne.n	8005018 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005016:	e018      	b.n	800504a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005018:	f7fe f812 	bl	8003040 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d803      	bhi.n	8005030 <HAL_SPI_Receive+0x1d2>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d102      	bne.n	8005036 <HAL_SPI_Receive+0x1d8>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e01e      	b.n	8005088 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1c6      	bne.n	8004fe2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fa4b 	bl	80054f4 <SPI_EndRxTransaction>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	@ 0x28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800509e:	2301      	movs	r3, #1
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a2:	f7fd ffcd 	bl	8003040 <HAL_GetTick>
 80050a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d00c      	beq.n	80050da <HAL_SPI_TransmitReceive+0x4a>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c6:	d106      	bne.n	80050d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <HAL_SPI_TransmitReceive+0x46>
 80050d0:	7ffb      	ldrb	r3, [r7, #31]
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d001      	beq.n	80050da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80050d6:	2302      	movs	r3, #2
 80050d8:	e17f      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x5c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x5c>
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e174      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x6e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e16d      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b04      	cmp	r3, #4
 8005110:	d003      	beq.n	800511a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2205      	movs	r2, #5
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	887a      	ldrh	r2, [r7, #2]
 800512a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	887a      	ldrh	r2, [r7, #2]
 8005142:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d007      	beq.n	800516e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800516c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005176:	d17e      	bne.n	8005276 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_SPI_TransmitReceive+0xf6>
 8005180:	8afb      	ldrh	r3, [r7, #22]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d16c      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051aa:	e059      	b.n	8005260 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d11b      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x162>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d016      	beq.n	80051f2 <HAL_SPI_TransmitReceive+0x162>
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d113      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ce:	881a      	ldrh	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d119      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x1a4>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	b292      	uxth	r2, r2
 8005216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005230:	2301      	movs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005234:	f7fd ff04 	bl	8003040 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005240:	429a      	cmp	r2, r3
 8005242:	d80d      	bhi.n	8005260 <HAL_SPI_TransmitReceive+0x1d0>
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d009      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e0bc      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1a0      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x11c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d19b      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x11c>
 8005274:	e082      	b.n	800537c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x1f4>
 800527e:	8afb      	ldrh	r3, [r7, #22]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d171      	bne.n	8005368 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052aa:	e05d      	b.n	8005368 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d11c      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x264>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d017      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x264>
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d114      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	7812      	ldrb	r2, [r2, #0]
 80052d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d119      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x2a6>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d014      	beq.n	8005336 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005332:	2301      	movs	r3, #1
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005336:	f7fd fe83 	bl	8003040 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005342:	429a      	cmp	r2, r3
 8005344:	d803      	bhi.n	800534e <HAL_SPI_TransmitReceive+0x2be>
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d102      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x2c4>
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e038      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d19c      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x21c>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d197      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f91d 	bl	80055c0 <SPI_EndRxTxTransaction>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e01d      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3728      	adds	r7, #40	@ 0x28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053f4:	f7fd fe24 	bl	8003040 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4413      	add	r3, r2
 8005402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005404:	f7fd fe1c 	bl	8003040 <HAL_GetTick>
 8005408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800540a:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	015b      	lsls	r3, r3, #5
 8005410:	0d1b      	lsrs	r3, r3, #20
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541a:	e054      	b.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d050      	beq.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005424:	f7fd fe0c 	bl	8003040 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	429a      	cmp	r2, r3
 8005432:	d902      	bls.n	800543a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d13d      	bne.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005452:	d111      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545c:	d004      	beq.n	8005468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005466:	d107      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005480:	d10f      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e017      	b.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d19b      	bne.n	800541c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	2000029c 	.word	0x2000029c

080054f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005508:	d111      	bne.n	800552e <SPI_EndRxTransaction+0x3a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005512:	d004      	beq.n	800551e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551c:	d107      	bne.n	800552e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005536:	d12a      	bne.n	800558e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005540:	d012      	beq.n	8005568 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	@ 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff49 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02d      	beq.n	80055b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e026      	b.n	80055b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	2101      	movs	r1, #1
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff ff36 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e013      	b.n	80055b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	2101      	movs	r1, #1
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff23 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e000      	b.n	80055b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2201      	movs	r2, #1
 80055d4:	2102      	movs	r1, #2
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff ff04 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e032      	b.n	8005658 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005660 <SPI_EndRxTxTransaction+0xa0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <SPI_EndRxTxTransaction+0xa4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	0d5b      	lsrs	r3, r3, #21
 80055fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005610:	d112      	bne.n	8005638 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2200      	movs	r2, #0
 800561a:	2180      	movs	r1, #128	@ 0x80
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff fee1 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d016      	beq.n	8005656 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e00f      	b.n	8005658 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3b01      	subs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b80      	cmp	r3, #128	@ 0x80
 8005650:	d0f2      	beq.n	8005638 <SPI_EndRxTxTransaction+0x78>
 8005652:	e000      	b.n	8005656 <SPI_EndRxTxTransaction+0x96>
        break;
 8005654:	bf00      	nop
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	2000029c 	.word	0x2000029c
 8005664:	165e9f81 	.word	0x165e9f81

08005668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e041      	b.n	80056fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fd fa40 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 f95e 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e046      	b.n	80057ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a23      	ldr	r2, [pc, #140]	@ (80057bc <HAL_TIM_Base_Start+0xb4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573a:	d01d      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1f      	ldr	r2, [pc, #124]	@ (80057c0 <HAL_TIM_Base_Start+0xb8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <HAL_TIM_Base_Start+0xbc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <HAL_TIM_Base_Start+0xc0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <HAL_TIM_Base_Start+0xc4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a19      	ldr	r2, [pc, #100]	@ (80057d0 <HAL_TIM_Base_Start+0xc8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_TIM_Base_Start+0x70>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a18      	ldr	r2, [pc, #96]	@ (80057d4 <HAL_TIM_Base_Start+0xcc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d111      	bne.n	800579c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b06      	cmp	r3, #6
 8005788:	d010      	beq.n	80057ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	e007      	b.n	80057ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40001800 	.word	0x40001800

080057d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0b4      	b.n	800595e <HAL_TIM_ConfigClockSource+0x186>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582c:	d03e      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0xd4>
 800582e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005832:	f200 8087 	bhi.w	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583a:	f000 8086 	beq.w	800594a <HAL_TIM_ConfigClockSource+0x172>
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005842:	d87f      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b70      	cmp	r3, #112	@ 0x70
 8005846:	d01a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xa6>
 8005848:	2b70      	cmp	r3, #112	@ 0x70
 800584a:	d87b      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b60      	cmp	r3, #96	@ 0x60
 800584e:	d050      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005850:	2b60      	cmp	r3, #96	@ 0x60
 8005852:	d877      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b50      	cmp	r3, #80	@ 0x50
 8005856:	d03c      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005858:	2b50      	cmp	r3, #80	@ 0x50
 800585a:	d873      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b40      	cmp	r3, #64	@ 0x40
 800585e:	d058      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x13a>
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d86f      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b30      	cmp	r3, #48	@ 0x30
 8005866:	d064      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	2b30      	cmp	r3, #48	@ 0x30
 800586a:	d86b      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b20      	cmp	r3, #32
 800586e:	d060      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d867      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05c      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 8005878:	2b10      	cmp	r3, #16
 800587a:	d05a      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x15a>
 800587c:	e062      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800588e:	f000 f991 	bl	8005bb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	609a      	str	r2, [r3, #8]
      break;
 80058aa:	e04f      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	f000 f97a 	bl	8005bb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058ce:	609a      	str	r2, [r3, #8]
      break;
 80058d0:	e03c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f8ee 	bl	8005ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2150      	movs	r1, #80	@ 0x50
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f947 	bl	8005b7e <TIM_ITRx_SetConfig>
      break;
 80058f0:	e02c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f90d 	bl	8005b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2160      	movs	r1, #96	@ 0x60
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f937 	bl	8005b7e <TIM_ITRx_SetConfig>
      break;
 8005910:	e01c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f8ce 	bl	8005ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2140      	movs	r1, #64	@ 0x40
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f927 	bl	8005b7e <TIM_ITRx_SetConfig>
      break;
 8005930:	e00c      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 f91e 	bl	8005b7e <TIM_ITRx_SetConfig>
      break;
 8005942:	e003      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      break;
 8005948:	e000      	b.n	800594c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800594a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a46      	ldr	r2, [pc, #280]	@ (8005a94 <TIM_Base_SetConfig+0x12c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a43      	ldr	r2, [pc, #268]	@ (8005a98 <TIM_Base_SetConfig+0x130>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a42      	ldr	r2, [pc, #264]	@ (8005a9c <TIM_Base_SetConfig+0x134>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a41      	ldr	r2, [pc, #260]	@ (8005aa0 <TIM_Base_SetConfig+0x138>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a40      	ldr	r2, [pc, #256]	@ (8005aa4 <TIM_Base_SetConfig+0x13c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a35      	ldr	r2, [pc, #212]	@ (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c8:	d027      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a32      	ldr	r2, [pc, #200]	@ (8005a98 <TIM_Base_SetConfig+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d023      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a31      	ldr	r2, [pc, #196]	@ (8005a9c <TIM_Base_SetConfig+0x134>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a30      	ldr	r2, [pc, #192]	@ (8005aa0 <TIM_Base_SetConfig+0x138>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa4 <TIM_Base_SetConfig+0x13c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d017      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa8 <TIM_Base_SetConfig+0x140>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	@ (8005aac <TIM_Base_SetConfig+0x144>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab0 <TIM_Base_SetConfig+0x148>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab4 <TIM_Base_SetConfig+0x14c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <TIM_Base_SetConfig+0x150>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a29      	ldr	r2, [pc, #164]	@ (8005abc <TIM_Base_SetConfig+0x154>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a10      	ldr	r2, [pc, #64]	@ (8005a94 <TIM_Base_SetConfig+0x12c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a12      	ldr	r2, [pc, #72]	@ (8005aa4 <TIM_Base_SetConfig+0x13c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	611a      	str	r2, [r3, #16]
  }
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800
 8005ab4:	40001800 	.word	0x40001800
 8005ab8:	40001c00 	.word	0x40001c00
 8005abc:	40002000 	.word	0x40002000

08005ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 030a 	bic.w	r3, r3, #10
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f023 0210 	bic.w	r2, r3, #16
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	031b      	lsls	r3, r3, #12
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f043 0307 	orr.w	r3, r3, #7
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	609a      	str	r2, [r3, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	609a      	str	r2, [r3, #8]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e05a      	b.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a21      	ldr	r2, [pc, #132]	@ (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d01d      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1a      	ldr	r2, [pc, #104]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	@ (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a17      	ldr	r2, [pc, #92]	@ (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10c      	bne.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40010400 	.word	0x40010400
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40001800 	.word	0x40001800

08005cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e042      	b.n	8005d84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fc ff1e 	bl	8002b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	@ 0x24
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f8a3 	bl	8006e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d175      	bne.n	8005e98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_UART_Transmit+0x2c>
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e06e      	b.n	8005e9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2221      	movs	r2, #33	@ 0x21
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dca:	f7fd f939 	bl	8003040 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	88fa      	ldrh	r2, [r7, #6]
 8005dd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	88fa      	ldrh	r2, [r7, #6]
 8005dda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de4:	d108      	bne.n	8005df8 <HAL_UART_Transmit+0x6c>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e003      	b.n	8005e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e00:	e02e      	b.n	8005e60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2180      	movs	r1, #128	@ 0x80
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fd7c 	bl	800690a <UART_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e03a      	b.n	8005e9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e007      	b.n	8005e52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1cb      	bne.n	8005e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2140      	movs	r1, #64	@ 0x40
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fd48 	bl	800690a <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e006      	b.n	8005e9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e000      	b.n	8005e9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
  }
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08c      	sub	sp, #48	@ 0x30
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d156      	bne.n	8005f6c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_UART_Transmit_DMA+0x26>
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e04f      	b.n	8005f6e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2221      	movs	r2, #33	@ 0x21
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef2:	4a21      	ldr	r2, [pc, #132]	@ (8005f78 <HAL_UART_Transmit_DMA+0xd4>)
 8005ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	4a20      	ldr	r2, [pc, #128]	@ (8005f7c <HAL_UART_Transmit_DMA+0xd8>)
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f02:	4a1f      	ldr	r2, [pc, #124]	@ (8005f80 <HAL_UART_Transmit_DMA+0xdc>)
 8005f04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	461a      	mov	r2, r3
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	f7fd fa7b 	bl	8003420 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	617b      	str	r3, [r7, #20]
   return(result);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6a39      	ldr	r1, [r7, #32]
 8005f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3730      	adds	r7, #48	@ 0x30
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	08006659 	.word	0x08006659
 8005f7c:	080066f3 	.word	0x080066f3
 8005f80:	08006877 	.word	0x08006877

08005f84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d112      	bne.n	8005fc4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_UART_Receive_DMA+0x26>
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e00b      	b.n	8005fc6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fcfe 	bl	80069bc <UART_Start_Receive_DMA>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	e000      	b.n	8005fc6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b090      	sub	sp, #64	@ 0x40
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe4:	2b80      	cmp	r3, #128	@ 0x80
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2301      	moveq	r3, #1
 8005fea:	2300      	movne	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b21      	cmp	r3, #33	@ 0x21
 8005ffa:	d128      	bne.n	800604e <HAL_UART_DMAStop+0x80>
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d025      	beq.n	800604e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3314      	adds	r3, #20
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	623b      	str	r3, [r7, #32]
   return(result);
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3314      	adds	r3, #20
 8006020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006022:	633a      	str	r2, [r7, #48]	@ 0x30
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	4618      	mov	r0, r3
 8006044:	f7fd fa44 	bl	80034d0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fd51 	bl	8006af0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b40      	cmp	r3, #64	@ 0x40
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b22      	cmp	r3, #34	@ 0x22
 800606e:	d128      	bne.n	80060c2 <HAL_UART_DMAStop+0xf4>
 8006070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d025      	beq.n	80060c2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	60fb      	str	r3, [r7, #12]
   return(result);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006096:	61fa      	str	r2, [r7, #28]
 8006098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	617b      	str	r3, [r7, #20]
   return(result);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e5      	bne.n	8006076 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd fa0a 	bl	80034d0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fd3f 	bl	8006b40 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3740      	adds	r7, #64	@ 0x40
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b0ba      	sub	sp, #232	@ 0xe8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800610a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10f      	bne.n	8006132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <HAL_UART_IRQHandler+0x66>
 800611e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fde7 	bl	8006cfe <UART_Receive_IT>
      return;
 8006130:	e25b      	b.n	80065ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80de 	beq.w	80062f8 <HAL_UART_IRQHandler+0x22c>
 800613c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d106      	bne.n	8006156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800614c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80d1 	beq.w	80062f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_UART_IRQHandler+0xae>
 8006162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	f043 0201 	orr.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_UART_IRQHandler+0xd2>
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	f043 0202 	orr.w	r2, r3, #2
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800619e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <HAL_UART_IRQHandler+0xf6>
 80061aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ba:	f043 0204 	orr.w	r2, r3, #4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <HAL_UART_IRQHandler+0x126>
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ea:	f043 0208 	orr.w	r2, r3, #8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 81f2 	beq.w	80065e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_IRQHandler+0x14e>
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fd72 	bl	8006cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006224:	2b40      	cmp	r3, #64	@ 0x40
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <HAL_UART_IRQHandler+0x17a>
 800623e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d04f      	beq.n	80062e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fc7a 	bl	8006b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006256:	2b40      	cmp	r3, #64	@ 0x40
 8006258:	d141      	bne.n	80062de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006286:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800628a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800629e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1d9      	bne.n	800625a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d013      	beq.n	80062d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b2:	4a7e      	ldr	r2, [pc, #504]	@ (80064ac <HAL_UART_IRQHandler+0x3e0>)
 80062b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd f978 	bl	80035b0 <HAL_DMA_Abort_IT>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d4:	e00e      	b.n	80062f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9a8 	bl	800662c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	e00a      	b.n	80062f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f9a4 	bl	800662c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	e006      	b.n	80062f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9a0 	bl	800662c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062f2:	e175      	b.n	80065e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	bf00      	nop
    return;
 80062f6:	e173      	b.n	80065e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	f040 814f 	bne.w	80065a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8148 	beq.w	80065a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8141 	beq.w	80065a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b40      	cmp	r3, #64	@ 0x40
 8006340:	f040 80b6 	bne.w	80064b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8145 	beq.w	80065e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800635e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006362:	429a      	cmp	r2, r3
 8006364:	f080 813e 	bcs.w	80065e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800636e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800637a:	f000 8088 	beq.w	800648e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006394:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800639c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1d9      	bne.n	800637e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3314      	adds	r3, #20
 80063d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3314      	adds	r3, #20
 80063ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e1      	bne.n	80063ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800642a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800642c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006430:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e3      	bne.n	8006406 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800645c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645e:	f023 0310 	bic.w	r3, r3, #16
 8006462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006470:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006472:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006476:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800647e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e3      	bne.n	800644c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006488:	4618      	mov	r0, r3
 800648a:	f7fd f821 	bl	80034d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800649c:	b29b      	uxth	r3, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f8cb 	bl	8006640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064aa:	e09b      	b.n	80065e4 <HAL_UART_IRQHandler+0x518>
 80064ac:	08006c07 	.word	0x08006c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 808e 	beq.w	80065e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8089 	beq.w	80065e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80064fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80064fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e3      	bne.n	80064d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3314      	adds	r3, #20
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	623b      	str	r3, [r7, #32]
   return(result);
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006532:	633a      	str	r2, [r7, #48]	@ 0x30
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	60fb      	str	r3, [r7, #12]
   return(result);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0310 	bic.w	r3, r3, #16
 800656a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006578:	61fa      	str	r2, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	617b      	str	r3, [r7, #20]
   return(result);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e3      	bne.n	8006554 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f851 	bl	8006640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800659e:	e023      	b.n	80065e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <HAL_UART_IRQHandler+0x4f4>
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fb38 	bl	8006c2e <UART_Transmit_IT>
    return;
 80065be:	e014      	b.n	80065ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <HAL_UART_IRQHandler+0x51e>
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb78 	bl	8006cce <UART_EndTransmit_IT>
    return;
 80065de:	e004      	b.n	80065ea <HAL_UART_IRQHandler+0x51e>
    return;
 80065e0:	bf00      	nop
 80065e2:	e002      	b.n	80065ea <HAL_UART_IRQHandler+0x51e>
      return;
 80065e4:	bf00      	nop
 80065e6:	e000      	b.n	80065ea <HAL_UART_IRQHandler+0x51e>
      return;
 80065e8:	bf00      	nop
  }
}
 80065ea:	37e8      	adds	r7, #232	@ 0xe8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b090      	sub	sp, #64	@ 0x40
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d137      	bne.n	80066e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006676:	2200      	movs	r2, #0
 8006678:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800667a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3314      	adds	r3, #20
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	623b      	str	r3, [r7, #32]
   return(result);
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006690:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800669a:	633a      	str	r2, [r7, #48]	@ 0x30
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066ce:	61fa      	str	r2, [r7, #28]
 80066d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	69b9      	ldr	r1, [r7, #24]
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	617b      	str	r3, [r7, #20]
   return(result);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066e2:	e002      	b.n	80066ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80066e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80066e6:	f7fc f95f 	bl	80029a8 <HAL_UART_TxCpltCallback>
}
 80066ea:	bf00      	nop
 80066ec:	3740      	adds	r7, #64	@ 0x40
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff ff75 	bl	80065f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b09c      	sub	sp, #112	@ 0x70
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d172      	bne.n	8006810 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800672a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800672c:	2200      	movs	r2, #0
 800672e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006742:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006746:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006750:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006752:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800675e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e5      	bne.n	8006730 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	667b      	str	r3, [r7, #100]	@ 0x64
 800677c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006784:	647a      	str	r2, [r7, #68]	@ 0x44
 8006786:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800678a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	623b      	str	r3, [r7, #32]
   return(result);
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80067b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80067ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e5      	bne.n	8006798 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d119      	bne.n	8006810 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067fc:	61fa      	str	r2, [r7, #28]
 80067fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	69b9      	ldr	r1, [r7, #24]
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	617b      	str	r3, [r7, #20]
   return(result);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e5      	bne.n	80067dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006812:	2200      	movs	r2, #0
 8006814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	2b01      	cmp	r3, #1
 800681c:	d106      	bne.n	800682c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800681e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006820:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006822:	4619      	mov	r1, r3
 8006824:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006826:	f7ff ff0b 	bl	8006640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800682a:	e002      	b.n	8006832 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800682c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800682e:	f7ff fee9 	bl	8006604 <HAL_UART_RxCpltCallback>
}
 8006832:	bf00      	nop
 8006834:	3770      	adds	r7, #112	@ 0x70
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006852:	2b01      	cmp	r3, #1
 8006854:	d108      	bne.n	8006868 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	b29b      	uxth	r3, r3
 800685e:	4619      	mov	r1, r3
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff feed 	bl	8006640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006866:	e002      	b.n	800686e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff fed5 	bl	8006618 <HAL_UART_RxHalfCpltCallback>
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006886:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006892:	2b80      	cmp	r3, #128	@ 0x80
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b21      	cmp	r3, #33	@ 0x21
 80068a8:	d108      	bne.n	80068bc <UART_DMAError+0x46>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80068b6:	68b8      	ldr	r0, [r7, #8]
 80068b8:	f000 f91a 	bl	8006af0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	bf0c      	ite	eq
 80068ca:	2301      	moveq	r3, #1
 80068cc:	2300      	movne	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b22      	cmp	r3, #34	@ 0x22
 80068dc:	d108      	bne.n	80068f0 <UART_DMAError+0x7a>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80068ea:	68b8      	ldr	r0, [r7, #8]
 80068ec:	f000 f928 	bl	8006b40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f4:	f043 0210 	orr.w	r2, r3, #16
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068fc:	68b8      	ldr	r0, [r7, #8]
 80068fe:	f7ff fe95 	bl	800662c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691a:	e03b      	b.n	8006994 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006922:	d037      	beq.n	8006994 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006924:	f7fc fb8c 	bl	8003040 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	6a3a      	ldr	r2, [r7, #32]
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <UART_WaitOnFlagUntilTimeout+0x30>
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e03a      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d023      	beq.n	8006994 <UART_WaitOnFlagUntilTimeout+0x8a>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d020      	beq.n	8006994 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	d01d      	beq.n	8006994 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b08      	cmp	r3, #8
 8006964:	d116      	bne.n	8006994 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f8df 	bl	8006b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2208      	movs	r2, #8
 8006986:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e00f      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	bf0c      	ite	eq
 80069a4:	2301      	moveq	r3, #1
 80069a6:	2300      	movne	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d0b4      	beq.n	800691c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b098      	sub	sp, #96	@ 0x60
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	88fa      	ldrh	r2, [r7, #6]
 80069d4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2222      	movs	r2, #34	@ 0x22
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ae4 <UART_Start_Receive_DMA+0x128>)
 80069ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ae8 <UART_Start_Receive_DMA+0x12c>)
 80069f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f8:	4a3c      	ldr	r2, [pc, #240]	@ (8006aec <UART_Start_Receive_DMA+0x130>)
 80069fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a00:	2200      	movs	r2, #0
 8006a02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a04:	f107 0308 	add.w	r3, r7, #8
 8006a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	f7fc fd00 	bl	8003420 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d019      	beq.n	8006a72 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006a64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e5      	bne.n	8006a3e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3314      	adds	r3, #20
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a92:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e5      	bne.n	8006a72 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ac6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6a39      	ldr	r1, [r7, #32]
 8006acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3760      	adds	r7, #96	@ 0x60
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	0800670f 	.word	0x0800670f
 8006ae8:	0800683b 	.word	0x0800683b
 8006aec:	08006877 	.word	0x08006877

08006af0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b089      	sub	sp, #36	@ 0x24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	61ba      	str	r2, [r7, #24]
 8006b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6979      	ldr	r1, [r7, #20]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	613b      	str	r3, [r7, #16]
   return(result);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b34:	bf00      	nop
 8006b36:	3724      	adds	r7, #36	@ 0x24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b095      	sub	sp, #84	@ 0x54
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b68:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d119      	bne.n	8006bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bd8:	61ba      	str	r2, [r7, #24]
 8006bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bfa:	bf00      	nop
 8006bfc:	3754      	adds	r7, #84	@ 0x54
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fd03 	bl	800662c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b21      	cmp	r3, #33	@ 0x21
 8006c40:	d13e      	bne.n	8006cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4a:	d114      	bne.n	8006c76 <UART_Transmit_IT+0x48>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d110      	bne.n	8006c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]
 8006c74:	e008      	b.n	8006c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6211      	str	r1, [r2, #32]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4619      	mov	r1, r3
 8006c96:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10f      	bne.n	8006cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e000      	b.n	8006cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fb fe5a 	bl	80029a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b08c      	sub	sp, #48	@ 0x30
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b22      	cmp	r3, #34	@ 0x22
 8006d10:	f040 80ae 	bne.w	8006e70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1c:	d117      	bne.n	8006d4e <UART_Receive_IT+0x50>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d4c:	e026      	b.n	8006d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d60:	d007      	beq.n	8006d72 <UART_Receive_IT+0x74>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <UART_Receive_IT+0x82>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e008      	b.n	8006d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4619      	mov	r1, r3
 8006daa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d15d      	bne.n	8006e6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0220 	bic.w	r2, r2, #32
 8006dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d135      	bne.n	8006e62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e1c:	623a      	str	r2, [r7, #32]
 8006e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d10a      	bne.n	8006e54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fbf0 	bl	8006640 <HAL_UARTEx_RxEventCallback>
 8006e60:	e002      	b.n	8006e68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fbce 	bl	8006604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e002      	b.n	8006e72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3730      	adds	r7, #48	@ 0x30
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e80:	b0c0      	sub	sp, #256	@ 0x100
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e98:	68d9      	ldr	r1, [r3, #12]
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	ea40 0301 	orr.w	r3, r0, r1
 8006ea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ed4:	f021 010c 	bic.w	r1, r1, #12
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef6:	6999      	ldr	r1, [r3, #24]
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	ea40 0301 	orr.w	r3, r0, r1
 8006f02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b8f      	ldr	r3, [pc, #572]	@ (8007148 <UART_SetConfig+0x2cc>)
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d005      	beq.n	8006f1c <UART_SetConfig+0xa0>
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b8d      	ldr	r3, [pc, #564]	@ (800714c <UART_SetConfig+0x2d0>)
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d104      	bne.n	8006f26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f1c:	f7fd f8f0 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8006f20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f24:	e003      	b.n	8006f2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f26:	f7fd f8d7 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8006f2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f38:	f040 810c 	bne.w	8007154 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	1891      	adds	r1, r2, r2
 8006f54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f56:	415b      	adcs	r3, r3
 8006f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f5e:	4621      	mov	r1, r4
 8006f60:	eb12 0801 	adds.w	r8, r2, r1
 8006f64:	4629      	mov	r1, r5
 8006f66:	eb43 0901 	adc.w	r9, r3, r1
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f7e:	4690      	mov	r8, r2
 8006f80:	4699      	mov	r9, r3
 8006f82:	4623      	mov	r3, r4
 8006f84:	eb18 0303 	adds.w	r3, r8, r3
 8006f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	eb49 0303 	adc.w	r3, r9, r3
 8006f92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fa2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006faa:	460b      	mov	r3, r1
 8006fac:	18db      	adds	r3, r3, r3
 8006fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	eb42 0303 	adc.w	r3, r2, r3
 8006fb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fc0:	f7f9 fe22 	bl	8000c08 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4b61      	ldr	r3, [pc, #388]	@ (8007150 <UART_SetConfig+0x2d4>)
 8006fca:	fba3 2302 	umull	r2, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	011c      	lsls	r4, r3, #4
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fdc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fe0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006fec:	415b      	adcs	r3, r3
 8006fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ff0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	eb12 0a01 	adds.w	sl, r2, r1
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	eb43 0b01 	adc.w	fp, r3, r1
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800700c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007014:	4692      	mov	sl, r2
 8007016:	469b      	mov	fp, r3
 8007018:	4643      	mov	r3, r8
 800701a:	eb1a 0303 	adds.w	r3, sl, r3
 800701e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007022:	464b      	mov	r3, r9
 8007024:	eb4b 0303 	adc.w	r3, fp, r3
 8007028:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007038:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800703c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007040:	460b      	mov	r3, r1
 8007042:	18db      	adds	r3, r3, r3
 8007044:	643b      	str	r3, [r7, #64]	@ 0x40
 8007046:	4613      	mov	r3, r2
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	647b      	str	r3, [r7, #68]	@ 0x44
 800704e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007052:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007056:	f7f9 fdd7 	bl	8000c08 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4611      	mov	r1, r2
 8007060:	4b3b      	ldr	r3, [pc, #236]	@ (8007150 <UART_SetConfig+0x2d4>)
 8007062:	fba3 2301 	umull	r2, r3, r3, r1
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	2264      	movs	r2, #100	@ 0x64
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	1acb      	subs	r3, r1, r3
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007076:	4b36      	ldr	r3, [pc, #216]	@ (8007150 <UART_SetConfig+0x2d4>)
 8007078:	fba3 2302 	umull	r2, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007084:	441c      	add	r4, r3
 8007086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800708a:	2200      	movs	r2, #0
 800708c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007090:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007094:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007098:	4642      	mov	r2, r8
 800709a:	464b      	mov	r3, r9
 800709c:	1891      	adds	r1, r2, r2
 800709e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070a0:	415b      	adcs	r3, r3
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070a8:	4641      	mov	r1, r8
 80070aa:	1851      	adds	r1, r2, r1
 80070ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80070ae:	4649      	mov	r1, r9
 80070b0:	414b      	adcs	r3, r1
 80070b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070c0:	4659      	mov	r1, fp
 80070c2:	00cb      	lsls	r3, r1, #3
 80070c4:	4651      	mov	r1, sl
 80070c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ca:	4651      	mov	r1, sl
 80070cc:	00ca      	lsls	r2, r1, #3
 80070ce:	4610      	mov	r0, r2
 80070d0:	4619      	mov	r1, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	4642      	mov	r2, r8
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070dc:	464b      	mov	r3, r9
 80070de:	460a      	mov	r2, r1
 80070e0:	eb42 0303 	adc.w	r3, r2, r3
 80070e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80070f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070fc:	460b      	mov	r3, r1
 80070fe:	18db      	adds	r3, r3, r3
 8007100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007102:	4613      	mov	r3, r2
 8007104:	eb42 0303 	adc.w	r3, r2, r3
 8007108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800710a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800710e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007112:	f7f9 fd79 	bl	8000c08 <__aeabi_uldivmod>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <UART_SetConfig+0x2d4>)
 800711c:	fba3 1302 	umull	r1, r3, r3, r2
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	2164      	movs	r1, #100	@ 0x64
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	3332      	adds	r3, #50	@ 0x32
 800712e:	4a08      	ldr	r2, [pc, #32]	@ (8007150 <UART_SetConfig+0x2d4>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	f003 0207 	and.w	r2, r3, #7
 800713a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4422      	add	r2, r4
 8007142:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007144:	e106      	b.n	8007354 <UART_SetConfig+0x4d8>
 8007146:	bf00      	nop
 8007148:	40011000 	.word	0x40011000
 800714c:	40011400 	.word	0x40011400
 8007150:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007158:	2200      	movs	r2, #0
 800715a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800715e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007162:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007166:	4642      	mov	r2, r8
 8007168:	464b      	mov	r3, r9
 800716a:	1891      	adds	r1, r2, r2
 800716c:	6239      	str	r1, [r7, #32]
 800716e:	415b      	adcs	r3, r3
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
 8007172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007176:	4641      	mov	r1, r8
 8007178:	1854      	adds	r4, r2, r1
 800717a:	4649      	mov	r1, r9
 800717c:	eb43 0501 	adc.w	r5, r3, r1
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	00eb      	lsls	r3, r5, #3
 800718a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800718e:	00e2      	lsls	r2, r4, #3
 8007190:	4614      	mov	r4, r2
 8007192:	461d      	mov	r5, r3
 8007194:	4643      	mov	r3, r8
 8007196:	18e3      	adds	r3, r4, r3
 8007198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800719c:	464b      	mov	r3, r9
 800719e:	eb45 0303 	adc.w	r3, r5, r3
 80071a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071b6:	f04f 0200 	mov.w	r2, #0
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071c2:	4629      	mov	r1, r5
 80071c4:	008b      	lsls	r3, r1, #2
 80071c6:	4621      	mov	r1, r4
 80071c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071cc:	4621      	mov	r1, r4
 80071ce:	008a      	lsls	r2, r1, #2
 80071d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071d4:	f7f9 fd18 	bl	8000c08 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4b60      	ldr	r3, [pc, #384]	@ (8007360 <UART_SetConfig+0x4e4>)
 80071de:	fba3 2302 	umull	r2, r3, r3, r2
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	011c      	lsls	r4, r3, #4
 80071e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	61b9      	str	r1, [r7, #24]
 8007200:	415b      	adcs	r3, r3
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007208:	4641      	mov	r1, r8
 800720a:	1851      	adds	r1, r2, r1
 800720c:	6139      	str	r1, [r7, #16]
 800720e:	4649      	mov	r1, r9
 8007210:	414b      	adcs	r3, r1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007220:	4659      	mov	r1, fp
 8007222:	00cb      	lsls	r3, r1, #3
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722a:	4651      	mov	r1, sl
 800722c:	00ca      	lsls	r2, r1, #3
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	4603      	mov	r3, r0
 8007234:	4642      	mov	r2, r8
 8007236:	189b      	adds	r3, r3, r2
 8007238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800723c:	464b      	mov	r3, r9
 800723e:	460a      	mov	r2, r1
 8007240:	eb42 0303 	adc.w	r3, r2, r3
 8007244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007252:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007260:	4649      	mov	r1, r9
 8007262:	008b      	lsls	r3, r1, #2
 8007264:	4641      	mov	r1, r8
 8007266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800726a:	4641      	mov	r1, r8
 800726c:	008a      	lsls	r2, r1, #2
 800726e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007272:	f7f9 fcc9 	bl	8000c08 <__aeabi_uldivmod>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4611      	mov	r1, r2
 800727c:	4b38      	ldr	r3, [pc, #224]	@ (8007360 <UART_SetConfig+0x4e4>)
 800727e:	fba3 2301 	umull	r2, r3, r3, r1
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	2264      	movs	r2, #100	@ 0x64
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	1acb      	subs	r3, r1, r3
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	3332      	adds	r3, #50	@ 0x32
 8007290:	4a33      	ldr	r2, [pc, #204]	@ (8007360 <UART_SetConfig+0x4e4>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800729c:	441c      	add	r4, r3
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80072a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80072a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072ac:	4642      	mov	r2, r8
 80072ae:	464b      	mov	r3, r9
 80072b0:	1891      	adds	r1, r2, r2
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	415b      	adcs	r3, r3
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072bc:	4641      	mov	r1, r8
 80072be:	1851      	adds	r1, r2, r1
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	4649      	mov	r1, r9
 80072c4:	414b      	adcs	r3, r1
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072d4:	4659      	mov	r1, fp
 80072d6:	00cb      	lsls	r3, r1, #3
 80072d8:	4651      	mov	r1, sl
 80072da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072de:	4651      	mov	r1, sl
 80072e0:	00ca      	lsls	r2, r1, #3
 80072e2:	4610      	mov	r0, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	4642      	mov	r2, r8
 80072ea:	189b      	adds	r3, r3, r2
 80072ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072ee:	464b      	mov	r3, r9
 80072f0:	460a      	mov	r2, r1
 80072f2:	eb42 0303 	adc.w	r3, r2, r3
 80072f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	663b      	str	r3, [r7, #96]	@ 0x60
 8007302:	667a      	str	r2, [r7, #100]	@ 0x64
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007310:	4649      	mov	r1, r9
 8007312:	008b      	lsls	r3, r1, #2
 8007314:	4641      	mov	r1, r8
 8007316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800731a:	4641      	mov	r1, r8
 800731c:	008a      	lsls	r2, r1, #2
 800731e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007322:	f7f9 fc71 	bl	8000c08 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <UART_SetConfig+0x4e4>)
 800732c:	fba3 1302 	umull	r1, r3, r3, r2
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	2164      	movs	r1, #100	@ 0x64
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	3332      	adds	r3, #50	@ 0x32
 800733e:	4a08      	ldr	r2, [pc, #32]	@ (8007360 <UART_SetConfig+0x4e4>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4422      	add	r2, r4
 8007352:	609a      	str	r2, [r3, #8]
}
 8007354:	bf00      	nop
 8007356:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800735a:	46bd      	mov	sp, r7
 800735c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007360:	51eb851f 	.word	0x51eb851f

08007364 <malloc>:
 8007364:	4b02      	ldr	r3, [pc, #8]	@ (8007370 <malloc+0xc>)
 8007366:	4601      	mov	r1, r0
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f000 b82d 	b.w	80073c8 <_malloc_r>
 800736e:	bf00      	nop
 8007370:	200002b4 	.word	0x200002b4

08007374 <free>:
 8007374:	4b02      	ldr	r3, [pc, #8]	@ (8007380 <free+0xc>)
 8007376:	4601      	mov	r1, r0
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f001 bdc9 	b.w	8008f10 <_free_r>
 800737e:	bf00      	nop
 8007380:	200002b4 	.word	0x200002b4

08007384 <sbrk_aligned>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4e0f      	ldr	r6, [pc, #60]	@ (80073c4 <sbrk_aligned+0x40>)
 8007388:	460c      	mov	r4, r1
 800738a:	6831      	ldr	r1, [r6, #0]
 800738c:	4605      	mov	r5, r0
 800738e:	b911      	cbnz	r1, 8007396 <sbrk_aligned+0x12>
 8007390:	f000 ff12 	bl	80081b8 <_sbrk_r>
 8007394:	6030      	str	r0, [r6, #0]
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 ff0d 	bl	80081b8 <_sbrk_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d103      	bne.n	80073aa <sbrk_aligned+0x26>
 80073a2:	f04f 34ff 	mov.w	r4, #4294967295
 80073a6:	4620      	mov	r0, r4
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	1cc4      	adds	r4, r0, #3
 80073ac:	f024 0403 	bic.w	r4, r4, #3
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d0f8      	beq.n	80073a6 <sbrk_aligned+0x22>
 80073b4:	1a21      	subs	r1, r4, r0
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 fefe 	bl	80081b8 <_sbrk_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	d1f2      	bne.n	80073a6 <sbrk_aligned+0x22>
 80073c0:	e7ef      	b.n	80073a2 <sbrk_aligned+0x1e>
 80073c2:	bf00      	nop
 80073c4:	2001e5d0 	.word	0x2001e5d0

080073c8 <_malloc_r>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	1ccd      	adds	r5, r1, #3
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	2d00      	cmp	r5, #0
 80073dc:	4606      	mov	r6, r0
 80073de:	db01      	blt.n	80073e4 <_malloc_r+0x1c>
 80073e0:	42a9      	cmp	r1, r5
 80073e2:	d904      	bls.n	80073ee <_malloc_r+0x26>
 80073e4:	230c      	movs	r3, #12
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074c4 <_malloc_r+0xfc>
 80073f2:	f000 f869 	bl	80074c8 <__malloc_lock>
 80073f6:	f8d8 3000 	ldr.w	r3, [r8]
 80073fa:	461c      	mov	r4, r3
 80073fc:	bb44      	cbnz	r4, 8007450 <_malloc_r+0x88>
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff ffbf 	bl	8007384 <sbrk_aligned>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	4604      	mov	r4, r0
 800740a:	d158      	bne.n	80074be <_malloc_r+0xf6>
 800740c:	f8d8 4000 	ldr.w	r4, [r8]
 8007410:	4627      	mov	r7, r4
 8007412:	2f00      	cmp	r7, #0
 8007414:	d143      	bne.n	800749e <_malloc_r+0xd6>
 8007416:	2c00      	cmp	r4, #0
 8007418:	d04b      	beq.n	80074b2 <_malloc_r+0xea>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	4639      	mov	r1, r7
 800741e:	4630      	mov	r0, r6
 8007420:	eb04 0903 	add.w	r9, r4, r3
 8007424:	f000 fec8 	bl	80081b8 <_sbrk_r>
 8007428:	4581      	cmp	r9, r0
 800742a:	d142      	bne.n	80074b2 <_malloc_r+0xea>
 800742c:	6821      	ldr	r1, [r4, #0]
 800742e:	1a6d      	subs	r5, r5, r1
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ffa6 	bl	8007384 <sbrk_aligned>
 8007438:	3001      	adds	r0, #1
 800743a:	d03a      	beq.n	80074b2 <_malloc_r+0xea>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	442b      	add	r3, r5
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	f8d8 3000 	ldr.w	r3, [r8]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	bb62      	cbnz	r2, 80074a4 <_malloc_r+0xdc>
 800744a:	f8c8 7000 	str.w	r7, [r8]
 800744e:	e00f      	b.n	8007470 <_malloc_r+0xa8>
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	1b52      	subs	r2, r2, r5
 8007454:	d420      	bmi.n	8007498 <_malloc_r+0xd0>
 8007456:	2a0b      	cmp	r2, #11
 8007458:	d917      	bls.n	800748a <_malloc_r+0xc2>
 800745a:	1961      	adds	r1, r4, r5
 800745c:	42a3      	cmp	r3, r4
 800745e:	6025      	str	r5, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	6059      	strne	r1, [r3, #4]
 8007464:	6863      	ldr	r3, [r4, #4]
 8007466:	bf08      	it	eq
 8007468:	f8c8 1000 	streq.w	r1, [r8]
 800746c:	5162      	str	r2, [r4, r5]
 800746e:	604b      	str	r3, [r1, #4]
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f82f 	bl	80074d4 <__malloc_unlock>
 8007476:	f104 000b 	add.w	r0, r4, #11
 800747a:	1d23      	adds	r3, r4, #4
 800747c:	f020 0007 	bic.w	r0, r0, #7
 8007480:	1ac2      	subs	r2, r0, r3
 8007482:	bf1c      	itt	ne
 8007484:	1a1b      	subne	r3, r3, r0
 8007486:	50a3      	strne	r3, [r4, r2]
 8007488:	e7af      	b.n	80073ea <_malloc_r+0x22>
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	bf0c      	ite	eq
 8007490:	f8c8 2000 	streq.w	r2, [r8]
 8007494:	605a      	strne	r2, [r3, #4]
 8007496:	e7eb      	b.n	8007470 <_malloc_r+0xa8>
 8007498:	4623      	mov	r3, r4
 800749a:	6864      	ldr	r4, [r4, #4]
 800749c:	e7ae      	b.n	80073fc <_malloc_r+0x34>
 800749e:	463c      	mov	r4, r7
 80074a0:	687f      	ldr	r7, [r7, #4]
 80074a2:	e7b6      	b.n	8007412 <_malloc_r+0x4a>
 80074a4:	461a      	mov	r2, r3
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d1fb      	bne.n	80074a4 <_malloc_r+0xdc>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6053      	str	r3, [r2, #4]
 80074b0:	e7de      	b.n	8007470 <_malloc_r+0xa8>
 80074b2:	230c      	movs	r3, #12
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 f80c 	bl	80074d4 <__malloc_unlock>
 80074bc:	e794      	b.n	80073e8 <_malloc_r+0x20>
 80074be:	6005      	str	r5, [r0, #0]
 80074c0:	e7d6      	b.n	8007470 <_malloc_r+0xa8>
 80074c2:	bf00      	nop
 80074c4:	2001e5d4 	.word	0x2001e5d4

080074c8 <__malloc_lock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_lock+0x8>)
 80074ca:	f000 bec2 	b.w	8008252 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	2001e718 	.word	0x2001e718

080074d4 <__malloc_unlock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	@ (80074dc <__malloc_unlock+0x8>)
 80074d6:	f000 bebd 	b.w	8008254 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	2001e718 	.word	0x2001e718

080074e0 <_strtoul_l.constprop.0>:
 80074e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e4:	4e34      	ldr	r6, [pc, #208]	@ (80075b8 <_strtoul_l.constprop.0+0xd8>)
 80074e6:	4686      	mov	lr, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	4628      	mov	r0, r5
 80074ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074f0:	5d37      	ldrb	r7, [r6, r4]
 80074f2:	f017 0708 	ands.w	r7, r7, #8
 80074f6:	d1f8      	bne.n	80074ea <_strtoul_l.constprop.0+0xa>
 80074f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80074fa:	d12f      	bne.n	800755c <_strtoul_l.constprop.0+0x7c>
 80074fc:	782c      	ldrb	r4, [r5, #0]
 80074fe:	2701      	movs	r7, #1
 8007500:	1c85      	adds	r5, r0, #2
 8007502:	f033 0010 	bics.w	r0, r3, #16
 8007506:	d109      	bne.n	800751c <_strtoul_l.constprop.0+0x3c>
 8007508:	2c30      	cmp	r4, #48	@ 0x30
 800750a:	d12c      	bne.n	8007566 <_strtoul_l.constprop.0+0x86>
 800750c:	7828      	ldrb	r0, [r5, #0]
 800750e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007512:	2858      	cmp	r0, #88	@ 0x58
 8007514:	d127      	bne.n	8007566 <_strtoul_l.constprop.0+0x86>
 8007516:	786c      	ldrb	r4, [r5, #1]
 8007518:	2310      	movs	r3, #16
 800751a:	3502      	adds	r5, #2
 800751c:	f04f 38ff 	mov.w	r8, #4294967295
 8007520:	2600      	movs	r6, #0
 8007522:	fbb8 f8f3 	udiv	r8, r8, r3
 8007526:	fb03 f908 	mul.w	r9, r3, r8
 800752a:	ea6f 0909 	mvn.w	r9, r9
 800752e:	4630      	mov	r0, r6
 8007530:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007534:	f1bc 0f09 	cmp.w	ip, #9
 8007538:	d81c      	bhi.n	8007574 <_strtoul_l.constprop.0+0x94>
 800753a:	4664      	mov	r4, ip
 800753c:	42a3      	cmp	r3, r4
 800753e:	dd2a      	ble.n	8007596 <_strtoul_l.constprop.0+0xb6>
 8007540:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007544:	d007      	beq.n	8007556 <_strtoul_l.constprop.0+0x76>
 8007546:	4580      	cmp	r8, r0
 8007548:	d322      	bcc.n	8007590 <_strtoul_l.constprop.0+0xb0>
 800754a:	d101      	bne.n	8007550 <_strtoul_l.constprop.0+0x70>
 800754c:	45a1      	cmp	r9, r4
 800754e:	db1f      	blt.n	8007590 <_strtoul_l.constprop.0+0xb0>
 8007550:	fb00 4003 	mla	r0, r0, r3, r4
 8007554:	2601      	movs	r6, #1
 8007556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755a:	e7e9      	b.n	8007530 <_strtoul_l.constprop.0+0x50>
 800755c:	2c2b      	cmp	r4, #43	@ 0x2b
 800755e:	bf04      	itt	eq
 8007560:	782c      	ldrbeq	r4, [r5, #0]
 8007562:	1c85      	addeq	r5, r0, #2
 8007564:	e7cd      	b.n	8007502 <_strtoul_l.constprop.0+0x22>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1d8      	bne.n	800751c <_strtoul_l.constprop.0+0x3c>
 800756a:	2c30      	cmp	r4, #48	@ 0x30
 800756c:	bf0c      	ite	eq
 800756e:	2308      	moveq	r3, #8
 8007570:	230a      	movne	r3, #10
 8007572:	e7d3      	b.n	800751c <_strtoul_l.constprop.0+0x3c>
 8007574:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007578:	f1bc 0f19 	cmp.w	ip, #25
 800757c:	d801      	bhi.n	8007582 <_strtoul_l.constprop.0+0xa2>
 800757e:	3c37      	subs	r4, #55	@ 0x37
 8007580:	e7dc      	b.n	800753c <_strtoul_l.constprop.0+0x5c>
 8007582:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007586:	f1bc 0f19 	cmp.w	ip, #25
 800758a:	d804      	bhi.n	8007596 <_strtoul_l.constprop.0+0xb6>
 800758c:	3c57      	subs	r4, #87	@ 0x57
 800758e:	e7d5      	b.n	800753c <_strtoul_l.constprop.0+0x5c>
 8007590:	f04f 36ff 	mov.w	r6, #4294967295
 8007594:	e7df      	b.n	8007556 <_strtoul_l.constprop.0+0x76>
 8007596:	1c73      	adds	r3, r6, #1
 8007598:	d106      	bne.n	80075a8 <_strtoul_l.constprop.0+0xc8>
 800759a:	2322      	movs	r3, #34	@ 0x22
 800759c:	f8ce 3000 	str.w	r3, [lr]
 80075a0:	4630      	mov	r0, r6
 80075a2:	b932      	cbnz	r2, 80075b2 <_strtoul_l.constprop.0+0xd2>
 80075a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a8:	b107      	cbz	r7, 80075ac <_strtoul_l.constprop.0+0xcc>
 80075aa:	4240      	negs	r0, r0
 80075ac:	2a00      	cmp	r2, #0
 80075ae:	d0f9      	beq.n	80075a4 <_strtoul_l.constprop.0+0xc4>
 80075b0:	b106      	cbz	r6, 80075b4 <_strtoul_l.constprop.0+0xd4>
 80075b2:	1e69      	subs	r1, r5, #1
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	e7f5      	b.n	80075a4 <_strtoul_l.constprop.0+0xc4>
 80075b8:	0800a349 	.word	0x0800a349

080075bc <strtoul>:
 80075bc:	4613      	mov	r3, r2
 80075be:	460a      	mov	r2, r1
 80075c0:	4601      	mov	r1, r0
 80075c2:	4802      	ldr	r0, [pc, #8]	@ (80075cc <strtoul+0x10>)
 80075c4:	6800      	ldr	r0, [r0, #0]
 80075c6:	f7ff bf8b 	b.w	80074e0 <_strtoul_l.constprop.0>
 80075ca:	bf00      	nop
 80075cc:	200002b4 	.word	0x200002b4

080075d0 <__cvt>:
 80075d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	ec57 6b10 	vmov	r6, r7, d0
 80075d8:	2f00      	cmp	r7, #0
 80075da:	460c      	mov	r4, r1
 80075dc:	4619      	mov	r1, r3
 80075de:	463b      	mov	r3, r7
 80075e0:	bfbb      	ittet	lt
 80075e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80075e6:	461f      	movlt	r7, r3
 80075e8:	2300      	movge	r3, #0
 80075ea:	232d      	movlt	r3, #45	@ 0x2d
 80075ec:	700b      	strb	r3, [r1, #0]
 80075ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80075f4:	4691      	mov	r9, r2
 80075f6:	f023 0820 	bic.w	r8, r3, #32
 80075fa:	bfbc      	itt	lt
 80075fc:	4632      	movlt	r2, r6
 80075fe:	4616      	movlt	r6, r2
 8007600:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007604:	d005      	beq.n	8007612 <__cvt+0x42>
 8007606:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800760a:	d100      	bne.n	800760e <__cvt+0x3e>
 800760c:	3401      	adds	r4, #1
 800760e:	2102      	movs	r1, #2
 8007610:	e000      	b.n	8007614 <__cvt+0x44>
 8007612:	2103      	movs	r1, #3
 8007614:	ab03      	add	r3, sp, #12
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	ab02      	add	r3, sp, #8
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	ec47 6b10 	vmov	d0, r6, r7
 8007620:	4653      	mov	r3, sl
 8007622:	4622      	mov	r2, r4
 8007624:	f000 feb0 	bl	8008388 <_dtoa_r>
 8007628:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800762c:	4605      	mov	r5, r0
 800762e:	d119      	bne.n	8007664 <__cvt+0x94>
 8007630:	f019 0f01 	tst.w	r9, #1
 8007634:	d00e      	beq.n	8007654 <__cvt+0x84>
 8007636:	eb00 0904 	add.w	r9, r0, r4
 800763a:	2200      	movs	r2, #0
 800763c:	2300      	movs	r3, #0
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 fa71 	bl	8000b28 <__aeabi_dcmpeq>
 8007646:	b108      	cbz	r0, 800764c <__cvt+0x7c>
 8007648:	f8cd 900c 	str.w	r9, [sp, #12]
 800764c:	2230      	movs	r2, #48	@ 0x30
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	454b      	cmp	r3, r9
 8007652:	d31e      	bcc.n	8007692 <__cvt+0xc2>
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007658:	1b5b      	subs	r3, r3, r5
 800765a:	4628      	mov	r0, r5
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	b004      	add	sp, #16
 8007660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007664:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007668:	eb00 0904 	add.w	r9, r0, r4
 800766c:	d1e5      	bne.n	800763a <__cvt+0x6a>
 800766e:	7803      	ldrb	r3, [r0, #0]
 8007670:	2b30      	cmp	r3, #48	@ 0x30
 8007672:	d10a      	bne.n	800768a <__cvt+0xba>
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa54 	bl	8000b28 <__aeabi_dcmpeq>
 8007680:	b918      	cbnz	r0, 800768a <__cvt+0xba>
 8007682:	f1c4 0401 	rsb	r4, r4, #1
 8007686:	f8ca 4000 	str.w	r4, [sl]
 800768a:	f8da 3000 	ldr.w	r3, [sl]
 800768e:	4499      	add	r9, r3
 8007690:	e7d3      	b.n	800763a <__cvt+0x6a>
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	9103      	str	r1, [sp, #12]
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	e7d9      	b.n	800764e <__cvt+0x7e>

0800769a <__exponent>:
 800769a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800769c:	2900      	cmp	r1, #0
 800769e:	bfba      	itte	lt
 80076a0:	4249      	neglt	r1, r1
 80076a2:	232d      	movlt	r3, #45	@ 0x2d
 80076a4:	232b      	movge	r3, #43	@ 0x2b
 80076a6:	2909      	cmp	r1, #9
 80076a8:	7002      	strb	r2, [r0, #0]
 80076aa:	7043      	strb	r3, [r0, #1]
 80076ac:	dd29      	ble.n	8007702 <__exponent+0x68>
 80076ae:	f10d 0307 	add.w	r3, sp, #7
 80076b2:	461d      	mov	r5, r3
 80076b4:	270a      	movs	r7, #10
 80076b6:	461a      	mov	r2, r3
 80076b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80076bc:	fb07 1416 	mls	r4, r7, r6, r1
 80076c0:	3430      	adds	r4, #48	@ 0x30
 80076c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076c6:	460c      	mov	r4, r1
 80076c8:	2c63      	cmp	r4, #99	@ 0x63
 80076ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80076ce:	4631      	mov	r1, r6
 80076d0:	dcf1      	bgt.n	80076b6 <__exponent+0x1c>
 80076d2:	3130      	adds	r1, #48	@ 0x30
 80076d4:	1e94      	subs	r4, r2, #2
 80076d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076da:	1c41      	adds	r1, r0, #1
 80076dc:	4623      	mov	r3, r4
 80076de:	42ab      	cmp	r3, r5
 80076e0:	d30a      	bcc.n	80076f8 <__exponent+0x5e>
 80076e2:	f10d 0309 	add.w	r3, sp, #9
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	42ac      	cmp	r4, r5
 80076ea:	bf88      	it	hi
 80076ec:	2300      	movhi	r3, #0
 80076ee:	3302      	adds	r3, #2
 80076f0:	4403      	add	r3, r0
 80076f2:	1a18      	subs	r0, r3, r0
 80076f4:	b003      	add	sp, #12
 80076f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007700:	e7ed      	b.n	80076de <__exponent+0x44>
 8007702:	2330      	movs	r3, #48	@ 0x30
 8007704:	3130      	adds	r1, #48	@ 0x30
 8007706:	7083      	strb	r3, [r0, #2]
 8007708:	70c1      	strb	r1, [r0, #3]
 800770a:	1d03      	adds	r3, r0, #4
 800770c:	e7f1      	b.n	80076f2 <__exponent+0x58>
	...

08007710 <_printf_float>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	b08d      	sub	sp, #52	@ 0x34
 8007716:	460c      	mov	r4, r1
 8007718:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800771c:	4616      	mov	r6, r2
 800771e:	461f      	mov	r7, r3
 8007720:	4605      	mov	r5, r0
 8007722:	f000 fd11 	bl	8008148 <_localeconv_r>
 8007726:	6803      	ldr	r3, [r0, #0]
 8007728:	9304      	str	r3, [sp, #16]
 800772a:	4618      	mov	r0, r3
 800772c:	f7f8 fdd0 	bl	80002d0 <strlen>
 8007730:	2300      	movs	r3, #0
 8007732:	930a      	str	r3, [sp, #40]	@ 0x28
 8007734:	f8d8 3000 	ldr.w	r3, [r8]
 8007738:	9005      	str	r0, [sp, #20]
 800773a:	3307      	adds	r3, #7
 800773c:	f023 0307 	bic.w	r3, r3, #7
 8007740:	f103 0208 	add.w	r2, r3, #8
 8007744:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007748:	f8d4 b000 	ldr.w	fp, [r4]
 800774c:	f8c8 2000 	str.w	r2, [r8]
 8007750:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007754:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007758:	9307      	str	r3, [sp, #28]
 800775a:	f8cd 8018 	str.w	r8, [sp, #24]
 800775e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007766:	4b9c      	ldr	r3, [pc, #624]	@ (80079d8 <_printf_float+0x2c8>)
 8007768:	f04f 32ff 	mov.w	r2, #4294967295
 800776c:	f7f9 fa0e 	bl	8000b8c <__aeabi_dcmpun>
 8007770:	bb70      	cbnz	r0, 80077d0 <_printf_float+0xc0>
 8007772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007776:	4b98      	ldr	r3, [pc, #608]	@ (80079d8 <_printf_float+0x2c8>)
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	f7f9 f9e8 	bl	8000b50 <__aeabi_dcmple>
 8007780:	bb30      	cbnz	r0, 80077d0 <_printf_float+0xc0>
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	4640      	mov	r0, r8
 8007788:	4649      	mov	r1, r9
 800778a:	f7f9 f9d7 	bl	8000b3c <__aeabi_dcmplt>
 800778e:	b110      	cbz	r0, 8007796 <_printf_float+0x86>
 8007790:	232d      	movs	r3, #45	@ 0x2d
 8007792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007796:	4a91      	ldr	r2, [pc, #580]	@ (80079dc <_printf_float+0x2cc>)
 8007798:	4b91      	ldr	r3, [pc, #580]	@ (80079e0 <_printf_float+0x2d0>)
 800779a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800779e:	bf94      	ite	ls
 80077a0:	4690      	movls	r8, r2
 80077a2:	4698      	movhi	r8, r3
 80077a4:	2303      	movs	r3, #3
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	f02b 0304 	bic.w	r3, fp, #4
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	f04f 0900 	mov.w	r9, #0
 80077b2:	9700      	str	r7, [sp, #0]
 80077b4:	4633      	mov	r3, r6
 80077b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80077b8:	4621      	mov	r1, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	f000 f9d2 	bl	8007b64 <_printf_common>
 80077c0:	3001      	adds	r0, #1
 80077c2:	f040 808d 	bne.w	80078e0 <_printf_float+0x1d0>
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	b00d      	add	sp, #52	@ 0x34
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	4642      	mov	r2, r8
 80077d2:	464b      	mov	r3, r9
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f9 f9d8 	bl	8000b8c <__aeabi_dcmpun>
 80077dc:	b140      	cbz	r0, 80077f0 <_printf_float+0xe0>
 80077de:	464b      	mov	r3, r9
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bfbc      	itt	lt
 80077e4:	232d      	movlt	r3, #45	@ 0x2d
 80077e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077ea:	4a7e      	ldr	r2, [pc, #504]	@ (80079e4 <_printf_float+0x2d4>)
 80077ec:	4b7e      	ldr	r3, [pc, #504]	@ (80079e8 <_printf_float+0x2d8>)
 80077ee:	e7d4      	b.n	800779a <_printf_float+0x8a>
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80077f6:	9206      	str	r2, [sp, #24]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	d13b      	bne.n	8007874 <_printf_float+0x164>
 80077fc:	2306      	movs	r3, #6
 80077fe:	6063      	str	r3, [r4, #4]
 8007800:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007804:	2300      	movs	r3, #0
 8007806:	6022      	str	r2, [r4, #0]
 8007808:	9303      	str	r3, [sp, #12]
 800780a:	ab0a      	add	r3, sp, #40	@ 0x28
 800780c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007810:	ab09      	add	r3, sp, #36	@ 0x24
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	6861      	ldr	r1, [r4, #4]
 8007816:	ec49 8b10 	vmov	d0, r8, r9
 800781a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800781e:	4628      	mov	r0, r5
 8007820:	f7ff fed6 	bl	80075d0 <__cvt>
 8007824:	9b06      	ldr	r3, [sp, #24]
 8007826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007828:	2b47      	cmp	r3, #71	@ 0x47
 800782a:	4680      	mov	r8, r0
 800782c:	d129      	bne.n	8007882 <_printf_float+0x172>
 800782e:	1cc8      	adds	r0, r1, #3
 8007830:	db02      	blt.n	8007838 <_printf_float+0x128>
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	4299      	cmp	r1, r3
 8007836:	dd41      	ble.n	80078bc <_printf_float+0x1ac>
 8007838:	f1aa 0a02 	sub.w	sl, sl, #2
 800783c:	fa5f fa8a 	uxtb.w	sl, sl
 8007840:	3901      	subs	r1, #1
 8007842:	4652      	mov	r2, sl
 8007844:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007848:	9109      	str	r1, [sp, #36]	@ 0x24
 800784a:	f7ff ff26 	bl	800769a <__exponent>
 800784e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007850:	1813      	adds	r3, r2, r0
 8007852:	2a01      	cmp	r2, #1
 8007854:	4681      	mov	r9, r0
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	dc02      	bgt.n	8007860 <_printf_float+0x150>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	07d2      	lsls	r2, r2, #31
 800785e:	d501      	bpl.n	8007864 <_printf_float+0x154>
 8007860:	3301      	adds	r3, #1
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0a2      	beq.n	80077b2 <_printf_float+0xa2>
 800786c:	232d      	movs	r3, #45	@ 0x2d
 800786e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007872:	e79e      	b.n	80077b2 <_printf_float+0xa2>
 8007874:	9a06      	ldr	r2, [sp, #24]
 8007876:	2a47      	cmp	r2, #71	@ 0x47
 8007878:	d1c2      	bne.n	8007800 <_printf_float+0xf0>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1c0      	bne.n	8007800 <_printf_float+0xf0>
 800787e:	2301      	movs	r3, #1
 8007880:	e7bd      	b.n	80077fe <_printf_float+0xee>
 8007882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007886:	d9db      	bls.n	8007840 <_printf_float+0x130>
 8007888:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800788c:	d118      	bne.n	80078c0 <_printf_float+0x1b0>
 800788e:	2900      	cmp	r1, #0
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	dd0b      	ble.n	80078ac <_printf_float+0x19c>
 8007894:	6121      	str	r1, [r4, #16]
 8007896:	b913      	cbnz	r3, 800789e <_printf_float+0x18e>
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	07d0      	lsls	r0, r2, #31
 800789c:	d502      	bpl.n	80078a4 <_printf_float+0x194>
 800789e:	3301      	adds	r3, #1
 80078a0:	440b      	add	r3, r1
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078a6:	f04f 0900 	mov.w	r9, #0
 80078aa:	e7db      	b.n	8007864 <_printf_float+0x154>
 80078ac:	b913      	cbnz	r3, 80078b4 <_printf_float+0x1a4>
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	07d2      	lsls	r2, r2, #31
 80078b2:	d501      	bpl.n	80078b8 <_printf_float+0x1a8>
 80078b4:	3302      	adds	r3, #2
 80078b6:	e7f4      	b.n	80078a2 <_printf_float+0x192>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7f2      	b.n	80078a2 <_printf_float+0x192>
 80078bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078c2:	4299      	cmp	r1, r3
 80078c4:	db05      	blt.n	80078d2 <_printf_float+0x1c2>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	6121      	str	r1, [r4, #16]
 80078ca:	07d8      	lsls	r0, r3, #31
 80078cc:	d5ea      	bpl.n	80078a4 <_printf_float+0x194>
 80078ce:	1c4b      	adds	r3, r1, #1
 80078d0:	e7e7      	b.n	80078a2 <_printf_float+0x192>
 80078d2:	2900      	cmp	r1, #0
 80078d4:	bfd4      	ite	le
 80078d6:	f1c1 0202 	rsble	r2, r1, #2
 80078da:	2201      	movgt	r2, #1
 80078dc:	4413      	add	r3, r2
 80078de:	e7e0      	b.n	80078a2 <_printf_float+0x192>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	055a      	lsls	r2, r3, #21
 80078e4:	d407      	bmi.n	80078f6 <_printf_float+0x1e6>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	4642      	mov	r2, r8
 80078ea:	4631      	mov	r1, r6
 80078ec:	4628      	mov	r0, r5
 80078ee:	47b8      	blx	r7
 80078f0:	3001      	adds	r0, #1
 80078f2:	d12b      	bne.n	800794c <_printf_float+0x23c>
 80078f4:	e767      	b.n	80077c6 <_printf_float+0xb6>
 80078f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078fa:	f240 80dd 	bls.w	8007ab8 <_printf_float+0x3a8>
 80078fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	f7f9 f90f 	bl	8000b28 <__aeabi_dcmpeq>
 800790a:	2800      	cmp	r0, #0
 800790c:	d033      	beq.n	8007976 <_printf_float+0x266>
 800790e:	4a37      	ldr	r2, [pc, #220]	@ (80079ec <_printf_float+0x2dc>)
 8007910:	2301      	movs	r3, #1
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	f43f af54 	beq.w	80077c6 <_printf_float+0xb6>
 800791e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007922:	4543      	cmp	r3, r8
 8007924:	db02      	blt.n	800792c <_printf_float+0x21c>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	07d8      	lsls	r0, r3, #31
 800792a:	d50f      	bpl.n	800794c <_printf_float+0x23c>
 800792c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af45 	beq.w	80077c6 <_printf_float+0xb6>
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	f108 38ff 	add.w	r8, r8, #4294967295
 8007944:	f104 0a1a 	add.w	sl, r4, #26
 8007948:	45c8      	cmp	r8, r9
 800794a:	dc09      	bgt.n	8007960 <_printf_float+0x250>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	079b      	lsls	r3, r3, #30
 8007950:	f100 8103 	bmi.w	8007b5a <_printf_float+0x44a>
 8007954:	68e0      	ldr	r0, [r4, #12]
 8007956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007958:	4298      	cmp	r0, r3
 800795a:	bfb8      	it	lt
 800795c:	4618      	movlt	r0, r3
 800795e:	e734      	b.n	80077ca <_printf_float+0xba>
 8007960:	2301      	movs	r3, #1
 8007962:	4652      	mov	r2, sl
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af2b 	beq.w	80077c6 <_printf_float+0xb6>
 8007970:	f109 0901 	add.w	r9, r9, #1
 8007974:	e7e8      	b.n	8007948 <_printf_float+0x238>
 8007976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc39      	bgt.n	80079f0 <_printf_float+0x2e0>
 800797c:	4a1b      	ldr	r2, [pc, #108]	@ (80079ec <_printf_float+0x2dc>)
 800797e:	2301      	movs	r3, #1
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	f43f af1d 	beq.w	80077c6 <_printf_float+0xb6>
 800798c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007990:	ea59 0303 	orrs.w	r3, r9, r3
 8007994:	d102      	bne.n	800799c <_printf_float+0x28c>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	07d9      	lsls	r1, r3, #31
 800799a:	d5d7      	bpl.n	800794c <_printf_float+0x23c>
 800799c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	f43f af0d 	beq.w	80077c6 <_printf_float+0xb6>
 80079ac:	f04f 0a00 	mov.w	sl, #0
 80079b0:	f104 0b1a 	add.w	fp, r4, #26
 80079b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b6:	425b      	negs	r3, r3
 80079b8:	4553      	cmp	r3, sl
 80079ba:	dc01      	bgt.n	80079c0 <_printf_float+0x2b0>
 80079bc:	464b      	mov	r3, r9
 80079be:	e793      	b.n	80078e8 <_printf_float+0x1d8>
 80079c0:	2301      	movs	r3, #1
 80079c2:	465a      	mov	r2, fp
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	f43f aefb 	beq.w	80077c6 <_printf_float+0xb6>
 80079d0:	f10a 0a01 	add.w	sl, sl, #1
 80079d4:	e7ee      	b.n	80079b4 <_printf_float+0x2a4>
 80079d6:	bf00      	nop
 80079d8:	7fefffff 	.word	0x7fefffff
 80079dc:	0800a449 	.word	0x0800a449
 80079e0:	0800a44d 	.word	0x0800a44d
 80079e4:	0800a451 	.word	0x0800a451
 80079e8:	0800a455 	.word	0x0800a455
 80079ec:	0800a459 	.word	0x0800a459
 80079f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079f6:	4553      	cmp	r3, sl
 80079f8:	bfa8      	it	ge
 80079fa:	4653      	movge	r3, sl
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	4699      	mov	r9, r3
 8007a00:	dc36      	bgt.n	8007a70 <_printf_float+0x360>
 8007a02:	f04f 0b00 	mov.w	fp, #0
 8007a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a0a:	f104 021a 	add.w	r2, r4, #26
 8007a0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a10:	9306      	str	r3, [sp, #24]
 8007a12:	eba3 0309 	sub.w	r3, r3, r9
 8007a16:	455b      	cmp	r3, fp
 8007a18:	dc31      	bgt.n	8007a7e <_printf_float+0x36e>
 8007a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1c:	459a      	cmp	sl, r3
 8007a1e:	dc3a      	bgt.n	8007a96 <_printf_float+0x386>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	07da      	lsls	r2, r3, #31
 8007a24:	d437      	bmi.n	8007a96 <_printf_float+0x386>
 8007a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a28:	ebaa 0903 	sub.w	r9, sl, r3
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	ebaa 0303 	sub.w	r3, sl, r3
 8007a32:	4599      	cmp	r9, r3
 8007a34:	bfa8      	it	ge
 8007a36:	4699      	movge	r9, r3
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	dc33      	bgt.n	8007aa6 <_printf_float+0x396>
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a46:	f104 0b1a 	add.w	fp, r4, #26
 8007a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a50:	eba3 0309 	sub.w	r3, r3, r9
 8007a54:	4543      	cmp	r3, r8
 8007a56:	f77f af79 	ble.w	800794c <_printf_float+0x23c>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	465a      	mov	r2, fp
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	f43f aeae 	beq.w	80077c6 <_printf_float+0xb6>
 8007a6a:	f108 0801 	add.w	r8, r8, #1
 8007a6e:	e7ec      	b.n	8007a4a <_printf_float+0x33a>
 8007a70:	4642      	mov	r2, r8
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d1c2      	bne.n	8007a02 <_printf_float+0x2f2>
 8007a7c:	e6a3      	b.n	80077c6 <_printf_float+0xb6>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	9206      	str	r2, [sp, #24]
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae9c 	beq.w	80077c6 <_printf_float+0xb6>
 8007a8e:	9a06      	ldr	r2, [sp, #24]
 8007a90:	f10b 0b01 	add.w	fp, fp, #1
 8007a94:	e7bb      	b.n	8007a0e <_printf_float+0x2fe>
 8007a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b8      	blx	r7
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d1c0      	bne.n	8007a26 <_printf_float+0x316>
 8007aa4:	e68f      	b.n	80077c6 <_printf_float+0xb6>
 8007aa6:	9a06      	ldr	r2, [sp, #24]
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	4442      	add	r2, r8
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d1c3      	bne.n	8007a3e <_printf_float+0x32e>
 8007ab6:	e686      	b.n	80077c6 <_printf_float+0xb6>
 8007ab8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007abc:	f1ba 0f01 	cmp.w	sl, #1
 8007ac0:	dc01      	bgt.n	8007ac6 <_printf_float+0x3b6>
 8007ac2:	07db      	lsls	r3, r3, #31
 8007ac4:	d536      	bpl.n	8007b34 <_printf_float+0x424>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4642      	mov	r2, r8
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f43f ae78 	beq.w	80077c6 <_printf_float+0xb6>
 8007ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f43f ae70 	beq.w	80077c6 <_printf_float+0xb6>
 8007ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007aea:	2200      	movs	r2, #0
 8007aec:	2300      	movs	r3, #0
 8007aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af2:	f7f9 f819 	bl	8000b28 <__aeabi_dcmpeq>
 8007af6:	b9c0      	cbnz	r0, 8007b2a <_printf_float+0x41a>
 8007af8:	4653      	mov	r3, sl
 8007afa:	f108 0201 	add.w	r2, r8, #1
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	d10c      	bne.n	8007b22 <_printf_float+0x412>
 8007b08:	e65d      	b.n	80077c6 <_printf_float+0xb6>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	465a      	mov	r2, fp
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae56 	beq.w	80077c6 <_printf_float+0xb6>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	45d0      	cmp	r8, sl
 8007b20:	dbf3      	blt.n	8007b0a <_printf_float+0x3fa>
 8007b22:	464b      	mov	r3, r9
 8007b24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b28:	e6df      	b.n	80078ea <_printf_float+0x1da>
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	f104 0b1a 	add.w	fp, r4, #26
 8007b32:	e7f4      	b.n	8007b1e <_printf_float+0x40e>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4642      	mov	r2, r8
 8007b38:	e7e1      	b.n	8007afe <_printf_float+0x3ee>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	464a      	mov	r2, r9
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b8      	blx	r7
 8007b44:	3001      	adds	r0, #1
 8007b46:	f43f ae3e 	beq.w	80077c6 <_printf_float+0xb6>
 8007b4a:	f108 0801 	add.w	r8, r8, #1
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b52:	1a5b      	subs	r3, r3, r1
 8007b54:	4543      	cmp	r3, r8
 8007b56:	dcf0      	bgt.n	8007b3a <_printf_float+0x42a>
 8007b58:	e6fc      	b.n	8007954 <_printf_float+0x244>
 8007b5a:	f04f 0800 	mov.w	r8, #0
 8007b5e:	f104 0919 	add.w	r9, r4, #25
 8007b62:	e7f4      	b.n	8007b4e <_printf_float+0x43e>

08007b64 <_printf_common>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	4616      	mov	r6, r2
 8007b6a:	4698      	mov	r8, r3
 8007b6c:	688a      	ldr	r2, [r1, #8]
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b74:	4293      	cmp	r3, r2
 8007b76:	bfb8      	it	lt
 8007b78:	4613      	movlt	r3, r2
 8007b7a:	6033      	str	r3, [r6, #0]
 8007b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b80:	4607      	mov	r7, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	b10a      	cbz	r2, 8007b8a <_printf_common+0x26>
 8007b86:	3301      	adds	r3, #1
 8007b88:	6033      	str	r3, [r6, #0]
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	0699      	lsls	r1, r3, #26
 8007b8e:	bf42      	ittt	mi
 8007b90:	6833      	ldrmi	r3, [r6, #0]
 8007b92:	3302      	addmi	r3, #2
 8007b94:	6033      	strmi	r3, [r6, #0]
 8007b96:	6825      	ldr	r5, [r4, #0]
 8007b98:	f015 0506 	ands.w	r5, r5, #6
 8007b9c:	d106      	bne.n	8007bac <_printf_common+0x48>
 8007b9e:	f104 0a19 	add.w	sl, r4, #25
 8007ba2:	68e3      	ldr	r3, [r4, #12]
 8007ba4:	6832      	ldr	r2, [r6, #0]
 8007ba6:	1a9b      	subs	r3, r3, r2
 8007ba8:	42ab      	cmp	r3, r5
 8007baa:	dc26      	bgt.n	8007bfa <_printf_common+0x96>
 8007bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	3b00      	subs	r3, #0
 8007bb4:	bf18      	it	ne
 8007bb6:	2301      	movne	r3, #1
 8007bb8:	0692      	lsls	r2, r2, #26
 8007bba:	d42b      	bmi.n	8007c14 <_printf_common+0xb0>
 8007bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	47c8      	blx	r9
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d01e      	beq.n	8007c08 <_printf_common+0xa4>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	6922      	ldr	r2, [r4, #16]
 8007bce:	f003 0306 	and.w	r3, r3, #6
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	bf02      	ittt	eq
 8007bd6:	68e5      	ldreq	r5, [r4, #12]
 8007bd8:	6833      	ldreq	r3, [r6, #0]
 8007bda:	1aed      	subeq	r5, r5, r3
 8007bdc:	68a3      	ldr	r3, [r4, #8]
 8007bde:	bf0c      	ite	eq
 8007be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be4:	2500      	movne	r5, #0
 8007be6:	4293      	cmp	r3, r2
 8007be8:	bfc4      	itt	gt
 8007bea:	1a9b      	subgt	r3, r3, r2
 8007bec:	18ed      	addgt	r5, r5, r3
 8007bee:	2600      	movs	r6, #0
 8007bf0:	341a      	adds	r4, #26
 8007bf2:	42b5      	cmp	r5, r6
 8007bf4:	d11a      	bne.n	8007c2c <_printf_common+0xc8>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e008      	b.n	8007c0c <_printf_common+0xa8>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	4641      	mov	r1, r8
 8007c00:	4638      	mov	r0, r7
 8007c02:	47c8      	blx	r9
 8007c04:	3001      	adds	r0, #1
 8007c06:	d103      	bne.n	8007c10 <_printf_common+0xac>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c10:	3501      	adds	r5, #1
 8007c12:	e7c6      	b.n	8007ba2 <_printf_common+0x3e>
 8007c14:	18e1      	adds	r1, r4, r3
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	2030      	movs	r0, #48	@ 0x30
 8007c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c1e:	4422      	add	r2, r4
 8007c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c28:	3302      	adds	r3, #2
 8007c2a:	e7c7      	b.n	8007bbc <_printf_common+0x58>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4641      	mov	r1, r8
 8007c32:	4638      	mov	r0, r7
 8007c34:	47c8      	blx	r9
 8007c36:	3001      	adds	r0, #1
 8007c38:	d0e6      	beq.n	8007c08 <_printf_common+0xa4>
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e7d9      	b.n	8007bf2 <_printf_common+0x8e>
	...

08007c40 <_printf_i>:
 8007c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	7e0f      	ldrb	r7, [r1, #24]
 8007c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c48:	2f78      	cmp	r7, #120	@ 0x78
 8007c4a:	4691      	mov	r9, r2
 8007c4c:	4680      	mov	r8, r0
 8007c4e:	460c      	mov	r4, r1
 8007c50:	469a      	mov	sl, r3
 8007c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c56:	d807      	bhi.n	8007c68 <_printf_i+0x28>
 8007c58:	2f62      	cmp	r7, #98	@ 0x62
 8007c5a:	d80a      	bhi.n	8007c72 <_printf_i+0x32>
 8007c5c:	2f00      	cmp	r7, #0
 8007c5e:	f000 80d2 	beq.w	8007e06 <_printf_i+0x1c6>
 8007c62:	2f58      	cmp	r7, #88	@ 0x58
 8007c64:	f000 80b9 	beq.w	8007dda <_printf_i+0x19a>
 8007c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c70:	e03a      	b.n	8007ce8 <_printf_i+0xa8>
 8007c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c76:	2b15      	cmp	r3, #21
 8007c78:	d8f6      	bhi.n	8007c68 <_printf_i+0x28>
 8007c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c80 <_printf_i+0x40>)
 8007c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c80:	08007cd9 	.word	0x08007cd9
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007c69 	.word	0x08007c69
 8007c8c:	08007c69 	.word	0x08007c69
 8007c90:	08007c69 	.word	0x08007c69
 8007c94:	08007c69 	.word	0x08007c69
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007c69 	.word	0x08007c69
 8007ca0:	08007c69 	.word	0x08007c69
 8007ca4:	08007c69 	.word	0x08007c69
 8007ca8:	08007c69 	.word	0x08007c69
 8007cac:	08007ded 	.word	0x08007ded
 8007cb0:	08007d17 	.word	0x08007d17
 8007cb4:	08007da7 	.word	0x08007da7
 8007cb8:	08007c69 	.word	0x08007c69
 8007cbc:	08007c69 	.word	0x08007c69
 8007cc0:	08007e0f 	.word	0x08007e0f
 8007cc4:	08007c69 	.word	0x08007c69
 8007cc8:	08007d17 	.word	0x08007d17
 8007ccc:	08007c69 	.word	0x08007c69
 8007cd0:	08007c69 	.word	0x08007c69
 8007cd4:	08007daf 	.word	0x08007daf
 8007cd8:	6833      	ldr	r3, [r6, #0]
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6032      	str	r2, [r6, #0]
 8007ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e09d      	b.n	8007e28 <_printf_i+0x1e8>
 8007cec:	6833      	ldr	r3, [r6, #0]
 8007cee:	6820      	ldr	r0, [r4, #0]
 8007cf0:	1d19      	adds	r1, r3, #4
 8007cf2:	6031      	str	r1, [r6, #0]
 8007cf4:	0606      	lsls	r6, r0, #24
 8007cf6:	d501      	bpl.n	8007cfc <_printf_i+0xbc>
 8007cf8:	681d      	ldr	r5, [r3, #0]
 8007cfa:	e003      	b.n	8007d04 <_printf_i+0xc4>
 8007cfc:	0645      	lsls	r5, r0, #25
 8007cfe:	d5fb      	bpl.n	8007cf8 <_printf_i+0xb8>
 8007d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	da03      	bge.n	8007d10 <_printf_i+0xd0>
 8007d08:	232d      	movs	r3, #45	@ 0x2d
 8007d0a:	426d      	negs	r5, r5
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d10:	4859      	ldr	r0, [pc, #356]	@ (8007e78 <_printf_i+0x238>)
 8007d12:	230a      	movs	r3, #10
 8007d14:	e011      	b.n	8007d3a <_printf_i+0xfa>
 8007d16:	6821      	ldr	r1, [r4, #0]
 8007d18:	6833      	ldr	r3, [r6, #0]
 8007d1a:	0608      	lsls	r0, r1, #24
 8007d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d20:	d402      	bmi.n	8007d28 <_printf_i+0xe8>
 8007d22:	0649      	lsls	r1, r1, #25
 8007d24:	bf48      	it	mi
 8007d26:	b2ad      	uxthmi	r5, r5
 8007d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d2a:	4853      	ldr	r0, [pc, #332]	@ (8007e78 <_printf_i+0x238>)
 8007d2c:	6033      	str	r3, [r6, #0]
 8007d2e:	bf14      	ite	ne
 8007d30:	230a      	movne	r3, #10
 8007d32:	2308      	moveq	r3, #8
 8007d34:	2100      	movs	r1, #0
 8007d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d3a:	6866      	ldr	r6, [r4, #4]
 8007d3c:	60a6      	str	r6, [r4, #8]
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	bfa2      	ittt	ge
 8007d42:	6821      	ldrge	r1, [r4, #0]
 8007d44:	f021 0104 	bicge.w	r1, r1, #4
 8007d48:	6021      	strge	r1, [r4, #0]
 8007d4a:	b90d      	cbnz	r5, 8007d50 <_printf_i+0x110>
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	d04b      	beq.n	8007de8 <_printf_i+0x1a8>
 8007d50:	4616      	mov	r6, r2
 8007d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d56:	fb03 5711 	mls	r7, r3, r1, r5
 8007d5a:	5dc7      	ldrb	r7, [r0, r7]
 8007d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d60:	462f      	mov	r7, r5
 8007d62:	42bb      	cmp	r3, r7
 8007d64:	460d      	mov	r5, r1
 8007d66:	d9f4      	bls.n	8007d52 <_printf_i+0x112>
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d10b      	bne.n	8007d84 <_printf_i+0x144>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	07df      	lsls	r7, r3, #31
 8007d70:	d508      	bpl.n	8007d84 <_printf_i+0x144>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6861      	ldr	r1, [r4, #4]
 8007d76:	4299      	cmp	r1, r3
 8007d78:	bfde      	ittt	le
 8007d7a:	2330      	movle	r3, #48	@ 0x30
 8007d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d84:	1b92      	subs	r2, r2, r6
 8007d86:	6122      	str	r2, [r4, #16]
 8007d88:	f8cd a000 	str.w	sl, [sp]
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	aa03      	add	r2, sp, #12
 8007d90:	4621      	mov	r1, r4
 8007d92:	4640      	mov	r0, r8
 8007d94:	f7ff fee6 	bl	8007b64 <_printf_common>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d14a      	bne.n	8007e32 <_printf_i+0x1f2>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	b004      	add	sp, #16
 8007da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	f043 0320 	orr.w	r3, r3, #32
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	4833      	ldr	r0, [pc, #204]	@ (8007e7c <_printf_i+0x23c>)
 8007db0:	2778      	movs	r7, #120	@ 0x78
 8007db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	6831      	ldr	r1, [r6, #0]
 8007dba:	061f      	lsls	r7, r3, #24
 8007dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dc0:	d402      	bmi.n	8007dc8 <_printf_i+0x188>
 8007dc2:	065f      	lsls	r7, r3, #25
 8007dc4:	bf48      	it	mi
 8007dc6:	b2ad      	uxthmi	r5, r5
 8007dc8:	6031      	str	r1, [r6, #0]
 8007dca:	07d9      	lsls	r1, r3, #31
 8007dcc:	bf44      	itt	mi
 8007dce:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd2:	6023      	strmi	r3, [r4, #0]
 8007dd4:	b11d      	cbz	r5, 8007dde <_printf_i+0x19e>
 8007dd6:	2310      	movs	r3, #16
 8007dd8:	e7ac      	b.n	8007d34 <_printf_i+0xf4>
 8007dda:	4827      	ldr	r0, [pc, #156]	@ (8007e78 <_printf_i+0x238>)
 8007ddc:	e7e9      	b.n	8007db2 <_printf_i+0x172>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f023 0320 	bic.w	r3, r3, #32
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	e7f6      	b.n	8007dd6 <_printf_i+0x196>
 8007de8:	4616      	mov	r6, r2
 8007dea:	e7bd      	b.n	8007d68 <_printf_i+0x128>
 8007dec:	6833      	ldr	r3, [r6, #0]
 8007dee:	6825      	ldr	r5, [r4, #0]
 8007df0:	6961      	ldr	r1, [r4, #20]
 8007df2:	1d18      	adds	r0, r3, #4
 8007df4:	6030      	str	r0, [r6, #0]
 8007df6:	062e      	lsls	r6, r5, #24
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	d501      	bpl.n	8007e00 <_printf_i+0x1c0>
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	e002      	b.n	8007e06 <_printf_i+0x1c6>
 8007e00:	0668      	lsls	r0, r5, #25
 8007e02:	d5fb      	bpl.n	8007dfc <_printf_i+0x1bc>
 8007e04:	8019      	strh	r1, [r3, #0]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	4616      	mov	r6, r2
 8007e0c:	e7bc      	b.n	8007d88 <_printf_i+0x148>
 8007e0e:	6833      	ldr	r3, [r6, #0]
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	6032      	str	r2, [r6, #0]
 8007e14:	681e      	ldr	r6, [r3, #0]
 8007e16:	6862      	ldr	r2, [r4, #4]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7f8 fa08 	bl	8000230 <memchr>
 8007e20:	b108      	cbz	r0, 8007e26 <_printf_i+0x1e6>
 8007e22:	1b80      	subs	r0, r0, r6
 8007e24:	6060      	str	r0, [r4, #4]
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e30:	e7aa      	b.n	8007d88 <_printf_i+0x148>
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	4632      	mov	r2, r6
 8007e36:	4649      	mov	r1, r9
 8007e38:	4640      	mov	r0, r8
 8007e3a:	47d0      	blx	sl
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d0ad      	beq.n	8007d9c <_printf_i+0x15c>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	079b      	lsls	r3, r3, #30
 8007e44:	d413      	bmi.n	8007e6e <_printf_i+0x22e>
 8007e46:	68e0      	ldr	r0, [r4, #12]
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	4298      	cmp	r0, r3
 8007e4c:	bfb8      	it	lt
 8007e4e:	4618      	movlt	r0, r3
 8007e50:	e7a6      	b.n	8007da0 <_printf_i+0x160>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4632      	mov	r2, r6
 8007e56:	4649      	mov	r1, r9
 8007e58:	4640      	mov	r0, r8
 8007e5a:	47d0      	blx	sl
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d09d      	beq.n	8007d9c <_printf_i+0x15c>
 8007e60:	3501      	adds	r5, #1
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	9903      	ldr	r1, [sp, #12]
 8007e66:	1a5b      	subs	r3, r3, r1
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	dcf2      	bgt.n	8007e52 <_printf_i+0x212>
 8007e6c:	e7eb      	b.n	8007e46 <_printf_i+0x206>
 8007e6e:	2500      	movs	r5, #0
 8007e70:	f104 0619 	add.w	r6, r4, #25
 8007e74:	e7f5      	b.n	8007e62 <_printf_i+0x222>
 8007e76:	bf00      	nop
 8007e78:	0800a45b 	.word	0x0800a45b
 8007e7c:	0800a46c 	.word	0x0800a46c

08007e80 <std>:
 8007e80:	2300      	movs	r3, #0
 8007e82:	b510      	push	{r4, lr}
 8007e84:	4604      	mov	r4, r0
 8007e86:	e9c0 3300 	strd	r3, r3, [r0]
 8007e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e8e:	6083      	str	r3, [r0, #8]
 8007e90:	8181      	strh	r1, [r0, #12]
 8007e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e94:	81c2      	strh	r2, [r0, #14]
 8007e96:	6183      	str	r3, [r0, #24]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	305c      	adds	r0, #92	@ 0x5c
 8007e9e:	f000 f914 	bl	80080ca <memset>
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <std+0x58>)
 8007ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <std+0x5c>)
 8007ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee0 <std+0x60>)
 8007eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007eae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <std+0x64>)
 8007eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee8 <std+0x68>)
 8007eb4:	6224      	str	r4, [r4, #32]
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d006      	beq.n	8007ec8 <std+0x48>
 8007eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ebe:	4294      	cmp	r4, r2
 8007ec0:	d002      	beq.n	8007ec8 <std+0x48>
 8007ec2:	33d0      	adds	r3, #208	@ 0xd0
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d105      	bne.n	8007ed4 <std+0x54>
 8007ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed0:	f000 b9be 	b.w	8008250 <__retarget_lock_init_recursive>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08008045 	.word	0x08008045
 8007edc:	08008067 	.word	0x08008067
 8007ee0:	0800809f 	.word	0x0800809f
 8007ee4:	080080c3 	.word	0x080080c3
 8007ee8:	2001e5d8 	.word	0x2001e5d8

08007eec <stdio_exit_handler>:
 8007eec:	4a02      	ldr	r2, [pc, #8]	@ (8007ef8 <stdio_exit_handler+0xc>)
 8007eee:	4903      	ldr	r1, [pc, #12]	@ (8007efc <stdio_exit_handler+0x10>)
 8007ef0:	4803      	ldr	r0, [pc, #12]	@ (8007f00 <stdio_exit_handler+0x14>)
 8007ef2:	f000 b869 	b.w	8007fc8 <_fwalk_sglue>
 8007ef6:	bf00      	nop
 8007ef8:	200002a8 	.word	0x200002a8
 8007efc:	08009a61 	.word	0x08009a61
 8007f00:	200002b8 	.word	0x200002b8

08007f04 <cleanup_stdio>:
 8007f04:	6841      	ldr	r1, [r0, #4]
 8007f06:	4b0c      	ldr	r3, [pc, #48]	@ (8007f38 <cleanup_stdio+0x34>)
 8007f08:	4299      	cmp	r1, r3
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	d001      	beq.n	8007f14 <cleanup_stdio+0x10>
 8007f10:	f001 fda6 	bl	8009a60 <_fflush_r>
 8007f14:	68a1      	ldr	r1, [r4, #8]
 8007f16:	4b09      	ldr	r3, [pc, #36]	@ (8007f3c <cleanup_stdio+0x38>)
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <cleanup_stdio+0x1e>
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f001 fd9f 	bl	8009a60 <_fflush_r>
 8007f22:	68e1      	ldr	r1, [r4, #12]
 8007f24:	4b06      	ldr	r3, [pc, #24]	@ (8007f40 <cleanup_stdio+0x3c>)
 8007f26:	4299      	cmp	r1, r3
 8007f28:	d004      	beq.n	8007f34 <cleanup_stdio+0x30>
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f30:	f001 bd96 	b.w	8009a60 <_fflush_r>
 8007f34:	bd10      	pop	{r4, pc}
 8007f36:	bf00      	nop
 8007f38:	2001e5d8 	.word	0x2001e5d8
 8007f3c:	2001e640 	.word	0x2001e640
 8007f40:	2001e6a8 	.word	0x2001e6a8

08007f44 <global_stdio_init.part.0>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <global_stdio_init.part.0+0x30>)
 8007f48:	4c0b      	ldr	r4, [pc, #44]	@ (8007f78 <global_stdio_init.part.0+0x34>)
 8007f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f7c <global_stdio_init.part.0+0x38>)
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	2200      	movs	r2, #0
 8007f52:	2104      	movs	r1, #4
 8007f54:	f7ff ff94 	bl	8007e80 <std>
 8007f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	2109      	movs	r1, #9
 8007f60:	f7ff ff8e 	bl	8007e80 <std>
 8007f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f68:	2202      	movs	r2, #2
 8007f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6e:	2112      	movs	r1, #18
 8007f70:	f7ff bf86 	b.w	8007e80 <std>
 8007f74:	2001e710 	.word	0x2001e710
 8007f78:	2001e5d8 	.word	0x2001e5d8
 8007f7c:	08007eed 	.word	0x08007eed

08007f80 <__sfp_lock_acquire>:
 8007f80:	4801      	ldr	r0, [pc, #4]	@ (8007f88 <__sfp_lock_acquire+0x8>)
 8007f82:	f000 b966 	b.w	8008252 <__retarget_lock_acquire_recursive>
 8007f86:	bf00      	nop
 8007f88:	2001e719 	.word	0x2001e719

08007f8c <__sfp_lock_release>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	@ (8007f94 <__sfp_lock_release+0x8>)
 8007f8e:	f000 b961 	b.w	8008254 <__retarget_lock_release_recursive>
 8007f92:	bf00      	nop
 8007f94:	2001e719 	.word	0x2001e719

08007f98 <__sinit>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	f7ff fff0 	bl	8007f80 <__sfp_lock_acquire>
 8007fa0:	6a23      	ldr	r3, [r4, #32]
 8007fa2:	b11b      	cbz	r3, 8007fac <__sinit+0x14>
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa8:	f7ff bff0 	b.w	8007f8c <__sfp_lock_release>
 8007fac:	4b04      	ldr	r3, [pc, #16]	@ (8007fc0 <__sinit+0x28>)
 8007fae:	6223      	str	r3, [r4, #32]
 8007fb0:	4b04      	ldr	r3, [pc, #16]	@ (8007fc4 <__sinit+0x2c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f5      	bne.n	8007fa4 <__sinit+0xc>
 8007fb8:	f7ff ffc4 	bl	8007f44 <global_stdio_init.part.0>
 8007fbc:	e7f2      	b.n	8007fa4 <__sinit+0xc>
 8007fbe:	bf00      	nop
 8007fc0:	08007f05 	.word	0x08007f05
 8007fc4:	2001e710 	.word	0x2001e710

08007fc8 <_fwalk_sglue>:
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4607      	mov	r7, r0
 8007fce:	4688      	mov	r8, r1
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8007fdc:	d505      	bpl.n	8007fea <_fwalk_sglue+0x22>
 8007fde:	6824      	ldr	r4, [r4, #0]
 8007fe0:	2c00      	cmp	r4, #0
 8007fe2:	d1f7      	bne.n	8007fd4 <_fwalk_sglue+0xc>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d907      	bls.n	8008000 <_fwalk_sglue+0x38>
 8007ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	d003      	beq.n	8008000 <_fwalk_sglue+0x38>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	47c0      	blx	r8
 8007ffe:	4306      	orrs	r6, r0
 8008000:	3568      	adds	r5, #104	@ 0x68
 8008002:	e7e9      	b.n	8007fd8 <_fwalk_sglue+0x10>

08008004 <siprintf>:
 8008004:	b40e      	push	{r1, r2, r3}
 8008006:	b500      	push	{lr}
 8008008:	b09c      	sub	sp, #112	@ 0x70
 800800a:	ab1d      	add	r3, sp, #116	@ 0x74
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9006      	str	r0, [sp, #24]
 8008010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008014:	4809      	ldr	r0, [pc, #36]	@ (800803c <siprintf+0x38>)
 8008016:	9107      	str	r1, [sp, #28]
 8008018:	9104      	str	r1, [sp, #16]
 800801a:	4909      	ldr	r1, [pc, #36]	@ (8008040 <siprintf+0x3c>)
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	6800      	ldr	r0, [r0, #0]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	a902      	add	r1, sp, #8
 8008028:	f001 fb9a 	bl	8009760 <_svfiprintf_r>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	b01c      	add	sp, #112	@ 0x70
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	200002b4 	.word	0x200002b4
 8008040:	ffff0208 	.word	0xffff0208

08008044 <__sread>:
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804c:	f000 f8a2 	bl	8008194 <_read_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	bfab      	itete	ge
 8008054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008056:	89a3      	ldrhlt	r3, [r4, #12]
 8008058:	181b      	addge	r3, r3, r0
 800805a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800805e:	bfac      	ite	ge
 8008060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008062:	81a3      	strhlt	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__swrite>:
 8008066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806a:	461f      	mov	r7, r3
 800806c:	898b      	ldrh	r3, [r1, #12]
 800806e:	05db      	lsls	r3, r3, #23
 8008070:	4605      	mov	r5, r0
 8008072:	460c      	mov	r4, r1
 8008074:	4616      	mov	r6, r2
 8008076:	d505      	bpl.n	8008084 <__swrite+0x1e>
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	2302      	movs	r3, #2
 800807e:	2200      	movs	r2, #0
 8008080:	f000 f876 	bl	8008170 <_lseek_r>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	4632      	mov	r2, r6
 8008092:	463b      	mov	r3, r7
 8008094:	4628      	mov	r0, r5
 8008096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	f000 b89d 	b.w	80081d8 <_write_r>

0800809e <__sseek>:
 800809e:	b510      	push	{r4, lr}
 80080a0:	460c      	mov	r4, r1
 80080a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a6:	f000 f863 	bl	8008170 <_lseek_r>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	bf15      	itete	ne
 80080b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080ba:	81a3      	strheq	r3, [r4, #12]
 80080bc:	bf18      	it	ne
 80080be:	81a3      	strhne	r3, [r4, #12]
 80080c0:	bd10      	pop	{r4, pc}

080080c2 <__sclose>:
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 b843 	b.w	8008150 <_close_r>

080080ca <memset>:
 80080ca:	4402      	add	r2, r0
 80080cc:	4603      	mov	r3, r0
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d100      	bne.n	80080d4 <memset+0xa>
 80080d2:	4770      	bx	lr
 80080d4:	f803 1b01 	strb.w	r1, [r3], #1
 80080d8:	e7f9      	b.n	80080ce <memset+0x4>

080080da <strchr>:
 80080da:	b2c9      	uxtb	r1, r1
 80080dc:	4603      	mov	r3, r0
 80080de:	4618      	mov	r0, r3
 80080e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e4:	b112      	cbz	r2, 80080ec <strchr+0x12>
 80080e6:	428a      	cmp	r2, r1
 80080e8:	d1f9      	bne.n	80080de <strchr+0x4>
 80080ea:	4770      	bx	lr
 80080ec:	2900      	cmp	r1, #0
 80080ee:	bf18      	it	ne
 80080f0:	2000      	movne	r0, #0
 80080f2:	4770      	bx	lr

080080f4 <strncpy>:
 80080f4:	b510      	push	{r4, lr}
 80080f6:	3901      	subs	r1, #1
 80080f8:	4603      	mov	r3, r0
 80080fa:	b132      	cbz	r2, 800810a <strncpy+0x16>
 80080fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008100:	f803 4b01 	strb.w	r4, [r3], #1
 8008104:	3a01      	subs	r2, #1
 8008106:	2c00      	cmp	r4, #0
 8008108:	d1f7      	bne.n	80080fa <strncpy+0x6>
 800810a:	441a      	add	r2, r3
 800810c:	2100      	movs	r1, #0
 800810e:	4293      	cmp	r3, r2
 8008110:	d100      	bne.n	8008114 <strncpy+0x20>
 8008112:	bd10      	pop	{r4, pc}
 8008114:	f803 1b01 	strb.w	r1, [r3], #1
 8008118:	e7f9      	b.n	800810e <strncpy+0x1a>

0800811a <strstr>:
 800811a:	780a      	ldrb	r2, [r1, #0]
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	b96a      	cbnz	r2, 800813c <strstr+0x22>
 8008120:	bd70      	pop	{r4, r5, r6, pc}
 8008122:	429a      	cmp	r2, r3
 8008124:	d109      	bne.n	800813a <strstr+0x20>
 8008126:	460c      	mov	r4, r1
 8008128:	4605      	mov	r5, r0
 800812a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0f6      	beq.n	8008120 <strstr+0x6>
 8008132:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008136:	429e      	cmp	r6, r3
 8008138:	d0f7      	beq.n	800812a <strstr+0x10>
 800813a:	3001      	adds	r0, #1
 800813c:	7803      	ldrb	r3, [r0, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1ef      	bne.n	8008122 <strstr+0x8>
 8008142:	4618      	mov	r0, r3
 8008144:	e7ec      	b.n	8008120 <strstr+0x6>
	...

08008148 <_localeconv_r>:
 8008148:	4800      	ldr	r0, [pc, #0]	@ (800814c <_localeconv_r+0x4>)
 800814a:	4770      	bx	lr
 800814c:	200003f4 	.word	0x200003f4

08008150 <_close_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	@ (800816c <_close_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7fa fe6a 	bl	8002e34 <_close>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_close_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_close_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	2001e714 	.word	0x2001e714

08008170 <_lseek_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	@ (8008190 <_lseek_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7fa fe7f 	bl	8002e82 <_lseek>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_lseek_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_lseek_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	2001e714 	.word	0x2001e714

08008194 <_read_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	@ (80081b4 <_read_r+0x20>)
 8008198:	4604      	mov	r4, r0
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	602a      	str	r2, [r5, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7fa fe0d 	bl	8002dc2 <_read>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_read_r+0x1e>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_read_r+0x1e>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	2001e714 	.word	0x2001e714

080081b8 <_sbrk_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d06      	ldr	r5, [pc, #24]	@ (80081d4 <_sbrk_r+0x1c>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7fa fe6a 	bl	8002e9c <_sbrk>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_sbrk_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_sbrk_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	2001e714 	.word	0x2001e714

080081d8 <_write_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	@ (80081f8 <_write_r+0x20>)
 80081dc:	4604      	mov	r4, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7fa fe08 	bl	8002dfc <_write>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_write_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_write_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	2001e714 	.word	0x2001e714

080081fc <__errno>:
 80081fc:	4b01      	ldr	r3, [pc, #4]	@ (8008204 <__errno+0x8>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	200002b4 	.word	0x200002b4

08008208 <__libc_init_array>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	4d0d      	ldr	r5, [pc, #52]	@ (8008240 <__libc_init_array+0x38>)
 800820c:	4c0d      	ldr	r4, [pc, #52]	@ (8008244 <__libc_init_array+0x3c>)
 800820e:	1b64      	subs	r4, r4, r5
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	2600      	movs	r6, #0
 8008214:	42a6      	cmp	r6, r4
 8008216:	d109      	bne.n	800822c <__libc_init_array+0x24>
 8008218:	4d0b      	ldr	r5, [pc, #44]	@ (8008248 <__libc_init_array+0x40>)
 800821a:	4c0c      	ldr	r4, [pc, #48]	@ (800824c <__libc_init_array+0x44>)
 800821c:	f001 ffa0 	bl	800a160 <_init>
 8008220:	1b64      	subs	r4, r4, r5
 8008222:	10a4      	asrs	r4, r4, #2
 8008224:	2600      	movs	r6, #0
 8008226:	42a6      	cmp	r6, r4
 8008228:	d105      	bne.n	8008236 <__libc_init_array+0x2e>
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008230:	4798      	blx	r3
 8008232:	3601      	adds	r6, #1
 8008234:	e7ee      	b.n	8008214 <__libc_init_array+0xc>
 8008236:	f855 3b04 	ldr.w	r3, [r5], #4
 800823a:	4798      	blx	r3
 800823c:	3601      	adds	r6, #1
 800823e:	e7f2      	b.n	8008226 <__libc_init_array+0x1e>
 8008240:	0800a6c0 	.word	0x0800a6c0
 8008244:	0800a6c0 	.word	0x0800a6c0
 8008248:	0800a6c0 	.word	0x0800a6c0
 800824c:	0800a6c4 	.word	0x0800a6c4

08008250 <__retarget_lock_init_recursive>:
 8008250:	4770      	bx	lr

08008252 <__retarget_lock_acquire_recursive>:
 8008252:	4770      	bx	lr

08008254 <__retarget_lock_release_recursive>:
 8008254:	4770      	bx	lr

08008256 <memcpy>:
 8008256:	440a      	add	r2, r1
 8008258:	4291      	cmp	r1, r2
 800825a:	f100 33ff 	add.w	r3, r0, #4294967295
 800825e:	d100      	bne.n	8008262 <memcpy+0xc>
 8008260:	4770      	bx	lr
 8008262:	b510      	push	{r4, lr}
 8008264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800826c:	4291      	cmp	r1, r2
 800826e:	d1f9      	bne.n	8008264 <memcpy+0xe>
 8008270:	bd10      	pop	{r4, pc}

08008272 <quorem>:
 8008272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008276:	6903      	ldr	r3, [r0, #16]
 8008278:	690c      	ldr	r4, [r1, #16]
 800827a:	42a3      	cmp	r3, r4
 800827c:	4607      	mov	r7, r0
 800827e:	db7e      	blt.n	800837e <quorem+0x10c>
 8008280:	3c01      	subs	r4, #1
 8008282:	f101 0814 	add.w	r8, r1, #20
 8008286:	00a3      	lsls	r3, r4, #2
 8008288:	f100 0514 	add.w	r5, r0, #20
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800829c:	3301      	adds	r3, #1
 800829e:	429a      	cmp	r2, r3
 80082a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a8:	d32e      	bcc.n	8008308 <quorem+0x96>
 80082aa:	f04f 0a00 	mov.w	sl, #0
 80082ae:	46c4      	mov	ip, r8
 80082b0:	46ae      	mov	lr, r5
 80082b2:	46d3      	mov	fp, sl
 80082b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082b8:	b298      	uxth	r0, r3
 80082ba:	fb06 a000 	mla	r0, r6, r0, sl
 80082be:	0c02      	lsrs	r2, r0, #16
 80082c0:	0c1b      	lsrs	r3, r3, #16
 80082c2:	fb06 2303 	mla	r3, r6, r3, r2
 80082c6:	f8de 2000 	ldr.w	r2, [lr]
 80082ca:	b280      	uxth	r0, r0
 80082cc:	b292      	uxth	r2, r2
 80082ce:	1a12      	subs	r2, r2, r0
 80082d0:	445a      	add	r2, fp
 80082d2:	f8de 0000 	ldr.w	r0, [lr]
 80082d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082da:	b29b      	uxth	r3, r3
 80082dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082e4:	b292      	uxth	r2, r2
 80082e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082ea:	45e1      	cmp	r9, ip
 80082ec:	f84e 2b04 	str.w	r2, [lr], #4
 80082f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082f4:	d2de      	bcs.n	80082b4 <quorem+0x42>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	58eb      	ldr	r3, [r5, r3]
 80082fa:	b92b      	cbnz	r3, 8008308 <quorem+0x96>
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	3b04      	subs	r3, #4
 8008300:	429d      	cmp	r5, r3
 8008302:	461a      	mov	r2, r3
 8008304:	d32f      	bcc.n	8008366 <quorem+0xf4>
 8008306:	613c      	str	r4, [r7, #16]
 8008308:	4638      	mov	r0, r7
 800830a:	f001 f8c5 	bl	8009498 <__mcmp>
 800830e:	2800      	cmp	r0, #0
 8008310:	db25      	blt.n	800835e <quorem+0xec>
 8008312:	4629      	mov	r1, r5
 8008314:	2000      	movs	r0, #0
 8008316:	f858 2b04 	ldr.w	r2, [r8], #4
 800831a:	f8d1 c000 	ldr.w	ip, [r1]
 800831e:	fa1f fe82 	uxth.w	lr, r2
 8008322:	fa1f f38c 	uxth.w	r3, ip
 8008326:	eba3 030e 	sub.w	r3, r3, lr
 800832a:	4403      	add	r3, r0
 800832c:	0c12      	lsrs	r2, r2, #16
 800832e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008332:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833c:	45c1      	cmp	r9, r8
 800833e:	f841 3b04 	str.w	r3, [r1], #4
 8008342:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008346:	d2e6      	bcs.n	8008316 <quorem+0xa4>
 8008348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008350:	b922      	cbnz	r2, 800835c <quorem+0xea>
 8008352:	3b04      	subs	r3, #4
 8008354:	429d      	cmp	r5, r3
 8008356:	461a      	mov	r2, r3
 8008358:	d30b      	bcc.n	8008372 <quorem+0x100>
 800835a:	613c      	str	r4, [r7, #16]
 800835c:	3601      	adds	r6, #1
 800835e:	4630      	mov	r0, r6
 8008360:	b003      	add	sp, #12
 8008362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	3b04      	subs	r3, #4
 800836a:	2a00      	cmp	r2, #0
 800836c:	d1cb      	bne.n	8008306 <quorem+0x94>
 800836e:	3c01      	subs	r4, #1
 8008370:	e7c6      	b.n	8008300 <quorem+0x8e>
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	3b04      	subs	r3, #4
 8008376:	2a00      	cmp	r2, #0
 8008378:	d1ef      	bne.n	800835a <quorem+0xe8>
 800837a:	3c01      	subs	r4, #1
 800837c:	e7ea      	b.n	8008354 <quorem+0xe2>
 800837e:	2000      	movs	r0, #0
 8008380:	e7ee      	b.n	8008360 <quorem+0xee>
 8008382:	0000      	movs	r0, r0
 8008384:	0000      	movs	r0, r0
	...

08008388 <_dtoa_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	69c7      	ldr	r7, [r0, #28]
 800838e:	b099      	sub	sp, #100	@ 0x64
 8008390:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008394:	ec55 4b10 	vmov	r4, r5, d0
 8008398:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800839a:	9109      	str	r1, [sp, #36]	@ 0x24
 800839c:	4683      	mov	fp, r0
 800839e:	920e      	str	r2, [sp, #56]	@ 0x38
 80083a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083a2:	b97f      	cbnz	r7, 80083c4 <_dtoa_r+0x3c>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f7fe ffdd 	bl	8007364 <malloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80083b0:	b920      	cbnz	r0, 80083bc <_dtoa_r+0x34>
 80083b2:	4ba7      	ldr	r3, [pc, #668]	@ (8008650 <_dtoa_r+0x2c8>)
 80083b4:	21ef      	movs	r1, #239	@ 0xef
 80083b6:	48a7      	ldr	r0, [pc, #668]	@ (8008654 <_dtoa_r+0x2cc>)
 80083b8:	f001 fb94 	bl	8009ae4 <__assert_func>
 80083bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083c0:	6007      	str	r7, [r0, #0]
 80083c2:	60c7      	str	r7, [r0, #12]
 80083c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	b159      	cbz	r1, 80083e4 <_dtoa_r+0x5c>
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	604a      	str	r2, [r1, #4]
 80083d0:	2301      	movs	r3, #1
 80083d2:	4093      	lsls	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
 80083d6:	4658      	mov	r0, fp
 80083d8:	f000 fe24 	bl	8009024 <_Bfree>
 80083dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	1e2b      	subs	r3, r5, #0
 80083e6:	bfb9      	ittee	lt
 80083e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083ec:	9303      	strlt	r3, [sp, #12]
 80083ee:	2300      	movge	r3, #0
 80083f0:	6033      	strge	r3, [r6, #0]
 80083f2:	9f03      	ldr	r7, [sp, #12]
 80083f4:	4b98      	ldr	r3, [pc, #608]	@ (8008658 <_dtoa_r+0x2d0>)
 80083f6:	bfbc      	itt	lt
 80083f8:	2201      	movlt	r2, #1
 80083fa:	6032      	strlt	r2, [r6, #0]
 80083fc:	43bb      	bics	r3, r7
 80083fe:	d112      	bne.n	8008426 <_dtoa_r+0x9e>
 8008400:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008402:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800840c:	4323      	orrs	r3, r4
 800840e:	f000 854d 	beq.w	8008eac <_dtoa_r+0xb24>
 8008412:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008414:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800866c <_dtoa_r+0x2e4>
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 854f 	beq.w	8008ebc <_dtoa_r+0xb34>
 800841e:	f10a 0303 	add.w	r3, sl, #3
 8008422:	f000 bd49 	b.w	8008eb8 <_dtoa_r+0xb30>
 8008426:	ed9d 7b02 	vldr	d7, [sp, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	ec51 0b17 	vmov	r0, r1, d7
 8008430:	2300      	movs	r3, #0
 8008432:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008436:	f7f8 fb77 	bl	8000b28 <__aeabi_dcmpeq>
 800843a:	4680      	mov	r8, r0
 800843c:	b158      	cbz	r0, 8008456 <_dtoa_r+0xce>
 800843e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008440:	2301      	movs	r3, #1
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008446:	b113      	cbz	r3, 800844e <_dtoa_r+0xc6>
 8008448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800844a:	4b84      	ldr	r3, [pc, #528]	@ (800865c <_dtoa_r+0x2d4>)
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008670 <_dtoa_r+0x2e8>
 8008452:	f000 bd33 	b.w	8008ebc <_dtoa_r+0xb34>
 8008456:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800845a:	aa16      	add	r2, sp, #88	@ 0x58
 800845c:	a917      	add	r1, sp, #92	@ 0x5c
 800845e:	4658      	mov	r0, fp
 8008460:	f001 f8ca 	bl	80095f8 <__d2b>
 8008464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008468:	4681      	mov	r9, r0
 800846a:	2e00      	cmp	r6, #0
 800846c:	d077      	beq.n	800855e <_dtoa_r+0x1d6>
 800846e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008470:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008488:	4619      	mov	r1, r3
 800848a:	2200      	movs	r2, #0
 800848c:	4b74      	ldr	r3, [pc, #464]	@ (8008660 <_dtoa_r+0x2d8>)
 800848e:	f7f7 ff2b 	bl	80002e8 <__aeabi_dsub>
 8008492:	a369      	add	r3, pc, #420	@ (adr r3, 8008638 <_dtoa_r+0x2b0>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f7f8 f8de 	bl	8000658 <__aeabi_dmul>
 800849c:	a368      	add	r3, pc, #416	@ (adr r3, 8008640 <_dtoa_r+0x2b8>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 ff23 	bl	80002ec <__adddf3>
 80084a6:	4604      	mov	r4, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	460d      	mov	r5, r1
 80084ac:	f7f8 f86a 	bl	8000584 <__aeabi_i2d>
 80084b0:	a365      	add	r3, pc, #404	@ (adr r3, 8008648 <_dtoa_r+0x2c0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f8cf 	bl	8000658 <__aeabi_dmul>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f7 ff13 	bl	80002ec <__adddf3>
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	f7f8 fb75 	bl	8000bb8 <__aeabi_d2iz>
 80084ce:	2200      	movs	r2, #0
 80084d0:	4607      	mov	r7, r0
 80084d2:	2300      	movs	r3, #0
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f8 fb30 	bl	8000b3c <__aeabi_dcmplt>
 80084dc:	b140      	cbz	r0, 80084f0 <_dtoa_r+0x168>
 80084de:	4638      	mov	r0, r7
 80084e0:	f7f8 f850 	bl	8000584 <__aeabi_i2d>
 80084e4:	4622      	mov	r2, r4
 80084e6:	462b      	mov	r3, r5
 80084e8:	f7f8 fb1e 	bl	8000b28 <__aeabi_dcmpeq>
 80084ec:	b900      	cbnz	r0, 80084f0 <_dtoa_r+0x168>
 80084ee:	3f01      	subs	r7, #1
 80084f0:	2f16      	cmp	r7, #22
 80084f2:	d851      	bhi.n	8008598 <_dtoa_r+0x210>
 80084f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008664 <_dtoa_r+0x2dc>)
 80084f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008502:	f7f8 fb1b 	bl	8000b3c <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d048      	beq.n	800859c <_dtoa_r+0x214>
 800850a:	3f01      	subs	r7, #1
 800850c:	2300      	movs	r3, #0
 800850e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008510:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008512:	1b9b      	subs	r3, r3, r6
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	bf44      	itt	mi
 8008518:	f1c3 0801 	rsbmi	r8, r3, #1
 800851c:	2300      	movmi	r3, #0
 800851e:	9208      	str	r2, [sp, #32]
 8008520:	bf54      	ite	pl
 8008522:	f04f 0800 	movpl.w	r8, #0
 8008526:	9308      	strmi	r3, [sp, #32]
 8008528:	2f00      	cmp	r7, #0
 800852a:	db39      	blt.n	80085a0 <_dtoa_r+0x218>
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008530:	443b      	add	r3, r7
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	2300      	movs	r3, #0
 8008536:	930a      	str	r3, [sp, #40]	@ 0x28
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	2b09      	cmp	r3, #9
 800853c:	d864      	bhi.n	8008608 <_dtoa_r+0x280>
 800853e:	2b05      	cmp	r3, #5
 8008540:	bfc4      	itt	gt
 8008542:	3b04      	subgt	r3, #4
 8008544:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008548:	f1a3 0302 	sub.w	r3, r3, #2
 800854c:	bfcc      	ite	gt
 800854e:	2400      	movgt	r4, #0
 8008550:	2401      	movle	r4, #1
 8008552:	2b03      	cmp	r3, #3
 8008554:	d863      	bhi.n	800861e <_dtoa_r+0x296>
 8008556:	e8df f003 	tbb	[pc, r3]
 800855a:	372a      	.short	0x372a
 800855c:	5535      	.short	0x5535
 800855e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008562:	441e      	add	r6, r3
 8008564:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008568:	2b20      	cmp	r3, #32
 800856a:	bfc1      	itttt	gt
 800856c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008570:	409f      	lslgt	r7, r3
 8008572:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008576:	fa24 f303 	lsrgt.w	r3, r4, r3
 800857a:	bfd6      	itet	le
 800857c:	f1c3 0320 	rsble	r3, r3, #32
 8008580:	ea47 0003 	orrgt.w	r0, r7, r3
 8008584:	fa04 f003 	lslle.w	r0, r4, r3
 8008588:	f7f7 ffec 	bl	8000564 <__aeabi_ui2d>
 800858c:	2201      	movs	r2, #1
 800858e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008592:	3e01      	subs	r6, #1
 8008594:	9214      	str	r2, [sp, #80]	@ 0x50
 8008596:	e777      	b.n	8008488 <_dtoa_r+0x100>
 8008598:	2301      	movs	r3, #1
 800859a:	e7b8      	b.n	800850e <_dtoa_r+0x186>
 800859c:	9012      	str	r0, [sp, #72]	@ 0x48
 800859e:	e7b7      	b.n	8008510 <_dtoa_r+0x188>
 80085a0:	427b      	negs	r3, r7
 80085a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085a4:	2300      	movs	r3, #0
 80085a6:	eba8 0807 	sub.w	r8, r8, r7
 80085aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085ac:	e7c4      	b.n	8008538 <_dtoa_r+0x1b0>
 80085ae:	2300      	movs	r3, #0
 80085b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc35      	bgt.n	8008624 <_dtoa_r+0x29c>
 80085b8:	2301      	movs	r3, #1
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	461a      	mov	r2, r3
 80085c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085c2:	e00b      	b.n	80085dc <_dtoa_r+0x254>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7f3      	b.n	80085b0 <_dtoa_r+0x228>
 80085c8:	2300      	movs	r3, #0
 80085ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ce:	18fb      	adds	r3, r7, r3
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	bfb8      	it	lt
 80085da:	2301      	movlt	r3, #1
 80085dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80085e0:	2100      	movs	r1, #0
 80085e2:	2204      	movs	r2, #4
 80085e4:	f102 0514 	add.w	r5, r2, #20
 80085e8:	429d      	cmp	r5, r3
 80085ea:	d91f      	bls.n	800862c <_dtoa_r+0x2a4>
 80085ec:	6041      	str	r1, [r0, #4]
 80085ee:	4658      	mov	r0, fp
 80085f0:	f000 fcd8 	bl	8008fa4 <_Balloc>
 80085f4:	4682      	mov	sl, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d13c      	bne.n	8008674 <_dtoa_r+0x2ec>
 80085fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008668 <_dtoa_r+0x2e0>)
 80085fc:	4602      	mov	r2, r0
 80085fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008602:	e6d8      	b.n	80083b6 <_dtoa_r+0x2e>
 8008604:	2301      	movs	r3, #1
 8008606:	e7e0      	b.n	80085ca <_dtoa_r+0x242>
 8008608:	2401      	movs	r4, #1
 800860a:	2300      	movs	r3, #0
 800860c:	9309      	str	r3, [sp, #36]	@ 0x24
 800860e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008610:	f04f 33ff 	mov.w	r3, #4294967295
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	2200      	movs	r2, #0
 800861a:	2312      	movs	r3, #18
 800861c:	e7d0      	b.n	80085c0 <_dtoa_r+0x238>
 800861e:	2301      	movs	r3, #1
 8008620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008622:	e7f5      	b.n	8008610 <_dtoa_r+0x288>
 8008624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	e7d7      	b.n	80085dc <_dtoa_r+0x254>
 800862c:	3101      	adds	r1, #1
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	e7d8      	b.n	80085e4 <_dtoa_r+0x25c>
 8008632:	bf00      	nop
 8008634:	f3af 8000 	nop.w
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800a48a 	.word	0x0800a48a
 8008654:	0800a4a1 	.word	0x0800a4a1
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800a45a 	.word	0x0800a45a
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800a598 	.word	0x0800a598
 8008668:	0800a4f9 	.word	0x0800a4f9
 800866c:	0800a486 	.word	0x0800a486
 8008670:	0800a459 	.word	0x0800a459
 8008674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	9b07      	ldr	r3, [sp, #28]
 800867c:	2b0e      	cmp	r3, #14
 800867e:	f200 80a4 	bhi.w	80087ca <_dtoa_r+0x442>
 8008682:	2c00      	cmp	r4, #0
 8008684:	f000 80a1 	beq.w	80087ca <_dtoa_r+0x442>
 8008688:	2f00      	cmp	r7, #0
 800868a:	dd33      	ble.n	80086f4 <_dtoa_r+0x36c>
 800868c:	4bad      	ldr	r3, [pc, #692]	@ (8008944 <_dtoa_r+0x5bc>)
 800868e:	f007 020f 	and.w	r2, r7, #15
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	ed93 7b00 	vldr	d7, [r3]
 800869a:	05f8      	lsls	r0, r7, #23
 800869c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086a4:	d516      	bpl.n	80086d4 <_dtoa_r+0x34c>
 80086a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008948 <_dtoa_r+0x5c0>)
 80086a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086b0:	f7f8 f8fc 	bl	80008ac <__aeabi_ddiv>
 80086b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b8:	f004 040f 	and.w	r4, r4, #15
 80086bc:	2603      	movs	r6, #3
 80086be:	4da2      	ldr	r5, [pc, #648]	@ (8008948 <_dtoa_r+0x5c0>)
 80086c0:	b954      	cbnz	r4, 80086d8 <_dtoa_r+0x350>
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ca:	f7f8 f8ef 	bl	80008ac <__aeabi_ddiv>
 80086ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d2:	e028      	b.n	8008726 <_dtoa_r+0x39e>
 80086d4:	2602      	movs	r6, #2
 80086d6:	e7f2      	b.n	80086be <_dtoa_r+0x336>
 80086d8:	07e1      	lsls	r1, r4, #31
 80086da:	d508      	bpl.n	80086ee <_dtoa_r+0x366>
 80086dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086e4:	f7f7 ffb8 	bl	8000658 <__aeabi_dmul>
 80086e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ec:	3601      	adds	r6, #1
 80086ee:	1064      	asrs	r4, r4, #1
 80086f0:	3508      	adds	r5, #8
 80086f2:	e7e5      	b.n	80086c0 <_dtoa_r+0x338>
 80086f4:	f000 80d2 	beq.w	800889c <_dtoa_r+0x514>
 80086f8:	427c      	negs	r4, r7
 80086fa:	4b92      	ldr	r3, [pc, #584]	@ (8008944 <_dtoa_r+0x5bc>)
 80086fc:	4d92      	ldr	r5, [pc, #584]	@ (8008948 <_dtoa_r+0x5c0>)
 80086fe:	f004 020f 	and.w	r2, r4, #15
 8008702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800870e:	f7f7 ffa3 	bl	8000658 <__aeabi_dmul>
 8008712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008716:	1124      	asrs	r4, r4, #4
 8008718:	2300      	movs	r3, #0
 800871a:	2602      	movs	r6, #2
 800871c:	2c00      	cmp	r4, #0
 800871e:	f040 80b2 	bne.w	8008886 <_dtoa_r+0x4fe>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1d3      	bne.n	80086ce <_dtoa_r+0x346>
 8008726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008728:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80b7 	beq.w	80088a0 <_dtoa_r+0x518>
 8008732:	4b86      	ldr	r3, [pc, #536]	@ (800894c <_dtoa_r+0x5c4>)
 8008734:	2200      	movs	r2, #0
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f8 f9ff 	bl	8000b3c <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	f000 80ae 	beq.w	80088a0 <_dtoa_r+0x518>
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 80aa 	beq.w	80088a0 <_dtoa_r+0x518>
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd37      	ble.n	80087c2 <_dtoa_r+0x43a>
 8008752:	1e7b      	subs	r3, r7, #1
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	4620      	mov	r0, r4
 8008758:	4b7d      	ldr	r3, [pc, #500]	@ (8008950 <_dtoa_r+0x5c8>)
 800875a:	2200      	movs	r2, #0
 800875c:	4629      	mov	r1, r5
 800875e:	f7f7 ff7b 	bl	8000658 <__aeabi_dmul>
 8008762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008766:	9c00      	ldr	r4, [sp, #0]
 8008768:	3601      	adds	r6, #1
 800876a:	4630      	mov	r0, r6
 800876c:	f7f7 ff0a 	bl	8000584 <__aeabi_i2d>
 8008770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008774:	f7f7 ff70 	bl	8000658 <__aeabi_dmul>
 8008778:	4b76      	ldr	r3, [pc, #472]	@ (8008954 <_dtoa_r+0x5cc>)
 800877a:	2200      	movs	r2, #0
 800877c:	f7f7 fdb6 	bl	80002ec <__adddf3>
 8008780:	4605      	mov	r5, r0
 8008782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008786:	2c00      	cmp	r4, #0
 8008788:	f040 808d 	bne.w	80088a6 <_dtoa_r+0x51e>
 800878c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008790:	4b71      	ldr	r3, [pc, #452]	@ (8008958 <_dtoa_r+0x5d0>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f7 fda8 	bl	80002e8 <__aeabi_dsub>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4633      	mov	r3, r6
 80087a4:	f7f8 f9e8 	bl	8000b78 <__aeabi_dcmpgt>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f040 828b 	bne.w	8008cc4 <_dtoa_r+0x93c>
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	462a      	mov	r2, r5
 80087b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087b8:	f7f8 f9c0 	bl	8000b3c <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f040 8128 	bne.w	8008a12 <_dtoa_r+0x68a>
 80087c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80087c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f2c0 815a 	blt.w	8008a86 <_dtoa_r+0x6fe>
 80087d2:	2f0e      	cmp	r7, #14
 80087d4:	f300 8157 	bgt.w	8008a86 <_dtoa_r+0x6fe>
 80087d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008944 <_dtoa_r+0x5bc>)
 80087da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087de:	ed93 7b00 	vldr	d7, [r3]
 80087e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	ed8d 7b00 	vstr	d7, [sp]
 80087ea:	da03      	bge.n	80087f4 <_dtoa_r+0x46c>
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f340 8101 	ble.w	80089f6 <_dtoa_r+0x66e>
 80087f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087f8:	4656      	mov	r6, sl
 80087fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f853 	bl	80008ac <__aeabi_ddiv>
 8008806:	f7f8 f9d7 	bl	8000bb8 <__aeabi_d2iz>
 800880a:	4680      	mov	r8, r0
 800880c:	f7f7 feba 	bl	8000584 <__aeabi_i2d>
 8008810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008814:	f7f7 ff20 	bl	8000658 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008824:	f7f7 fd60 	bl	80002e8 <__aeabi_dsub>
 8008828:	f806 4b01 	strb.w	r4, [r6], #1
 800882c:	9d07      	ldr	r5, [sp, #28]
 800882e:	eba6 040a 	sub.w	r4, r6, sl
 8008832:	42a5      	cmp	r5, r4
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	f040 8117 	bne.w	8008a6a <_dtoa_r+0x6e2>
 800883c:	f7f7 fd56 	bl	80002ec <__adddf3>
 8008840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f8 f996 	bl	8000b78 <__aeabi_dcmpgt>
 800884c:	2800      	cmp	r0, #0
 800884e:	f040 80f9 	bne.w	8008a44 <_dtoa_r+0x6bc>
 8008852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f8 f965 	bl	8000b28 <__aeabi_dcmpeq>
 800885e:	b118      	cbz	r0, 8008868 <_dtoa_r+0x4e0>
 8008860:	f018 0f01 	tst.w	r8, #1
 8008864:	f040 80ee 	bne.w	8008a44 <_dtoa_r+0x6bc>
 8008868:	4649      	mov	r1, r9
 800886a:	4658      	mov	r0, fp
 800886c:	f000 fbda 	bl	8009024 <_Bfree>
 8008870:	2300      	movs	r3, #0
 8008872:	7033      	strb	r3, [r6, #0]
 8008874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008876:	3701      	adds	r7, #1
 8008878:	601f      	str	r7, [r3, #0]
 800887a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 831d 	beq.w	8008ebc <_dtoa_r+0xb34>
 8008882:	601e      	str	r6, [r3, #0]
 8008884:	e31a      	b.n	8008ebc <_dtoa_r+0xb34>
 8008886:	07e2      	lsls	r2, r4, #31
 8008888:	d505      	bpl.n	8008896 <_dtoa_r+0x50e>
 800888a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800888e:	f7f7 fee3 	bl	8000658 <__aeabi_dmul>
 8008892:	3601      	adds	r6, #1
 8008894:	2301      	movs	r3, #1
 8008896:	1064      	asrs	r4, r4, #1
 8008898:	3508      	adds	r5, #8
 800889a:	e73f      	b.n	800871c <_dtoa_r+0x394>
 800889c:	2602      	movs	r6, #2
 800889e:	e742      	b.n	8008726 <_dtoa_r+0x39e>
 80088a0:	9c07      	ldr	r4, [sp, #28]
 80088a2:	9704      	str	r7, [sp, #16]
 80088a4:	e761      	b.n	800876a <_dtoa_r+0x3e2>
 80088a6:	4b27      	ldr	r3, [pc, #156]	@ (8008944 <_dtoa_r+0x5bc>)
 80088a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088b2:	4454      	add	r4, sl
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d053      	beq.n	8008960 <_dtoa_r+0x5d8>
 80088b8:	4928      	ldr	r1, [pc, #160]	@ (800895c <_dtoa_r+0x5d4>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 fff6 	bl	80008ac <__aeabi_ddiv>
 80088c0:	4633      	mov	r3, r6
 80088c2:	462a      	mov	r2, r5
 80088c4:	f7f7 fd10 	bl	80002e8 <__aeabi_dsub>
 80088c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088cc:	4656      	mov	r6, sl
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	f7f8 f971 	bl	8000bb8 <__aeabi_d2iz>
 80088d6:	4605      	mov	r5, r0
 80088d8:	f7f7 fe54 	bl	8000584 <__aeabi_i2d>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e4:	f7f7 fd00 	bl	80002e8 <__aeabi_dsub>
 80088e8:	3530      	adds	r5, #48	@ 0x30
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088f2:	f806 5b01 	strb.w	r5, [r6], #1
 80088f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088fa:	f7f8 f91f 	bl	8000b3c <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d171      	bne.n	80089e6 <_dtoa_r+0x65e>
 8008902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008906:	4911      	ldr	r1, [pc, #68]	@ (800894c <_dtoa_r+0x5c4>)
 8008908:	2000      	movs	r0, #0
 800890a:	f7f7 fced 	bl	80002e8 <__aeabi_dsub>
 800890e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008912:	f7f8 f913 	bl	8000b3c <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f040 8095 	bne.w	8008a46 <_dtoa_r+0x6be>
 800891c:	42a6      	cmp	r6, r4
 800891e:	f43f af50 	beq.w	80087c2 <_dtoa_r+0x43a>
 8008922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008926:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <_dtoa_r+0x5c8>)
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe95 	bl	8000658 <__aeabi_dmul>
 800892e:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <_dtoa_r+0x5c8>)
 8008930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008934:	2200      	movs	r2, #0
 8008936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893a:	f7f7 fe8d 	bl	8000658 <__aeabi_dmul>
 800893e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008942:	e7c4      	b.n	80088ce <_dtoa_r+0x546>
 8008944:	0800a598 	.word	0x0800a598
 8008948:	0800a570 	.word	0x0800a570
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	40240000 	.word	0x40240000
 8008954:	401c0000 	.word	0x401c0000
 8008958:	40140000 	.word	0x40140000
 800895c:	3fe00000 	.word	0x3fe00000
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	f7f7 fe78 	bl	8000658 <__aeabi_dmul>
 8008968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800896c:	9415      	str	r4, [sp, #84]	@ 0x54
 800896e:	4656      	mov	r6, sl
 8008970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008974:	f7f8 f920 	bl	8000bb8 <__aeabi_d2iz>
 8008978:	4605      	mov	r5, r0
 800897a:	f7f7 fe03 	bl	8000584 <__aeabi_i2d>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008986:	f7f7 fcaf 	bl	80002e8 <__aeabi_dsub>
 800898a:	3530      	adds	r5, #48	@ 0x30
 800898c:	f806 5b01 	strb.w	r5, [r6], #1
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	42a6      	cmp	r6, r4
 8008996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	d124      	bne.n	80089ea <_dtoa_r+0x662>
 80089a0:	4bac      	ldr	r3, [pc, #688]	@ (8008c54 <_dtoa_r+0x8cc>)
 80089a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089a6:	f7f7 fca1 	bl	80002ec <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b2:	f7f8 f8e1 	bl	8000b78 <__aeabi_dcmpgt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d145      	bne.n	8008a46 <_dtoa_r+0x6be>
 80089ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089be:	49a5      	ldr	r1, [pc, #660]	@ (8008c54 <_dtoa_r+0x8cc>)
 80089c0:	2000      	movs	r0, #0
 80089c2:	f7f7 fc91 	bl	80002e8 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ce:	f7f8 f8b5 	bl	8000b3c <__aeabi_dcmplt>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f43f aef5 	beq.w	80087c2 <_dtoa_r+0x43a>
 80089d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80089da:	1e73      	subs	r3, r6, #1
 80089dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80089de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089e2:	2b30      	cmp	r3, #48	@ 0x30
 80089e4:	d0f8      	beq.n	80089d8 <_dtoa_r+0x650>
 80089e6:	9f04      	ldr	r7, [sp, #16]
 80089e8:	e73e      	b.n	8008868 <_dtoa_r+0x4e0>
 80089ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008c58 <_dtoa_r+0x8d0>)
 80089ec:	f7f7 fe34 	bl	8000658 <__aeabi_dmul>
 80089f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f4:	e7bc      	b.n	8008970 <_dtoa_r+0x5e8>
 80089f6:	d10c      	bne.n	8008a12 <_dtoa_r+0x68a>
 80089f8:	4b98      	ldr	r3, [pc, #608]	@ (8008c5c <_dtoa_r+0x8d4>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f7 fe2a 	bl	8000658 <__aeabi_dmul>
 8008a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a08:	f7f8 f8ac 	bl	8000b64 <__aeabi_dcmpge>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f000 8157 	beq.w	8008cc0 <_dtoa_r+0x938>
 8008a12:	2400      	movs	r4, #0
 8008a14:	4625      	mov	r5, r4
 8008a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	4656      	mov	r6, sl
 8008a1e:	2700      	movs	r7, #0
 8008a20:	4621      	mov	r1, r4
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 fafe 	bl	8009024 <_Bfree>
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	d0dc      	beq.n	80089e6 <_dtoa_r+0x65e>
 8008a2c:	b12f      	cbz	r7, 8008a3a <_dtoa_r+0x6b2>
 8008a2e:	42af      	cmp	r7, r5
 8008a30:	d003      	beq.n	8008a3a <_dtoa_r+0x6b2>
 8008a32:	4639      	mov	r1, r7
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 faf5 	bl	8009024 <_Bfree>
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f000 faf1 	bl	8009024 <_Bfree>
 8008a42:	e7d0      	b.n	80089e6 <_dtoa_r+0x65e>
 8008a44:	9704      	str	r7, [sp, #16]
 8008a46:	4633      	mov	r3, r6
 8008a48:	461e      	mov	r6, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a39      	cmp	r2, #57	@ 0x39
 8008a50:	d107      	bne.n	8008a62 <_dtoa_r+0x6da>
 8008a52:	459a      	cmp	sl, r3
 8008a54:	d1f8      	bne.n	8008a48 <_dtoa_r+0x6c0>
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	9204      	str	r2, [sp, #16]
 8008a5c:	2230      	movs	r2, #48	@ 0x30
 8008a5e:	f88a 2000 	strb.w	r2, [sl]
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	3201      	adds	r2, #1
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	e7bd      	b.n	80089e6 <_dtoa_r+0x65e>
 8008a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8008c58 <_dtoa_r+0x8d0>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f7f7 fdf3 	bl	8000658 <__aeabi_dmul>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f7f8 f855 	bl	8000b28 <__aeabi_dcmpeq>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f43f aebb 	beq.w	80087fa <_dtoa_r+0x472>
 8008a84:	e6f0      	b.n	8008868 <_dtoa_r+0x4e0>
 8008a86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	f000 80db 	beq.w	8008c44 <_dtoa_r+0x8bc>
 8008a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a90:	2a01      	cmp	r2, #1
 8008a92:	f300 80bf 	bgt.w	8008c14 <_dtoa_r+0x88c>
 8008a96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	f000 80b7 	beq.w	8008c0c <_dtoa_r+0x884>
 8008a9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008aa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008aa4:	4646      	mov	r6, r8
 8008aa6:	9a08      	ldr	r2, [sp, #32]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	441a      	add	r2, r3
 8008aac:	4658      	mov	r0, fp
 8008aae:	4498      	add	r8, r3
 8008ab0:	9208      	str	r2, [sp, #32]
 8008ab2:	f000 fb6b 	bl	800918c <__i2b>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	b15e      	cbz	r6, 8008ad2 <_dtoa_r+0x74a>
 8008aba:	9b08      	ldr	r3, [sp, #32]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd08      	ble.n	8008ad2 <_dtoa_r+0x74a>
 8008ac0:	42b3      	cmp	r3, r6
 8008ac2:	9a08      	ldr	r2, [sp, #32]
 8008ac4:	bfa8      	it	ge
 8008ac6:	4633      	movge	r3, r6
 8008ac8:	eba8 0803 	sub.w	r8, r8, r3
 8008acc:	1af6      	subs	r6, r6, r3
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad4:	b1f3      	cbz	r3, 8008b14 <_dtoa_r+0x78c>
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80b7 	beq.w	8008c4c <_dtoa_r+0x8c4>
 8008ade:	b18c      	cbz	r4, 8008b04 <_dtoa_r+0x77c>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f000 fc11 	bl	800930c <__pow5mult>
 8008aea:	464a      	mov	r2, r9
 8008aec:	4601      	mov	r1, r0
 8008aee:	4605      	mov	r5, r0
 8008af0:	4658      	mov	r0, fp
 8008af2:	f000 fb61 	bl	80091b8 <__multiply>
 8008af6:	4649      	mov	r1, r9
 8008af8:	9004      	str	r0, [sp, #16]
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fa92 	bl	8009024 <_Bfree>
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	4699      	mov	r9, r3
 8008b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b06:	1b1a      	subs	r2, r3, r4
 8008b08:	d004      	beq.n	8008b14 <_dtoa_r+0x78c>
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fbfd 	bl	800930c <__pow5mult>
 8008b12:	4681      	mov	r9, r0
 8008b14:	2101      	movs	r1, #1
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 fb38 	bl	800918c <__i2b>
 8008b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b1e:	4604      	mov	r4, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81cf 	beq.w	8008ec4 <_dtoa_r+0xb3c>
 8008b26:	461a      	mov	r2, r3
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f000 fbee 	bl	800930c <__pow5mult>
 8008b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	4604      	mov	r4, r0
 8008b36:	f300 8095 	bgt.w	8008c64 <_dtoa_r+0x8dc>
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 8087 	bne.w	8008c50 <_dtoa_r+0x8c8>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 8089 	bne.w	8008c60 <_dtoa_r+0x8d8>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	0d1b      	lsrs	r3, r3, #20
 8008b56:	051b      	lsls	r3, r3, #20
 8008b58:	b12b      	cbz	r3, 8008b66 <_dtoa_r+0x7de>
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	9308      	str	r3, [sp, #32]
 8008b60:	f108 0801 	add.w	r8, r8, #1
 8008b64:	2301      	movs	r3, #1
 8008b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 81b0 	beq.w	8008ed0 <_dtoa_r+0xb48>
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b76:	6918      	ldr	r0, [r3, #16]
 8008b78:	f000 fabc 	bl	80090f4 <__hi0bits>
 8008b7c:	f1c0 0020 	rsb	r0, r0, #32
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	4418      	add	r0, r3
 8008b84:	f010 001f 	ands.w	r0, r0, #31
 8008b88:	d077      	beq.n	8008c7a <_dtoa_r+0x8f2>
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	dd6b      	ble.n	8008c6a <_dtoa_r+0x8e2>
 8008b92:	9b08      	ldr	r3, [sp, #32]
 8008b94:	f1c0 001c 	rsb	r0, r0, #28
 8008b98:	4403      	add	r3, r0
 8008b9a:	4480      	add	r8, r0
 8008b9c:	4406      	add	r6, r0
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	f1b8 0f00 	cmp.w	r8, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x82a>
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4642      	mov	r2, r8
 8008baa:	4658      	mov	r0, fp
 8008bac:	f000 fc08 	bl	80093c0 <__lshift>
 8008bb0:	4681      	mov	r9, r0
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd05      	ble.n	8008bc4 <_dtoa_r+0x83c>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4658      	mov	r0, fp
 8008bbe:	f000 fbff 	bl	80093c0 <__lshift>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d059      	beq.n	8008c7e <_dtoa_r+0x8f6>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4648      	mov	r0, r9
 8008bce:	f000 fc63 	bl	8009498 <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da53      	bge.n	8008c7e <_dtoa_r+0x8f6>
 8008bd6:	1e7b      	subs	r3, r7, #1
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	4649      	mov	r1, r9
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fa41 	bl	8009068 <__multadd>
 8008be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008be8:	4681      	mov	r9, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8172 	beq.w	8008ed4 <_dtoa_r+0xb4c>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f000 fa36 	bl	8009068 <__multadd>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	4605      	mov	r5, r0
 8008c02:	dc67      	bgt.n	8008cd4 <_dtoa_r+0x94c>
 8008c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dc41      	bgt.n	8008c8e <_dtoa_r+0x906>
 8008c0a:	e063      	b.n	8008cd4 <_dtoa_r+0x94c>
 8008c0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c12:	e746      	b.n	8008aa2 <_dtoa_r+0x71a>
 8008c14:	9b07      	ldr	r3, [sp, #28]
 8008c16:	1e5c      	subs	r4, r3, #1
 8008c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	bfbf      	itttt	lt
 8008c1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c24:	1ae3      	sublt	r3, r4, r3
 8008c26:	bfb4      	ite	lt
 8008c28:	18d2      	addlt	r2, r2, r3
 8008c2a:	1b1c      	subge	r4, r3, r4
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	bfbc      	itt	lt
 8008c30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c32:	2400      	movlt	r4, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfb5      	itete	lt
 8008c38:	eba8 0603 	sublt.w	r6, r8, r3
 8008c3c:	9b07      	ldrge	r3, [sp, #28]
 8008c3e:	2300      	movlt	r3, #0
 8008c40:	4646      	movge	r6, r8
 8008c42:	e730      	b.n	8008aa6 <_dtoa_r+0x71e>
 8008c44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c48:	4646      	mov	r6, r8
 8008c4a:	e735      	b.n	8008ab8 <_dtoa_r+0x730>
 8008c4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c4e:	e75c      	b.n	8008b0a <_dtoa_r+0x782>
 8008c50:	2300      	movs	r3, #0
 8008c52:	e788      	b.n	8008b66 <_dtoa_r+0x7de>
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	40140000 	.word	0x40140000
 8008c60:	9b02      	ldr	r3, [sp, #8]
 8008c62:	e780      	b.n	8008b66 <_dtoa_r+0x7de>
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c68:	e782      	b.n	8008b70 <_dtoa_r+0x7e8>
 8008c6a:	d099      	beq.n	8008ba0 <_dtoa_r+0x818>
 8008c6c:	9a08      	ldr	r2, [sp, #32]
 8008c6e:	331c      	adds	r3, #28
 8008c70:	441a      	add	r2, r3
 8008c72:	4498      	add	r8, r3
 8008c74:	441e      	add	r6, r3
 8008c76:	9208      	str	r2, [sp, #32]
 8008c78:	e792      	b.n	8008ba0 <_dtoa_r+0x818>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	e7f6      	b.n	8008c6c <_dtoa_r+0x8e4>
 8008c7e:	9b07      	ldr	r3, [sp, #28]
 8008c80:	9704      	str	r7, [sp, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc20      	bgt.n	8008cc8 <_dtoa_r+0x940>
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	dd1e      	ble.n	8008ccc <_dtoa_r+0x944>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f aec0 	bne.w	8008a16 <_dtoa_r+0x68e>
 8008c96:	4621      	mov	r1, r4
 8008c98:	2205      	movs	r2, #5
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f000 f9e4 	bl	8009068 <__multadd>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f000 fbf7 	bl	8009498 <__mcmp>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f77f aeb3 	ble.w	8008a16 <_dtoa_r+0x68e>
 8008cb0:	4656      	mov	r6, sl
 8008cb2:	2331      	movs	r3, #49	@ 0x31
 8008cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	e6ae      	b.n	8008a1e <_dtoa_r+0x696>
 8008cc0:	9c07      	ldr	r4, [sp, #28]
 8008cc2:	9704      	str	r7, [sp, #16]
 8008cc4:	4625      	mov	r5, r4
 8008cc6:	e7f3      	b.n	8008cb0 <_dtoa_r+0x928>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8104 	beq.w	8008edc <_dtoa_r+0xb54>
 8008cd4:	2e00      	cmp	r6, #0
 8008cd6:	dd05      	ble.n	8008ce4 <_dtoa_r+0x95c>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f000 fb6f 	bl	80093c0 <__lshift>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d05a      	beq.n	8008da0 <_dtoa_r+0xa18>
 8008cea:	6869      	ldr	r1, [r5, #4]
 8008cec:	4658      	mov	r0, fp
 8008cee:	f000 f959 	bl	8008fa4 <_Balloc>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	b928      	cbnz	r0, 8008d02 <_dtoa_r+0x97a>
 8008cf6:	4b84      	ldr	r3, [pc, #528]	@ (8008f08 <_dtoa_r+0xb80>)
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cfe:	f7ff bb5a 	b.w	80083b6 <_dtoa_r+0x2e>
 8008d02:	692a      	ldr	r2, [r5, #16]
 8008d04:	3202      	adds	r2, #2
 8008d06:	0092      	lsls	r2, r2, #2
 8008d08:	f105 010c 	add.w	r1, r5, #12
 8008d0c:	300c      	adds	r0, #12
 8008d0e:	f7ff faa2 	bl	8008256 <memcpy>
 8008d12:	2201      	movs	r2, #1
 8008d14:	4631      	mov	r1, r6
 8008d16:	4658      	mov	r0, fp
 8008d18:	f000 fb52 	bl	80093c0 <__lshift>
 8008d1c:	f10a 0301 	add.w	r3, sl, #1
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	4453      	add	r3, sl
 8008d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	462f      	mov	r7, r5
 8008d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d32:	4605      	mov	r5, r0
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	4621      	mov	r1, r4
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4648      	mov	r0, r9
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	f7ff fa98 	bl	8008272 <quorem>
 8008d42:	4639      	mov	r1, r7
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d4a:	4648      	mov	r0, r9
 8008d4c:	f000 fba4 	bl	8009498 <__mcmp>
 8008d50:	462a      	mov	r2, r5
 8008d52:	9008      	str	r0, [sp, #32]
 8008d54:	4621      	mov	r1, r4
 8008d56:	4658      	mov	r0, fp
 8008d58:	f000 fbba 	bl	80094d0 <__mdiff>
 8008d5c:	68c2      	ldr	r2, [r0, #12]
 8008d5e:	4606      	mov	r6, r0
 8008d60:	bb02      	cbnz	r2, 8008da4 <_dtoa_r+0xa1c>
 8008d62:	4601      	mov	r1, r0
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fb97 	bl	8009498 <__mcmp>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4658      	mov	r0, fp
 8008d70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d72:	f000 f957 	bl	8009024 <_Bfree>
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d7a:	9e07      	ldr	r6, [sp, #28]
 8008d7c:	ea43 0102 	orr.w	r1, r3, r2
 8008d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d82:	4319      	orrs	r1, r3
 8008d84:	d110      	bne.n	8008da8 <_dtoa_r+0xa20>
 8008d86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d8a:	d029      	beq.n	8008de0 <_dtoa_r+0xa58>
 8008d8c:	9b08      	ldr	r3, [sp, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dd02      	ble.n	8008d98 <_dtoa_r+0xa10>
 8008d92:	9b02      	ldr	r3, [sp, #8]
 8008d94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d98:	9b00      	ldr	r3, [sp, #0]
 8008d9a:	f883 8000 	strb.w	r8, [r3]
 8008d9e:	e63f      	b.n	8008a20 <_dtoa_r+0x698>
 8008da0:	4628      	mov	r0, r5
 8008da2:	e7bb      	b.n	8008d1c <_dtoa_r+0x994>
 8008da4:	2201      	movs	r2, #1
 8008da6:	e7e1      	b.n	8008d6c <_dtoa_r+0x9e4>
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db04      	blt.n	8008db8 <_dtoa_r+0xa30>
 8008dae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008db0:	430b      	orrs	r3, r1
 8008db2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008db4:	430b      	orrs	r3, r1
 8008db6:	d120      	bne.n	8008dfa <_dtoa_r+0xa72>
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	dded      	ble.n	8008d98 <_dtoa_r+0xa10>
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4658      	mov	r0, fp
 8008dc2:	f000 fafd 	bl	80093c0 <__lshift>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4681      	mov	r9, r0
 8008dca:	f000 fb65 	bl	8009498 <__mcmp>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	dc03      	bgt.n	8008dda <_dtoa_r+0xa52>
 8008dd2:	d1e1      	bne.n	8008d98 <_dtoa_r+0xa10>
 8008dd4:	f018 0f01 	tst.w	r8, #1
 8008dd8:	d0de      	beq.n	8008d98 <_dtoa_r+0xa10>
 8008dda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dde:	d1d8      	bne.n	8008d92 <_dtoa_r+0xa0a>
 8008de0:	9a00      	ldr	r2, [sp, #0]
 8008de2:	2339      	movs	r3, #57	@ 0x39
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	4633      	mov	r3, r6
 8008de8:	461e      	mov	r6, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008df0:	2a39      	cmp	r2, #57	@ 0x39
 8008df2:	d052      	beq.n	8008e9a <_dtoa_r+0xb12>
 8008df4:	3201      	adds	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e612      	b.n	8008a20 <_dtoa_r+0x698>
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	dd07      	ble.n	8008e0e <_dtoa_r+0xa86>
 8008dfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e02:	d0ed      	beq.n	8008de0 <_dtoa_r+0xa58>
 8008e04:	9a00      	ldr	r2, [sp, #0]
 8008e06:	f108 0301 	add.w	r3, r8, #1
 8008e0a:	7013      	strb	r3, [r2, #0]
 8008e0c:	e608      	b.n	8008a20 <_dtoa_r+0x698>
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d028      	beq.n	8008e6e <_dtoa_r+0xae6>
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4658      	mov	r0, fp
 8008e24:	f000 f920 	bl	8009068 <__multadd>
 8008e28:	42af      	cmp	r7, r5
 8008e2a:	4681      	mov	r9, r0
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	f04f 020a 	mov.w	r2, #10
 8008e34:	4639      	mov	r1, r7
 8008e36:	4658      	mov	r0, fp
 8008e38:	d107      	bne.n	8008e4a <_dtoa_r+0xac2>
 8008e3a:	f000 f915 	bl	8009068 <__multadd>
 8008e3e:	4607      	mov	r7, r0
 8008e40:	4605      	mov	r5, r0
 8008e42:	9b07      	ldr	r3, [sp, #28]
 8008e44:	3301      	adds	r3, #1
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	e774      	b.n	8008d34 <_dtoa_r+0x9ac>
 8008e4a:	f000 f90d 	bl	8009068 <__multadd>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4607      	mov	r7, r0
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	4658      	mov	r0, fp
 8008e58:	f000 f906 	bl	8009068 <__multadd>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	e7f0      	b.n	8008e42 <_dtoa_r+0xaba>
 8008e60:	9b00      	ldr	r3, [sp, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bfcc      	ite	gt
 8008e66:	461e      	movgt	r6, r3
 8008e68:	2601      	movle	r6, #1
 8008e6a:	4456      	add	r6, sl
 8008e6c:	2700      	movs	r7, #0
 8008e6e:	4649      	mov	r1, r9
 8008e70:	2201      	movs	r2, #1
 8008e72:	4658      	mov	r0, fp
 8008e74:	f000 faa4 	bl	80093c0 <__lshift>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4681      	mov	r9, r0
 8008e7c:	f000 fb0c 	bl	8009498 <__mcmp>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	dcb0      	bgt.n	8008de6 <_dtoa_r+0xa5e>
 8008e84:	d102      	bne.n	8008e8c <_dtoa_r+0xb04>
 8008e86:	f018 0f01 	tst.w	r8, #1
 8008e8a:	d1ac      	bne.n	8008de6 <_dtoa_r+0xa5e>
 8008e8c:	4633      	mov	r3, r6
 8008e8e:	461e      	mov	r6, r3
 8008e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e94:	2a30      	cmp	r2, #48	@ 0x30
 8008e96:	d0fa      	beq.n	8008e8e <_dtoa_r+0xb06>
 8008e98:	e5c2      	b.n	8008a20 <_dtoa_r+0x698>
 8008e9a:	459a      	cmp	sl, r3
 8008e9c:	d1a4      	bne.n	8008de8 <_dtoa_r+0xa60>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	2331      	movs	r3, #49	@ 0x31
 8008ea6:	f88a 3000 	strb.w	r3, [sl]
 8008eaa:	e5b9      	b.n	8008a20 <_dtoa_r+0x698>
 8008eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f0c <_dtoa_r+0xb84>
 8008eb2:	b11b      	cbz	r3, 8008ebc <_dtoa_r+0xb34>
 8008eb4:	f10a 0308 	add.w	r3, sl, #8
 8008eb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	b019      	add	sp, #100	@ 0x64
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	f77f ae37 	ble.w	8008b3a <_dtoa_r+0x7b2>
 8008ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e655      	b.n	8008b80 <_dtoa_r+0x7f8>
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f77f aed6 	ble.w	8008c88 <_dtoa_r+0x900>
 8008edc:	4656      	mov	r6, sl
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4648      	mov	r0, r9
 8008ee2:	f7ff f9c6 	bl	8008272 <quorem>
 8008ee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008eea:	f806 8b01 	strb.w	r8, [r6], #1
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	eba6 020a 	sub.w	r2, r6, sl
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	ddb3      	ble.n	8008e60 <_dtoa_r+0xad8>
 8008ef8:	4649      	mov	r1, r9
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4658      	mov	r0, fp
 8008f00:	f000 f8b2 	bl	8009068 <__multadd>
 8008f04:	4681      	mov	r9, r0
 8008f06:	e7ea      	b.n	8008ede <_dtoa_r+0xb56>
 8008f08:	0800a4f9 	.word	0x0800a4f9
 8008f0c:	0800a47d 	.word	0x0800a47d

08008f10 <_free_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4605      	mov	r5, r0
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d041      	beq.n	8008f9c <_free_r+0x8c>
 8008f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1c:	1f0c      	subs	r4, r1, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bfb8      	it	lt
 8008f22:	18e4      	addlt	r4, r4, r3
 8008f24:	f7fe fad0 	bl	80074c8 <__malloc_lock>
 8008f28:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa0 <_free_r+0x90>)
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x2c>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	4628      	mov	r0, r5
 8008f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f38:	f7fe bacc 	b.w	80074d4 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x42>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	1821      	adds	r1, r4, r0
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x1e>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x4c>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x42>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1850      	adds	r0, r2, r1
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x6c>
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	4401      	add	r1, r0
 8008f68:	1850      	adds	r0, r2, r1
 8008f6a:	4283      	cmp	r3, r0
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x22>
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4408      	add	r0, r1
 8008f78:	6010      	str	r0, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x22>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x74>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x22>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	1821      	adds	r1, r4, r0
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1809      	addeq	r1, r1, r0
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x22>
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	2001e5d4 	.word	0x2001e5d4

08008fa4 <_Balloc>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	69c6      	ldr	r6, [r0, #28]
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	b976      	cbnz	r6, 8008fcc <_Balloc+0x28>
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7fe f9d8 	bl	8007364 <malloc>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	61e0      	str	r0, [r4, #28]
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_Balloc+0x20>
 8008fba:	4b18      	ldr	r3, [pc, #96]	@ (800901c <_Balloc+0x78>)
 8008fbc:	4818      	ldr	r0, [pc, #96]	@ (8009020 <_Balloc+0x7c>)
 8008fbe:	216b      	movs	r1, #107	@ 0x6b
 8008fc0:	f000 fd90 	bl	8009ae4 <__assert_func>
 8008fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc8:	6006      	str	r6, [r0, #0]
 8008fca:	60c6      	str	r6, [r0, #12]
 8008fcc:	69e6      	ldr	r6, [r4, #28]
 8008fce:	68f3      	ldr	r3, [r6, #12]
 8008fd0:	b183      	cbz	r3, 8008ff4 <_Balloc+0x50>
 8008fd2:	69e3      	ldr	r3, [r4, #28]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fda:	b9b8      	cbnz	r0, 800900c <_Balloc+0x68>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe2:	1d72      	adds	r2, r6, #5
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fd9a 	bl	8009b20 <_calloc_r>
 8008fec:	b160      	cbz	r0, 8009008 <_Balloc+0x64>
 8008fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff2:	e00e      	b.n	8009012 <_Balloc+0x6e>
 8008ff4:	2221      	movs	r2, #33	@ 0x21
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 fd91 	bl	8009b20 <_calloc_r>
 8008ffe:	69e3      	ldr	r3, [r4, #28]
 8009000:	60f0      	str	r0, [r6, #12]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e4      	bne.n	8008fd2 <_Balloc+0x2e>
 8009008:	2000      	movs	r0, #0
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009012:	2300      	movs	r3, #0
 8009014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009018:	e7f7      	b.n	800900a <_Balloc+0x66>
 800901a:	bf00      	nop
 800901c:	0800a48a 	.word	0x0800a48a
 8009020:	0800a50a 	.word	0x0800a50a

08009024 <_Bfree>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	69c6      	ldr	r6, [r0, #28]
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b976      	cbnz	r6, 800904c <_Bfree+0x28>
 800902e:	2010      	movs	r0, #16
 8009030:	f7fe f998 	bl	8007364 <malloc>
 8009034:	4602      	mov	r2, r0
 8009036:	61e8      	str	r0, [r5, #28]
 8009038:	b920      	cbnz	r0, 8009044 <_Bfree+0x20>
 800903a:	4b09      	ldr	r3, [pc, #36]	@ (8009060 <_Bfree+0x3c>)
 800903c:	4809      	ldr	r0, [pc, #36]	@ (8009064 <_Bfree+0x40>)
 800903e:	218f      	movs	r1, #143	@ 0x8f
 8009040:	f000 fd50 	bl	8009ae4 <__assert_func>
 8009044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009048:	6006      	str	r6, [r0, #0]
 800904a:	60c6      	str	r6, [r0, #12]
 800904c:	b13c      	cbz	r4, 800905e <_Bfree+0x3a>
 800904e:	69eb      	ldr	r3, [r5, #28]
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009058:	6021      	str	r1, [r4, #0]
 800905a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	0800a48a 	.word	0x0800a48a
 8009064:	0800a50a 	.word	0x0800a50a

08009068 <__multadd>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	690d      	ldr	r5, [r1, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	460c      	mov	r4, r1
 8009072:	461e      	mov	r6, r3
 8009074:	f101 0c14 	add.w	ip, r1, #20
 8009078:	2000      	movs	r0, #0
 800907a:	f8dc 3000 	ldr.w	r3, [ip]
 800907e:	b299      	uxth	r1, r3
 8009080:	fb02 6101 	mla	r1, r2, r1, r6
 8009084:	0c1e      	lsrs	r6, r3, #16
 8009086:	0c0b      	lsrs	r3, r1, #16
 8009088:	fb02 3306 	mla	r3, r2, r6, r3
 800908c:	b289      	uxth	r1, r1
 800908e:	3001      	adds	r0, #1
 8009090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009094:	4285      	cmp	r5, r0
 8009096:	f84c 1b04 	str.w	r1, [ip], #4
 800909a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800909e:	dcec      	bgt.n	800907a <__multadd+0x12>
 80090a0:	b30e      	cbz	r6, 80090e6 <__multadd+0x7e>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dc19      	bgt.n	80090dc <__multadd+0x74>
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	4638      	mov	r0, r7
 80090ac:	3101      	adds	r1, #1
 80090ae:	f7ff ff79 	bl	8008fa4 <_Balloc>
 80090b2:	4680      	mov	r8, r0
 80090b4:	b928      	cbnz	r0, 80090c2 <__multadd+0x5a>
 80090b6:	4602      	mov	r2, r0
 80090b8:	4b0c      	ldr	r3, [pc, #48]	@ (80090ec <__multadd+0x84>)
 80090ba:	480d      	ldr	r0, [pc, #52]	@ (80090f0 <__multadd+0x88>)
 80090bc:	21ba      	movs	r1, #186	@ 0xba
 80090be:	f000 fd11 	bl	8009ae4 <__assert_func>
 80090c2:	6922      	ldr	r2, [r4, #16]
 80090c4:	3202      	adds	r2, #2
 80090c6:	f104 010c 	add.w	r1, r4, #12
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	300c      	adds	r0, #12
 80090ce:	f7ff f8c2 	bl	8008256 <memcpy>
 80090d2:	4621      	mov	r1, r4
 80090d4:	4638      	mov	r0, r7
 80090d6:	f7ff ffa5 	bl	8009024 <_Bfree>
 80090da:	4644      	mov	r4, r8
 80090dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090e0:	3501      	adds	r5, #1
 80090e2:	615e      	str	r6, [r3, #20]
 80090e4:	6125      	str	r5, [r4, #16]
 80090e6:	4620      	mov	r0, r4
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	0800a4f9 	.word	0x0800a4f9
 80090f0:	0800a50a 	.word	0x0800a50a

080090f4 <__hi0bits>:
 80090f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090f8:	4603      	mov	r3, r0
 80090fa:	bf36      	itet	cc
 80090fc:	0403      	lslcc	r3, r0, #16
 80090fe:	2000      	movcs	r0, #0
 8009100:	2010      	movcc	r0, #16
 8009102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009106:	bf3c      	itt	cc
 8009108:	021b      	lslcc	r3, r3, #8
 800910a:	3008      	addcc	r0, #8
 800910c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009110:	bf3c      	itt	cc
 8009112:	011b      	lslcc	r3, r3, #4
 8009114:	3004      	addcc	r0, #4
 8009116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800911a:	bf3c      	itt	cc
 800911c:	009b      	lslcc	r3, r3, #2
 800911e:	3002      	addcc	r0, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	db05      	blt.n	8009130 <__hi0bits+0x3c>
 8009124:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009128:	f100 0001 	add.w	r0, r0, #1
 800912c:	bf08      	it	eq
 800912e:	2020      	moveq	r0, #32
 8009130:	4770      	bx	lr

08009132 <__lo0bits>:
 8009132:	6803      	ldr	r3, [r0, #0]
 8009134:	4602      	mov	r2, r0
 8009136:	f013 0007 	ands.w	r0, r3, #7
 800913a:	d00b      	beq.n	8009154 <__lo0bits+0x22>
 800913c:	07d9      	lsls	r1, r3, #31
 800913e:	d421      	bmi.n	8009184 <__lo0bits+0x52>
 8009140:	0798      	lsls	r0, r3, #30
 8009142:	bf49      	itett	mi
 8009144:	085b      	lsrmi	r3, r3, #1
 8009146:	089b      	lsrpl	r3, r3, #2
 8009148:	2001      	movmi	r0, #1
 800914a:	6013      	strmi	r3, [r2, #0]
 800914c:	bf5c      	itt	pl
 800914e:	6013      	strpl	r3, [r2, #0]
 8009150:	2002      	movpl	r0, #2
 8009152:	4770      	bx	lr
 8009154:	b299      	uxth	r1, r3
 8009156:	b909      	cbnz	r1, 800915c <__lo0bits+0x2a>
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	2010      	movs	r0, #16
 800915c:	b2d9      	uxtb	r1, r3
 800915e:	b909      	cbnz	r1, 8009164 <__lo0bits+0x32>
 8009160:	3008      	adds	r0, #8
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	0719      	lsls	r1, r3, #28
 8009166:	bf04      	itt	eq
 8009168:	091b      	lsreq	r3, r3, #4
 800916a:	3004      	addeq	r0, #4
 800916c:	0799      	lsls	r1, r3, #30
 800916e:	bf04      	itt	eq
 8009170:	089b      	lsreq	r3, r3, #2
 8009172:	3002      	addeq	r0, #2
 8009174:	07d9      	lsls	r1, r3, #31
 8009176:	d403      	bmi.n	8009180 <__lo0bits+0x4e>
 8009178:	085b      	lsrs	r3, r3, #1
 800917a:	f100 0001 	add.w	r0, r0, #1
 800917e:	d003      	beq.n	8009188 <__lo0bits+0x56>
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	4770      	bx	lr
 8009184:	2000      	movs	r0, #0
 8009186:	4770      	bx	lr
 8009188:	2020      	movs	r0, #32
 800918a:	4770      	bx	lr

0800918c <__i2b>:
 800918c:	b510      	push	{r4, lr}
 800918e:	460c      	mov	r4, r1
 8009190:	2101      	movs	r1, #1
 8009192:	f7ff ff07 	bl	8008fa4 <_Balloc>
 8009196:	4602      	mov	r2, r0
 8009198:	b928      	cbnz	r0, 80091a6 <__i2b+0x1a>
 800919a:	4b05      	ldr	r3, [pc, #20]	@ (80091b0 <__i2b+0x24>)
 800919c:	4805      	ldr	r0, [pc, #20]	@ (80091b4 <__i2b+0x28>)
 800919e:	f240 1145 	movw	r1, #325	@ 0x145
 80091a2:	f000 fc9f 	bl	8009ae4 <__assert_func>
 80091a6:	2301      	movs	r3, #1
 80091a8:	6144      	str	r4, [r0, #20]
 80091aa:	6103      	str	r3, [r0, #16]
 80091ac:	bd10      	pop	{r4, pc}
 80091ae:	bf00      	nop
 80091b0:	0800a4f9 	.word	0x0800a4f9
 80091b4:	0800a50a 	.word	0x0800a50a

080091b8 <__multiply>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	4614      	mov	r4, r2
 80091be:	690a      	ldr	r2, [r1, #16]
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	bfa8      	it	ge
 80091c6:	4623      	movge	r3, r4
 80091c8:	460f      	mov	r7, r1
 80091ca:	bfa4      	itt	ge
 80091cc:	460c      	movge	r4, r1
 80091ce:	461f      	movge	r7, r3
 80091d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091d8:	68a3      	ldr	r3, [r4, #8]
 80091da:	6861      	ldr	r1, [r4, #4]
 80091dc:	eb0a 0609 	add.w	r6, sl, r9
 80091e0:	42b3      	cmp	r3, r6
 80091e2:	b085      	sub	sp, #20
 80091e4:	bfb8      	it	lt
 80091e6:	3101      	addlt	r1, #1
 80091e8:	f7ff fedc 	bl	8008fa4 <_Balloc>
 80091ec:	b930      	cbnz	r0, 80091fc <__multiply+0x44>
 80091ee:	4602      	mov	r2, r0
 80091f0:	4b44      	ldr	r3, [pc, #272]	@ (8009304 <__multiply+0x14c>)
 80091f2:	4845      	ldr	r0, [pc, #276]	@ (8009308 <__multiply+0x150>)
 80091f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091f8:	f000 fc74 	bl	8009ae4 <__assert_func>
 80091fc:	f100 0514 	add.w	r5, r0, #20
 8009200:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009204:	462b      	mov	r3, r5
 8009206:	2200      	movs	r2, #0
 8009208:	4543      	cmp	r3, r8
 800920a:	d321      	bcc.n	8009250 <__multiply+0x98>
 800920c:	f107 0114 	add.w	r1, r7, #20
 8009210:	f104 0214 	add.w	r2, r4, #20
 8009214:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009218:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	1b13      	subs	r3, r2, r4
 8009220:	3b15      	subs	r3, #21
 8009222:	f023 0303 	bic.w	r3, r3, #3
 8009226:	3304      	adds	r3, #4
 8009228:	f104 0715 	add.w	r7, r4, #21
 800922c:	42ba      	cmp	r2, r7
 800922e:	bf38      	it	cc
 8009230:	2304      	movcc	r3, #4
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	9103      	str	r1, [sp, #12]
 8009238:	428b      	cmp	r3, r1
 800923a:	d80c      	bhi.n	8009256 <__multiply+0x9e>
 800923c:	2e00      	cmp	r6, #0
 800923e:	dd03      	ble.n	8009248 <__multiply+0x90>
 8009240:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009244:	2b00      	cmp	r3, #0
 8009246:	d05b      	beq.n	8009300 <__multiply+0x148>
 8009248:	6106      	str	r6, [r0, #16]
 800924a:	b005      	add	sp, #20
 800924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	f843 2b04 	str.w	r2, [r3], #4
 8009254:	e7d8      	b.n	8009208 <__multiply+0x50>
 8009256:	f8b1 a000 	ldrh.w	sl, [r1]
 800925a:	f1ba 0f00 	cmp.w	sl, #0
 800925e:	d024      	beq.n	80092aa <__multiply+0xf2>
 8009260:	f104 0e14 	add.w	lr, r4, #20
 8009264:	46a9      	mov	r9, r5
 8009266:	f04f 0c00 	mov.w	ip, #0
 800926a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800926e:	f8d9 3000 	ldr.w	r3, [r9]
 8009272:	fa1f fb87 	uxth.w	fp, r7
 8009276:	b29b      	uxth	r3, r3
 8009278:	fb0a 330b 	mla	r3, sl, fp, r3
 800927c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009280:	f8d9 7000 	ldr.w	r7, [r9]
 8009284:	4463      	add	r3, ip
 8009286:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800928a:	fb0a c70b 	mla	r7, sl, fp, ip
 800928e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009292:	b29b      	uxth	r3, r3
 8009294:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009298:	4572      	cmp	r2, lr
 800929a:	f849 3b04 	str.w	r3, [r9], #4
 800929e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092a2:	d8e2      	bhi.n	800926a <__multiply+0xb2>
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	f845 c003 	str.w	ip, [r5, r3]
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092b0:	3104      	adds	r1, #4
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	d021      	beq.n	80092fc <__multiply+0x144>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	f104 0c14 	add.w	ip, r4, #20
 80092be:	46ae      	mov	lr, r5
 80092c0:	f04f 0a00 	mov.w	sl, #0
 80092c4:	f8bc b000 	ldrh.w	fp, [ip]
 80092c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092cc:	fb09 770b 	mla	r7, r9, fp, r7
 80092d0:	4457      	add	r7, sl
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092d8:	f84e 3b04 	str.w	r3, [lr], #4
 80092dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092e4:	f8be 3000 	ldrh.w	r3, [lr]
 80092e8:	fb09 330a 	mla	r3, r9, sl, r3
 80092ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092f0:	4562      	cmp	r2, ip
 80092f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092f6:	d8e5      	bhi.n	80092c4 <__multiply+0x10c>
 80092f8:	9f01      	ldr	r7, [sp, #4]
 80092fa:	51eb      	str	r3, [r5, r7]
 80092fc:	3504      	adds	r5, #4
 80092fe:	e799      	b.n	8009234 <__multiply+0x7c>
 8009300:	3e01      	subs	r6, #1
 8009302:	e79b      	b.n	800923c <__multiply+0x84>
 8009304:	0800a4f9 	.word	0x0800a4f9
 8009308:	0800a50a 	.word	0x0800a50a

0800930c <__pow5mult>:
 800930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	4615      	mov	r5, r2
 8009312:	f012 0203 	ands.w	r2, r2, #3
 8009316:	4607      	mov	r7, r0
 8009318:	460e      	mov	r6, r1
 800931a:	d007      	beq.n	800932c <__pow5mult+0x20>
 800931c:	4c25      	ldr	r4, [pc, #148]	@ (80093b4 <__pow5mult+0xa8>)
 800931e:	3a01      	subs	r2, #1
 8009320:	2300      	movs	r3, #0
 8009322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009326:	f7ff fe9f 	bl	8009068 <__multadd>
 800932a:	4606      	mov	r6, r0
 800932c:	10ad      	asrs	r5, r5, #2
 800932e:	d03d      	beq.n	80093ac <__pow5mult+0xa0>
 8009330:	69fc      	ldr	r4, [r7, #28]
 8009332:	b97c      	cbnz	r4, 8009354 <__pow5mult+0x48>
 8009334:	2010      	movs	r0, #16
 8009336:	f7fe f815 	bl	8007364 <malloc>
 800933a:	4602      	mov	r2, r0
 800933c:	61f8      	str	r0, [r7, #28]
 800933e:	b928      	cbnz	r0, 800934c <__pow5mult+0x40>
 8009340:	4b1d      	ldr	r3, [pc, #116]	@ (80093b8 <__pow5mult+0xac>)
 8009342:	481e      	ldr	r0, [pc, #120]	@ (80093bc <__pow5mult+0xb0>)
 8009344:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009348:	f000 fbcc 	bl	8009ae4 <__assert_func>
 800934c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009350:	6004      	str	r4, [r0, #0]
 8009352:	60c4      	str	r4, [r0, #12]
 8009354:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800935c:	b94c      	cbnz	r4, 8009372 <__pow5mult+0x66>
 800935e:	f240 2171 	movw	r1, #625	@ 0x271
 8009362:	4638      	mov	r0, r7
 8009364:	f7ff ff12 	bl	800918c <__i2b>
 8009368:	2300      	movs	r3, #0
 800936a:	f8c8 0008 	str.w	r0, [r8, #8]
 800936e:	4604      	mov	r4, r0
 8009370:	6003      	str	r3, [r0, #0]
 8009372:	f04f 0900 	mov.w	r9, #0
 8009376:	07eb      	lsls	r3, r5, #31
 8009378:	d50a      	bpl.n	8009390 <__pow5mult+0x84>
 800937a:	4631      	mov	r1, r6
 800937c:	4622      	mov	r2, r4
 800937e:	4638      	mov	r0, r7
 8009380:	f7ff ff1a 	bl	80091b8 <__multiply>
 8009384:	4631      	mov	r1, r6
 8009386:	4680      	mov	r8, r0
 8009388:	4638      	mov	r0, r7
 800938a:	f7ff fe4b 	bl	8009024 <_Bfree>
 800938e:	4646      	mov	r6, r8
 8009390:	106d      	asrs	r5, r5, #1
 8009392:	d00b      	beq.n	80093ac <__pow5mult+0xa0>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	b938      	cbnz	r0, 80093a8 <__pow5mult+0x9c>
 8009398:	4622      	mov	r2, r4
 800939a:	4621      	mov	r1, r4
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff ff0b 	bl	80091b8 <__multiply>
 80093a2:	6020      	str	r0, [r4, #0]
 80093a4:	f8c0 9000 	str.w	r9, [r0]
 80093a8:	4604      	mov	r4, r0
 80093aa:	e7e4      	b.n	8009376 <__pow5mult+0x6a>
 80093ac:	4630      	mov	r0, r6
 80093ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b2:	bf00      	nop
 80093b4:	0800a564 	.word	0x0800a564
 80093b8:	0800a48a 	.word	0x0800a48a
 80093bc:	0800a50a 	.word	0x0800a50a

080093c0 <__lshift>:
 80093c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	6849      	ldr	r1, [r1, #4]
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	4607      	mov	r7, r0
 80093d2:	4691      	mov	r9, r2
 80093d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093d8:	f108 0601 	add.w	r6, r8, #1
 80093dc:	42b3      	cmp	r3, r6
 80093de:	db0b      	blt.n	80093f8 <__lshift+0x38>
 80093e0:	4638      	mov	r0, r7
 80093e2:	f7ff fddf 	bl	8008fa4 <_Balloc>
 80093e6:	4605      	mov	r5, r0
 80093e8:	b948      	cbnz	r0, 80093fe <__lshift+0x3e>
 80093ea:	4602      	mov	r2, r0
 80093ec:	4b28      	ldr	r3, [pc, #160]	@ (8009490 <__lshift+0xd0>)
 80093ee:	4829      	ldr	r0, [pc, #164]	@ (8009494 <__lshift+0xd4>)
 80093f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093f4:	f000 fb76 	bl	8009ae4 <__assert_func>
 80093f8:	3101      	adds	r1, #1
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	e7ee      	b.n	80093dc <__lshift+0x1c>
 80093fe:	2300      	movs	r3, #0
 8009400:	f100 0114 	add.w	r1, r0, #20
 8009404:	f100 0210 	add.w	r2, r0, #16
 8009408:	4618      	mov	r0, r3
 800940a:	4553      	cmp	r3, sl
 800940c:	db33      	blt.n	8009476 <__lshift+0xb6>
 800940e:	6920      	ldr	r0, [r4, #16]
 8009410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009414:	f104 0314 	add.w	r3, r4, #20
 8009418:	f019 091f 	ands.w	r9, r9, #31
 800941c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009420:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009424:	d02b      	beq.n	800947e <__lshift+0xbe>
 8009426:	f1c9 0e20 	rsb	lr, r9, #32
 800942a:	468a      	mov	sl, r1
 800942c:	2200      	movs	r2, #0
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	fa00 f009 	lsl.w	r0, r0, r9
 8009434:	4310      	orrs	r0, r2
 8009436:	f84a 0b04 	str.w	r0, [sl], #4
 800943a:	f853 2b04 	ldr.w	r2, [r3], #4
 800943e:	459c      	cmp	ip, r3
 8009440:	fa22 f20e 	lsr.w	r2, r2, lr
 8009444:	d8f3      	bhi.n	800942e <__lshift+0x6e>
 8009446:	ebac 0304 	sub.w	r3, ip, r4
 800944a:	3b15      	subs	r3, #21
 800944c:	f023 0303 	bic.w	r3, r3, #3
 8009450:	3304      	adds	r3, #4
 8009452:	f104 0015 	add.w	r0, r4, #21
 8009456:	4584      	cmp	ip, r0
 8009458:	bf38      	it	cc
 800945a:	2304      	movcc	r3, #4
 800945c:	50ca      	str	r2, [r1, r3]
 800945e:	b10a      	cbz	r2, 8009464 <__lshift+0xa4>
 8009460:	f108 0602 	add.w	r6, r8, #2
 8009464:	3e01      	subs	r6, #1
 8009466:	4638      	mov	r0, r7
 8009468:	612e      	str	r6, [r5, #16]
 800946a:	4621      	mov	r1, r4
 800946c:	f7ff fdda 	bl	8009024 <_Bfree>
 8009470:	4628      	mov	r0, r5
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	f842 0f04 	str.w	r0, [r2, #4]!
 800947a:	3301      	adds	r3, #1
 800947c:	e7c5      	b.n	800940a <__lshift+0x4a>
 800947e:	3904      	subs	r1, #4
 8009480:	f853 2b04 	ldr.w	r2, [r3], #4
 8009484:	f841 2f04 	str.w	r2, [r1, #4]!
 8009488:	459c      	cmp	ip, r3
 800948a:	d8f9      	bhi.n	8009480 <__lshift+0xc0>
 800948c:	e7ea      	b.n	8009464 <__lshift+0xa4>
 800948e:	bf00      	nop
 8009490:	0800a4f9 	.word	0x0800a4f9
 8009494:	0800a50a 	.word	0x0800a50a

08009498 <__mcmp>:
 8009498:	690a      	ldr	r2, [r1, #16]
 800949a:	4603      	mov	r3, r0
 800949c:	6900      	ldr	r0, [r0, #16]
 800949e:	1a80      	subs	r0, r0, r2
 80094a0:	b530      	push	{r4, r5, lr}
 80094a2:	d10e      	bne.n	80094c2 <__mcmp+0x2a>
 80094a4:	3314      	adds	r3, #20
 80094a6:	3114      	adds	r1, #20
 80094a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094b8:	4295      	cmp	r5, r2
 80094ba:	d003      	beq.n	80094c4 <__mcmp+0x2c>
 80094bc:	d205      	bcs.n	80094ca <__mcmp+0x32>
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	bd30      	pop	{r4, r5, pc}
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d3f3      	bcc.n	80094b0 <__mcmp+0x18>
 80094c8:	e7fb      	b.n	80094c2 <__mcmp+0x2a>
 80094ca:	2001      	movs	r0, #1
 80094cc:	e7f9      	b.n	80094c2 <__mcmp+0x2a>
	...

080094d0 <__mdiff>:
 80094d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	4689      	mov	r9, r1
 80094d6:	4606      	mov	r6, r0
 80094d8:	4611      	mov	r1, r2
 80094da:	4648      	mov	r0, r9
 80094dc:	4614      	mov	r4, r2
 80094de:	f7ff ffdb 	bl	8009498 <__mcmp>
 80094e2:	1e05      	subs	r5, r0, #0
 80094e4:	d112      	bne.n	800950c <__mdiff+0x3c>
 80094e6:	4629      	mov	r1, r5
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff fd5b 	bl	8008fa4 <_Balloc>
 80094ee:	4602      	mov	r2, r0
 80094f0:	b928      	cbnz	r0, 80094fe <__mdiff+0x2e>
 80094f2:	4b3f      	ldr	r3, [pc, #252]	@ (80095f0 <__mdiff+0x120>)
 80094f4:	f240 2137 	movw	r1, #567	@ 0x237
 80094f8:	483e      	ldr	r0, [pc, #248]	@ (80095f4 <__mdiff+0x124>)
 80094fa:	f000 faf3 	bl	8009ae4 <__assert_func>
 80094fe:	2301      	movs	r3, #1
 8009500:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009504:	4610      	mov	r0, r2
 8009506:	b003      	add	sp, #12
 8009508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950c:	bfbc      	itt	lt
 800950e:	464b      	movlt	r3, r9
 8009510:	46a1      	movlt	r9, r4
 8009512:	4630      	mov	r0, r6
 8009514:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009518:	bfba      	itte	lt
 800951a:	461c      	movlt	r4, r3
 800951c:	2501      	movlt	r5, #1
 800951e:	2500      	movge	r5, #0
 8009520:	f7ff fd40 	bl	8008fa4 <_Balloc>
 8009524:	4602      	mov	r2, r0
 8009526:	b918      	cbnz	r0, 8009530 <__mdiff+0x60>
 8009528:	4b31      	ldr	r3, [pc, #196]	@ (80095f0 <__mdiff+0x120>)
 800952a:	f240 2145 	movw	r1, #581	@ 0x245
 800952e:	e7e3      	b.n	80094f8 <__mdiff+0x28>
 8009530:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009534:	6926      	ldr	r6, [r4, #16]
 8009536:	60c5      	str	r5, [r0, #12]
 8009538:	f109 0310 	add.w	r3, r9, #16
 800953c:	f109 0514 	add.w	r5, r9, #20
 8009540:	f104 0e14 	add.w	lr, r4, #20
 8009544:	f100 0b14 	add.w	fp, r0, #20
 8009548:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800954c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	46d9      	mov	r9, fp
 8009554:	f04f 0c00 	mov.w	ip, #0
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800955e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	fa1f f38a 	uxth.w	r3, sl
 8009568:	4619      	mov	r1, r3
 800956a:	b283      	uxth	r3, r0
 800956c:	1acb      	subs	r3, r1, r3
 800956e:	0c00      	lsrs	r0, r0, #16
 8009570:	4463      	add	r3, ip
 8009572:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009576:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009580:	4576      	cmp	r6, lr
 8009582:	f849 3b04 	str.w	r3, [r9], #4
 8009586:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800958a:	d8e5      	bhi.n	8009558 <__mdiff+0x88>
 800958c:	1b33      	subs	r3, r6, r4
 800958e:	3b15      	subs	r3, #21
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	3415      	adds	r4, #21
 8009596:	3304      	adds	r3, #4
 8009598:	42a6      	cmp	r6, r4
 800959a:	bf38      	it	cc
 800959c:	2304      	movcc	r3, #4
 800959e:	441d      	add	r5, r3
 80095a0:	445b      	add	r3, fp
 80095a2:	461e      	mov	r6, r3
 80095a4:	462c      	mov	r4, r5
 80095a6:	4544      	cmp	r4, r8
 80095a8:	d30e      	bcc.n	80095c8 <__mdiff+0xf8>
 80095aa:	f108 0103 	add.w	r1, r8, #3
 80095ae:	1b49      	subs	r1, r1, r5
 80095b0:	f021 0103 	bic.w	r1, r1, #3
 80095b4:	3d03      	subs	r5, #3
 80095b6:	45a8      	cmp	r8, r5
 80095b8:	bf38      	it	cc
 80095ba:	2100      	movcc	r1, #0
 80095bc:	440b      	add	r3, r1
 80095be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095c2:	b191      	cbz	r1, 80095ea <__mdiff+0x11a>
 80095c4:	6117      	str	r7, [r2, #16]
 80095c6:	e79d      	b.n	8009504 <__mdiff+0x34>
 80095c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80095cc:	46e6      	mov	lr, ip
 80095ce:	0c08      	lsrs	r0, r1, #16
 80095d0:	fa1c fc81 	uxtah	ip, ip, r1
 80095d4:	4471      	add	r1, lr
 80095d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095da:	b289      	uxth	r1, r1
 80095dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095e0:	f846 1b04 	str.w	r1, [r6], #4
 80095e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095e8:	e7dd      	b.n	80095a6 <__mdiff+0xd6>
 80095ea:	3f01      	subs	r7, #1
 80095ec:	e7e7      	b.n	80095be <__mdiff+0xee>
 80095ee:	bf00      	nop
 80095f0:	0800a4f9 	.word	0x0800a4f9
 80095f4:	0800a50a 	.word	0x0800a50a

080095f8 <__d2b>:
 80095f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	460f      	mov	r7, r1
 80095fe:	2101      	movs	r1, #1
 8009600:	ec59 8b10 	vmov	r8, r9, d0
 8009604:	4616      	mov	r6, r2
 8009606:	f7ff fccd 	bl	8008fa4 <_Balloc>
 800960a:	4604      	mov	r4, r0
 800960c:	b930      	cbnz	r0, 800961c <__d2b+0x24>
 800960e:	4602      	mov	r2, r0
 8009610:	4b23      	ldr	r3, [pc, #140]	@ (80096a0 <__d2b+0xa8>)
 8009612:	4824      	ldr	r0, [pc, #144]	@ (80096a4 <__d2b+0xac>)
 8009614:	f240 310f 	movw	r1, #783	@ 0x30f
 8009618:	f000 fa64 	bl	8009ae4 <__assert_func>
 800961c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009624:	b10d      	cbz	r5, 800962a <__d2b+0x32>
 8009626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	f1b8 0300 	subs.w	r3, r8, #0
 8009630:	d023      	beq.n	800967a <__d2b+0x82>
 8009632:	4668      	mov	r0, sp
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	f7ff fd7c 	bl	8009132 <__lo0bits>
 800963a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800963e:	b1d0      	cbz	r0, 8009676 <__d2b+0x7e>
 8009640:	f1c0 0320 	rsb	r3, r0, #32
 8009644:	fa02 f303 	lsl.w	r3, r2, r3
 8009648:	430b      	orrs	r3, r1
 800964a:	40c2      	lsrs	r2, r0
 800964c:	6163      	str	r3, [r4, #20]
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	61a3      	str	r3, [r4, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	bf0c      	ite	eq
 8009658:	2201      	moveq	r2, #1
 800965a:	2202      	movne	r2, #2
 800965c:	6122      	str	r2, [r4, #16]
 800965e:	b1a5      	cbz	r5, 800968a <__d2b+0x92>
 8009660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009664:	4405      	add	r5, r0
 8009666:	603d      	str	r5, [r7, #0]
 8009668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	4620      	mov	r0, r4
 8009670:	b003      	add	sp, #12
 8009672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009676:	6161      	str	r1, [r4, #20]
 8009678:	e7ea      	b.n	8009650 <__d2b+0x58>
 800967a:	a801      	add	r0, sp, #4
 800967c:	f7ff fd59 	bl	8009132 <__lo0bits>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	6163      	str	r3, [r4, #20]
 8009684:	3020      	adds	r0, #32
 8009686:	2201      	movs	r2, #1
 8009688:	e7e8      	b.n	800965c <__d2b+0x64>
 800968a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800968e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009692:	6038      	str	r0, [r7, #0]
 8009694:	6918      	ldr	r0, [r3, #16]
 8009696:	f7ff fd2d 	bl	80090f4 <__hi0bits>
 800969a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800969e:	e7e5      	b.n	800966c <__d2b+0x74>
 80096a0:	0800a4f9 	.word	0x0800a4f9
 80096a4:	0800a50a 	.word	0x0800a50a

080096a8 <__ssputs_r>:
 80096a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	688e      	ldr	r6, [r1, #8]
 80096ae:	461f      	mov	r7, r3
 80096b0:	42be      	cmp	r6, r7
 80096b2:	680b      	ldr	r3, [r1, #0]
 80096b4:	4682      	mov	sl, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	4690      	mov	r8, r2
 80096ba:	d82d      	bhi.n	8009718 <__ssputs_r+0x70>
 80096bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096c4:	d026      	beq.n	8009714 <__ssputs_r+0x6c>
 80096c6:	6965      	ldr	r5, [r4, #20]
 80096c8:	6909      	ldr	r1, [r1, #16]
 80096ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096ce:	eba3 0901 	sub.w	r9, r3, r1
 80096d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096d6:	1c7b      	adds	r3, r7, #1
 80096d8:	444b      	add	r3, r9
 80096da:	106d      	asrs	r5, r5, #1
 80096dc:	429d      	cmp	r5, r3
 80096de:	bf38      	it	cc
 80096e0:	461d      	movcc	r5, r3
 80096e2:	0553      	lsls	r3, r2, #21
 80096e4:	d527      	bpl.n	8009736 <__ssputs_r+0x8e>
 80096e6:	4629      	mov	r1, r5
 80096e8:	f7fd fe6e 	bl	80073c8 <_malloc_r>
 80096ec:	4606      	mov	r6, r0
 80096ee:	b360      	cbz	r0, 800974a <__ssputs_r+0xa2>
 80096f0:	6921      	ldr	r1, [r4, #16]
 80096f2:	464a      	mov	r2, r9
 80096f4:	f7fe fdaf 	bl	8008256 <memcpy>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	6126      	str	r6, [r4, #16]
 8009706:	6165      	str	r5, [r4, #20]
 8009708:	444e      	add	r6, r9
 800970a:	eba5 0509 	sub.w	r5, r5, r9
 800970e:	6026      	str	r6, [r4, #0]
 8009710:	60a5      	str	r5, [r4, #8]
 8009712:	463e      	mov	r6, r7
 8009714:	42be      	cmp	r6, r7
 8009716:	d900      	bls.n	800971a <__ssputs_r+0x72>
 8009718:	463e      	mov	r6, r7
 800971a:	6820      	ldr	r0, [r4, #0]
 800971c:	4632      	mov	r2, r6
 800971e:	4641      	mov	r1, r8
 8009720:	f000 f9c6 	bl	8009ab0 <memmove>
 8009724:	68a3      	ldr	r3, [r4, #8]
 8009726:	1b9b      	subs	r3, r3, r6
 8009728:	60a3      	str	r3, [r4, #8]
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	4433      	add	r3, r6
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	2000      	movs	r0, #0
 8009732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009736:	462a      	mov	r2, r5
 8009738:	f000 fa18 	bl	8009b6c <_realloc_r>
 800973c:	4606      	mov	r6, r0
 800973e:	2800      	cmp	r0, #0
 8009740:	d1e0      	bne.n	8009704 <__ssputs_r+0x5c>
 8009742:	6921      	ldr	r1, [r4, #16]
 8009744:	4650      	mov	r0, sl
 8009746:	f7ff fbe3 	bl	8008f10 <_free_r>
 800974a:	230c      	movs	r3, #12
 800974c:	f8ca 3000 	str.w	r3, [sl]
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e7e9      	b.n	8009732 <__ssputs_r+0x8a>
	...

08009760 <_svfiprintf_r>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	4698      	mov	r8, r3
 8009766:	898b      	ldrh	r3, [r1, #12]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	b09d      	sub	sp, #116	@ 0x74
 800976c:	4607      	mov	r7, r0
 800976e:	460d      	mov	r5, r1
 8009770:	4614      	mov	r4, r2
 8009772:	d510      	bpl.n	8009796 <_svfiprintf_r+0x36>
 8009774:	690b      	ldr	r3, [r1, #16]
 8009776:	b973      	cbnz	r3, 8009796 <_svfiprintf_r+0x36>
 8009778:	2140      	movs	r1, #64	@ 0x40
 800977a:	f7fd fe25 	bl	80073c8 <_malloc_r>
 800977e:	6028      	str	r0, [r5, #0]
 8009780:	6128      	str	r0, [r5, #16]
 8009782:	b930      	cbnz	r0, 8009792 <_svfiprintf_r+0x32>
 8009784:	230c      	movs	r3, #12
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	b01d      	add	sp, #116	@ 0x74
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009792:	2340      	movs	r3, #64	@ 0x40
 8009794:	616b      	str	r3, [r5, #20]
 8009796:	2300      	movs	r3, #0
 8009798:	9309      	str	r3, [sp, #36]	@ 0x24
 800979a:	2320      	movs	r3, #32
 800979c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a4:	2330      	movs	r3, #48	@ 0x30
 80097a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009944 <_svfiprintf_r+0x1e4>
 80097aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097ae:	f04f 0901 	mov.w	r9, #1
 80097b2:	4623      	mov	r3, r4
 80097b4:	469a      	mov	sl, r3
 80097b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ba:	b10a      	cbz	r2, 80097c0 <_svfiprintf_r+0x60>
 80097bc:	2a25      	cmp	r2, #37	@ 0x25
 80097be:	d1f9      	bne.n	80097b4 <_svfiprintf_r+0x54>
 80097c0:	ebba 0b04 	subs.w	fp, sl, r4
 80097c4:	d00b      	beq.n	80097de <_svfiprintf_r+0x7e>
 80097c6:	465b      	mov	r3, fp
 80097c8:	4622      	mov	r2, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff ff6b 	bl	80096a8 <__ssputs_r>
 80097d2:	3001      	adds	r0, #1
 80097d4:	f000 80a7 	beq.w	8009926 <_svfiprintf_r+0x1c6>
 80097d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097da:	445a      	add	r2, fp
 80097dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80097de:	f89a 3000 	ldrb.w	r3, [sl]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 809f 	beq.w	8009926 <_svfiprintf_r+0x1c6>
 80097e8:	2300      	movs	r3, #0
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f2:	f10a 0a01 	add.w	sl, sl, #1
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	9307      	str	r3, [sp, #28]
 80097fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009800:	4654      	mov	r4, sl
 8009802:	2205      	movs	r2, #5
 8009804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009808:	484e      	ldr	r0, [pc, #312]	@ (8009944 <_svfiprintf_r+0x1e4>)
 800980a:	f7f6 fd11 	bl	8000230 <memchr>
 800980e:	9a04      	ldr	r2, [sp, #16]
 8009810:	b9d8      	cbnz	r0, 800984a <_svfiprintf_r+0xea>
 8009812:	06d0      	lsls	r0, r2, #27
 8009814:	bf44      	itt	mi
 8009816:	2320      	movmi	r3, #32
 8009818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800981c:	0711      	lsls	r1, r2, #28
 800981e:	bf44      	itt	mi
 8009820:	232b      	movmi	r3, #43	@ 0x2b
 8009822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009826:	f89a 3000 	ldrb.w	r3, [sl]
 800982a:	2b2a      	cmp	r3, #42	@ 0x2a
 800982c:	d015      	beq.n	800985a <_svfiprintf_r+0xfa>
 800982e:	9a07      	ldr	r2, [sp, #28]
 8009830:	4654      	mov	r4, sl
 8009832:	2000      	movs	r0, #0
 8009834:	f04f 0c0a 	mov.w	ip, #10
 8009838:	4621      	mov	r1, r4
 800983a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800983e:	3b30      	subs	r3, #48	@ 0x30
 8009840:	2b09      	cmp	r3, #9
 8009842:	d94b      	bls.n	80098dc <_svfiprintf_r+0x17c>
 8009844:	b1b0      	cbz	r0, 8009874 <_svfiprintf_r+0x114>
 8009846:	9207      	str	r2, [sp, #28]
 8009848:	e014      	b.n	8009874 <_svfiprintf_r+0x114>
 800984a:	eba0 0308 	sub.w	r3, r0, r8
 800984e:	fa09 f303 	lsl.w	r3, r9, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	46a2      	mov	sl, r4
 8009858:	e7d2      	b.n	8009800 <_svfiprintf_r+0xa0>
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	1d19      	adds	r1, r3, #4
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	9103      	str	r1, [sp, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfbb      	ittet	lt
 8009866:	425b      	neglt	r3, r3
 8009868:	f042 0202 	orrlt.w	r2, r2, #2
 800986c:	9307      	strge	r3, [sp, #28]
 800986e:	9307      	strlt	r3, [sp, #28]
 8009870:	bfb8      	it	lt
 8009872:	9204      	strlt	r2, [sp, #16]
 8009874:	7823      	ldrb	r3, [r4, #0]
 8009876:	2b2e      	cmp	r3, #46	@ 0x2e
 8009878:	d10a      	bne.n	8009890 <_svfiprintf_r+0x130>
 800987a:	7863      	ldrb	r3, [r4, #1]
 800987c:	2b2a      	cmp	r3, #42	@ 0x2a
 800987e:	d132      	bne.n	80098e6 <_svfiprintf_r+0x186>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	1d1a      	adds	r2, r3, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	9203      	str	r2, [sp, #12]
 8009888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800988c:	3402      	adds	r4, #2
 800988e:	9305      	str	r3, [sp, #20]
 8009890:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009954 <_svfiprintf_r+0x1f4>
 8009894:	7821      	ldrb	r1, [r4, #0]
 8009896:	2203      	movs	r2, #3
 8009898:	4650      	mov	r0, sl
 800989a:	f7f6 fcc9 	bl	8000230 <memchr>
 800989e:	b138      	cbz	r0, 80098b0 <_svfiprintf_r+0x150>
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	eba0 000a 	sub.w	r0, r0, sl
 80098a6:	2240      	movs	r2, #64	@ 0x40
 80098a8:	4082      	lsls	r2, r0
 80098aa:	4313      	orrs	r3, r2
 80098ac:	3401      	adds	r4, #1
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b4:	4824      	ldr	r0, [pc, #144]	@ (8009948 <_svfiprintf_r+0x1e8>)
 80098b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ba:	2206      	movs	r2, #6
 80098bc:	f7f6 fcb8 	bl	8000230 <memchr>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d036      	beq.n	8009932 <_svfiprintf_r+0x1d2>
 80098c4:	4b21      	ldr	r3, [pc, #132]	@ (800994c <_svfiprintf_r+0x1ec>)
 80098c6:	bb1b      	cbnz	r3, 8009910 <_svfiprintf_r+0x1b0>
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	3307      	adds	r3, #7
 80098cc:	f023 0307 	bic.w	r3, r3, #7
 80098d0:	3308      	adds	r3, #8
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d6:	4433      	add	r3, r6
 80098d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098da:	e76a      	b.n	80097b2 <_svfiprintf_r+0x52>
 80098dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e0:	460c      	mov	r4, r1
 80098e2:	2001      	movs	r0, #1
 80098e4:	e7a8      	b.n	8009838 <_svfiprintf_r+0xd8>
 80098e6:	2300      	movs	r3, #0
 80098e8:	3401      	adds	r4, #1
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	4619      	mov	r1, r3
 80098ee:	f04f 0c0a 	mov.w	ip, #10
 80098f2:	4620      	mov	r0, r4
 80098f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098f8:	3a30      	subs	r2, #48	@ 0x30
 80098fa:	2a09      	cmp	r2, #9
 80098fc:	d903      	bls.n	8009906 <_svfiprintf_r+0x1a6>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0c6      	beq.n	8009890 <_svfiprintf_r+0x130>
 8009902:	9105      	str	r1, [sp, #20]
 8009904:	e7c4      	b.n	8009890 <_svfiprintf_r+0x130>
 8009906:	fb0c 2101 	mla	r1, ip, r1, r2
 800990a:	4604      	mov	r4, r0
 800990c:	2301      	movs	r3, #1
 800990e:	e7f0      	b.n	80098f2 <_svfiprintf_r+0x192>
 8009910:	ab03      	add	r3, sp, #12
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	462a      	mov	r2, r5
 8009916:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <_svfiprintf_r+0x1f0>)
 8009918:	a904      	add	r1, sp, #16
 800991a:	4638      	mov	r0, r7
 800991c:	f7fd fef8 	bl	8007710 <_printf_float>
 8009920:	1c42      	adds	r2, r0, #1
 8009922:	4606      	mov	r6, r0
 8009924:	d1d6      	bne.n	80098d4 <_svfiprintf_r+0x174>
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	065b      	lsls	r3, r3, #25
 800992a:	f53f af2d 	bmi.w	8009788 <_svfiprintf_r+0x28>
 800992e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009930:	e72c      	b.n	800978c <_svfiprintf_r+0x2c>
 8009932:	ab03      	add	r3, sp, #12
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	462a      	mov	r2, r5
 8009938:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <_svfiprintf_r+0x1f0>)
 800993a:	a904      	add	r1, sp, #16
 800993c:	4638      	mov	r0, r7
 800993e:	f7fe f97f 	bl	8007c40 <_printf_i>
 8009942:	e7ed      	b.n	8009920 <_svfiprintf_r+0x1c0>
 8009944:	0800a660 	.word	0x0800a660
 8009948:	0800a66a 	.word	0x0800a66a
 800994c:	08007711 	.word	0x08007711
 8009950:	080096a9 	.word	0x080096a9
 8009954:	0800a666 	.word	0x0800a666

08009958 <__sflush_r>:
 8009958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009960:	0716      	lsls	r6, r2, #28
 8009962:	4605      	mov	r5, r0
 8009964:	460c      	mov	r4, r1
 8009966:	d454      	bmi.n	8009a12 <__sflush_r+0xba>
 8009968:	684b      	ldr	r3, [r1, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	dc02      	bgt.n	8009974 <__sflush_r+0x1c>
 800996e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	dd48      	ble.n	8009a06 <__sflush_r+0xae>
 8009974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009976:	2e00      	cmp	r6, #0
 8009978:	d045      	beq.n	8009a06 <__sflush_r+0xae>
 800997a:	2300      	movs	r3, #0
 800997c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009980:	682f      	ldr	r7, [r5, #0]
 8009982:	6a21      	ldr	r1, [r4, #32]
 8009984:	602b      	str	r3, [r5, #0]
 8009986:	d030      	beq.n	80099ea <__sflush_r+0x92>
 8009988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	0759      	lsls	r1, r3, #29
 800998e:	d505      	bpl.n	800999c <__sflush_r+0x44>
 8009990:	6863      	ldr	r3, [r4, #4]
 8009992:	1ad2      	subs	r2, r2, r3
 8009994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009996:	b10b      	cbz	r3, 800999c <__sflush_r+0x44>
 8009998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800999a:	1ad2      	subs	r2, r2, r3
 800999c:	2300      	movs	r3, #0
 800999e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099a0:	6a21      	ldr	r1, [r4, #32]
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b0      	blx	r6
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	d106      	bne.n	80099ba <__sflush_r+0x62>
 80099ac:	6829      	ldr	r1, [r5, #0]
 80099ae:	291d      	cmp	r1, #29
 80099b0:	d82b      	bhi.n	8009a0a <__sflush_r+0xb2>
 80099b2:	4a2a      	ldr	r2, [pc, #168]	@ (8009a5c <__sflush_r+0x104>)
 80099b4:	410a      	asrs	r2, r1
 80099b6:	07d6      	lsls	r6, r2, #31
 80099b8:	d427      	bmi.n	8009a0a <__sflush_r+0xb2>
 80099ba:	2200      	movs	r2, #0
 80099bc:	6062      	str	r2, [r4, #4]
 80099be:	04d9      	lsls	r1, r3, #19
 80099c0:	6922      	ldr	r2, [r4, #16]
 80099c2:	6022      	str	r2, [r4, #0]
 80099c4:	d504      	bpl.n	80099d0 <__sflush_r+0x78>
 80099c6:	1c42      	adds	r2, r0, #1
 80099c8:	d101      	bne.n	80099ce <__sflush_r+0x76>
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	b903      	cbnz	r3, 80099d0 <__sflush_r+0x78>
 80099ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80099d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099d2:	602f      	str	r7, [r5, #0]
 80099d4:	b1b9      	cbz	r1, 8009a06 <__sflush_r+0xae>
 80099d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099da:	4299      	cmp	r1, r3
 80099dc:	d002      	beq.n	80099e4 <__sflush_r+0x8c>
 80099de:	4628      	mov	r0, r5
 80099e0:	f7ff fa96 	bl	8008f10 <_free_r>
 80099e4:	2300      	movs	r3, #0
 80099e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80099e8:	e00d      	b.n	8009a06 <__sflush_r+0xae>
 80099ea:	2301      	movs	r3, #1
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b0      	blx	r6
 80099f0:	4602      	mov	r2, r0
 80099f2:	1c50      	adds	r0, r2, #1
 80099f4:	d1c9      	bne.n	800998a <__sflush_r+0x32>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0c6      	beq.n	800998a <__sflush_r+0x32>
 80099fc:	2b1d      	cmp	r3, #29
 80099fe:	d001      	beq.n	8009a04 <__sflush_r+0xac>
 8009a00:	2b16      	cmp	r3, #22
 8009a02:	d11e      	bne.n	8009a42 <__sflush_r+0xea>
 8009a04:	602f      	str	r7, [r5, #0]
 8009a06:	2000      	movs	r0, #0
 8009a08:	e022      	b.n	8009a50 <__sflush_r+0xf8>
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	e01b      	b.n	8009a4a <__sflush_r+0xf2>
 8009a12:	690f      	ldr	r7, [r1, #16]
 8009a14:	2f00      	cmp	r7, #0
 8009a16:	d0f6      	beq.n	8009a06 <__sflush_r+0xae>
 8009a18:	0793      	lsls	r3, r2, #30
 8009a1a:	680e      	ldr	r6, [r1, #0]
 8009a1c:	bf08      	it	eq
 8009a1e:	694b      	ldreq	r3, [r1, #20]
 8009a20:	600f      	str	r7, [r1, #0]
 8009a22:	bf18      	it	ne
 8009a24:	2300      	movne	r3, #0
 8009a26:	eba6 0807 	sub.w	r8, r6, r7
 8009a2a:	608b      	str	r3, [r1, #8]
 8009a2c:	f1b8 0f00 	cmp.w	r8, #0
 8009a30:	dde9      	ble.n	8009a06 <__sflush_r+0xae>
 8009a32:	6a21      	ldr	r1, [r4, #32]
 8009a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a36:	4643      	mov	r3, r8
 8009a38:	463a      	mov	r2, r7
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b0      	blx	r6
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	dc08      	bgt.n	8009a54 <__sflush_r+0xfc>
 8009a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	4407      	add	r7, r0
 8009a56:	eba8 0800 	sub.w	r8, r8, r0
 8009a5a:	e7e7      	b.n	8009a2c <__sflush_r+0xd4>
 8009a5c:	dfbffffe 	.word	0xdfbffffe

08009a60 <_fflush_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	690b      	ldr	r3, [r1, #16]
 8009a64:	4605      	mov	r5, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	b913      	cbnz	r3, 8009a70 <_fflush_r+0x10>
 8009a6a:	2500      	movs	r5, #0
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	b118      	cbz	r0, 8009a7a <_fflush_r+0x1a>
 8009a72:	6a03      	ldr	r3, [r0, #32]
 8009a74:	b90b      	cbnz	r3, 8009a7a <_fflush_r+0x1a>
 8009a76:	f7fe fa8f 	bl	8007f98 <__sinit>
 8009a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0f3      	beq.n	8009a6a <_fflush_r+0xa>
 8009a82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a84:	07d0      	lsls	r0, r2, #31
 8009a86:	d404      	bmi.n	8009a92 <_fflush_r+0x32>
 8009a88:	0599      	lsls	r1, r3, #22
 8009a8a:	d402      	bmi.n	8009a92 <_fflush_r+0x32>
 8009a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a8e:	f7fe fbe0 	bl	8008252 <__retarget_lock_acquire_recursive>
 8009a92:	4628      	mov	r0, r5
 8009a94:	4621      	mov	r1, r4
 8009a96:	f7ff ff5f 	bl	8009958 <__sflush_r>
 8009a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a9c:	07da      	lsls	r2, r3, #31
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	d4e4      	bmi.n	8009a6c <_fflush_r+0xc>
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	059b      	lsls	r3, r3, #22
 8009aa6:	d4e1      	bmi.n	8009a6c <_fflush_r+0xc>
 8009aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aaa:	f7fe fbd3 	bl	8008254 <__retarget_lock_release_recursive>
 8009aae:	e7dd      	b.n	8009a6c <_fflush_r+0xc>

08009ab0 <memmove>:
 8009ab0:	4288      	cmp	r0, r1
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	eb01 0402 	add.w	r4, r1, r2
 8009ab8:	d902      	bls.n	8009ac0 <memmove+0x10>
 8009aba:	4284      	cmp	r4, r0
 8009abc:	4623      	mov	r3, r4
 8009abe:	d807      	bhi.n	8009ad0 <memmove+0x20>
 8009ac0:	1e43      	subs	r3, r0, #1
 8009ac2:	42a1      	cmp	r1, r4
 8009ac4:	d008      	beq.n	8009ad8 <memmove+0x28>
 8009ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ace:	e7f8      	b.n	8009ac2 <memmove+0x12>
 8009ad0:	4402      	add	r2, r0
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	428a      	cmp	r2, r1
 8009ad6:	d100      	bne.n	8009ada <memmove+0x2a>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ae2:	e7f7      	b.n	8009ad4 <memmove+0x24>

08009ae4 <__assert_func>:
 8009ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ae6:	4614      	mov	r4, r2
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4b09      	ldr	r3, [pc, #36]	@ (8009b10 <__assert_func+0x2c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4605      	mov	r5, r0
 8009af0:	68d8      	ldr	r0, [r3, #12]
 8009af2:	b954      	cbnz	r4, 8009b0a <__assert_func+0x26>
 8009af4:	4b07      	ldr	r3, [pc, #28]	@ (8009b14 <__assert_func+0x30>)
 8009af6:	461c      	mov	r4, r3
 8009af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009afc:	9100      	str	r1, [sp, #0]
 8009afe:	462b      	mov	r3, r5
 8009b00:	4905      	ldr	r1, [pc, #20]	@ (8009b18 <__assert_func+0x34>)
 8009b02:	f000 f86f 	bl	8009be4 <fiprintf>
 8009b06:	f000 f87f 	bl	8009c08 <abort>
 8009b0a:	4b04      	ldr	r3, [pc, #16]	@ (8009b1c <__assert_func+0x38>)
 8009b0c:	e7f4      	b.n	8009af8 <__assert_func+0x14>
 8009b0e:	bf00      	nop
 8009b10:	200002b4 	.word	0x200002b4
 8009b14:	0800a6b6 	.word	0x0800a6b6
 8009b18:	0800a688 	.word	0x0800a688
 8009b1c:	0800a67b 	.word	0x0800a67b

08009b20 <_calloc_r>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	fba1 5402 	umull	r5, r4, r1, r2
 8009b26:	b93c      	cbnz	r4, 8009b38 <_calloc_r+0x18>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f7fd fc4d 	bl	80073c8 <_malloc_r>
 8009b2e:	4606      	mov	r6, r0
 8009b30:	b928      	cbnz	r0, 8009b3e <_calloc_r+0x1e>
 8009b32:	2600      	movs	r6, #0
 8009b34:	4630      	mov	r0, r6
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	220c      	movs	r2, #12
 8009b3a:	6002      	str	r2, [r0, #0]
 8009b3c:	e7f9      	b.n	8009b32 <_calloc_r+0x12>
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4621      	mov	r1, r4
 8009b42:	f7fe fac2 	bl	80080ca <memset>
 8009b46:	e7f5      	b.n	8009b34 <_calloc_r+0x14>

08009b48 <__ascii_mbtowc>:
 8009b48:	b082      	sub	sp, #8
 8009b4a:	b901      	cbnz	r1, 8009b4e <__ascii_mbtowc+0x6>
 8009b4c:	a901      	add	r1, sp, #4
 8009b4e:	b142      	cbz	r2, 8009b62 <__ascii_mbtowc+0x1a>
 8009b50:	b14b      	cbz	r3, 8009b66 <__ascii_mbtowc+0x1e>
 8009b52:	7813      	ldrb	r3, [r2, #0]
 8009b54:	600b      	str	r3, [r1, #0]
 8009b56:	7812      	ldrb	r2, [r2, #0]
 8009b58:	1e10      	subs	r0, r2, #0
 8009b5a:	bf18      	it	ne
 8009b5c:	2001      	movne	r0, #1
 8009b5e:	b002      	add	sp, #8
 8009b60:	4770      	bx	lr
 8009b62:	4610      	mov	r0, r2
 8009b64:	e7fb      	b.n	8009b5e <__ascii_mbtowc+0x16>
 8009b66:	f06f 0001 	mvn.w	r0, #1
 8009b6a:	e7f8      	b.n	8009b5e <__ascii_mbtowc+0x16>

08009b6c <_realloc_r>:
 8009b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b70:	4680      	mov	r8, r0
 8009b72:	4615      	mov	r5, r2
 8009b74:	460c      	mov	r4, r1
 8009b76:	b921      	cbnz	r1, 8009b82 <_realloc_r+0x16>
 8009b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	f7fd bc23 	b.w	80073c8 <_malloc_r>
 8009b82:	b92a      	cbnz	r2, 8009b90 <_realloc_r+0x24>
 8009b84:	f7ff f9c4 	bl	8008f10 <_free_r>
 8009b88:	2400      	movs	r4, #0
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b90:	f000 f841 	bl	8009c16 <_malloc_usable_size_r>
 8009b94:	4285      	cmp	r5, r0
 8009b96:	4606      	mov	r6, r0
 8009b98:	d802      	bhi.n	8009ba0 <_realloc_r+0x34>
 8009b9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b9e:	d8f4      	bhi.n	8009b8a <_realloc_r+0x1e>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	f7fd fc10 	bl	80073c8 <_malloc_r>
 8009ba8:	4607      	mov	r7, r0
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d0ec      	beq.n	8009b88 <_realloc_r+0x1c>
 8009bae:	42b5      	cmp	r5, r6
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	bf28      	it	cs
 8009bb6:	4632      	movcs	r2, r6
 8009bb8:	f7fe fb4d 	bl	8008256 <memcpy>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	f7ff f9a6 	bl	8008f10 <_free_r>
 8009bc4:	463c      	mov	r4, r7
 8009bc6:	e7e0      	b.n	8009b8a <_realloc_r+0x1e>

08009bc8 <__ascii_wctomb>:
 8009bc8:	4603      	mov	r3, r0
 8009bca:	4608      	mov	r0, r1
 8009bcc:	b141      	cbz	r1, 8009be0 <__ascii_wctomb+0x18>
 8009bce:	2aff      	cmp	r2, #255	@ 0xff
 8009bd0:	d904      	bls.n	8009bdc <__ascii_wctomb+0x14>
 8009bd2:	228a      	movs	r2, #138	@ 0x8a
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	4770      	bx	lr
 8009bdc:	700a      	strb	r2, [r1, #0]
 8009bde:	2001      	movs	r0, #1
 8009be0:	4770      	bx	lr
	...

08009be4 <fiprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b503      	push	{r0, r1, lr}
 8009be8:	4601      	mov	r1, r0
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	4805      	ldr	r0, [pc, #20]	@ (8009c04 <fiprintf+0x20>)
 8009bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f000 f83f 	bl	8009c78 <_vfiprintf_r>
 8009bfa:	b002      	add	sp, #8
 8009bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c00:	b003      	add	sp, #12
 8009c02:	4770      	bx	lr
 8009c04:	200002b4 	.word	0x200002b4

08009c08 <abort>:
 8009c08:	b508      	push	{r3, lr}
 8009c0a:	2006      	movs	r0, #6
 8009c0c:	f000 fa08 	bl	800a020 <raise>
 8009c10:	2001      	movs	r0, #1
 8009c12:	f7f9 f8cb 	bl	8002dac <_exit>

08009c16 <_malloc_usable_size_r>:
 8009c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c1a:	1f18      	subs	r0, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	bfbc      	itt	lt
 8009c20:	580b      	ldrlt	r3, [r1, r0]
 8009c22:	18c0      	addlt	r0, r0, r3
 8009c24:	4770      	bx	lr

08009c26 <__sfputc_r>:
 8009c26:	6893      	ldr	r3, [r2, #8]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	b410      	push	{r4}
 8009c2e:	6093      	str	r3, [r2, #8]
 8009c30:	da08      	bge.n	8009c44 <__sfputc_r+0x1e>
 8009c32:	6994      	ldr	r4, [r2, #24]
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	db01      	blt.n	8009c3c <__sfputc_r+0x16>
 8009c38:	290a      	cmp	r1, #10
 8009c3a:	d103      	bne.n	8009c44 <__sfputc_r+0x1e>
 8009c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c40:	f000 b932 	b.w	8009ea8 <__swbuf_r>
 8009c44:	6813      	ldr	r3, [r2, #0]
 8009c46:	1c58      	adds	r0, r3, #1
 8009c48:	6010      	str	r0, [r2, #0]
 8009c4a:	7019      	strb	r1, [r3, #0]
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <__sfputs_r>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	4606      	mov	r6, r0
 8009c58:	460f      	mov	r7, r1
 8009c5a:	4614      	mov	r4, r2
 8009c5c:	18d5      	adds	r5, r2, r3
 8009c5e:	42ac      	cmp	r4, r5
 8009c60:	d101      	bne.n	8009c66 <__sfputs_r+0x12>
 8009c62:	2000      	movs	r0, #0
 8009c64:	e007      	b.n	8009c76 <__sfputs_r+0x22>
 8009c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6a:	463a      	mov	r2, r7
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7ff ffda 	bl	8009c26 <__sfputc_r>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d1f3      	bne.n	8009c5e <__sfputs_r+0xa>
 8009c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c78 <_vfiprintf_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	b09d      	sub	sp, #116	@ 0x74
 8009c80:	4614      	mov	r4, r2
 8009c82:	4698      	mov	r8, r3
 8009c84:	4606      	mov	r6, r0
 8009c86:	b118      	cbz	r0, 8009c90 <_vfiprintf_r+0x18>
 8009c88:	6a03      	ldr	r3, [r0, #32]
 8009c8a:	b90b      	cbnz	r3, 8009c90 <_vfiprintf_r+0x18>
 8009c8c:	f7fe f984 	bl	8007f98 <__sinit>
 8009c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c92:	07d9      	lsls	r1, r3, #31
 8009c94:	d405      	bmi.n	8009ca2 <_vfiprintf_r+0x2a>
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	059a      	lsls	r2, r3, #22
 8009c9a:	d402      	bmi.n	8009ca2 <_vfiprintf_r+0x2a>
 8009c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c9e:	f7fe fad8 	bl	8008252 <__retarget_lock_acquire_recursive>
 8009ca2:	89ab      	ldrh	r3, [r5, #12]
 8009ca4:	071b      	lsls	r3, r3, #28
 8009ca6:	d501      	bpl.n	8009cac <_vfiprintf_r+0x34>
 8009ca8:	692b      	ldr	r3, [r5, #16]
 8009caa:	b99b      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x5c>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 f938 	bl	8009f24 <__swsetup_r>
 8009cb4:	b170      	cbz	r0, 8009cd4 <_vfiprintf_r+0x5c>
 8009cb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cb8:	07dc      	lsls	r4, r3, #31
 8009cba:	d504      	bpl.n	8009cc6 <_vfiprintf_r+0x4e>
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	b01d      	add	sp, #116	@ 0x74
 8009cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	0598      	lsls	r0, r3, #22
 8009cca:	d4f7      	bmi.n	8009cbc <_vfiprintf_r+0x44>
 8009ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cce:	f7fe fac1 	bl	8008254 <__retarget_lock_release_recursive>
 8009cd2:	e7f3      	b.n	8009cbc <_vfiprintf_r+0x44>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce2:	2330      	movs	r3, #48	@ 0x30
 8009ce4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e94 <_vfiprintf_r+0x21c>
 8009ce8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf8:	b10a      	cbz	r2, 8009cfe <_vfiprintf_r+0x86>
 8009cfa:	2a25      	cmp	r2, #37	@ 0x25
 8009cfc:	d1f9      	bne.n	8009cf2 <_vfiprintf_r+0x7a>
 8009cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009d02:	d00b      	beq.n	8009d1c <_vfiprintf_r+0xa4>
 8009d04:	465b      	mov	r3, fp
 8009d06:	4622      	mov	r2, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ffa2 	bl	8009c54 <__sfputs_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	f000 80a7 	beq.w	8009e64 <_vfiprintf_r+0x1ec>
 8009d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d18:	445a      	add	r2, fp
 8009d1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 809f 	beq.w	8009e64 <_vfiprintf_r+0x1ec>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	f10a 0a01 	add.w	sl, sl, #1
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2205      	movs	r2, #5
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	4853      	ldr	r0, [pc, #332]	@ (8009e94 <_vfiprintf_r+0x21c>)
 8009d48:	f7f6 fa72 	bl	8000230 <memchr>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	b9d8      	cbnz	r0, 8009d88 <_vfiprintf_r+0x110>
 8009d50:	06d1      	lsls	r1, r2, #27
 8009d52:	bf44      	itt	mi
 8009d54:	2320      	movmi	r3, #32
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d5a:	0713      	lsls	r3, r2, #28
 8009d5c:	bf44      	itt	mi
 8009d5e:	232b      	movmi	r3, #43	@ 0x2b
 8009d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d6a:	d015      	beq.n	8009d98 <_vfiprintf_r+0x120>
 8009d6c:	9a07      	ldr	r2, [sp, #28]
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2000      	movs	r0, #0
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4621      	mov	r1, r4
 8009d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7c:	3b30      	subs	r3, #48	@ 0x30
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d94b      	bls.n	8009e1a <_vfiprintf_r+0x1a2>
 8009d82:	b1b0      	cbz	r0, 8009db2 <_vfiprintf_r+0x13a>
 8009d84:	9207      	str	r2, [sp, #28]
 8009d86:	e014      	b.n	8009db2 <_vfiprintf_r+0x13a>
 8009d88:	eba0 0308 	sub.w	r3, r0, r8
 8009d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	46a2      	mov	sl, r4
 8009d96:	e7d2      	b.n	8009d3e <_vfiprintf_r+0xc6>
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	1d19      	adds	r1, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	9103      	str	r1, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfbb      	ittet	lt
 8009da4:	425b      	neglt	r3, r3
 8009da6:	f042 0202 	orrlt.w	r2, r2, #2
 8009daa:	9307      	strge	r3, [sp, #28]
 8009dac:	9307      	strlt	r3, [sp, #28]
 8009dae:	bfb8      	it	lt
 8009db0:	9204      	strlt	r2, [sp, #16]
 8009db2:	7823      	ldrb	r3, [r4, #0]
 8009db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009db6:	d10a      	bne.n	8009dce <_vfiprintf_r+0x156>
 8009db8:	7863      	ldrb	r3, [r4, #1]
 8009dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dbc:	d132      	bne.n	8009e24 <_vfiprintf_r+0x1ac>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d1a      	adds	r2, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9203      	str	r2, [sp, #12]
 8009dc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dca:	3402      	adds	r4, #2
 8009dcc:	9305      	str	r3, [sp, #20]
 8009dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ea4 <_vfiprintf_r+0x22c>
 8009dd2:	7821      	ldrb	r1, [r4, #0]
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	4650      	mov	r0, sl
 8009dd8:	f7f6 fa2a 	bl	8000230 <memchr>
 8009ddc:	b138      	cbz	r0, 8009dee <_vfiprintf_r+0x176>
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	eba0 000a 	sub.w	r0, r0, sl
 8009de4:	2240      	movs	r2, #64	@ 0x40
 8009de6:	4082      	lsls	r2, r0
 8009de8:	4313      	orrs	r3, r2
 8009dea:	3401      	adds	r4, #1
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df2:	4829      	ldr	r0, [pc, #164]	@ (8009e98 <_vfiprintf_r+0x220>)
 8009df4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009df8:	2206      	movs	r2, #6
 8009dfa:	f7f6 fa19 	bl	8000230 <memchr>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d03f      	beq.n	8009e82 <_vfiprintf_r+0x20a>
 8009e02:	4b26      	ldr	r3, [pc, #152]	@ (8009e9c <_vfiprintf_r+0x224>)
 8009e04:	bb1b      	cbnz	r3, 8009e4e <_vfiprintf_r+0x1d6>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	3307      	adds	r3, #7
 8009e0a:	f023 0307 	bic.w	r3, r3, #7
 8009e0e:	3308      	adds	r3, #8
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e14:	443b      	add	r3, r7
 8009e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e18:	e76a      	b.n	8009cf0 <_vfiprintf_r+0x78>
 8009e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1e:	460c      	mov	r4, r1
 8009e20:	2001      	movs	r0, #1
 8009e22:	e7a8      	b.n	8009d76 <_vfiprintf_r+0xfe>
 8009e24:	2300      	movs	r3, #0
 8009e26:	3401      	adds	r4, #1
 8009e28:	9305      	str	r3, [sp, #20]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	f04f 0c0a 	mov.w	ip, #10
 8009e30:	4620      	mov	r0, r4
 8009e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e36:	3a30      	subs	r2, #48	@ 0x30
 8009e38:	2a09      	cmp	r2, #9
 8009e3a:	d903      	bls.n	8009e44 <_vfiprintf_r+0x1cc>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0c6      	beq.n	8009dce <_vfiprintf_r+0x156>
 8009e40:	9105      	str	r1, [sp, #20]
 8009e42:	e7c4      	b.n	8009dce <_vfiprintf_r+0x156>
 8009e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e48:	4604      	mov	r4, r0
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e7f0      	b.n	8009e30 <_vfiprintf_r+0x1b8>
 8009e4e:	ab03      	add	r3, sp, #12
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	462a      	mov	r2, r5
 8009e54:	4b12      	ldr	r3, [pc, #72]	@ (8009ea0 <_vfiprintf_r+0x228>)
 8009e56:	a904      	add	r1, sp, #16
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7fd fc59 	bl	8007710 <_printf_float>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	1c78      	adds	r0, r7, #1
 8009e62:	d1d6      	bne.n	8009e12 <_vfiprintf_r+0x19a>
 8009e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e66:	07d9      	lsls	r1, r3, #31
 8009e68:	d405      	bmi.n	8009e76 <_vfiprintf_r+0x1fe>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	059a      	lsls	r2, r3, #22
 8009e6e:	d402      	bmi.n	8009e76 <_vfiprintf_r+0x1fe>
 8009e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e72:	f7fe f9ef 	bl	8008254 <__retarget_lock_release_recursive>
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	065b      	lsls	r3, r3, #25
 8009e7a:	f53f af1f 	bmi.w	8009cbc <_vfiprintf_r+0x44>
 8009e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e80:	e71e      	b.n	8009cc0 <_vfiprintf_r+0x48>
 8009e82:	ab03      	add	r3, sp, #12
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	462a      	mov	r2, r5
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <_vfiprintf_r+0x228>)
 8009e8a:	a904      	add	r1, sp, #16
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7fd fed7 	bl	8007c40 <_printf_i>
 8009e92:	e7e4      	b.n	8009e5e <_vfiprintf_r+0x1e6>
 8009e94:	0800a660 	.word	0x0800a660
 8009e98:	0800a66a 	.word	0x0800a66a
 8009e9c:	08007711 	.word	0x08007711
 8009ea0:	08009c55 	.word	0x08009c55
 8009ea4:	0800a666 	.word	0x0800a666

08009ea8 <__swbuf_r>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4614      	mov	r4, r2
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b118      	cbz	r0, 8009eba <__swbuf_r+0x12>
 8009eb2:	6a03      	ldr	r3, [r0, #32]
 8009eb4:	b90b      	cbnz	r3, 8009eba <__swbuf_r+0x12>
 8009eb6:	f7fe f86f 	bl	8007f98 <__sinit>
 8009eba:	69a3      	ldr	r3, [r4, #24]
 8009ebc:	60a3      	str	r3, [r4, #8]
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	071a      	lsls	r2, r3, #28
 8009ec2:	d501      	bpl.n	8009ec8 <__swbuf_r+0x20>
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	b943      	cbnz	r3, 8009eda <__swbuf_r+0x32>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f000 f82a 	bl	8009f24 <__swsetup_r>
 8009ed0:	b118      	cbz	r0, 8009eda <__swbuf_r+0x32>
 8009ed2:	f04f 37ff 	mov.w	r7, #4294967295
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	1a98      	subs	r0, r3, r2
 8009ee0:	6963      	ldr	r3, [r4, #20]
 8009ee2:	b2f6      	uxtb	r6, r6
 8009ee4:	4283      	cmp	r3, r0
 8009ee6:	4637      	mov	r7, r6
 8009ee8:	dc05      	bgt.n	8009ef6 <__swbuf_r+0x4e>
 8009eea:	4621      	mov	r1, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7ff fdb7 	bl	8009a60 <_fflush_r>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d1ed      	bne.n	8009ed2 <__swbuf_r+0x2a>
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	60a3      	str	r3, [r4, #8]
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	6022      	str	r2, [r4, #0]
 8009f02:	701e      	strb	r6, [r3, #0]
 8009f04:	6962      	ldr	r2, [r4, #20]
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d004      	beq.n	8009f16 <__swbuf_r+0x6e>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	07db      	lsls	r3, r3, #31
 8009f10:	d5e1      	bpl.n	8009ed6 <__swbuf_r+0x2e>
 8009f12:	2e0a      	cmp	r6, #10
 8009f14:	d1df      	bne.n	8009ed6 <__swbuf_r+0x2e>
 8009f16:	4621      	mov	r1, r4
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f7ff fda1 	bl	8009a60 <_fflush_r>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d0d9      	beq.n	8009ed6 <__swbuf_r+0x2e>
 8009f22:	e7d6      	b.n	8009ed2 <__swbuf_r+0x2a>

08009f24 <__swsetup_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4b29      	ldr	r3, [pc, #164]	@ (8009fcc <__swsetup_r+0xa8>)
 8009f28:	4605      	mov	r5, r0
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	b118      	cbz	r0, 8009f38 <__swsetup_r+0x14>
 8009f30:	6a03      	ldr	r3, [r0, #32]
 8009f32:	b90b      	cbnz	r3, 8009f38 <__swsetup_r+0x14>
 8009f34:	f7fe f830 	bl	8007f98 <__sinit>
 8009f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3c:	0719      	lsls	r1, r3, #28
 8009f3e:	d422      	bmi.n	8009f86 <__swsetup_r+0x62>
 8009f40:	06da      	lsls	r2, r3, #27
 8009f42:	d407      	bmi.n	8009f54 <__swsetup_r+0x30>
 8009f44:	2209      	movs	r2, #9
 8009f46:	602a      	str	r2, [r5, #0]
 8009f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	e033      	b.n	8009fbc <__swsetup_r+0x98>
 8009f54:	0758      	lsls	r0, r3, #29
 8009f56:	d512      	bpl.n	8009f7e <__swsetup_r+0x5a>
 8009f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f5a:	b141      	cbz	r1, 8009f6e <__swsetup_r+0x4a>
 8009f5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f60:	4299      	cmp	r1, r3
 8009f62:	d002      	beq.n	8009f6a <__swsetup_r+0x46>
 8009f64:	4628      	mov	r0, r5
 8009f66:	f7fe ffd3 	bl	8008f10 <_free_r>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	2300      	movs	r3, #0
 8009f78:	6063      	str	r3, [r4, #4]
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f043 0308 	orr.w	r3, r3, #8
 8009f84:	81a3      	strh	r3, [r4, #12]
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	b94b      	cbnz	r3, 8009f9e <__swsetup_r+0x7a>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f94:	d003      	beq.n	8009f9e <__swsetup_r+0x7a>
 8009f96:	4621      	mov	r1, r4
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f000 f883 	bl	800a0a4 <__smakebuf_r>
 8009f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa2:	f013 0201 	ands.w	r2, r3, #1
 8009fa6:	d00a      	beq.n	8009fbe <__swsetup_r+0x9a>
 8009fa8:	2200      	movs	r2, #0
 8009faa:	60a2      	str	r2, [r4, #8]
 8009fac:	6962      	ldr	r2, [r4, #20]
 8009fae:	4252      	negs	r2, r2
 8009fb0:	61a2      	str	r2, [r4, #24]
 8009fb2:	6922      	ldr	r2, [r4, #16]
 8009fb4:	b942      	cbnz	r2, 8009fc8 <__swsetup_r+0xa4>
 8009fb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fba:	d1c5      	bne.n	8009f48 <__swsetup_r+0x24>
 8009fbc:	bd38      	pop	{r3, r4, r5, pc}
 8009fbe:	0799      	lsls	r1, r3, #30
 8009fc0:	bf58      	it	pl
 8009fc2:	6962      	ldrpl	r2, [r4, #20]
 8009fc4:	60a2      	str	r2, [r4, #8]
 8009fc6:	e7f4      	b.n	8009fb2 <__swsetup_r+0x8e>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e7f7      	b.n	8009fbc <__swsetup_r+0x98>
 8009fcc:	200002b4 	.word	0x200002b4

08009fd0 <_raise_r>:
 8009fd0:	291f      	cmp	r1, #31
 8009fd2:	b538      	push	{r3, r4, r5, lr}
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	d904      	bls.n	8009fe4 <_raise_r+0x14>
 8009fda:	2316      	movs	r3, #22
 8009fdc:	6003      	str	r3, [r0, #0]
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fe6:	b112      	cbz	r2, 8009fee <_raise_r+0x1e>
 8009fe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fec:	b94b      	cbnz	r3, 800a002 <_raise_r+0x32>
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f000 f830 	bl	800a054 <_getpid_r>
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ffe:	f000 b817 	b.w	800a030 <_kill_r>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d00a      	beq.n	800a01c <_raise_r+0x4c>
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	d103      	bne.n	800a012 <_raise_r+0x42>
 800a00a:	2316      	movs	r3, #22
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	2001      	movs	r0, #1
 800a010:	e7e7      	b.n	8009fe2 <_raise_r+0x12>
 800a012:	2100      	movs	r1, #0
 800a014:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a018:	4620      	mov	r0, r4
 800a01a:	4798      	blx	r3
 800a01c:	2000      	movs	r0, #0
 800a01e:	e7e0      	b.n	8009fe2 <_raise_r+0x12>

0800a020 <raise>:
 800a020:	4b02      	ldr	r3, [pc, #8]	@ (800a02c <raise+0xc>)
 800a022:	4601      	mov	r1, r0
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f7ff bfd3 	b.w	8009fd0 <_raise_r>
 800a02a:	bf00      	nop
 800a02c:	200002b4 	.word	0x200002b4

0800a030 <_kill_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d07      	ldr	r5, [pc, #28]	@ (800a050 <_kill_r+0x20>)
 800a034:	2300      	movs	r3, #0
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	4611      	mov	r1, r2
 800a03c:	602b      	str	r3, [r5, #0]
 800a03e:	f7f8 fea5 	bl	8002d8c <_kill>
 800a042:	1c43      	adds	r3, r0, #1
 800a044:	d102      	bne.n	800a04c <_kill_r+0x1c>
 800a046:	682b      	ldr	r3, [r5, #0]
 800a048:	b103      	cbz	r3, 800a04c <_kill_r+0x1c>
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
 800a04e:	bf00      	nop
 800a050:	2001e714 	.word	0x2001e714

0800a054 <_getpid_r>:
 800a054:	f7f8 be92 	b.w	8002d7c <_getpid>

0800a058 <__swhatbuf_r>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	460c      	mov	r4, r1
 800a05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a060:	2900      	cmp	r1, #0
 800a062:	b096      	sub	sp, #88	@ 0x58
 800a064:	4615      	mov	r5, r2
 800a066:	461e      	mov	r6, r3
 800a068:	da0d      	bge.n	800a086 <__swhatbuf_r+0x2e>
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a070:	f04f 0100 	mov.w	r1, #0
 800a074:	bf14      	ite	ne
 800a076:	2340      	movne	r3, #64	@ 0x40
 800a078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a07c:	2000      	movs	r0, #0
 800a07e:	6031      	str	r1, [r6, #0]
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	b016      	add	sp, #88	@ 0x58
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	466a      	mov	r2, sp
 800a088:	f000 f848 	bl	800a11c <_fstat_r>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	dbec      	blt.n	800a06a <__swhatbuf_r+0x12>
 800a090:	9901      	ldr	r1, [sp, #4]
 800a092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a09a:	4259      	negs	r1, r3
 800a09c:	4159      	adcs	r1, r3
 800a09e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0a2:	e7eb      	b.n	800a07c <__swhatbuf_r+0x24>

0800a0a4 <__smakebuf_r>:
 800a0a4:	898b      	ldrh	r3, [r1, #12]
 800a0a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0a8:	079d      	lsls	r5, r3, #30
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	d507      	bpl.n	800a0c0 <__smakebuf_r+0x1c>
 800a0b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	6163      	str	r3, [r4, #20]
 800a0bc:	b003      	add	sp, #12
 800a0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0c0:	ab01      	add	r3, sp, #4
 800a0c2:	466a      	mov	r2, sp
 800a0c4:	f7ff ffc8 	bl	800a058 <__swhatbuf_r>
 800a0c8:	9f00      	ldr	r7, [sp, #0]
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7fd f97a 	bl	80073c8 <_malloc_r>
 800a0d4:	b948      	cbnz	r0, 800a0ea <__smakebuf_r+0x46>
 800a0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0da:	059a      	lsls	r2, r3, #22
 800a0dc:	d4ee      	bmi.n	800a0bc <__smakebuf_r+0x18>
 800a0de:	f023 0303 	bic.w	r3, r3, #3
 800a0e2:	f043 0302 	orr.w	r3, r3, #2
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	e7e2      	b.n	800a0b0 <__smakebuf_r+0xc>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	6020      	str	r0, [r4, #0]
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0fa:	b15b      	cbz	r3, 800a114 <__smakebuf_r+0x70>
 800a0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a100:	4630      	mov	r0, r6
 800a102:	f000 f81d 	bl	800a140 <_isatty_r>
 800a106:	b128      	cbz	r0, 800a114 <__smakebuf_r+0x70>
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	f023 0303 	bic.w	r3, r3, #3
 800a10e:	f043 0301 	orr.w	r3, r3, #1
 800a112:	81a3      	strh	r3, [r4, #12]
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	431d      	orrs	r5, r3
 800a118:	81a5      	strh	r5, [r4, #12]
 800a11a:	e7cf      	b.n	800a0bc <__smakebuf_r+0x18>

0800a11c <_fstat_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d07      	ldr	r5, [pc, #28]	@ (800a13c <_fstat_r+0x20>)
 800a120:	2300      	movs	r3, #0
 800a122:	4604      	mov	r4, r0
 800a124:	4608      	mov	r0, r1
 800a126:	4611      	mov	r1, r2
 800a128:	602b      	str	r3, [r5, #0]
 800a12a:	f7f8 fe8f 	bl	8002e4c <_fstat>
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	d102      	bne.n	800a138 <_fstat_r+0x1c>
 800a132:	682b      	ldr	r3, [r5, #0]
 800a134:	b103      	cbz	r3, 800a138 <_fstat_r+0x1c>
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	bd38      	pop	{r3, r4, r5, pc}
 800a13a:	bf00      	nop
 800a13c:	2001e714 	.word	0x2001e714

0800a140 <_isatty_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d06      	ldr	r5, [pc, #24]	@ (800a15c <_isatty_r+0x1c>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	f7f8 fe8e 	bl	8002e6c <_isatty>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_isatty_r+0x1a>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_isatty_r+0x1a>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	2001e714 	.word	0x2001e714

0800a160 <_init>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr

0800a16c <_fini>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr
