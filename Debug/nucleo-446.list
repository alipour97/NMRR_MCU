
nucleo-446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08009e30  08009e30  0000ae30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d8  0800a2d8  0000c470  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e0  0800a2e0  0000c470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e4  0800a2e4  0000b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800a2e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de8  20000470  0800a758  0000c470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  0800a758  0000d258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147cb  00000000  00000000  0000c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d60  00000000  00000000  00020c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000239d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7d  00000000  00000000  00024b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b40  00000000  00000000  00025885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001621f  00000000  00000000  000493c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c71  00000000  00000000  0005f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a20  00000000  00000000  00136298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000470 	.word	0x20000470
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e18 	.word	0x08009e18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000474 	.word	0x20000474
 800020c:	08009e18 	.word	0x08009e18

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <ad717x_set_channel_status>:
 *			    	and False in case of Disable
 * @return Returns 0 for success or negative error code in case of failure.
*******************************************************************************/
int ad717x_set_channel_status(ad717x_dev *device, uint8_t channel_id,
			      bool channel_status)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *chn_register;
	int ret;

	if (!device)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <ad717x_set_channel_status+0x1a>
		return -EINVAL;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f10:	e031      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	/* Point to the Channel register */
	chn_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	3310      	adds	r3, #16
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fa40 	bl	80013a0 <AD717X_GetReg>
 8000f20:	60f8      	str	r0, [r7, #12]
	if (!chn_register)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <ad717x_set_channel_status+0x34>
		return -EINVAL;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <ad717x_set_channel_status+0x88>)
 8000f2a:	e024      	b.n	8000f76 <ad717x_set_channel_status+0x7e>

	if (channel_status)
 8000f2c:	78bb      	ldrb	r3, [r7, #2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <ad717x_set_channel_status+0x48>
		/* Assign the Channel enable bit and write to channel register */
		chn_register->value |= AD717X_CHMAP_REG_CH_EN;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	e005      	b.n	8000f4c <ad717x_set_channel_status+0x54>
	else
		chn_register->value &= ~(AD717X_CHMAP_REG_CH_EN);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id);
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fae3 	bl	8001520 <AD717X_WriteRegister>
 8000f5a:	60b8      	str	r0, [r7, #8]
	if (ret < 0)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da01      	bge.n	8000f66 <ad717x_set_channel_status+0x6e>
		return ret;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	e007      	b.n	8000f76 <ad717x_set_channel_status+0x7e>
	device->chan_map[channel_id].channel_enable = channel_status;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	330a      	adds	r3, #10
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	78ba      	ldrb	r2, [r7, #2]
 8000f72:	719a      	strb	r2, [r3, #6]

	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	ffffd929 	.word	0xffffd929

08000f84 <ad717x_set_adc_mode>:
 * @param device - AD717x Device Descriptor
 * @param adc_mode - ADC Mode to be configured
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_adc_mode(ad717x_dev *device, enum ad717x_mode adc_mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <ad717x_set_adc_mode+0x16>
		return -EINVAL;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000f98:	e026      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Retrieve the ADC Mode reigster */
	adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f9ff 	bl	80013a0 <AD717X_GetReg>
 8000fa2:	60f8      	str	r0, [r7, #12]
	if (!adc_mode_reg)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <ad717x_set_adc_mode+0x2a>
		return -EINVAL;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fac:	e01c      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>

	/* Clear the Mode[6:4] bits in the ADC Mode Register */
	adc_mode_reg->value &= ~(AD717X_ADCMODE_REG_MODE_MSK);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	605a      	str	r2, [r3, #4]

	/* Set the required conversion mode, write to register */
	adc_mode_reg->value |= AD717X_ADCMODE_REG_MODE(adc_mode);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	605a      	str	r2, [r3, #4]
	device->mode = adc_mode;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 faa2 	bl	8001520 <AD717X_WriteRegister>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da01      	bge.n	8000fe6 <ad717x_set_adc_mode+0x62>
		return -EINVAL;
 8000fe2:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <ad717x_set_adc_mode+0x6c>)
 8000fe4:	e000      	b.n	8000fe8 <ad717x_set_adc_mode+0x64>



	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffd929 	.word	0xffffd929

08000ff4 <ad717x_connect_analog_input>:
 * @param analog_input - Analog Inputs to the Channel
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_connect_analog_input(ad717x_dev *device, uint8_t channel_id,
				union ad717x_analog_inputs analog_input)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803a      	strh	r2, [r7, #0]
 8001000:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *channel_reg;

	if (!device)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <ad717x_connect_analog_input+0x18>
		return -EINVAL;
 8001008:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 800100a:	e079      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	/* Retrieve the channel register */
	channel_reg = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	3310      	adds	r3, #16
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f9c3 	bl	80013a0 <AD717X_GetReg>
 800101a:	60f8      	str	r0, [r7, #12]
	if (!channel_reg)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <ad717x_connect_analog_input+0x32>
		return -EINVAL;
 8001022:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001024:	e06c      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

	switch ((uint8_t)device->active_device) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	2b04      	cmp	r3, #4
 800102c:	dc02      	bgt.n	8001034 <ad717x_connect_analog_input+0x40>
 800102e:	2b00      	cmp	r3, #0
 8001030:	da04      	bge.n	800103c <ad717x_connect_analog_input+0x48>
 8001032:	e062      	b.n	80010fa <ad717x_connect_analog_input+0x106>
 8001034:	3b05      	subs	r3, #5
 8001036:	2b06      	cmp	r3, #6
 8001038:	d85f      	bhi.n	80010fa <ad717x_connect_analog_input+0x106>
 800103a:	e024      	b.n	8001086 <ad717x_connect_analog_input+0x92>
	case ID_AD4112 :
	case ID_AD4114 :
	case ID_AD4115 :
	case ID_AD4116 :
		/* Clear and Set the required analog input pair to channel */
		channel_reg->value  &= ~AD717x_CHANNEL_INPUT_MASK;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	6053      	str	r3, [r2, #4]
		channel_reg->value |= AD4111_CHMAP_REG_INPUT(analog_input.analog_input_pairs);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001056:	431a      	orrs	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3310      	adds	r3, #16
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fa5b 	bl	8001520 <AD717X_WriteRegister>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da01      	bge.n	8001074 <ad717x_connect_analog_input+0x80>
			return -EINVAL;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 8001072:	e045      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001074:	78fb      	ldrb	r3, [r7, #3]
			analog_input.analog_input_pairs;
 8001076:	8839      	ldrh	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	330a      	adds	r3, #10
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	460a      	mov	r2, r1
 8001082:	811a      	strh	r2, [r3, #8]
		break;
 8001084:	e03b      	b.n	80010fe <ad717x_connect_analog_input+0x10a>
	case ID_AD7175_8:
	case ID_AD7176_2:
	case ID_AD7177_2:
	case ID_AD7172_2:
		/* Select the Positive Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINPOS_MSK;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]
		channel_reg->value |=  AD717X_CHMAP_REG_AINPOS(
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	783b      	ldrb	r3, [r7, #0]
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
					       analog_input.ainp.pos_analog_input);

		/* Select the Negative Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINNEG_MSK;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 021f 	bic.w	r2, r3, #31
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	605a      	str	r2, [r3, #4]
		channel_reg->value |= AD717X_CHMAP_REG_AINNEG(
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	431a      	orrs	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	605a      	str	r2, [r3, #4]
					      analog_input.ainp.neg_analog_input);
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	3310      	adds	r3, #16
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fa29 	bl	8001520 <AD717X_WriteRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da01      	bge.n	80010d8 <ad717x_connect_analog_input+0xe4>
			return -EINVAL;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010d6:	e013      	b.n	8001100 <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010d8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.pos_analog_input;
 80010da:	7839      	ldrb	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	330a      	adds	r3, #10
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	460a      	mov	r2, r1
 80010e6:	721a      	strb	r2, [r3, #8]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010e8:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.neg_analog_input;
 80010ea:	7879      	ldrb	r1, [r7, #1]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	330a      	adds	r3, #10
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	725a      	strb	r2, [r3, #9]
		break;
 80010f8:	e001      	b.n	80010fe <ad717x_connect_analog_input+0x10a>

	default :
		return -EINVAL;
 80010fa:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <ad717x_connect_analog_input+0x114>)
 80010fc:	e000      	b.n	8001100 <ad717x_connect_analog_input+0x10c>
	}

	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	ffffd929 	.word	0xffffd929

0800110c <ad717x_assign_setup>:
 * @param channel_id - Channel ID (number)
 * @param setup - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_assign_setup(ad717x_dev *device, uint8_t channel_id, uint8_t setup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *p_register;

	if (!device)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <ad717x_assign_setup+0x1a>
		return -EINVAL;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001124:	e02f      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Retrieve the Channel Register */
	p_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	3310      	adds	r3, #16
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f936 	bl	80013a0 <AD717X_GetReg>
 8001134:	60f8      	str	r0, [r7, #12]
	if (!p_register)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <ad717x_assign_setup+0x34>
		return -EINVAL;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <ad717x_assign_setup+0x84>)
 800113e:	e022      	b.n	8001186 <ad717x_assign_setup+0x7a>

	/* Assign set up to the chosen channel */
	p_register->value &= ~AD717X_CHMAP_REG_SETUP_SEL_MSK;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
	p_register->value |= AD717X_CHMAP_REG_SETUP_SEL(setup);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	78bb      	ldrb	r3, [r7, #2]
 8001152:	031b      	lsls	r3, r3, #12
 8001154:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	3310      	adds	r3, #16
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9da 	bl	8001520 <AD717X_WriteRegister>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <ad717x_assign_setup+0x6a>
		return -EINVAL;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <ad717x_assign_setup+0x84>)
 8001174:	e007      	b.n	8001186 <ad717x_assign_setup+0x7a>
	device->chan_map[channel_id].setup_sel = setup;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	330a      	adds	r3, #10
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	78ba      	ldrb	r2, [r7, #2]
 8001182:	71da      	strb	r2, [r3, #7]

	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	ffffd929 	.word	0xffffd929

08001194 <ad717x_set_polarity>:
 * @param bipolar - Polarity Select:True in case of Bipolar, False in case of Unipolar
 * @param setup_id - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_set_polarity(ad717x_dev* device, bool bipolar, uint8_t setup_id)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;

	if (!device)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <ad717x_set_polarity+0x1a>
		return -EINVAL;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011ac:	e030      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	3320      	adds	r3, #32
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8f2 	bl	80013a0 <AD717X_GetReg>
 80011bc:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <ad717x_set_polarity+0x34>
		return -EINVAL;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011c6:	e023      	b.n	8001210 <ad717x_set_polarity+0x7c>

	/* Set the BI_UNIPOLAR bit in case of BIPOLAR operation */
	if (bipolar)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <ad717x_set_polarity+0x48>
		setup_reg->value |= AD717X_SETUP_CONF_REG_BI_UNIPOLAR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e005      	b.n	80011e8 <ad717x_set_polarity+0x54>
	else
		setup_reg->value &= ~(AD717X_SETUP_CONF_REG_BI_UNIPOLAR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	3320      	adds	r3, #32
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f995 	bl	8001520 <AD717X_WriteRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da01      	bge.n	8001200 <ad717x_set_polarity+0x6c>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <ad717x_set_polarity+0x84>)
 80011fe:	e007      	b.n	8001210 <ad717x_set_polarity+0x7c>
	device->setups[setup_id].bi_unipolar = bipolar;
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	3302      	adds	r3, #2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	715a      	strb	r2, [r3, #5]

	return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	ffffd929 	.word	0xffffd929

0800121c <ad717x_set_reference_source>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_reference_source(ad717x_dev* device,
				enum ad717x_reference_source ref_source, uint8_t setup_id)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <ad717x_set_reference_source+0x1a>
		return -EINVAL;
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001234:	e04e      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	3320      	adds	r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8ae 	bl	80013a0 <AD717X_GetReg>
 8001244:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <ad717x_set_reference_source+0x34>
		return -EINVAL;
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 800124e:	e041      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

	/* Choose the reference source for the selected setup */
	setup_reg->value &= ~AD717X_SETUP_CONF_REG_REF_SEL_MSK;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
	setup_reg->value |= (AD717X_SETUP_CONF_REG_REF_SEL(ref_source));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	3320      	adds	r3, #32
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f952 	bl	8001520 <AD717X_WriteRegister>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	da01      	bge.n	8001286 <ad717x_set_reference_source+0x6a>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 8001284:	e026      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
	device->setups[setup_id].ref_source = ref_source;
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	721a      	strb	r2, [r3, #8]

	/* Enable the REF_EN Bit in case of Internal reference */
	if (ref_source == INTERNAL_REF) {
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d11b      	bne.n	80012d2 <ad717x_set_reference_source+0xb6>
		/* Retrieve the ADC Mode reigster */
		adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f87f 	bl	80013a0 <AD717X_GetReg>
 80012a2:	60b8      	str	r0, [r7, #8]
		if (!adc_mode_reg)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <ad717x_set_reference_source+0x92>
			return -EINVAL;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ac:	e012      	b.n	80012d4 <ad717x_set_reference_source+0xb8>

		/* Set the REF_EN Bit */
		adc_mode_reg->value |= AD717X_ADCMODE_REG_REF_EN;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f92f 	bl	8001520 <AD717X_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da01      	bge.n	80012cc <ad717x_set_reference_source+0xb0>
			return -EINVAL;
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <ad717x_set_reference_source+0xc0>)
 80012ca:	e003      	b.n	80012d4 <ad717x_set_reference_source+0xb8>
		device->ref_en = true;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	72da      	strb	r2, [r3, #11]
	}

	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	ffffd929 	.word	0xffffd929

080012e0 <ad717x_enable_input_buffer>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_enable_input_buffer(ad717x_dev* device,
			       bool inbuf_en, bool refbuf_en, uint8_t setup_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	70fb      	strb	r3, [r7, #3]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70bb      	strb	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	707b      	strb	r3, [r7, #1]
	ad717x_st_reg* setup_reg;

	if (!device)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <ad717x_enable_input_buffer+0x24>
		return -EINVAL;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001302:	e047      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	3320      	adds	r3, #32
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f847 	bl	80013a0 <AD717X_GetReg>
 8001312:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <ad717x_enable_input_buffer+0x3e>
		return -EINVAL;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 800131c:	e03a      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>

	if (inbuf_en)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <ad717x_enable_input_buffer+0x52>
		/* Enable input buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_AINBUF_P |
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	e005      	b.n	800133e <ad717x_enable_input_buffer+0x5e>
				     AD717X_SETUP_CONF_REG_AINBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_AINBUF_P |
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_AINBUF_N));
	if (refbuf_en)
 800133e:	78bb      	ldrb	r3, [r7, #2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <ad717x_enable_input_buffer+0x72>
		/* Enable reference buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_REFBUF_P |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f443 6240 	orr.w	r2, r3, #3072	@ 0xc00
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	e005      	b.n	800135e <ad717x_enable_input_buffer+0x7e>
				     AD717X_SETUP_CONF_REG_REFBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_REFBUF_P |
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_REFBUF_N));

	if (AD717X_WriteRegister(device,
 800135e:	787b      	ldrb	r3, [r7, #1]
 8001360:	3320      	adds	r3, #32
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f8da 	bl	8001520 <AD717X_WriteRegister>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	da01      	bge.n	8001376 <ad717x_enable_input_buffer+0x96>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <ad717x_enable_input_buffer+0xbc>)
 8001374:	e00e      	b.n	8001394 <ad717x_enable_input_buffer+0xb4>
	device->setups[setup_id].input_buff = inbuf_en;
 8001376:	787b      	ldrb	r3, [r7, #1]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	71da      	strb	r2, [r3, #7]
	device->setups[setup_id].ref_buff = refbuf_en;
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	78ba      	ldrb	r2, [r7, #2]
 8001390:	719a      	strb	r2, [r3, #6]

	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	ffffd929 	.word	0xffffd929

080013a0 <AD717X_GetReg>:
*
* @return A pointer to the register if found or 0.
*******************************************************************************/
ad717x_st_reg *AD717X_GetReg(ad717x_dev *device,
			     uint8_t reg_address)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	ad717x_st_reg *reg = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]

	if (!device || !device->regs)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <AD717X_GetReg+0x1e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <AD717X_GetReg+0x22>
		return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e021      	b.n	8001406 <AD717X_GetReg+0x66>

	for (i = 0; i < device->num_regs; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e018      	b.n	80013fa <AD717X_GetReg+0x5a>
		if (device->regs[i].addr == reg_address) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d109      	bne.n	80013f4 <AD717X_GetReg+0x54>
			reg = &device->regs[i];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	60bb      	str	r3, [r7, #8]
			break;
 80013f2:	e007      	b.n	8001404 <AD717X_GetReg+0x64>
	for (i = 0; i < device->num_regs; i++) {
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a1b      	ldrb	r3, [r3, #8]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3e1      	bcc.n	80013c8 <AD717X_GetReg+0x28>
		}
	}

	return reg;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <AD717X_ReadRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_ReadRegister(ad717x_dev *device,
			    uint8_t addr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	@ 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	int32_t ret       = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t Tx = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t Rx [8] = {0};
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
//	uint8_t i         = 0;
//	uint8_t check8    = 0;
//	uint8_t msgBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	ad717x_st_reg *pReg;

	if(!device)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <AD717X_ReadRegister+0x2a>
		return INVALID_VAL;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	e063      	b.n	8001506 <AD717X_ReadRegister+0xf2>

	pReg = AD717X_GetReg(device, addr);
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	4619      	mov	r1, r3
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffac 	bl	80013a0 <AD717X_GetReg>
 8001448:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (!pReg)
 800144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <AD717X_ReadRegister+0x42>
		return INVALID_VAL;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	e057      	b.n	8001506 <AD717X_ReadRegister+0xf2>

	/* Build the Command word */
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
		    AD717X_COMM_REG_RA(pReg->addr);
 8001456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001460:	b25b      	sxtb	r3, r3
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
 8001462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 800146c:	701a      	strb	r2, [r3, #0]
	Tx = spi_read_reg.Tx;
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	spi_read_reg.pReg = pReg;
 8001476:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <AD717X_ReadRegister+0xfc>)
 8001478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147a:	6053      	str	r3, [r2, #4]
//	spi_read_reg.size = pReg->size;

	/* Read data from the device */

	if(device->mode == CONTINUOUS)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d103      	bne.n	800148e <AD717X_ReadRegister+0x7a>
		spi_status = READING;
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <AD717X_ReadRegister+0x100>)
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e03a      	b.n	8001504 <AD717X_ReadRegister+0xf0>
	else
	{
		HAL_SPI_Transmit(SPI, &Tx, 1, 100);
 800148e:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8001492:	2364      	movs	r3, #100	@ 0x64
 8001494:	2201      	movs	r2, #1
 8001496:	4820      	ldr	r0, [pc, #128]	@ (8001518 <AD717X_ReadRegister+0x104>)
 8001498:	f003 fa11 	bl	80048be <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0120 	add.w	r1, r7, #32
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <AD717X_ReadRegister+0x104>)
 80014aa:	f003 fb4c 	bl	8004b46 <HAL_SPI_Receive>
		pReg->value = 0;
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b8:	e011      	b.n	80014de <AD717X_ReadRegister+0xca>
			pReg->value <<= 8;
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	021a      	lsls	r2, r3, #8
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c2:	605a      	str	r2, [r3, #4]
			pReg->value += Rx[i];
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f107 0120 	add.w	r1, r7, #32
 80014cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014ce:	440a      	add	r2, r1
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	441a      	add	r2, r3
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80014d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014da:	3301      	adds	r3, #1
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbe8      	blt.n	80014ba <AD717X_ReadRegister+0xa6>
		}
		char hexString[24];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	461a      	mov	r2, r3
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	490a      	ldr	r1, [pc, #40]	@ (800151c <AD717X_ReadRegister+0x108>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 fbf9 	bl	8007cec <siprintf>
		send_string(hexString);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fafa 	bl	8001af8 <send_string>
	*/
	/* Build the result */

//	}

	return ret;
 8001504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001506:	4618      	mov	r0, r3
 8001508:	3738      	adds	r7, #56	@ 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200010ec 	.word	0x200010ec
 8001514:	200010e8 	.word	0x200010e8
 8001518:	2000048c 	.word	0x2000048c
 800151c:	08009e30 	.word	0x08009e30

08001520 <AD717X_WriteRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_WriteRegister(ad717x_dev *device,
			     uint8_t addr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	int32_t ret      = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
	int32_t regValue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint8_t wrBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001534:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <AD717X_WriteRegister+0xe0>)
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i        = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	76fb      	strb	r3, [r7, #27]
//	uint8_t crc8     = 0;
	ad717x_st_reg *preg;

	if(!device)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <AD717X_WriteRegister+0x32>
		return INVALID_VAL;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e051      	b.n	80015f6 <AD717X_WriteRegister+0xd6>

	preg = AD717X_GetReg(device, addr);
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff22 	bl	80013a0 <AD717X_GetReg>
 800155c:	6138      	str	r0, [r7, #16]
	if (!preg)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <AD717X_WriteRegister+0x4a>
		return INVALID_VAL;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e045      	b.n	80015f6 <AD717X_WriteRegister+0xd6>

	/* Build the Command word */
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
		   AD717X_COMM_REG_RA(preg->addr);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	681b      	ldr	r3, [r3, #0]
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001574:	b2db      	uxtb	r3, r3
 8001576:	723b      	strb	r3, [r7, #8]

	/* Fill the write buffer */
	regValue = preg->value;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	76fb      	strb	r3, [r7, #27]
 8001582:	e00f      	b.n	80015a4 <AD717X_WriteRegister+0x84>
		wrBuf[preg->size - i] = regValue & 0xFF;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	7efb      	ldrb	r3, [r7, #27]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	3320      	adds	r3, #32
 8001592:	443b      	add	r3, r7
 8001594:	f803 2c18 	strb.w	r2, [r3, #-24]
		regValue >>= 8;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	121b      	asrs	r3, r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800159e:	7efb      	ldrb	r3, [r7, #27]
 80015a0:	3301      	adds	r3, #1
 80015a2:	76fb      	strb	r3, [r7, #27]
 80015a4:	7efa      	ldrb	r2, [r7, #27]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbea      	blt.n	8001584 <AD717X_WriteRegister+0x64>
	/* Write data to the device */
//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       (device->useCRC != AD717X_DISABLE) ?
//				       preg->size + 2 : preg->size + 1);
	memcpy(spi_write_reg.Tx, wrBuf, 8);
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <AD717X_WriteRegister+0xe4>)
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ba:	e882 0003 	stmia.w	r2, {r0, r1}
	spi_write_reg.pReg = preg;
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <AD717X_WriteRegister+0xe4>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	60d3      	str	r3, [r2, #12]
//			ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
//
//		}
//
//	}
	if(device->mode == CONTINUOUS)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <AD717X_WriteRegister+0xb6>
		spi_status = WRITING;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <AD717X_WriteRegister+0xe8>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e00c      	b.n	80015f0 <AD717X_WriteRegister+0xd0>
	else
	{
		ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 0108 	add.w	r1, r7, #8
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <AD717X_WriteRegister+0xec>)
 80015e8:	f003 f969 	bl	80048be <HAL_SPI_Transmit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]
	}
//	ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
	ret = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
	return ret;
 80015f4:	697b      	ldr	r3, [r7, #20]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	08009e48 	.word	0x08009e48
 8001604:	200010f4 	.word	0x200010f4
 8001608:	200010e8 	.word	0x200010e8
 800160c:	2000048c 	.word	0x2000048c

08001610 <AD717X_Reset>:
* @param device - The handler of the instance of the driver.
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Reset(ad717x_dev *device)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
	uint8_t wrBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <AD717X_Reset+0x40>)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001626:	e883 0003 	stmia.w	r3, {r0, r1}

	if(!device)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <AD717X_Reset+0x26>
		return INVALID_VAL;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	e007      	b.n	8001646 <AD717X_Reset+0x36>

//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       8);
	HAL_SPI_Transmit(SPI, wrBuf, 8, 100);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	2364      	movs	r3, #100	@ 0x64
 800163c:	2208      	movs	r2, #8
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <AD717X_Reset+0x44>)
 8001640:	f003 f93d 	bl	80048be <HAL_SPI_Transmit>
	return ret;
 8001644:	697b      	ldr	r3, [r7, #20]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	08009e50 	.word	0x08009e50
 8001654:	2000048c 	.word	0x2000048c

08001658 <AD717X_ComputeDataregSize>:
* @param device - The handler of the instance of the driver.
*
* @return 0in case of success or negative code in case of failure.
*******************************************************************************/
int32_t AD717X_ComputeDataregSize(ad717x_dev *device)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	ad717x_st_reg *reg_ptr;
	ad717x_st_reg *datareg_ptr;
	uint16_t case_var;

	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_IFMODE_REG);
 8001660:	2102      	movs	r1, #2
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe9c 	bl	80013a0 <AD717X_GetReg>
 8001668:	6178      	str	r0, [r7, #20]
	/* Get data register pointer */
	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
 800166a:	2104      	movs	r1, #4
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe97 	bl	80013a0 <AD717X_GetReg>
 8001672:	6138      	str	r0, [r7, #16]
	case_var = reg_ptr->value & (AD717X_IFMODE_REG_DATA_STAT |
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 800167e:	81fb      	strh	r3, [r7, #14]
				     AD717X_IFMODE_REG_DATA_WL16);

	/* Compute data register size */
	datareg_ptr->size = 3;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2203      	movs	r2, #3
 8001684:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_WL16) == AD717X_IFMODE_REG_DATA_WL16)
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <AD717X_ComputeDataregSize+0x42>
		datareg_ptr->size--;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_STAT) == AD717X_IFMODE_REG_DATA_STAT)
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <AD717X_ComputeDataregSize+0x56>
		datareg_ptr->size++;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]

	/* Get ID register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_ID_REG);
 80016ae:	2107      	movs	r1, #7
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe75 	bl	80013a0 <AD717X_GetReg>
 80016b6:	6178      	str	r0, [r7, #20]

	/* If the part is 32/24 bit wide add a byte to the read */
	if((reg_ptr->value & AD717X_ID_REG_MASK) == AD7177_2_ID_REG_VALUE)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80016c0:	4013      	ands	r3, r2
 80016c2:	f644 72d0 	movw	r2, #20432	@ 0x4fd0
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d104      	bne.n	80016d4 <AD717X_ComputeDataregSize+0x7c>
		datareg_ptr->size++;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <ad717x_configure_device_odr>:
 * @return 0 in case of success, negative error code otherwise
 */
int32_t ad717x_configure_device_odr(ad717x_dev *dev,
				    uint8_t filtcon_id,
				    uint8_t odr_sel)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *filtcon_reg;
	int32_t ret;

	/* Retrieve the FILTCON register */
	filtcon_reg = AD717X_GetReg(dev,
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	3328      	adds	r3, #40	@ 0x28
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe51 	bl	80013a0 <AD717X_GetReg>
 80016fe:	60f8      	str	r0, [r7, #12]
				    AD717X_FILTCON0_REG + filtcon_id);
	if (!filtcon_reg) {
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <ad717x_configure_device_odr+0x2a>
		return -EINVAL;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <ad717x_configure_device_odr+0x6c>)
 8001708:	e01b      	b.n	8001742 <ad717x_configure_device_odr+0x62>
	}

	/* Clear the ODR bits, configure the requested ODR */
	filtcon_reg->value &= ~(AD717x_ODR_MSK);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 021f 	bic.w	r2, r3, #31
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
	filtcon_reg->value |= AD717X_FILT_CONF_REG_ODR(odr_sel);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	431a      	orrs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(dev, AD717X_FILTCON0_REG + filtcon_id);
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	3328      	adds	r3, #40	@ 0x28
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fef6 	bl	8001520 <AD717X_WriteRegister>
 8001734:	60b8      	str	r0, [r7, #8]
	if (ret) {
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <ad717x_configure_device_odr+0x60>
		return ret;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	e000      	b.n	8001742 <ad717x_configure_device_odr+0x62>
	}

	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	ffffd929 	.word	0xffffd929

08001750 <AD717X_Init>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Init(ad717x_dev **device,
		    ad717x_init_param init_param)
{
 8001750:	b084      	sub	sp, #16
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800175e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;
	ad717x_st_reg *preg;
	uint8_t setup_index;
	uint8_t ch_index;

	dev = (ad717x_dev *)malloc(sizeof(*dev));
 8001762:	20bc      	movs	r0, #188	@ 0xbc
 8001764:	f005 fc72 	bl	800704c <malloc>
 8001768:	4603      	mov	r3, r0
 800176a:	613b      	str	r3, [r7, #16]
	if (!dev)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <AD717X_Init+0x28>
		return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e07d      	b.n	8001874 <AD717X_Init+0x124>

	dev->regs = init_param.regs;
 8001778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
	dev->num_regs = init_param.num_regs;
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	721a      	strb	r2, [r3, #8]
//	ret = no_os_spi_init(&dev->spi_desc, &init_param.spi_init);
//	if (ret < 0)
//		return ret;

	/*  Reset the device interface.*/
	ret = AD717X_Reset(dev);
 8001786:	6938      	ldr	r0, [r7, #16]
 8001788:	f7ff ff42 	bl	8001610 <AD717X_Reset>
 800178c:	60f8      	str	r0, [r7, #12]
	if (ret < 0)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da01      	bge.n	8001798 <AD717X_Init+0x48>
		return ret;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	e06d      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize ADC mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
	if(ret < 0)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	da01      	bge.n	80017a2 <AD717X_Init+0x52>
		return ret;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	e068      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize Interface mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
	if(ret < 0)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da01      	bge.n	80017ac <AD717X_Init+0x5c>
		return ret;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e063      	b.n	8001874 <AD717X_Init+0x124>

	/* Get CRC State */
//	ret = AD717X_UpdateCRCSetting(dev);
	if(ret < 0)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da01      	bge.n	80017b6 <AD717X_Init+0x66>
		return ret;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	e05e      	b.n	8001874 <AD717X_Init+0x124>

	/* Initialize registers AD717X_GPIOCON_REG through AD717X_OFFSET0_REG */
	preg = AD717X_GetReg(dev, AD717X_GPIOCON_REG);
 80017b6:	2106      	movs	r1, #6
 80017b8:	6938      	ldr	r0, [r7, #16]
 80017ba:	f7ff fdf1 	bl	80013a0 <AD717X_GetReg>
 80017be:	60b8      	str	r0, [r7, #8]
	if (!preg)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <AD717X_Init+0x7c>
		return INVALID_VAL;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e053      	b.n	8001874 <AD717X_Init+0x124>
//			break;
//		preg ++;
//	}

	/* Read ID register to identify the part */
	ret = AD717X_ReadRegister(dev, AD717X_ID_REG);
 80017cc:	2107      	movs	r1, #7
 80017ce:	6938      	ldr	r0, [r7, #16]
 80017d0:	f7ff fe20 	bl	8001414 <AD717X_ReadRegister>
 80017d4:	60f8      	str	r0, [r7, #12]
	if(ret < 0)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da01      	bge.n	80017e0 <AD717X_Init+0x90>
		return ret;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	e049      	b.n	8001874 <AD717X_Init+0x124>
	dev->active_device = init_param.active_device;
 80017e0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	729a      	strb	r2, [r3, #10]
	dev->num_channels = init_param.num_channels;
 80017e8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	731a      	strb	r2, [r3, #12]

	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
 80017f4:	e016      	b.n	8001824 <AD717X_Init+0xd4>
		/* Set Polarity */
//		ret = ad717x_set_polarity(dev, init_param.setups[setup_index].bi_unipolar,
//					  setup_index);
		if (ret < 0)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da01      	bge.n	8001800 <AD717X_Init+0xb0>
			return ret;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e039      	b.n	8001874 <AD717X_Init+0x124>

		/* Select the reference source */
//		ret = ad717x_set_reference_source(dev,
//						  init_param.setups[setup_index].ref_source, setup_index);
		if (ret < 0)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da01      	bge.n	800180a <AD717X_Init+0xba>
			return ret;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	e034      	b.n	8001874 <AD717X_Init+0x124>
		/* Enable reference and input buffers */
//		ret = ad717x_enable_input_buffer(dev,
//						 init_param.setups[setup_index].input_buff,
//						 init_param.setups[setup_index].ref_buff,
//						 setup_index);
		if (ret < 0)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da01      	bge.n	8001814 <AD717X_Init+0xc4>
			return ret;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e02f      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_configure_device_odr(dev, setup_index,
//						  init_param.filter_configuration[setup_index].odr);
		if (ret < 0)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	da01      	bge.n	800181e <AD717X_Init+0xce>
			return ret;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e02a      	b.n	8001874 <AD717X_Init+0x124>
	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	3301      	adds	r3, #1
 8001822:	75fb      	strb	r3, [r7, #23]
 8001824:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001828:	7dfa      	ldrb	r2, [r7, #23]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3e3      	bcc.n	80017f6 <AD717X_Init+0xa6>
	}

	/* Set Conversion Mode */
//	ret = ad717x_set_adc_mode(dev, init_param.mode);
	if (ret < 0)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da01      	bge.n	8001838 <AD717X_Init+0xe8>
		return ret;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	e01d      	b.n	8001874 <AD717X_Init+0x124>

	/*  Connect Analog Inputs, Assign Setup, Disable all channels */
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 8001838:	2300      	movs	r3, #0
 800183a:	75bb      	strb	r3, [r7, #22]
 800183c:	e011      	b.n	8001862 <AD717X_Init+0x112>
//		ret = ad717x_connect_analog_input(dev, ch_index,
//						  init_param.chan_map[ch_index].analog_inputs);
		if (ret < 0)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	da01      	bge.n	8001848 <AD717X_Init+0xf8>
			return ret;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	e015      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_assign_setup(dev, ch_index,
//					  init_param.chan_map[ch_index].setup_sel);
		if (ret < 0)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <AD717X_Init+0x102>
			return ret;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	e010      	b.n	8001874 <AD717X_Init+0x124>

//		ret = ad717x_set_channel_status(dev,ch_index,
//						init_param.chan_map[ch_index].channel_enable);
		if (ret < 0)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da01      	bge.n	800185c <AD717X_Init+0x10c>
			return ret;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	e00b      	b.n	8001874 <AD717X_Init+0x124>
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	3301      	adds	r3, #1
 8001860:	75bb      	strb	r3, [r7, #22]
 8001862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001866:	7dba      	ldrb	r2, [r7, #22]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3e8      	bcc.n	800183e <AD717X_Init+0xee>
	}
	*device = dev;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

	return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800187e:	b004      	add	sp, #16
 8001880:	4770      	bx	lr
	...

08001884 <ad717x_set_clock>:

	return ret;
}

void ad717x_set_clock(ad717x_dev *dev, uint32_t clcck_sel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	ad717x_st_reg *pReg = AD717X_GetReg(dev, AD717X_ADCMODE_REG);
 800188e:	2101      	movs	r1, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fd85 	bl	80013a0 <AD717X_GetReg>
 8001896:	60f8      	str	r0, [r7, #12]

	pReg->value |= AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	4313      	orrs	r3, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	605a      	str	r2, [r3, #4]
	spi_write_reg.value = AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <ad717x_set_clock+0x48>)
 80018b8:	6093      	str	r3, [r2, #8]
	AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe2f 	bl	8001520 <AD717X_WriteRegister>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200010f4 	.word	0x200010f4

080018d0 <ad717x_set_data_stat>:

void ad717x_set_data_stat(ad717x_dev *dev, bool stat)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *reg_ptr;
//	ad717x_st_reg *datareg_ptr;
	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(dev, AD717X_IFMODE_REG);
 80018dc:	2102      	movs	r1, #2
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd5e 	bl	80013a0 <AD717X_GetReg>
 80018e4:	60f8      	str	r0, [r7, #12]
	/* Get data register pointer */
//	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
	if(stat)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <ad717x_set_data_stat+0x2a>
		reg_ptr->value |= AD717X_IFMODE_REG_DATA_STAT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	e005      	b.n	8001906 <ad717x_set_data_stat+0x36>
	else
		reg_ptr->value &= ~(AD717X_IFMODE_REG_DATA_STAT);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
	AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
 8001906:	2102      	movs	r1, #2
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fe09 	bl	8001520 <AD717X_WriteRegister>
	AD717X_ComputeDataregSize(dev);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fea2 	bl	8001658 <AD717X_ComputeDataregSize>

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <adc_to_buf>:
#include "ad717x.h"

void send_adc_data();

void adc_to_buf(uint32_t new_val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
//	if(adc_buff_idx == 0 && adc_channel_offset > 0)
//	{
//		adc_channel_offset -= 2;
//		return;
//	}
	if(adc_channel_offset == 0)
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <adc_to_buf+0x94>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d116      	bne.n	800195a <adc_to_buf+0x3e>
	{
		time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
 800192c:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <adc_to_buf+0x98>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <adc_to_buf+0x9c>)
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	b292      	uxth	r2, r2
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	b292      	uxth	r2, r2
 800193a:	4611      	mov	r1, r2
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <adc_to_buf+0xa0>)
 8001940:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_buff[adc_buff_idx / 2] = new_val;
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <adc_to_buf+0x9c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <adc_to_buf+0xa4>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001958:	e015      	b.n	8001986 <adc_to_buf+0x6a>
	}
	else
	{
		tq_time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <adc_to_buf+0x98>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <adc_to_buf+0x9c>)
 8001960:	8812      	ldrh	r2, [r2, #0]
 8001962:	b292      	uxth	r2, r2
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	b292      	uxth	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <adc_to_buf+0xa8>)
 800196e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		tq_buff[adc_buff_idx / 2] = new_val;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <adc_to_buf+0x9c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <adc_to_buf+0xac>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	adc_buff_idx ++;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <adc_to_buf+0x9c>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <adc_to_buf+0x9c>)
 8001992:	801a      	strh	r2, [r3, #0]
	if(adc_buff_idx >= ADC_BUFFER_SIZE * ENABLED_CHANNELS)
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <adc_to_buf+0x9c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b63      	cmp	r3, #99	@ 0x63
 800199c:	d904      	bls.n	80019a8 <adc_to_buf+0x8c>
	{
		send_adc_data();
 800199e:	f000 f815 	bl	80019cc <send_adc_data>
		adc_buff_idx = 0;
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <adc_to_buf+0x9c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
//		TIM.Instance->CNT = 0;
	}
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200010e0 	.word	0x200010e0
 80019b4:	2000053c 	.word	0x2000053c
 80019b8:	200010dc 	.word	0x200010dc
 80019bc:	20000dbc 	.word	0x20000dbc
 80019c0:	20000e84 	.word	0x20000e84
 80019c4:	20000f4c 	.word	0x20000f4c
 80019c8:	20001014 	.word	0x20001014

080019cc <send_adc_data>:

void send_adc_data()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	int array_length = sizeof(uint32_t) * ADC_BUFFER_SIZE;
 80019d2:	23c8      	movs	r3, #200	@ 0xc8
 80019d4:	607b      	str	r3, [r7, #4]

	sprintf((char*)tx_buffer, "{fdb,\r\n");
 80019d6:	4920      	ldr	r1, [pc, #128]	@ (8001a58 <send_adc_data+0x8c>)
 80019d8:	4820      	ldr	r0, [pc, #128]	@ (8001a5c <send_adc_data+0x90>)
 80019da:	f006 f987 	bl	8007cec <siprintf>
	memcpy(tx_buffer + 7, (uint8_t*) time_buff, array_length);
 80019de:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <send_adc_data+0x94>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	491f      	ldr	r1, [pc, #124]	@ (8001a64 <send_adc_data+0x98>)
 80019e6:	f006 fa94 	bl	8007f12 <memcpy>
	memcpy(tx_buffer + 7 + array_length, (uint8_t*) adc_buff, array_length);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3307      	adds	r3, #7
 80019ee:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <send_adc_data+0x90>)
 80019f0:	4413      	add	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	491c      	ldr	r1, [pc, #112]	@ (8001a68 <send_adc_data+0x9c>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 fa8b 	bl	8007f12 <memcpy>
	memcpy(tx_buffer + 7 + 2 * array_length, (uint8_t*) tq_time_buff, array_length);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	3307      	adds	r3, #7
 8001a02:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <send_adc_data+0x90>)
 8001a04:	4413      	add	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4918      	ldr	r1, [pc, #96]	@ (8001a6c <send_adc_data+0xa0>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 fa81 	bl	8007f12 <memcpy>
	memcpy(tx_buffer + 7 + 3 * array_length, (uint8_t*) tq_buff, array_length);
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3307      	adds	r3, #7
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <send_adc_data+0x90>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4913      	ldr	r1, [pc, #76]	@ (8001a70 <send_adc_data+0xa4>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f006 fa75 	bl	8007f12 <memcpy>
	sprintf((char*)tx_buffer+ 7 + 4 * array_length, ",end}\r\n");
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <send_adc_data+0x90>)
 8001a30:	4413      	add	r3, r2
 8001a32:	4910      	ldr	r1, [pc, #64]	@ (8001a74 <send_adc_data+0xa8>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f006 f959 	bl	8007cec <siprintf>

	HAL_UART_Transmit_DMA(PC_UART, tx_buffer, 4 * array_length + 14);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	330e      	adds	r3, #14
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4904      	ldr	r1, [pc, #16]	@ (8001a5c <send_adc_data+0x90>)
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <send_adc_data+0xac>)
 8001a4c:	f004 f89e 	bl	8005b8c <HAL_UART_Transmit_DMA>
//	HAL_UART_Transmit(PC_UART, (uint8_t*)"{fb,", 4, 10);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)time_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)adc_buff, sizeof(uint32_t) * ADC_BUFFER_SIZE, 100);
//	HAL_UART_Transmit(PC_UART, (uint8_t*)",end}\r\n", 8, 10);
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	08009e58 	.word	0x08009e58
 8001a5c:	20000a8c 	.word	0x20000a8c
 8001a60:	20000a93 	.word	0x20000a93
 8001a64:	20000dbc 	.word	0x20000dbc
 8001a68:	20000e84 	.word	0x20000e84
 8001a6c:	20000f4c 	.word	0x20000f4c
 8001a70:	20001014 	.word	0x20001014
 8001a74:	08009e60 	.word	0x08009e60
 8001a78:	20000584 	.word	0x20000584

08001a7c <check_command>:
extern struct spi_write spi_write_reg;

extern ad717x_dev *pad717x_dev;
//extern enum SPI_STATUS spi_status;
extern int check_command(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0

	if(strchr((char*)uart_buffer, ',') != NULL)
 8001a82:	212c      	movs	r1, #44	@ 0x2c
 8001a84:	481a      	ldr	r0, [pc, #104]	@ (8001af0 <check_command+0x74>)
 8001a86:	f006 f99c 	bl	8007dc2 <strchr>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d022      	beq.n	8001ad6 <check_command+0x5a>
	{
		char *command;
		char *endptr = strchr((char*)uart_buffer, ',');
 8001a90:	212c      	movs	r1, #44	@ 0x2c
 8001a92:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <check_command+0x74>)
 8001a94:	f006 f995 	bl	8007dc2 <strchr>
 8001a98:	60f8      	str	r0, [r7, #12]
		int length = endptr - (char*)uart_buffer;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <check_command+0x74>)
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	60bb      	str	r3, [r7, #8]
		command = (char*) malloc(length);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f005 fad1 	bl	800704c <malloc>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	607b      	str	r3, [r7, #4]
		strncpy(command, (char*) (uart_buffer+1), length);
 8001aae:	4911      	ldr	r1, [pc, #68]	@ (8001af4 <check_command+0x78>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f006 f991 	bl	8007ddc <strncpy>
		command[length-1] = '\0';
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
		handle_command(command);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f844 	bl	8001b54 <handle_command>
		free(command);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f005 fac5 	bl	800705c <free>
		return 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e008      	b.n	8001ae8 <check_command+0x6c>
	}
	else if(strlen((char*) uart_buffer) > 200){
 8001ad6:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <check_command+0x74>)
 8001ad8:	f7fe fbfa 	bl	80002d0 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2bc8      	cmp	r3, #200	@ 0xc8
 8001ae0:	d901      	bls.n	8001ae6 <check_command+0x6a>
		reset_uart();
 8001ae2:	f000 f81d 	bl	8001b20 <reset_uart>
	}
	return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000068c 	.word	0x2000068c
 8001af4:	2000068d 	.word	0x2000068d

08001af8 <send_string>:

extern void send_string(const char *msg)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(PC_UART, (uint8_t *)msg, strlen(msg), 100);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fbe5 	bl	80002d0 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	2364      	movs	r3, #100	@ 0x64
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <send_string+0x24>)
 8001b10:	f003 ffb0 	bl	8005a74 <HAL_UART_Transmit>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000584 	.word	0x20000584

08001b20 <reset_uart>:

extern void reset_uart(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	strncpy((char*)uart_buffer, "", UART_BUFFER_SIZE);
 8001b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b28:	4907      	ldr	r1, [pc, #28]	@ (8001b48 <reset_uart+0x28>)
 8001b2a:	4808      	ldr	r0, [pc, #32]	@ (8001b4c <reset_uart+0x2c>)
 8001b2c:	f006 f956 	bl	8007ddc <strncpy>
	HAL_UART_DMAStop(PC_UART);
 8001b30:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <reset_uart+0x30>)
 8001b32:	f004 f8c0 	bl	8005cb6 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 8001b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3a:	4904      	ldr	r1, [pc, #16]	@ (8001b4c <reset_uart+0x2c>)
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <reset_uart+0x30>)
 8001b3e:	f004 f895 	bl	8005c6c <HAL_UART_Receive_DMA>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	08009e68 	.word	0x08009e68
 8001b4c:	2000068c 	.word	0x2000068c
 8001b50:	20000584 	.word	0x20000584

08001b54 <handle_command>:


extern void handle_command(char* txt_in)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	uint8_t addr = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t value = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
	char *command = txt_in;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	61fb      	str	r3, [r7, #28]
	char *addr_str = (char*)uart_buffer + strlen(command) + 2;
 8001b6a:	69f8      	ldr	r0, [r7, #28]
 8001b6c:	f7fe fbb0 	bl	80002d0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	3302      	adds	r3, #2
 8001b74:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf4 <handle_command+0x1a0>)
 8001b76:	4413      	add	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]

	char *endptr = strchr((char*)addr_str, ',');
 8001b7a:	212c      	movs	r1, #44	@ 0x2c
 8001b7c:	69b8      	ldr	r0, [r7, #24]
 8001b7e:	f006 f920 	bl	8007dc2 <strchr>
 8001b82:	6178      	str	r0, [r7, #20]
	int length = endptr - (char*)addr_str;
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	613b      	str	r3, [r7, #16]
	char *value_str = (char*)addr_str + length + 1;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
	if(strchr((char*)uart_buffer, '}') != NULL)
 8001b96:	217d      	movs	r1, #125	@ 0x7d
 8001b98:	4856      	ldr	r0, [pc, #344]	@ (8001cf4 <handle_command+0x1a0>)
 8001b9a:	f006 f912 	bl	8007dc2 <strchr>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a3 	beq.w	8001cec <handle_command+0x198>
	{
		addr = (uint8_t)strtoul(addr_str, NULL, 16);
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	2100      	movs	r1, #0
 8001baa:	69b8      	ldr	r0, [r7, #24]
 8001bac:	f005 fb7a 	bl	80072a4 <strtoul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		value = (uint32_t)strtoul(value_str, NULL, 16);
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	2100      	movs	r1, #0
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f005 fb72 	bl	80072a4 <strtoul>
 8001bc0:	6238      	str	r0, [r7, #32]
	} else return;
	if(!strcmp(command, "get_id")){
 8001bc2:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <handle_command+0x1a4>)
 8001bc4:	69f8      	ldr	r0, [r7, #28]
 8001bc6:	f7fe fb23 	bl	8000210 <strcmp>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <handle_command+0x84>
		spi_status = GETID;
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <handle_command+0x1a8>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e086      	b.n	8001ce6 <handle_command+0x192>
	}
	else if(!strcmp(command, "getreg"))
 8001bd8:	4949      	ldr	r1, [pc, #292]	@ (8001d00 <handle_command+0x1ac>)
 8001bda:	69f8      	ldr	r0, [r7, #28]
 8001bdc:	f7fe fb18 	bl	8000210 <strcmp>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d108      	bne.n	8001bf8 <handle_command+0xa4>
	{
		AD717X_ReadRegister(pad717x_dev, addr);
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <handle_command+0x1b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc0f 	bl	8001414 <AD717X_ReadRegister>
 8001bf6:	e076      	b.n	8001ce6 <handle_command+0x192>
	}
	else if(!strcmp(command, "writereg"))
 8001bf8:	4943      	ldr	r1, [pc, #268]	@ (8001d08 <handle_command+0x1b4>)
 8001bfa:	69f8      	ldr	r0, [r7, #28]
 8001bfc:	f7fe fb08 	bl	8000210 <strcmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d117      	bne.n	8001c36 <handle_command+0xe2>
	{
		ad717x_st_reg *pReg = AD717X_GetReg(pad717x_dev, addr);
 8001c06:	4b3f      	ldr	r3, [pc, #252]	@ (8001d04 <handle_command+0x1b0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fbc5 	bl	80013a0 <AD717X_GetReg>
 8001c16:	60b8      	str	r0, [r7, #8]
		pReg->value = value;
 8001c18:	6a3a      	ldr	r2, [r7, #32]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	605a      	str	r2, [r3, #4]
		spi_write_reg.value = value;
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d0c <handle_command+0x1b8>)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	6093      	str	r3, [r2, #8]
		AD717X_WriteRegister(pad717x_dev, addr);
 8001c24:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <handle_command+0x1b0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fc76 	bl	8001520 <AD717X_WriteRegister>
 8001c34:	e057      	b.n	8001ce6 <handle_command+0x192>
	}
	else if(!strcmp(command, "send"))
 8001c36:	4936      	ldr	r1, [pc, #216]	@ (8001d10 <handle_command+0x1bc>)
 8001c38:	69f8      	ldr	r0, [r7, #28]
 8001c3a:	f7fe fae9 	bl	8000210 <strcmp>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11b      	bne.n	8001c7c <handle_command+0x128>
	{
		if(spi_status != SENDING && adc_sm == ADC_IDLE)
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <handle_command+0x1a8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d00f      	beq.n	8001c6e <handle_command+0x11a>
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <handle_command+0x1c0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <handle_command+0x11a>
		{

			adc_buff_idx = 0;
 8001c58:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <handle_command+0x1c4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
			TIM.Instance->CNT = 0;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <handle_command+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
//			delay_us(100);
//			spi_status = READING;
//			adc_sm = ADC_READING;
//			AD717X_ReadRegister(pad717x_dev, 0x04);
//			adc_channel_offset = AD717X_GetReg(pad717x_dev, AD717X_STATUS_REG)->value & 0x000f;
			spi_status = SENDING;
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <handle_command+0x1a8>)
 8001c68:	2206      	movs	r2, #6
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e03b      	b.n	8001ce6 <handle_command+0x192>
//			ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
		}
		else
		{
			spi_status = IDLE;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <handle_command+0x1a8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
			adc_sm = ADC_IDLE;
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <handle_command+0x1c0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e034      	b.n	8001ce6 <handle_command+0x192>
		}
	}
	else if(!strcmp(command, "adc_mode"))
 8001c7c:	4928      	ldr	r1, [pc, #160]	@ (8001d20 <handle_command+0x1cc>)
 8001c7e:	69f8      	ldr	r0, [r7, #28]
 8001c80:	f7fe fac6 	bl	8000210 <strcmp>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <handle_command+0x148>
	{
//		if(addr == 0)
		ad717x_set_adc_mode(pad717x_dev, addr);
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <handle_command+0x1b0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f975 	bl	8000f84 <ad717x_set_adc_mode>
 8001c9a:	e024      	b.n	8001ce6 <handle_command+0x192>
	}
	else if(!strcmp(command, "dac_read"))
 8001c9c:	4921      	ldr	r1, [pc, #132]	@ (8001d24 <handle_command+0x1d0>)
 8001c9e:	69f8      	ldr	r0, [r7, #28]
 8001ca0:	f7fe fab6 	bl	8000210 <strcmp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <handle_command+0x162>
	{
		dac_readreg(addr);
 8001caa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fc74 	bl	800259c <dac_readreg>
 8001cb4:	e017      	b.n	8001ce6 <handle_command+0x192>
	}
	else if(!strcmp(command, "dac_write"))
 8001cb6:	491c      	ldr	r1, [pc, #112]	@ (8001d28 <handle_command+0x1d4>)
 8001cb8:	69f8      	ldr	r0, [r7, #28]
 8001cba:	f7fe faa9 	bl	8000210 <strcmp>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d108      	bne.n	8001cd6 <handle_command+0x182>
	{
		dac_writereg(addr, (uint16_t)value);
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fcac 	bl	800262c <dac_writereg>
 8001cd4:	e007      	b.n	8001ce6 <handle_command+0x192>
	}
	else{
		send_string("{Unknown msg,end}\r\n");
 8001cd6:	4815      	ldr	r0, [pc, #84]	@ (8001d2c <handle_command+0x1d8>)
 8001cd8:	f7ff ff0e 	bl	8001af8 <send_string>
		send_string(command);
 8001cdc:	69f8      	ldr	r0, [r7, #28]
 8001cde:	f7ff ff0b 	bl	8001af8 <send_string>
		reset_uart();
 8001ce2:	f7ff ff1d 	bl	8001b20 <reset_uart>
	}
	reset_uart();
 8001ce6:	f7ff ff1b 	bl	8001b20 <reset_uart>
 8001cea:	e000      	b.n	8001cee <handle_command+0x19a>
	} else return;
 8001cec:	bf00      	nop

}
 8001cee:	3728      	adds	r7, #40	@ 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000068c 	.word	0x2000068c
 8001cf8:	08009e6c 	.word	0x08009e6c
 8001cfc:	200010e8 	.word	0x200010e8
 8001d00:	08009e74 	.word	0x08009e74
 8001d04:	200010e4 	.word	0x200010e4
 8001d08:	08009e7c 	.word	0x08009e7c
 8001d0c:	200010f4 	.word	0x200010f4
 8001d10:	08009e88 	.word	0x08009e88
 8001d14:	200010e9 	.word	0x200010e9
 8001d18:	200010dc 	.word	0x200010dc
 8001d1c:	2000053c 	.word	0x2000053c
 8001d20:	08009e90 	.word	0x08009e90
 8001d24:	08009e9c 	.word	0x08009e9c
 8001d28:	08009ea8 	.word	0x08009ea8
 8001d2c:	08009eb4 	.word	0x08009eb4

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f000 ff97 	bl	8002c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 f8b9 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 fa33 	bl	80021a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d42:	f000 fa09 	bl	8002158 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d46:	f000 f9dd 	bl	8002104 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001d4a:	f000 f923 	bl	8001f94 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001d4e:	f000 f98d 	bl	800206c <MX_TIM2_Init>
  MX_SPI2_Init();
 8001d52:	f000 f955 	bl	8002000 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ad717x_app_initialize();
 8001d56:	f000 faa5 	bl	80022a4 <ad717x_app_initialize>


  ad717x_configure_device_odr(pad717x_dev, 0, sps_1007);
 8001d5a:	4b50      	ldr	r3, [pc, #320]	@ (8001e9c <main+0x16c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	220a      	movs	r2, #10
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fcbc 	bl	80016e0 <ad717x_configure_device_odr>
  HAL_Delay(10);
 8001d68:	200a      	movs	r0, #10
 8001d6a:	f000 ffe9 	bl	8002d40 <HAL_Delay>
  ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
 8001d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <main+0x16c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f905 	bl	8000f84 <ad717x_set_adc_mode>

  ad717x_set_clock(pad717x_dev, 3);
 8001d7a:	4b48      	ldr	r3, [pc, #288]	@ (8001e9c <main+0x16c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2103      	movs	r1, #3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fd7f 	bl	8001884 <ad717x_set_clock>
  union ad717x_analog_inputs AIN_0;
  AIN_0.analog_input_pairs = VIN0_VIN1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	813b      	strh	r3, [r7, #8]
  HAL_Delay(10);
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f000 ffd8 	bl	8002d40 <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 0, AIN_0);
 8001d90:	4b42      	ldr	r3, [pc, #264]	@ (8001e9c <main+0x16c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	893a      	ldrh	r2, [r7, #8]
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f92b 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f000 ffce 	bl	8002d40 <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 0, 0);
 8001da4:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <main+0x16c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f9ad 	bl	800110c <ad717x_assign_setup>
  HAL_Delay(10);
 8001db2:	200a      	movs	r0, #10
 8001db4:	f000 ffc4 	bl	8002d40 <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 0, 1);
 8001db8:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <main+0x16c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f899 	bl	8000ef8 <ad717x_set_channel_status>



  union ad717x_analog_inputs AIN_2;
  AIN_2.analog_input_pairs = VIN2_VIN3;
 8001dc6:	2343      	movs	r3, #67	@ 0x43
 8001dc8:	80bb      	strh	r3, [r7, #4]
  HAL_Delay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f000 ffb8 	bl	8002d40 <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 2, AIN_2);
 8001dd0:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <main+0x16c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	88ba      	ldrh	r2, [r7, #4]
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f90b 	bl	8000ff4 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8001dde:	200a      	movs	r0, #10
 8001de0:	f000 ffae 	bl	8002d40 <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 2, 1);
 8001de4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <main+0x16c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	2102      	movs	r1, #2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f883 	bl	8000ef8 <ad717x_set_channel_status>
  HAL_Delay(10);
 8001df2:	200a      	movs	r0, #10
 8001df4:	f000 ffa4 	bl	8002d40 <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 2, 0);
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <main+0x16c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2102      	movs	r1, #2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f983 	bl	800110c <ad717x_assign_setup>


  HAL_Delay(10);
 8001e06:	200a      	movs	r0, #10
 8001e08:	f000 ff9a 	bl	8002d40 <HAL_Delay>
  ad717x_set_polarity(pad717x_dev, 1, 0);
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <main+0x16c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f9bd 	bl	8001194 <ad717x_set_polarity>
  HAL_Delay(10);
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f000 ff90 	bl	8002d40 <HAL_Delay>
  ad717x_set_reference_source(pad717x_dev, EXTERNAL_REF, 0);
 8001e20:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <main+0x16c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f9f7 	bl	800121c <ad717x_set_reference_source>
  HAL_Delay(10);
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f000 ff86 	bl	8002d40 <HAL_Delay>

  HAL_Delay(10);
 8001e34:	200a      	movs	r0, #10
 8001e36:	f000 ff83 	bl	8002d40 <HAL_Delay>
  ad717x_enable_input_buffer(pad717x_dev, 1, 0, 0);
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <main+0x16c>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2200      	movs	r2, #0
 8001e42:	2101      	movs	r1, #1
 8001e44:	f7ff fa4c 	bl	80012e0 <ad717x_enable_input_buffer>
  HAL_Delay(10);
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f000 ff79 	bl	8002d40 <HAL_Delay>

  ad717x_set_data_stat(pad717x_dev, true);
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <main+0x16c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fd3b 	bl	80018d0 <ad717x_set_data_stat>

  // Initial Message for PC:
  char *init_msg = "{inf,\r\nWelcome to Pourostad Project,end}\r\n";
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <main+0x170>)
 8001e5c:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(PC_UART, (uint8_t*)init_msg, strlen(init_msg), 10);
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7fe fa36 	bl	80002d0 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	230a      	movs	r3, #10
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <main+0x174>)
 8001e6e:	f003 fe01 	bl	8005a74 <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 8001e72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e76:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <main+0x178>)
 8001e78:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <main+0x174>)
 8001e7a:	f003 fef7 	bl	8005c6c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim2.Instance->CNT = 0;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <main+0x17c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <main+0x17c>)
 8001e88:	f003 fab2 	bl	80053f0 <HAL_TIM_Base_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uart_buffer[0]!='\0')
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <main+0x178>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0fb      	beq.n	8001e8c <main+0x15c>
	  {
		  check_command();
 8001e94:	f7ff fdf2 	bl	8001a7c <check_command>
	  if(uart_buffer[0]!='\0')
 8001e98:	e7f8      	b.n	8001e8c <main+0x15c>
 8001e9a:	bf00      	nop
 8001e9c:	200010e4 	.word	0x200010e4
 8001ea0:	08009ec8 	.word	0x08009ec8
 8001ea4:	20000584 	.word	0x20000584
 8001ea8:	2000068c 	.word	0x2000068c
 8001eac:	2000053c 	.word	0x2000053c

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b094      	sub	sp, #80	@ 0x50
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	2234      	movs	r2, #52	@ 0x34
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f005 ff77 	bl	8007db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f8c <SystemClock_Config+0xdc>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f8c <SystemClock_Config+0xdc>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee4:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <SystemClock_Config+0xdc>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <SystemClock_Config+0xe0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	@ (8001f90 <SystemClock_Config+0xe0>)
 8001efa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <SystemClock_Config+0xe0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f16:	2302      	movs	r3, #2
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f20:	2304      	movs	r3, #4
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f24:	23b4      	movs	r3, #180	@ 0xb4
 8001f26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 f999 	bl	8004270 <HAL_RCC_OscConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f44:	f000 fbae 	bl	80026a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f48:	f001 fdf8 	bl	8003b3c <HAL_PWREx_EnableOverDrive>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f52:	f000 fba7 	bl	80026a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f56:	230f      	movs	r3, #15
 8001f58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	2105      	movs	r1, #5
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 fe31 	bl	8003bdc <HAL_RCC_ClockConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f80:	f000 fb90 	bl	80026a4 <Error_Handler>
  }
}
 8001f84:	bf00      	nop
 8001f86:	3750      	adds	r7, #80	@ 0x50
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000

08001f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001f9a:	4a18      	ldr	r2, [pc, #96]	@ (8001ffc <MX_SPI1_Init+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fc8:	2210      	movs	r2, #16
 8001fca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <MX_SPI1_Init+0x64>)
 8001fe6:	f002 fbe1 	bl	80047ac <HAL_SPI_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ff0:	f000 fb58 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000048c 	.word	0x2000048c
 8001ffc:	40013000 	.word	0x40013000

08002000 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <MX_SPI2_Init+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <MX_SPI2_Init+0x64>)
 800200c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002010:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_SPI2_Init+0x64>)
 800202c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002030:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002034:	2208      	movs	r2, #8
 8002036:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_SPI2_Init+0x64>)
 800204c:	220a      	movs	r2, #10
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002052:	f002 fbab 	bl	80047ac <HAL_SPI_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800205c:	f000 fb22 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200004e4 	.word	0x200004e4
 8002068:	40003800 	.word	0x40003800

0800206c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002080:	463b      	mov	r3, r7
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <MX_TIM2_Init+0x94>)
 800208a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800208e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <MX_TIM2_Init+0x94>)
 8002092:	2259      	movs	r2, #89	@ 0x59
 8002094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <MX_TIM2_Init+0x94>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <MX_TIM2_Init+0x94>)
 800209e:	f04f 32ff 	mov.w	r2, #4294967295
 80020a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <MX_TIM2_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <MX_TIM2_Init+0x94>)
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b0:	4813      	ldr	r0, [pc, #76]	@ (8002100 <MX_TIM2_Init+0x94>)
 80020b2:	f003 f94d 	bl	8005350 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020bc:	f000 faf2 	bl	80026a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4619      	mov	r1, r3
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <MX_TIM2_Init+0x94>)
 80020ce:	f003 f9f7 	bl	80054c0 <HAL_TIM_ConfigClockSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020d8:	f000 fae4 	bl	80026a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_TIM2_Init+0x94>)
 80020ea:	f003 fbf7 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020f4:	f000 fad6 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000053c 	.word	0x2000053c

08002104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002108:	4b10      	ldr	r3, [pc, #64]	@ (800214c <MX_USART2_UART_Init+0x48>)
 800210a:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800210c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <MX_USART2_UART_Init+0x48>)
 8002110:	4a10      	ldr	r2, [pc, #64]	@ (8002154 <MX_USART2_UART_Init+0x50>)
 8002112:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002114:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <MX_USART2_UART_Init+0x48>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <MX_USART2_UART_Init+0x48>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <MX_USART2_UART_Init+0x48>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_USART2_UART_Init+0x48>)
 8002128:	220c      	movs	r2, #12
 800212a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212c:	4b07      	ldr	r3, [pc, #28]	@ (800214c <MX_USART2_UART_Init+0x48>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <MX_USART2_UART_Init+0x48>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <MX_USART2_UART_Init+0x48>)
 800213a:	f003 fc4b 	bl	80059d4 <HAL_UART_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002144:	f000 faae 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000584 	.word	0x20000584
 8002150:	40004400 	.word	0x40004400
 8002154:	00119400 	.word	0x00119400

08002158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <MX_DMA_Init+0x4c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <MX_DMA_Init+0x4c>)
 8002168:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <MX_DMA_Init+0x4c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 1);
 800217a:	2201      	movs	r2, #1
 800217c:	2100      	movs	r1, #0
 800217e:	2010      	movs	r0, #16
 8002180:	f000 fedd 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002184:	2010      	movs	r0, #16
 8002186:	f000 fef6 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 2);
 800218a:	2202      	movs	r2, #2
 800218c:	2100      	movs	r1, #0
 800218e:	2011      	movs	r0, #17
 8002190:	f000 fed5 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002194:	2011      	movs	r0, #17
 8002196:	f000 feee 	bl	8002f76 <HAL_NVIC_EnableIRQ>

}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b35      	ldr	r3, [pc, #212]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <MX_GPIO_Init+0xf0>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <MX_GPIO_Init+0xf0>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <MX_GPIO_Init+0xf0>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <MX_GPIO_Init+0xf0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <MX_GPIO_Init+0xf0>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <MX_GPIO_Init+0xf0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SYNC_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	2142      	movs	r1, #66	@ 0x42
 8002232:	481a      	ldr	r0, [pc, #104]	@ (800229c <MX_GPIO_Init+0xf4>)
 8002234:	f001 fc50 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin DRY_Pin */
  GPIO_InitStruct.Pin = B1_Pin|DRY_Pin;
 8002238:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800223e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4814      	ldr	r0, [pc, #80]	@ (80022a0 <MX_GPIO_Init+0xf8>)
 8002250:	f001 faae 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin|SPI1_CS_Pin;
 8002254:	2342      	movs	r3, #66	@ 0x42
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	480c      	ldr	r0, [pc, #48]	@ (800229c <MX_GPIO_Init+0xf4>)
 800226c:	f001 faa0 	bl	80037b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2017      	movs	r0, #23
 8002276:	f000 fe62 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800227a:	2017      	movs	r0, #23
 800227c:	f000 fe7b 	bl	8002f76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 8002280:	2202      	movs	r2, #2
 8002282:	2100      	movs	r1, #0
 8002284:	2028      	movs	r0, #40	@ 0x28
 8002286:	f000 fe5a 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800228a:	2028      	movs	r0, #40	@ 0x28
 800228c:	f000 fe73 	bl	8002f76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	@ 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800

080022a4 <ad717x_app_initialize>:

/* USER CODE BEGIN 4 */
int32_t ad717x_app_initialize(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0dc      	sub	sp, #368	@ 0x170
 80022a8:	af2c      	add	r7, sp, #176	@ 0xb0
	// Used to create the ad717x device
	ad717x_init_param ad717x_init = {
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	22bc      	movs	r2, #188	@ 0xbc
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fd7e 	bl	8007db2 <memset>
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <ad717x_app_initialize+0x50>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <ad717x_app_initialize+0x54>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	733b      	strb	r3, [r7, #12]
 80022c2:	2303      	movs	r3, #3
 80022c4:	737b      	strb	r3, [r7, #13]
 80022c6:	2301      	movs	r3, #1
 80022c8:	73bb      	strb	r3, [r7, #14]
 80022ca:	2310      	movs	r3, #16
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	2308      	movs	r3, #8
 80022d0:	743b      	strb	r3, [r7, #16]
		8,						// Setup Number

	};

	// Initialze the device
	return (AD717X_Init(&pad717x_dev, ad717x_init));
 80022d2:	4668      	mov	r0, sp
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	22b0      	movs	r2, #176	@ 0xb0
 80022da:	4619      	mov	r1, r3
 80022dc:	f005 fe19 	bl	8007f12 <memcpy>
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e4:	4805      	ldr	r0, [pc, #20]	@ (80022fc <ad717x_app_initialize+0x58>)
 80022e6:	f7ff fa33 	bl	8001750 <AD717X_Init>
 80022ea:	4603      	mov	r3, r0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	37c0      	adds	r7, #192	@ 0xc0
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000294 	.word	0x20000294
 80022f8:	20000298 	.word	0x20000298
 80022fc:	200010e4 	.word	0x200010e4

08002300 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b0a1      	sub	sp, #132	@ 0x84
 8002304:	af02      	add	r7, sp, #8
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == DRY_Pin) {
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b80      	cmp	r3, #128	@ 0x80
 800230e:	f040 8129 	bne.w	8002564 <HAL_GPIO_EXTI_Callback+0x264>
	  adc_channel_offset++;
 8002312:	4b97      	ldr	r3, [pc, #604]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	4a95      	ldr	r2, [pc, #596]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x270>)
 800231a:	6013      	str	r3, [r2, #0]
	  if(spi_status == READING)
 800231c:	4b95      	ldr	r3, [pc, #596]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	f040 8091 	bne.w	800244a <HAL_GPIO_EXTI_Callback+0x14a>
	  {
//		  uint8_t Tx = 0x40;
		  uint8_t Rx[8] = {0};
 8002328:	2300      	movs	r3, #0
 800232a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800232c:	2300      	movs	r3, #0
 800232e:	65fb      	str	r3, [r7, #92]	@ 0x5c
//		  Rx[0] = 0x40;
//		  HAL_SPI_TransmitReceive(SPI, &Tx, Rx, 2, 10);
//		  HAL_SPI_Receive(SPI, Rx, 1, 100);
//		  adc_channel_offset = Rx[0] & 0x0f;

			ad717x_st_reg *pReg = (ad717x_st_reg*)spi_read_reg.pReg;
 8002330:	4b91      	ldr	r3, [pc, #580]	@ (8002578 <HAL_GPIO_EXTI_Callback+0x278>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	667b      	str	r3, [r7, #100]	@ 0x64
//			uint8_t Rx[8] = {0};
			HAL_SPI_Transmit(SPI, &spi_read_reg.Tx, 1, 100);
 8002336:	2364      	movs	r3, #100	@ 0x64
 8002338:	2201      	movs	r2, #1
 800233a:	498f      	ldr	r1, [pc, #572]	@ (8002578 <HAL_GPIO_EXTI_Callback+0x278>)
 800233c:	488f      	ldr	r0, [pc, #572]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 800233e:	f002 fabe 	bl	80048be <HAL_SPI_Transmit>

			HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 8002342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800234c:	2364      	movs	r3, #100	@ 0x64
 800234e:	488b      	ldr	r0, [pc, #556]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002350:	f002 fbf9 	bl	8004b46 <HAL_SPI_Receive>


			pReg->value = 0;
 8002354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
			int data_size = pReg->size;
 800235a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	677b      	str	r3, [r7, #116]	@ 0x74
			if(pReg->addr == 0x04)
 8002360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d101      	bne.n	800236c <HAL_GPIO_EXTI_Callback+0x6c>
				data_size = 3;
 8002368:	2303      	movs	r3, #3
 800236a:	677b      	str	r3, [r7, #116]	@ 0x74
			for(int i = 0; i < data_size; i++) {
 800236c:	2300      	movs	r3, #0
 800236e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002370:	e011      	b.n	8002396 <HAL_GPIO_EXTI_Callback+0x96>
				pReg->value <<= 8;
 8002372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237a:	605a      	str	r2, [r3, #4]
				pReg->value += Rx[i];
 800237c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002384:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002386:	440a      	add	r2, r1
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	441a      	add	r2, r3
 800238c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800238e:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < data_size; i++) {
 8002390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002392:	3301      	adds	r3, #1
 8002394:	673b      	str	r3, [r7, #112]	@ 0x70
 8002396:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002398:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800239a:	429a      	cmp	r2, r3
 800239c:	dbe9      	blt.n	8002372 <HAL_GPIO_EXTI_Callback+0x72>
			}
		  	spi_status = IDLE;
 800239e:	4b75      	ldr	r3, [pc, #468]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
		  	if(pReg->addr == 0x04) //if it is read data
 80023a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d13f      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0x12c>
		  	{

		  		if(adc_sm == ADC_IDLE)
 80023ac:	4b74      	ldr	r3, [pc, #464]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x280>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d129      	bne.n	800240a <HAL_GPIO_EXTI_Callback+0x10a>
		  		{
		  			float data = (((float) pReg->value / (1<<23))-1) * 25;
 80023b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002584 <HAL_GPIO_EXTI_Callback+0x284>
 80023c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023d2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80023d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023da:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
					char hexString[24];
					sprintf(hexString, "{inf,\r\n%u %.4f,end}\r\n", Rx[3], data);
 80023de:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023e2:	461c      	mov	r4, r3
 80023e4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023e6:	f7fe f8df 	bl	80005a8 <__aeabi_f2d>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80023f2:	e9cd 2300 	strd	r2, r3, [sp]
 80023f6:	4622      	mov	r2, r4
 80023f8:	4963      	ldr	r1, [pc, #396]	@ (8002588 <HAL_GPIO_EXTI_Callback+0x288>)
 80023fa:	f005 fc77 	bl	8007cec <siprintf>
					send_string(hexString);
 80023fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fb78 	bl	8001af8 <send_string>
		  spi_status = SENDING;
	  }
  } else {
      __NOP();
  }
}
 8002408:	e0ad      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
		  			adc_channel_offset = Rx[3];
 800240a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800240e:	461a      	mov	r2, r3
 8002410:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x270>)
 8002412:	601a      	str	r2, [r3, #0]
		  			adc_to_buf(pReg->value);
 8002414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fa7f 	bl	800191c <adc_to_buf>
		  			adc_sm = ADC_IDLE;
 800241e:	4b58      	ldr	r3, [pc, #352]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x280>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
		  			spi_status = SENDING;
 8002424:	4b53      	ldr	r3, [pc, #332]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 8002426:	2206      	movs	r2, #6
 8002428:	701a      	strb	r2, [r3, #0]
}
 800242a:	e09c      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
				sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 800242c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	461a      	mov	r2, r3
 8002432:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002436:	4955      	ldr	r1, [pc, #340]	@ (800258c <HAL_GPIO_EXTI_Callback+0x28c>)
 8002438:	4618      	mov	r0, r3
 800243a:	f005 fc57 	bl	8007cec <siprintf>
				send_string(hexString);
 800243e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fb58 	bl	8001af8 <send_string>
}
 8002448:	e08d      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == WRITING)
 800244a:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d11c      	bne.n	800248e <HAL_GPIO_EXTI_Callback+0x18e>
		  ad717x_st_reg *pReg = (ad717x_st_reg*)spi_write_reg.pReg;
 8002454:	4b4e      	ldr	r3, [pc, #312]	@ (8002590 <HAL_GPIO_EXTI_Callback+0x290>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	66bb      	str	r3, [r7, #104]	@ 0x68
		  HAL_SPI_Transmit(SPI, spi_write_reg.Tx, pReg->size + 1, 100);
 800245a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	b29b      	uxth	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	2364      	movs	r3, #100	@ 0x64
 8002466:	494a      	ldr	r1, [pc, #296]	@ (8002590 <HAL_GPIO_EXTI_Callback+0x290>)
 8002468:	4844      	ldr	r0, [pc, #272]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 800246a:	f002 fa28 	bl	80048be <HAL_SPI_Transmit>
		  send_string("{inf,\r\nwrite done,end}\r\n");
 800246e:	4849      	ldr	r0, [pc, #292]	@ (8002594 <HAL_GPIO_EXTI_Callback+0x294>)
 8002470:	f7ff fb42 	bl	8001af8 <send_string>
		  spi_status = IDLE;
 8002474:	4b3f      	ldr	r3, [pc, #252]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, pReg->addr);
 800247a:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <HAL_GPIO_EXTI_Callback+0x298>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7fe ffc4 	bl	8001414 <AD717X_ReadRegister>
}
 800248c:	e06b      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == TRIGGER)
 800248e:	4b39      	ldr	r3, [pc, #228]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d103      	bne.n	80024a0 <HAL_GPIO_EXTI_Callback+0x1a0>
		spi_status = READING;
 8002498:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
}
 800249e:	e062      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
	  else if (spi_status == GETID)
 80024a0:	4b34      	ldr	r3, [pc, #208]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d12e      	bne.n	8002508 <HAL_GPIO_EXTI_Callback+0x208>
		uint8_t Tx = 0x47;
 80024aa:	2347      	movs	r3, #71	@ 0x47
 80024ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		uint8_t Rx[2] = {0};
 80024b0:	2300      	movs	r3, #0
 80024b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 80024b4:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 80024b8:	230a      	movs	r3, #10
 80024ba:	2201      	movs	r2, #1
 80024bc:	482f      	ldr	r0, [pc, #188]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 80024be:	f002 f9fe 	bl	80048be <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, 2, 100);
 80024c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80024c6:	2364      	movs	r3, #100	@ 0x64
 80024c8:	2202      	movs	r2, #2
 80024ca:	482c      	ldr	r0, [pc, #176]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 80024cc:	f002 fb3b 	bl	8004b46 <HAL_SPI_Receive>
		uint16_t receivedData = (Rx[0] << 8) | Rx[1];
 80024d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", receivedData);  // Format as hex string with "0x" prefix
 80024e6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	4927      	ldr	r1, [pc, #156]	@ (800258c <HAL_GPIO_EXTI_Callback+0x28c>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f005 fbfb 	bl	8007cec <siprintf>
		send_string(hexString);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fafc 	bl	8001af8 <send_string>
		spi_status = IDLE;
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
}
 8002506:	e02e      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == SENDING)
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b06      	cmp	r3, #6
 8002510:	d109      	bne.n	8002526 <HAL_GPIO_EXTI_Callback+0x226>
		  adc_sm = ADC_READING;
 8002512:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_GPIO_EXTI_Callback+0x280>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, 4);
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <HAL_GPIO_EXTI_Callback+0x298>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2104      	movs	r1, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe ff78 	bl	8001414 <AD717X_ReadRegister>
}
 8002524:	e01f      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == CHANNEL_OFFSET)
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b07      	cmp	r3, #7
 800252e:	d11a      	bne.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
		  uint8_t Tx = 0x40;
 8002530:	2340      	movs	r3, #64	@ 0x40
 8002532:	72fb      	strb	r3, [r7, #11]
		  uint8_t Rx[2] = {0};
 8002534:	2300      	movs	r3, #0
 8002536:	813b      	strh	r3, [r7, #8]
		  HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 8002538:	f107 010b 	add.w	r1, r7, #11
 800253c:	230a      	movs	r3, #10
 800253e:	2201      	movs	r2, #1
 8002540:	480e      	ldr	r0, [pc, #56]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002542:	f002 f9bc 	bl	80048be <HAL_SPI_Transmit>
		  HAL_SPI_Receive(SPI, Rx, 2, 100);
 8002546:	f107 0108 	add.w	r1, r7, #8
 800254a:	2364      	movs	r3, #100	@ 0x64
 800254c:	2202      	movs	r2, #2
 800254e:	480b      	ldr	r0, [pc, #44]	@ (800257c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002550:	f002 faf9 	bl	8004b46 <HAL_SPI_Receive>
		  adc_channel_offset = Rx[1];
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	461a      	mov	r2, r3
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x270>)
 800255a:	601a      	str	r2, [r3, #0]
		  spi_status = SENDING;
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x274>)
 800255e:	2206      	movs	r2, #6
 8002560:	701a      	strb	r2, [r3, #0]
}
 8002562:	e000      	b.n	8002566 <HAL_GPIO_EXTI_Callback+0x266>
      __NOP();
 8002564:	bf00      	nop
}
 8002566:	bf00      	nop
 8002568:	377c      	adds	r7, #124	@ 0x7c
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	200010e0 	.word	0x200010e0
 8002574:	200010e8 	.word	0x200010e8
 8002578:	200010ec 	.word	0x200010ec
 800257c:	2000048c 	.word	0x2000048c
 8002580:	200010e9 	.word	0x200010e9
 8002584:	4b000000 	.word	0x4b000000
 8002588:	08009ef4 	.word	0x08009ef4
 800258c:	08009f0c 	.word	0x08009f0c
 8002590:	200010f4 	.word	0x200010f4
 8002594:	08009f24 	.word	0x08009f24
 8002598:	200010e4 	.word	0x200010e4

0800259c <dac_readreg>:
	uint32_t t_start = htim2.Instance->CNT;
	while(htim2.Instance->CNT - t_start < us);
}

void dac_readreg(uint8_t addr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx[3] = {addr,0,0};
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	733b      	strb	r3, [r7, #12]
 80025aa:	2300      	movs	r3, #0
 80025ac:	737b      	strb	r3, [r7, #13]
 80025ae:	2300      	movs	r3, #0
 80025b0:	73bb      	strb	r3, [r7, #14]
	uint8_t Rx[3] = {0};
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <dac_readreg+0x80>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	813b      	strh	r3, [r7, #8]
 80025b8:	2300      	movs	r3, #0
 80025ba:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	2102      	movs	r1, #2
 80025c0:	4817      	ldr	r0, [pc, #92]	@ (8002620 <dac_readreg+0x84>)
 80025c2:	f001 fa89 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, Tx, 3, 100);
 80025c6:	f107 010c 	add.w	r1, r7, #12
 80025ca:	2364      	movs	r3, #100	@ 0x64
 80025cc:	2203      	movs	r2, #3
 80025ce:	4815      	ldr	r0, [pc, #84]	@ (8002624 <dac_readreg+0x88>)
 80025d0:	f002 f975 	bl	80048be <HAL_SPI_Transmit>
//	delay_us(2);
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 80025d4:	2201      	movs	r2, #1
 80025d6:	2102      	movs	r1, #2
 80025d8:	4811      	ldr	r0, [pc, #68]	@ (8002620 <dac_readreg+0x84>)
 80025da:	f001 fa7d 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fbae 	bl	8002d40 <HAL_Delay>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2102      	movs	r1, #2
 80025e8:	480d      	ldr	r0, [pc, #52]	@ (8002620 <dac_readreg+0x84>)
 80025ea:	f001 fa75 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, Rx, 3, 100);
 80025ee:	f107 0108 	add.w	r1, r7, #8
 80025f2:	2364      	movs	r3, #100	@ 0x64
 80025f4:	2203      	movs	r2, #3
 80025f6:	480b      	ldr	r0, [pc, #44]	@ (8002624 <dac_readreg+0x88>)
 80025f8:	f002 faa5 	bl	8004b46 <HAL_SPI_Receive>
//	delay_us(2);
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	2102      	movs	r1, #2
 8002600:	4807      	ldr	r0, [pc, #28]	@ (8002620 <dac_readreg+0x84>)
 8002602:	f001 fa69 	bl	8003ad8 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(PC_UART,Rx,3,10);
 8002606:	f107 0108 	add.w	r1, r7, #8
 800260a:	230a      	movs	r3, #10
 800260c:	2203      	movs	r2, #3
 800260e:	4806      	ldr	r0, [pc, #24]	@ (8002628 <dac_readreg+0x8c>)
 8002610:	f003 fa30 	bl	8005a74 <HAL_UART_Transmit>
//	pReg->value = 0;
//	for(int i = 0; i < pReg->size; i++) {
//		pReg->value <<= 8;
//		pReg->value += Rx[i];
//	}
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	08009f40 	.word	0x08009f40
 8002620:	40020400 	.word	0x40020400
 8002624:	200004e4 	.word	0x200004e4
 8002628:	20000584 	.word	0x20000584

0800262c <dac_writereg>:

void dac_writereg(uint8_t addr, uint16_t value)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	460a      	mov	r2, r1
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	4613      	mov	r3, r2
 800263a:	80bb      	strh	r3, [r7, #4]
	uint8_t Tx[3] = {addr,(value & 0xFF00) >> 8, (value & 0x00FF) >> 0};
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	733b      	strb	r3, [r7, #12]
 8002640:	88bb      	ldrh	r3, [r7, #4]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	b29b      	uxth	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	737b      	strb	r3, [r7, #13]
 800264a:	88bb      	ldrh	r3, [r7, #4]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	73bb      	strb	r3, [r7, #14]
	uint8_t Rx[3] = {0};
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <dac_writereg+0x58>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	813b      	strh	r3, [r7, #8]
 8002656:	2300      	movs	r3, #0
 8002658:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2102      	movs	r1, #2
 800265e:	480a      	ldr	r0, [pc, #40]	@ (8002688 <dac_writereg+0x5c>)
 8002660:	f001 fa3a 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, Tx, 3, 100);
 8002664:	f107 010c 	add.w	r1, r7, #12
 8002668:	2364      	movs	r3, #100	@ 0x64
 800266a:	2203      	movs	r2, #3
 800266c:	4807      	ldr	r0, [pc, #28]	@ (800268c <dac_writereg+0x60>)
 800266e:	f002 f926 	bl	80048be <HAL_SPI_Transmit>
//	delay_us(2);
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8002672:	2201      	movs	r2, #1
 8002674:	2102      	movs	r1, #2
 8002676:	4804      	ldr	r0, [pc, #16]	@ (8002688 <dac_writereg+0x5c>)
 8002678:	f001 fa2e 	bl	8003ad8 <HAL_GPIO_WritePin>
//	pReg->value = 0;
//	for(int i = 0; i < pReg->size; i++) {
//		pReg->value <<= 8;
//		pReg->value += Rx[i];
//	}
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	08009f40 	.word	0x08009f40
 8002688:	40020400 	.word	0x40020400
 800268c:	200004e4 	.word	0x200004e4

08002690 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a8:	b672      	cpsid	i
}
 80026aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <Error_Handler+0x8>

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <HAL_MspInit+0x4c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	4a0f      	ldr	r2, [pc, #60]	@ (80026fc <HAL_MspInit+0x4c>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <HAL_MspInit+0x4c>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026ee:	2007      	movs	r0, #7
 80026f0:	f000 fc1a 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a32      	ldr	r2, [pc, #200]	@ (80027e8 <HAL_SPI_MspInit+0xe8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12c      	bne.n	800277c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	4a30      	ldr	r2, [pc, #192]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 800272c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002730:	6453      	str	r3, [r2, #68]	@ 0x44
 8002732:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	4b2a      	ldr	r3, [pc, #168]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a29      	ldr	r2, [pc, #164]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800275a:	23e0      	movs	r3, #224	@ 0xe0
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276a:	2305      	movs	r3, #5
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 031c 	add.w	r3, r7, #28
 8002772:	4619      	mov	r1, r3
 8002774:	481e      	ldr	r0, [pc, #120]	@ (80027f0 <HAL_SPI_MspInit+0xf0>)
 8002776:	f001 f81b 	bl	80037b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800277a:	e031      	b.n	80027e0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <HAL_SPI_MspInit+0xf4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d12c      	bne.n	80027e0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	4a17      	ldr	r2, [pc, #92]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002794:	6413      	str	r3, [r2, #64]	@ 0x40
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a10      	ldr	r2, [pc, #64]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <HAL_SPI_MspInit+0xec>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80027be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027d0:	2305      	movs	r3, #5
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	4807      	ldr	r0, [pc, #28]	@ (80027f8 <HAL_SPI_MspInit+0xf8>)
 80027dc:	f000 ffe8 	bl	80037b0 <HAL_GPIO_Init>
}
 80027e0:	bf00      	nop
 80027e2:	3730      	adds	r7, #48	@ 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40013000 	.word	0x40013000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40003800 	.word	0x40003800
 80027f8:	40020400 	.word	0x40020400

080027fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280c:	d10d      	bne.n	800282a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_TIM_Base_MspInit+0x3c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <HAL_TIM_Base_MspInit+0x3c>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6413      	str	r3, [r2, #64]	@ 0x40
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_TIM_Base_MspInit+0x3c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4c      	ldr	r2, [pc, #304]	@ (800298c <HAL_UART_MspInit+0x150>)
 800285a:	4293      	cmp	r3, r2
 800285c:	f040 8092 	bne.w	8002984 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	4b4a      	ldr	r3, [pc, #296]	@ (8002990 <HAL_UART_MspInit+0x154>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	4a49      	ldr	r2, [pc, #292]	@ (8002990 <HAL_UART_MspInit+0x154>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002870:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <HAL_UART_MspInit+0x154>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_UART_MspInit+0x154>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <HAL_UART_MspInit+0x154>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6313      	str	r3, [r2, #48]	@ 0x30
 800288c:	4b40      	ldr	r3, [pc, #256]	@ (8002990 <HAL_UART_MspInit+0x154>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002898:	230c      	movs	r3, #12
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028a8:	2307      	movs	r3, #7
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	4838      	ldr	r0, [pc, #224]	@ (8002994 <HAL_UART_MspInit+0x158>)
 80028b4:	f000 ff7c 	bl	80037b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80028b8:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028ba:	4a38      	ldr	r2, [pc, #224]	@ (800299c <HAL_UART_MspInit+0x160>)
 80028bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80028be:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b32      	ldr	r3, [pc, #200]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028da:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80028ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f6:	4b28      	ldr	r3, [pc, #160]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028fc:	4826      	ldr	r0, [pc, #152]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 80028fe:	f000 fb55 	bl	8002fac <HAL_DMA_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002908:	f7ff fecc 	bl	80026a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a22      	ldr	r2, [pc, #136]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002912:	4a21      	ldr	r2, [pc, #132]	@ (8002998 <HAL_UART_MspInit+0x15c>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800291a:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 800291c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002920:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002924:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002926:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002928:	2240      	movs	r2, #64	@ 0x40
 800292a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292c:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002938:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800293a:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002940:	4b17      	ldr	r3, [pc, #92]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002946:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002948:	2200      	movs	r2, #0
 800294a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800294e:	2200      	movs	r2, #0
 8002950:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002952:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002954:	2200      	movs	r2, #0
 8002956:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002958:	4811      	ldr	r0, [pc, #68]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800295a:	f000 fb27 	bl	8002fac <HAL_DMA_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002964:	f7ff fe9e 	bl	80026a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0d      	ldr	r2, [pc, #52]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800296c:	639a      	str	r2, [r3, #56]	@ 0x38
 800296e:	4a0c      	ldr	r2, [pc, #48]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 8002974:	2202      	movs	r2, #2
 8002976:	2100      	movs	r1, #0
 8002978:	2026      	movs	r0, #38	@ 0x26
 800297a:	f000 fae0 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800297e:	2026      	movs	r0, #38	@ 0x26
 8002980:	f000 faf9 	bl	8002f76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	@ 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40004400 	.word	0x40004400
 8002990:	40023800 	.word	0x40023800
 8002994:	40020000 	.word	0x40020000
 8002998:	200005cc 	.word	0x200005cc
 800299c:	40026088 	.word	0x40026088
 80029a0:	2000062c 	.word	0x2000062c
 80029a4:	400260a0 	.word	0x400260a0

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <NMI_Handler+0x4>

080029b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <MemManage_Handler+0x4>

080029c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <UsageFault_Handler+0x4>

080029d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fe:	f000 f97f 	bl	8002d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <DMA1_Stream5_IRQHandler+0x10>)
 8002a0e:	f000 fc65 	bl	80032dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200005cc 	.word	0x200005cc

08002a1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <DMA1_Stream6_IRQHandler+0x10>)
 8002a22:	f000 fc5b 	bl	80032dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000062c 	.word	0x2000062c

08002a30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRY_Pin);
 8002a34:	2080      	movs	r0, #128	@ 0x80
 8002a36:	f001 f869 	bl	8003b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <USART2_IRQHandler+0x10>)
 8002a46:	f003 f9b5 	bl	8005db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000584 	.word	0x20000584

08002a54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a5c:	f001 f856 	bl	8003b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return 1;
 8002a68:	2301      	movs	r3, #1
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_kill>:

int _kill(int pid, int sig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a7e:	f005 fa1b 	bl	8007eb8 <__errno>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2216      	movs	r2, #22
 8002a86:	601a      	str	r2, [r3, #0]
  return -1;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_exit>:

void _exit (int status)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ffe7 	bl	8002a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <_exit+0x12>

08002aaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e00a      	b.n	8002ad2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002abc:	f3af 8000 	nop.w
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	60ba      	str	r2, [r7, #8]
 8002ac8:	b2ca      	uxtb	r2, r1
 8002aca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	dbf0      	blt.n	8002abc <_read+0x12>
  }

  return len;
 8002ada:	687b      	ldr	r3, [r7, #4]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e009      	b.n	8002b0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	60ba      	str	r2, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3301      	adds	r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	dbf1      	blt.n	8002af6 <_write+0x12>
  }
  return len;
 8002b12:	687b      	ldr	r3, [r7, #4]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_close>:

int _close(int file)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b44:	605a      	str	r2, [r3, #4]
  return 0;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_isatty>:

int _isatty(int file)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b5c:	2301      	movs	r3, #1
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b8c:	4a14      	ldr	r2, [pc, #80]	@ (8002be0 <_sbrk+0x5c>)
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <_sbrk+0x60>)
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <_sbrk+0x64>)
 8002ba2:	4a12      	ldr	r2, [pc, #72]	@ (8002bec <_sbrk+0x68>)
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d207      	bcs.n	8002bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb4:	f005 f980 	bl	8007eb8 <__errno>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	220c      	movs	r2, #12
 8002bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e009      	b.n	8002bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a05      	ldr	r2, [pc, #20]	@ (8002be8 <_sbrk+0x64>)
 8002bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20020000 	.word	0x20020000
 8002be4:	00000400 	.word	0x00000400
 8002be8:	20001104 	.word	0x20001104
 8002bec:	20001258 	.word	0x20001258

08002bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <SystemInit+0x20>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <SystemInit+0x20>)
 8002bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <Reset_Handler>:
 8002c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c4c <LoopFillZerobss+0x12>
 8002c18:	480d      	ldr	r0, [pc, #52]	@ (8002c50 <LoopFillZerobss+0x16>)
 8002c1a:	490e      	ldr	r1, [pc, #56]	@ (8002c54 <LoopFillZerobss+0x1a>)
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <LoopFillZerobss+0x1e>)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e002      	b.n	8002c28 <LoopCopyDataInit>

08002c22 <CopyDataInit>:
 8002c22:	58d4      	ldr	r4, [r2, r3]
 8002c24:	50c4      	str	r4, [r0, r3]
 8002c26:	3304      	adds	r3, #4

08002c28 <LoopCopyDataInit>:
 8002c28:	18c4      	adds	r4, r0, r3
 8002c2a:	428c      	cmp	r4, r1
 8002c2c:	d3f9      	bcc.n	8002c22 <CopyDataInit>
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <LoopFillZerobss+0x22>)
 8002c30:	4c0b      	ldr	r4, [pc, #44]	@ (8002c60 <LoopFillZerobss+0x26>)
 8002c32:	2300      	movs	r3, #0
 8002c34:	e001      	b.n	8002c3a <LoopFillZerobss>

08002c36 <FillZerobss>:
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	3204      	adds	r2, #4

08002c3a <LoopFillZerobss>:
 8002c3a:	42a2      	cmp	r2, r4
 8002c3c:	d3fb      	bcc.n	8002c36 <FillZerobss>
 8002c3e:	f7ff ffd7 	bl	8002bf0 <SystemInit>
 8002c42:	f005 f93f 	bl	8007ec4 <__libc_init_array>
 8002c46:	f7ff f873 	bl	8001d30 <main>
 8002c4a:	4770      	bx	lr
 8002c4c:	20020000 	.word	0x20020000
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000470 	.word	0x20000470
 8002c58:	0800a2e8 	.word	0x0800a2e8
 8002c5c:	20000470 	.word	0x20000470
 8002c60:	20001258 	.word	0x20001258

08002c64 <ADC_IRQHandler>:
 8002c64:	e7fe      	b.n	8002c64 <ADC_IRQHandler>
	...

08002c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_Init+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <HAL_Init+0x34>)
 8002c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <HAL_Init+0x34>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a07      	ldr	r2, [pc, #28]	@ (8002c9c <HAL_Init+0x34>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c82:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c84:	2003      	movs	r0, #3
 8002c86:	f000 f94f 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f000 f808 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c90:	f7ff fd0e 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023c00 	.word	0x40023c00

08002ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_InitTick+0x54>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <HAL_InitTick+0x58>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f967 	bl	8002f92 <HAL_SYSTICK_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00e      	b.n	8002cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d80a      	bhi.n	8002cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f000 f92f 	bl	8002f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce0:	4a06      	ldr	r2, [pc, #24]	@ (8002cfc <HAL_InitTick+0x5c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000029c 	.word	0x2000029c
 8002cf8:	200002a4 	.word	0x200002a4
 8002cfc:	200002a0 	.word	0x200002a0

08002d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x20>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_IncTick+0x24>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <HAL_IncTick+0x24>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	200002a4 	.word	0x200002a4
 8002d24:	20001108 	.word	0x20001108

08002d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_GetTick+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20001108 	.word	0x20001108

08002d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff ffee 	bl	8002d28 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d005      	beq.n	8002d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <HAL_Delay+0x44>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d66:	bf00      	nop
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d8f7      	bhi.n	8002d68 <HAL_Delay+0x28>
  {
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200002a4 	.word	0x200002a4

08002d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0307 	and.w	r3, r3, #7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	@ (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	@ (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	@ (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	@ 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef4:	d301      	bcc.n	8002efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00f      	b.n	8002f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <SysTick_Config+0x40>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f02:	210f      	movs	r1, #15
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f7ff ff8e 	bl	8002e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <SysTick_Config+0x40>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <SysTick_Config+0x40>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff29 	bl	8002d88 <__NVIC_SetPriorityGrouping>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f50:	f7ff ff3e 	bl	8002dd0 <__NVIC_GetPriorityGrouping>
 8002f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7ff ff8e 	bl	8002e7c <NVIC_EncodePriority>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff5d 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff31 	bl	8002dec <__NVIC_EnableIRQ>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ffa2 	bl	8002ee4 <SysTick_Config>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff feb6 	bl	8002d28 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e099      	b.n	80030fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe8:	e00f      	b.n	800300a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fea:	f7ff fe9d 	bl	8002d28 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d908      	bls.n	800300a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2203      	movs	r2, #3
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e078      	b.n	80030fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e8      	bne.n	8002fea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_DMA_Init+0x158>)
 8003024:	4013      	ands	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	2b04      	cmp	r3, #4
 8003062:	d107      	bne.n	8003074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	4313      	orrs	r3, r2
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	2b04      	cmp	r3, #4
 800309c:	d117      	bne.n	80030ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fb01 	bl	80036b8 <DMA_CheckFifoParam>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2240      	movs	r2, #64	@ 0x40
 80030c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030ca:	2301      	movs	r3, #1
 80030cc:	e016      	b.n	80030fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fab8 	bl	800364c <DMA_CalcBaseAndBitshift>
 80030dc:	4603      	mov	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e4:	223f      	movs	r2, #63	@ 0x3f
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	f010803f 	.word	0xf010803f

08003108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_DMA_Start_IT+0x26>
 800312a:	2302      	movs	r3, #2
 800312c:	e040      	b.n	80031b0 <HAL_DMA_Start_IT+0xa8>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d12f      	bne.n	80031a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa4a 	bl	80035f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	223f      	movs	r2, #63	@ 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0216 	orr.w	r2, r2, #22
 8003176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e005      	b.n	80031ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
 80031ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031c6:	f7ff fdaf 	bl	8002d28 <HAL_GetTick>
 80031ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d008      	beq.n	80031ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e052      	b.n	8003290 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0216 	bic.w	r2, r2, #22
 80031f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003208:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_DMA_Abort+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0208 	bic.w	r2, r2, #8
 8003228:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323a:	e013      	b.n	8003264 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323c:	f7ff fd74 	bl	8002d28 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b05      	cmp	r3, #5
 8003248:	d90c      	bls.n	8003264 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2203      	movs	r2, #3
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e015      	b.n	8003290 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e4      	bne.n	800323c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	223f      	movs	r2, #63	@ 0x3f
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	@ 0x80
 80032b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00c      	b.n	80032d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2205      	movs	r2, #5
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003524 <HAL_DMA_IRQHandler+0x248>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003528 <HAL_DMA_IRQHandler+0x24c>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	2208      	movs	r2, #8
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01a      	beq.n	8003348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	2208      	movs	r2, #8
 8003336:	409a      	lsls	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336a:	2201      	movs	r2, #1
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f043 0202 	orr.w	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	2204      	movs	r2, #4
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	2204      	movs	r2, #4
 80033a2:	409a      	lsls	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	2210      	movs	r2, #16
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d043      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03c      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	2210      	movs	r2, #16
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d018      	beq.n	800341e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d024      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
 800340a:	e01f      	b.n	800344c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e016      	b.n	800344c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0208 	bic.w	r2, r2, #8
 800343a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	2220      	movs	r2, #32
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 808f 	beq.w	800357c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8087 	beq.w	800357c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	2220      	movs	r2, #32
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b05      	cmp	r3, #5
 8003484:	d136      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0216 	bic.w	r2, r2, #22
 8003494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x1da>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0208 	bic.w	r2, r2, #8
 80034c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	223f      	movs	r2, #63	@ 0x3f
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d07e      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
        }
        return;
 80034f2:	e079      	b.n	80035e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01d      	beq.n	800353e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	2b00      	cmp	r3, #0
 8003516:	d031      	beq.n	800357c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
 8003520:	e02c      	b.n	800357c <HAL_DMA_IRQHandler+0x2a0>
 8003522:	bf00      	nop
 8003524:	2000029c 	.word	0x2000029c
 8003528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e01e      	b.n	800357c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0210 	bic.w	r2, r2, #16
 800355a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003580:	2b00      	cmp	r3, #0
 8003582:	d032      	beq.n	80035ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2205      	movs	r2, #5
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3301      	adds	r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d307      	bcc.n	80035c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f2      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x2cc>
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
 80035e6:	e000      	b.n	80035ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80035e8:	bf00      	nop
    }
  }
}
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800360c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d108      	bne.n	8003630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800362e:	e007      	b.n	8003640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3b10      	subs	r3, #16
 800365c:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <DMA_CalcBaseAndBitshift+0x64>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003666:	4a13      	ldr	r2, [pc, #76]	@ (80036b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d909      	bls.n	800368e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	659a      	str	r2, [r3, #88]	@ 0x58
 800368c:	e007      	b.n	800369e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	aaaaaaab 	.word	0xaaaaaaab
 80036b4:	08009f5c 	.word	0x08009f5c

080036b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11f      	bne.n	8003712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d856      	bhi.n	8003786 <DMA_CheckFifoParam+0xce>
 80036d8:	a201      	add	r2, pc, #4	@ (adr r2, 80036e0 <DMA_CheckFifoParam+0x28>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003703 	.word	0x08003703
 80036e8:	080036f1 	.word	0x080036f1
 80036ec:	08003787 	.word	0x08003787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d046      	beq.n	800378a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e043      	b.n	800378a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800370a:	d140      	bne.n	800378e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e03d      	b.n	800378e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371a:	d121      	bne.n	8003760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d837      	bhi.n	8003792 <DMA_CheckFifoParam+0xda>
 8003722:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <DMA_CheckFifoParam+0x70>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	0800373f 	.word	0x0800373f
 8003730:	08003739 	.word	0x08003739
 8003734:	08003751 	.word	0x08003751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e030      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d025      	beq.n	8003796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374e:	e022      	b.n	8003796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003758:	d11f      	bne.n	800379a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800375e:	e01c      	b.n	800379a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d903      	bls.n	800376e <DMA_CheckFifoParam+0xb6>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d003      	beq.n	8003774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800376c:	e018      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      break;
 8003772:	e015      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e00b      	b.n	800379e <DMA_CheckFifoParam+0xe6>
      break;
 8003786:	bf00      	nop
 8003788:	e00a      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800378a:	bf00      	nop
 800378c:	e008      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
 8003790:	e006      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003792:	bf00      	nop
 8003794:	e004      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
    }
  } 
  
  return status; 
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop

080037b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	@ 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e165      	b.n	8003a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8154 	bne.w	8003a92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d130      	bne.n	8003864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 0201 	and.w	r2, r3, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d017      	beq.n	80038a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80ae 	beq.w	8003a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ab0 <HAL_GPIO_Init+0x300>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab0 <HAL_GPIO_Init+0x300>)
 8003940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003944:	6453      	str	r3, [r2, #68]	@ 0x44
 8003946:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <HAL_GPIO_Init+0x300>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003952:	4a58      	ldr	r2, [pc, #352]	@ (8003ab4 <HAL_GPIO_Init+0x304>)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	220f      	movs	r2, #15
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4f      	ldr	r2, [pc, #316]	@ (8003ab8 <HAL_GPIO_Init+0x308>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d025      	beq.n	80039ca <HAL_GPIO_Init+0x21a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4e      	ldr	r2, [pc, #312]	@ (8003abc <HAL_GPIO_Init+0x30c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <HAL_GPIO_Init+0x216>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac0 <HAL_GPIO_Init+0x310>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d019      	beq.n	80039c2 <HAL_GPIO_Init+0x212>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac4 <HAL_GPIO_Init+0x314>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_GPIO_Init+0x20e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4b      	ldr	r2, [pc, #300]	@ (8003ac8 <HAL_GPIO_Init+0x318>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00d      	beq.n	80039ba <HAL_GPIO_Init+0x20a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4a      	ldr	r2, [pc, #296]	@ (8003acc <HAL_GPIO_Init+0x31c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_Init+0x206>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a49      	ldr	r2, [pc, #292]	@ (8003ad0 <HAL_GPIO_Init+0x320>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_GPIO_Init+0x202>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e00c      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039b2:	2307      	movs	r3, #7
 80039b4:	e00a      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039b6:	2305      	movs	r3, #5
 80039b8:	e008      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039be:	2303      	movs	r3, #3
 80039c0:	e004      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e002      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_GPIO_Init+0x21c>
 80039ca:	2300      	movs	r3, #0
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f002 0203 	and.w	r2, r2, #3
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	4093      	lsls	r3, r2
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039dc:	4935      	ldr	r1, [pc, #212]	@ (8003ab4 <HAL_GPIO_Init+0x304>)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	3302      	adds	r3, #2
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a0e:	4a31      	ldr	r2, [pc, #196]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a14:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a3e:	4b25      	ldr	r3, [pc, #148]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <HAL_GPIO_Init+0x324>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3301      	adds	r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b0f      	cmp	r3, #15
 8003a9c:	f67f ae96 	bls.w	80037cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40020000 	.word	0x40020000
 8003abc:	40020400 	.word	0x40020400
 8003ac0:	40020800 	.word	0x40020800
 8003ac4:	40020c00 	.word	0x40020c00
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40021400 	.word	0x40021400
 8003ad0:	40021800 	.word	0x40021800
 8003ad4:	40013c00 	.word	0x40013c00

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b22:	4a05      	ldr	r2, [pc, #20]	@ (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fbe8 	bl	8002300 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40013c00 	.word	0x40013c00

08003b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b62:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b68:	f7ff f8de 	bl	8002d28 <HAL_GetTick>
 8003b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b6e:	e009      	b.n	8003b84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b70:	f7ff f8da 	bl	8002d28 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b7e:	d901      	bls.n	8003b84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e01f      	b.n	8003bc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d1ee      	bne.n	8003b70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b92:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b98:	f7ff f8c6 	bl	8002d28 <HAL_GetTick>
 8003b9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b9e:	e009      	b.n	8003bb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ba0:	f7ff f8c2 	bl	8002d28 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bae:	d901      	bls.n	8003bb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e007      	b.n	8003bc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bb4:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	420e0040 	.word	0x420e0040
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	420e0044 	.word	0x420e0044

08003bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0cc      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b68      	ldr	r3, [pc, #416]	@ (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d90c      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b65      	ldr	r3, [pc, #404]	@ (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b63      	ldr	r3, [pc, #396]	@ (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0b8      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c30:	4b59      	ldr	r3, [pc, #356]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a58      	ldr	r2, [pc, #352]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c48:	4b53      	ldr	r3, [pc, #332]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c54:	4b50      	ldr	r3, [pc, #320]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	494d      	ldr	r1, [pc, #308]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d044      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	4b47      	ldr	r3, [pc, #284]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d119      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d003      	beq.n	8003c9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	4b3b      	ldr	r3, [pc, #236]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e067      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	4b37      	ldr	r3, [pc, #220]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4934      	ldr	r1, [pc, #208]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ccc:	f7ff f82c 	bl	8002d28 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7ff f828 	bl	8002d28 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e04f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 020c 	and.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1eb      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b25      	ldr	r3, [pc, #148]	@ (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d20c      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b22      	ldr	r3, [pc, #136]	@ (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e032      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d30:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4916      	ldr	r1, [pc, #88]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	490e      	ldr	r1, [pc, #56]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d62:	f000 f855 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	490a      	ldr	r1, [pc, #40]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	5ccb      	ldrb	r3, [r1, r3]
 8003d76:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7a:	4a09      	ldr	r2, [pc, #36]	@ (8003da0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ff8c 	bl	8002ca0 <HAL_InitTick>

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023c00 	.word	0x40023c00
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	08009f44 	.word	0x08009f44
 8003da0:	2000029c 	.word	0x2000029c
 8003da4:	200002a0 	.word	0x200002a0

08003da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000029c 	.word	0x2000029c

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff0 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0a9b      	lsrs	r3, r3, #10
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	08009f54 	.word	0x08009f54

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dec:	f7ff ffdc 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0b5b      	lsrs	r3, r3, #13
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	08009f54 	.word	0x08009f54

08003e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e14:	b0ae      	sub	sp, #184	@ 0xb8
 8003e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e36:	4bcb      	ldr	r3, [pc, #812]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	f200 8206 	bhi.w	8004250 <HAL_RCC_GetSysClockFreq+0x440>
 8003e44:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08004251 	.word	0x08004251
 8003e54:	08004251 	.word	0x08004251
 8003e58:	08004251 	.word	0x08004251
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08004251 	.word	0x08004251
 8003e64:	08004251 	.word	0x08004251
 8003e68:	08004251 	.word	0x08004251
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08004251 	.word	0x08004251
 8003e74:	08004251 	.word	0x08004251
 8003e78:	08004251 	.word	0x08004251
 8003e7c:	08004081 	.word	0x08004081
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4bb9      	ldr	r3, [pc, #740]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e86:	e1e7      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e88:	4bb8      	ldr	r3, [pc, #736]	@ (800416c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e8e:	e1e3      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e90:	4bb4      	ldr	r3, [pc, #720]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9c:	4bb1      	ldr	r3, [pc, #708]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d071      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea8:	4bae      	ldr	r3, [pc, #696]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003eb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	0159      	lsls	r1, r3, #5
 8003edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee0:	0150      	lsls	r0, r2, #5
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	1a51      	subs	r1, r2, r1
 8003eea:	6439      	str	r1, [r7, #64]	@ 0x40
 8003eec:	4629      	mov	r1, r5
 8003eee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f00:	4649      	mov	r1, r9
 8003f02:	018b      	lsls	r3, r1, #6
 8003f04:	4641      	mov	r1, r8
 8003f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	018a      	lsls	r2, r1, #6
 8003f0e:	4641      	mov	r1, r8
 8003f10:	1a51      	subs	r1, r2, r1
 8003f12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f14:	4649      	mov	r1, r9
 8003f16:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f28:	4649      	mov	r1, r9
 8003f2a:	00cb      	lsls	r3, r1, #3
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f32:	4641      	mov	r1, r8
 8003f34:	00ca      	lsls	r2, r1, #3
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f42:	462b      	mov	r3, r5
 8003f44:	460a      	mov	r2, r1
 8003f46:	eb42 0303 	adc.w	r3, r2, r3
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f58:	4629      	mov	r1, r5
 8003f5a:	024b      	lsls	r3, r1, #9
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f62:	4621      	mov	r1, r4
 8003f64:	024a      	lsls	r2, r1, #9
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f7c:	f7fc fe44 	bl	8000c08 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f8a:	e067      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8c:	4b75      	ldr	r3, [pc, #468]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003faa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	0159      	lsls	r1, r3, #5
 8003fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc0:	0150      	lsls	r0, r2, #5
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	1a51      	subs	r1, r2, r1
 8003fca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fcc:	4629      	mov	r1, r5
 8003fce:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	018b      	lsls	r3, r1, #6
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fea:	4641      	mov	r1, r8
 8003fec:	018a      	lsls	r2, r1, #6
 8003fee:	4641      	mov	r1, r8
 8003ff0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004006:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800400a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400e:	4692      	mov	sl, r2
 8004010:	469b      	mov	fp, r3
 8004012:	4623      	mov	r3, r4
 8004014:	eb1a 0303 	adds.w	r3, sl, r3
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	462b      	mov	r3, r5
 800401c:	eb4b 0303 	adc.w	r3, fp, r3
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800402e:	4629      	mov	r1, r5
 8004030:	028b      	lsls	r3, r1, #10
 8004032:	4621      	mov	r1, r4
 8004034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004038:	4621      	mov	r1, r4
 800403a:	028a      	lsls	r2, r1, #10
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004044:	2200      	movs	r2, #0
 8004046:	673b      	str	r3, [r7, #112]	@ 0x70
 8004048:	677a      	str	r2, [r7, #116]	@ 0x74
 800404a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800404e:	f7fc fddb 	bl	8000c08 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4613      	mov	r3, r2
 8004058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800405c:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	3301      	adds	r3, #1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800406e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800407e:	e0eb      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004080:	4b38      	ldr	r3, [pc, #224]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800408c:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d06b      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004098:	4b32      	ldr	r3, [pc, #200]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x354>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	2200      	movs	r2, #0
 80040a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ac:	2300      	movs	r3, #0
 80040ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80040b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	f04f 0000 	mov.w	r0, #0
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	0159      	lsls	r1, r3, #5
 80040c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c6:	0150      	lsls	r0, r2, #5
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4621      	mov	r1, r4
 80040ce:	1a51      	subs	r1, r2, r1
 80040d0:	61b9      	str	r1, [r7, #24]
 80040d2:	4629      	mov	r1, r5
 80040d4:	eb63 0301 	sbc.w	r3, r3, r1
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040e6:	4659      	mov	r1, fp
 80040e8:	018b      	lsls	r3, r1, #6
 80040ea:	4651      	mov	r1, sl
 80040ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040f0:	4651      	mov	r1, sl
 80040f2:	018a      	lsls	r2, r1, #6
 80040f4:	4651      	mov	r1, sl
 80040f6:	ebb2 0801 	subs.w	r8, r2, r1
 80040fa:	4659      	mov	r1, fp
 80040fc:	eb63 0901 	sbc.w	r9, r3, r1
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800410c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004110:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004114:	4690      	mov	r8, r2
 8004116:	4699      	mov	r9, r3
 8004118:	4623      	mov	r3, r4
 800411a:	eb18 0303 	adds.w	r3, r8, r3
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	462b      	mov	r3, r5
 8004122:	eb49 0303 	adc.w	r3, r9, r3
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004134:	4629      	mov	r1, r5
 8004136:	024b      	lsls	r3, r1, #9
 8004138:	4621      	mov	r1, r4
 800413a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800413e:	4621      	mov	r1, r4
 8004140:	024a      	lsls	r2, r1, #9
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800414a:	2200      	movs	r2, #0
 800414c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800414e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004150:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004154:	f7fc fd58 	bl	8000c08 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4613      	mov	r3, r2
 800415e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004162:	e065      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x420>
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004170:	4b3d      	ldr	r3, [pc, #244]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x458>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	2200      	movs	r2, #0
 8004178:	4618      	mov	r0, r3
 800417a:	4611      	mov	r1, r2
 800417c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004180:	653b      	str	r3, [r7, #80]	@ 0x50
 8004182:	2300      	movs	r3, #0
 8004184:	657b      	str	r3, [r7, #84]	@ 0x54
 8004186:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800418a:	4642      	mov	r2, r8
 800418c:	464b      	mov	r3, r9
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4641      	mov	r1, r8
 80041a4:	1a51      	subs	r1, r2, r1
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	4649      	mov	r1, r9
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041bc:	4659      	mov	r1, fp
 80041be:	018b      	lsls	r3, r1, #6
 80041c0:	4651      	mov	r1, sl
 80041c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c6:	4651      	mov	r1, sl
 80041c8:	018a      	lsls	r2, r1, #6
 80041ca:	4651      	mov	r1, sl
 80041cc:	1a54      	subs	r4, r2, r1
 80041ce:	4659      	mov	r1, fp
 80041d0:	eb63 0501 	sbc.w	r5, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb45 0303 	adc.w	r3, r5, r3
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004218:	2200      	movs	r2, #0
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800421e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004222:	f7fc fcf1 	bl	8000c08 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4613      	mov	r3, r2
 800422c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x458>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0f1b      	lsrs	r3, r3, #28
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800423e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800424e:	e003      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800425c:	4618      	mov	r0, r3
 800425e:	37b8      	adds	r7, #184	@ 0xb8
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400

08004270 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e28d      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8083 	beq.w	8004396 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004290:	4b94      	ldr	r3, [pc, #592]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b04      	cmp	r3, #4
 800429a:	d019      	beq.n	80042d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800429c:	4b91      	ldr	r3, [pc, #580]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042a8:	4b8e      	ldr	r3, [pc, #568]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b4:	d00c      	beq.n	80042d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b8b      	ldr	r3, [pc, #556]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d112      	bne.n	80042e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4b88      	ldr	r3, [pc, #544]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	4b84      	ldr	r3, [pc, #528]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05b      	beq.n	8004394 <HAL_RCC_OscConfig+0x124>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d157      	bne.n	8004394 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e25a      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x90>
 80042f2:	4b7c      	ldr	r3, [pc, #496]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7b      	ldr	r2, [pc, #492]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xcc>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0xb4>
 800430a:	4b76      	ldr	r3, [pc, #472]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a75      	ldr	r2, [pc, #468]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b73      	ldr	r3, [pc, #460]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a72      	ldr	r2, [pc, #456]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xcc>
 8004324:	4b6f      	ldr	r3, [pc, #444]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6e      	ldr	r2, [pc, #440]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b6c      	ldr	r3, [pc, #432]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6b      	ldr	r2, [pc, #428]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe fcf0 	bl	8002d28 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe fcec 	bl	8002d28 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e21f      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b61      	ldr	r3, [pc, #388]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xdc>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fe fcdc 	bl	8002d28 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe fcd8 	bl	8002d28 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e20b      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	4b57      	ldr	r3, [pc, #348]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x104>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d06f      	beq.n	8004482 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043a2:	4b50      	ldr	r3, [pc, #320]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043ae:	4b4d      	ldr	r3, [pc, #308]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d105      	bne.n	80043c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043ba:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b44      	ldr	r3, [pc, #272]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x186>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1d3      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4937      	ldr	r1, [pc, #220]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e03a      	b.n	8004482 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004414:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <HAL_RCC_OscConfig+0x278>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fe fc85 	bl	8002d28 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7fe fc81 	bl	8002d28 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1b4      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4925      	ldr	r1, [pc, #148]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_RCC_OscConfig+0x278>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe fc64 	bl	8002d28 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004464:	f7fe fc60 	bl	8002d28 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e193      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d036      	beq.n	80044fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fe fc44 	bl	8002d28 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fe fc40 	bl	8002d28 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e173      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x234>
 80044c2:	e01b      	b.n	80044fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <HAL_RCC_OscConfig+0x27c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fe fc2d 	bl	8002d28 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	e00e      	b.n	80044f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fe fc29 	bl	8002d28 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d907      	bls.n	80044f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e15c      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	42470000 	.word	0x42470000
 80044ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	4b8a      	ldr	r3, [pc, #552]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ea      	bne.n	80044d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8097 	beq.w	8004638 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b83      	ldr	r3, [pc, #524]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	4b7f      	ldr	r3, [pc, #508]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	4a7e      	ldr	r2, [pc, #504]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	@ 0x40
 800452a:	4b7c      	ldr	r3, [pc, #496]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b79      	ldr	r3, [pc, #484]	@ (8004720 <HAL_RCC_OscConfig+0x4b0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d118      	bne.n	8004578 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004546:	4b76      	ldr	r3, [pc, #472]	@ (8004720 <HAL_RCC_OscConfig+0x4b0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a75      	ldr	r2, [pc, #468]	@ (8004720 <HAL_RCC_OscConfig+0x4b0>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fe fbe9 	bl	8002d28 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455a:	f7fe fbe5 	bl	8002d28 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e118      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b6c      	ldr	r3, [pc, #432]	@ (8004720 <HAL_RCC_OscConfig+0x4b0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x31e>
 8004580:	4b66      	ldr	r3, [pc, #408]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a65      	ldr	r2, [pc, #404]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x358>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x340>
 8004596:	4b61      	ldr	r3, [pc, #388]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a60      	ldr	r2, [pc, #384]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a2:	4b5e      	ldr	r3, [pc, #376]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a5d      	ldr	r2, [pc, #372]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x358>
 80045b0:	4b5a      	ldr	r3, [pc, #360]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	4a59      	ldr	r2, [pc, #356]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80045bc:	4b57      	ldr	r3, [pc, #348]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a56      	ldr	r2, [pc, #344]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fe fbaa 	bl	8002d28 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe fba6 	bl	8002d28 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0d7      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	4b4b      	ldr	r3, [pc, #300]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCC_OscConfig+0x368>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fe fb94 	bl	8002d28 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fe fb90 	bl	8002d28 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0c1      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	4b40      	ldr	r3, [pc, #256]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ee      	bne.n	8004604 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462c:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	4a3a      	ldr	r2, [pc, #232]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80ad 	beq.w	800479c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004642:	4b36      	ldr	r3, [pc, #216]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b08      	cmp	r3, #8
 800464c:	d060      	beq.n	8004710 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d145      	bne.n	80046e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b33      	ldr	r3, [pc, #204]	@ (8004724 <HAL_RCC_OscConfig+0x4b4>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fe fb64 	bl	8002d28 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fb60 	bl	8002d28 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e093      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b29      	ldr	r3, [pc, #164]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	071b      	lsls	r3, r3, #28
 80046ae:	491b      	ldr	r1, [pc, #108]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004724 <HAL_RCC_OscConfig+0x4b4>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fe fb35 	bl	8002d28 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fe fb31 	bl	8002d28 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e064      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	4b11      	ldr	r3, [pc, #68]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x452>
 80046e0:	e05c      	b.n	800479c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	4b10      	ldr	r3, [pc, #64]	@ (8004724 <HAL_RCC_OscConfig+0x4b4>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fe fb1e 	bl	8002d28 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fe fb1a 	bl	8002d28 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e04d      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x480>
 800470e:	e045      	b.n	800479c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e040      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
 8004724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004728:	4b1f      	ldr	r3, [pc, #124]	@ (80047a8 <HAL_RCC_OscConfig+0x538>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d030      	beq.n	8004798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d129      	bne.n	8004798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d122      	bne.n	8004798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800475e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004760:	4293      	cmp	r3, r2
 8004762:	d119      	bne.n	8004798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	3b01      	subs	r3, #1
 8004772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d10f      	bne.n	8004798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e07b      	b.n	80048b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d108      	bne.n	80047d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ce:	d009      	beq.n	80047e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	61da      	str	r2, [r3, #28]
 80047d6:	e005      	b.n	80047e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd ff7e 	bl	8002700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800481a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004868:	ea42 0103 	orr.w	r1, r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 0104 	and.w	r1, r3, #4
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	f003 0210 	and.w	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b088      	sub	sp, #32
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ce:	f7fe fa2b 	bl	8002d28 <HAL_GetTick>
 80048d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d001      	beq.n	80048e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
 80048e6:	e12a      	b.n	8004b3e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0x36>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e122      	b.n	8004b3e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Transmit+0x48>
 8004902:	2302      	movs	r3, #2
 8004904:	e11b      	b.n	8004b3e <HAL_SPI_Transmit+0x280>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004954:	d10f      	bne.n	8004976 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d007      	beq.n	8004994 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800499c:	d152      	bne.n	8004a44 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_Transmit+0xee>
 80049a6:	8b7b      	ldrh	r3, [r7, #26]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d145      	bne.n	8004a38 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049d0:	e032      	b.n	8004a38 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d112      	bne.n	8004a06 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a04:	e018      	b.n	8004a38 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a06:	f7fe f98f 	bl	8002d28 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d803      	bhi.n	8004a1e <HAL_SPI_Transmit+0x160>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d102      	bne.n	8004a24 <HAL_SPI_Transmit+0x166>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e082      	b.n	8004b3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1c7      	bne.n	80049d2 <HAL_SPI_Transmit+0x114>
 8004a42:	e053      	b.n	8004aec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_Transmit+0x194>
 8004a4c:	8b7b      	ldrh	r3, [r7, #26]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d147      	bne.n	8004ae2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a78:	e033      	b.n	8004ae2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d113      	bne.n	8004ab0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004aae:	e018      	b.n	8004ae2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab0:	f7fe f93a 	bl	8002d28 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d803      	bhi.n	8004ac8 <HAL_SPI_Transmit+0x20a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d102      	bne.n	8004ace <HAL_SPI_Transmit+0x210>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e02d      	b.n	8004b3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1c6      	bne.n	8004a7a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	6839      	ldr	r1, [r7, #0]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fbd9 	bl	80052a8 <SPI_EndRxTxTransaction>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b088      	sub	sp, #32
 8004b4a:	af02      	add	r7, sp, #8
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	e104      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6e:	d112      	bne.n	8004b96 <HAL_SPI_Receive+0x50>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10e      	bne.n	8004b96 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f8f3 	bl	8004d78 <HAL_SPI_TransmitReceive>
 8004b92:	4603      	mov	r3, r0
 8004b94:	e0ec      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b96:	f7fe f8c7 	bl	8002d28 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Receive+0x62>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0e1      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_SPI_Receive+0x74>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0da      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c08:	d10f      	bne.n	8004c2a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d007      	beq.n	8004c48 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d170      	bne.n	8004d32 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c50:	e035      	b.n	8004cbe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d115      	bne.n	8004c8c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f103 020c 	add.w	r2, r3, #12
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c8a:	e018      	b.n	8004cbe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8c:	f7fe f84c 	bl	8002d28 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d803      	bhi.n	8004ca4 <HAL_SPI_Receive+0x15e>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d102      	bne.n	8004caa <HAL_SPI_Receive+0x164>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e058      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1c4      	bne.n	8004c52 <HAL_SPI_Receive+0x10c>
 8004cc8:	e038      	b.n	8004d3c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d113      	bne.n	8004d00 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cfe:	e018      	b.n	8004d32 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d00:	f7fe f812 	bl	8002d28 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d803      	bhi.n	8004d18 <HAL_SPI_Receive+0x1d2>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d102      	bne.n	8004d1e <HAL_SPI_Receive+0x1d8>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e01e      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1c6      	bne.n	8004cca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fa4b 	bl	80051dc <SPI_EndRxTransaction>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	@ 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d86:	2301      	movs	r3, #1
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d8a:	f7fd ffcd 	bl	8002d28 <HAL_GetTick>
 8004d8e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d96:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004da2:	7ffb      	ldrb	r3, [r7, #31]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d00c      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x4a>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dae:	d106      	bne.n	8004dbe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_TransmitReceive+0x46>
 8004db8:	7ffb      	ldrb	r3, [r7, #31]
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d001      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e17f      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x5c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x5c>
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e174      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x6e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e16d      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d003      	beq.n	8004e02 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2205      	movs	r2, #5
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	887a      	ldrh	r2, [r7, #2]
 8004e2a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d007      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5e:	d17e      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0xf6>
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d16c      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	881a      	ldrh	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e92:	e059      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d11b      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x162>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x162>
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d113      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	881a      	ldrh	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d119      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x1a4>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d014      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	b292      	uxth	r2, r2
 8004efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f1c:	f7fd ff04 	bl	8002d28 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d80d      	bhi.n	8004f48 <HAL_SPI_TransmitReceive+0x1d0>
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d009      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0bc      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1a0      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x11c>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d19b      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x11c>
 8004f5c:	e082      	b.n	8005064 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x1f4>
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d171      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f92:	e05d      	b.n	8005050 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d11c      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x264>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d017      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x264>
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d114      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d119      	bne.n	800501e <HAL_SPI_TransmitReceive+0x2a6>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d014      	beq.n	800501e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800501a:	2301      	movs	r3, #1
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800501e:	f7fd fe83 	bl	8002d28 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800502a:	429a      	cmp	r2, r3
 800502c:	d803      	bhi.n	8005036 <HAL_SPI_TransmitReceive+0x2be>
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d102      	bne.n	800503c <HAL_SPI_TransmitReceive+0x2c4>
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e038      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d19c      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x21c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d197      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f91d 	bl	80052a8 <SPI_EndRxTxTransaction>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e01d      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80050c0:	2300      	movs	r3, #0
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3728      	adds	r7, #40	@ 0x28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050dc:	f7fd fe24 	bl	8002d28 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050ec:	f7fd fe1c 	bl	8002d28 <HAL_GetTick>
 80050f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050f2:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	0d1b      	lsrs	r3, r3, #20
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005102:	e054      	b.n	80051ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d050      	beq.n	80051ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800510c:	f7fd fe0c 	bl	8002d28 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	429a      	cmp	r2, r3
 800511a:	d902      	bls.n	8005122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d13d      	bne.n	800519e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800513a:	d111      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005144:	d004      	beq.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514e:	d107      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005168:	d10f      	bne.n	800518a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e017      	b.n	80051ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d19b      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000029c 	.word	0x2000029c

080051dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f0:	d111      	bne.n	8005216 <SPI_EndRxTransaction+0x3a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fa:	d004      	beq.n	8005206 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005204:	d107      	bne.n	8005216 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005214:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800521e:	d12a      	bne.n	8005276 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005228:	d012      	beq.n	8005250 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2200      	movs	r2, #0
 8005232:	2180      	movs	r1, #128	@ 0x80
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff ff49 	bl	80050cc <SPI_WaitFlagStateUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02d      	beq.n	800529c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e026      	b.n	800529e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	2101      	movs	r1, #1
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff ff36 	bl	80050cc <SPI_WaitFlagStateUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01a      	beq.n	800529c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e013      	b.n	800529e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	2101      	movs	r1, #1
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff ff23 	bl	80050cc <SPI_WaitFlagStateUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e000      	b.n	800529e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2201      	movs	r2, #1
 80052bc:	2102      	movs	r1, #2
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff ff04 	bl	80050cc <SPI_WaitFlagStateUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e032      	b.n	8005340 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052da:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <SPI_EndRxTxTransaction+0xa0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <SPI_EndRxTxTransaction+0xa4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	0d5b      	lsrs	r3, r3, #21
 80052e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052f8:	d112      	bne.n	8005320 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	2180      	movs	r1, #128	@ 0x80
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff fee1 	bl	80050cc <SPI_WaitFlagStateUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d016      	beq.n	800533e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e00f      	b.n	8005340 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3b01      	subs	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005336:	2b80      	cmp	r3, #128	@ 0x80
 8005338:	d0f2      	beq.n	8005320 <SPI_EndRxTxTransaction+0x78>
 800533a:	e000      	b.n	800533e <SPI_EndRxTxTransaction+0x96>
        break;
 800533c:	bf00      	nop
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000029c 	.word	0x2000029c
 800534c:	165e9f81 	.word	0x165e9f81

08005350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e041      	b.n	80053e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fd fa40 	bl	80027fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 f95e 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d001      	beq.n	8005408 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e046      	b.n	8005496 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a23      	ldr	r2, [pc, #140]	@ (80054a4 <HAL_TIM_Base_Start+0xb4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d022      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005422:	d01d      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <HAL_TIM_Base_Start+0xb8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_TIM_Base_Start+0xbc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <HAL_TIM_Base_Start+0xc0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <HAL_TIM_Base_Start+0xc4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a19      	ldr	r2, [pc, #100]	@ (80054b8 <HAL_TIM_Base_Start+0xc8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIM_Base_Start+0x70>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <HAL_TIM_Base_Start+0xcc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d111      	bne.n	8005484 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b06      	cmp	r3, #6
 8005470:	d010      	beq.n	8005494 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	e007      	b.n	8005494 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40010400 	.word	0x40010400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40001800 	.word	0x40001800

080054c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_ConfigClockSource+0x1c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0b4      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x186>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005514:	d03e      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0xd4>
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551a:	f200 8087 	bhi.w	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005522:	f000 8086 	beq.w	8005632 <HAL_TIM_ConfigClockSource+0x172>
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552a:	d87f      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b70      	cmp	r3, #112	@ 0x70
 800552e:	d01a      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0xa6>
 8005530:	2b70      	cmp	r3, #112	@ 0x70
 8005532:	d87b      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b60      	cmp	r3, #96	@ 0x60
 8005536:	d050      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x11a>
 8005538:	2b60      	cmp	r3, #96	@ 0x60
 800553a:	d877      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b50      	cmp	r3, #80	@ 0x50
 800553e:	d03c      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0xfa>
 8005540:	2b50      	cmp	r3, #80	@ 0x50
 8005542:	d873      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	d058      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x13a>
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d86f      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800554c:	2b30      	cmp	r3, #48	@ 0x30
 800554e:	d064      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005550:	2b30      	cmp	r3, #48	@ 0x30
 8005552:	d86b      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 8005554:	2b20      	cmp	r3, #32
 8005556:	d060      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d867      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d05c      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005560:	2b10      	cmp	r3, #16
 8005562:	d05a      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x15a>
 8005564:	e062      	b.n	800562c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005576:	f000 f991 	bl	800589c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	609a      	str	r2, [r3, #8]
      break;
 8005592:	e04f      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a4:	f000 f97a 	bl	800589c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b6:	609a      	str	r2, [r3, #8]
      break;
 80055b8:	e03c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 f8ee 	bl	80057a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2150      	movs	r1, #80	@ 0x50
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f947 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e02c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e6:	461a      	mov	r2, r3
 80055e8:	f000 f90d 	bl	8005806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2160      	movs	r1, #96	@ 0x60
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f937 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 80055f8:	e01c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005606:	461a      	mov	r2, r3
 8005608:	f000 f8ce 	bl	80057a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2140      	movs	r1, #64	@ 0x40
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f927 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 8005618:	e00c      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f000 f91e 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 800562a:	e003      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      break;
 8005630:	e000      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a46      	ldr	r2, [pc, #280]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566e:	d00f      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a43      	ldr	r2, [pc, #268]	@ (8005780 <TIM_Base_SetConfig+0x130>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a42      	ldr	r2, [pc, #264]	@ (8005784 <TIM_Base_SetConfig+0x134>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a41      	ldr	r2, [pc, #260]	@ (8005788 <TIM_Base_SetConfig+0x138>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a40      	ldr	r2, [pc, #256]	@ (800578c <TIM_Base_SetConfig+0x13c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a35      	ldr	r2, [pc, #212]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d02b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b0:	d027      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a32      	ldr	r2, [pc, #200]	@ (8005780 <TIM_Base_SetConfig+0x130>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d023      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a31      	ldr	r2, [pc, #196]	@ (8005784 <TIM_Base_SetConfig+0x134>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01f      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a30      	ldr	r2, [pc, #192]	@ (8005788 <TIM_Base_SetConfig+0x138>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2f      	ldr	r2, [pc, #188]	@ (800578c <TIM_Base_SetConfig+0x13c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d017      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005790 <TIM_Base_SetConfig+0x140>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005794 <TIM_Base_SetConfig+0x144>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00f      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005798 <TIM_Base_SetConfig+0x148>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	@ (800579c <TIM_Base_SetConfig+0x14c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	@ (80057a0 <TIM_Base_SetConfig+0x150>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a29      	ldr	r2, [pc, #164]	@ (80057a4 <TIM_Base_SetConfig+0x154>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a10      	ldr	r2, [pc, #64]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a12      	ldr	r2, [pc, #72]	@ (800578c <TIM_Base_SetConfig+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d105      	bne.n	800576e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]
  }
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40010400 	.word	0x40010400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	40001800 	.word	0x40001800
 80057a0:	40001c00 	.word	0x40001c00
 80057a4:	40002000 	.word	0x40002000

080057a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 030a 	bic.w	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005806:	b480      	push	{r7}
 8005808:	b087      	sub	sp, #28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f023 0210 	bic.w	r2, r3, #16
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	f043 0307 	orr.w	r3, r3, #7
 8005888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	021a      	lsls	r2, r3, #8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	431a      	orrs	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e05a      	b.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d01d      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1a      	ldr	r2, [pc, #104]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10c      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4313      	orrs	r3, r2
 800598e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40010400 	.word	0x40010400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800

080059d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e042      	b.n	8005a6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fc ff1e 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2224      	movs	r2, #36	@ 0x24
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f8a3 	bl	8006b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	@ 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d175      	bne.n	8005b80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_UART_Transmit+0x2c>
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e06e      	b.n	8005b82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2221      	movs	r2, #33	@ 0x21
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab2:	f7fd f939 	bl	8002d28 <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005acc:	d108      	bne.n	8005ae0 <HAL_UART_Transmit+0x6c>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e003      	b.n	8005ae8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ae8:	e02e      	b.n	8005b48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	2180      	movs	r1, #128	@ 0x80
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fd7c 	bl	80065f2 <UART_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e03a      	b.n	8005b82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3302      	adds	r3, #2
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e007      	b.n	8005b3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1cb      	bne.n	8005aea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2140      	movs	r1, #64	@ 0x40
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fd48 	bl	80065f2 <UART_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e006      	b.n	8005b82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08c      	sub	sp, #48	@ 0x30
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d156      	bne.n	8005c54 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Transmit_DMA+0x26>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e04f      	b.n	8005c56 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2221      	movs	r2, #33	@ 0x21
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	4a21      	ldr	r2, [pc, #132]	@ (8005c60 <HAL_UART_Transmit_DMA+0xd4>)
 8005bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	4a20      	ldr	r2, [pc, #128]	@ (8005c64 <HAL_UART_Transmit_DMA+0xd8>)
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bea:	4a1f      	ldr	r2, [pc, #124]	@ (8005c68 <HAL_UART_Transmit_DMA+0xdc>)
 8005bec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f7fd fa7b 	bl	8003108 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3314      	adds	r3, #20
 8005c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3314      	adds	r3, #20
 8005c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6a39      	ldr	r1, [r7, #32]
 8005c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3730      	adds	r7, #48	@ 0x30
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	08006341 	.word	0x08006341
 8005c64:	080063db 	.word	0x080063db
 8005c68:	0800655f 	.word	0x0800655f

08005c6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d112      	bne.n	8005cac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_UART_Receive_DMA+0x26>
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e00b      	b.n	8005cae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fcfe 	bl	80066a4 <UART_Start_Receive_DMA>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e000      	b.n	8005cae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b090      	sub	sp, #64	@ 0x40
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ccc:	2b80      	cmp	r3, #128	@ 0x80
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b21      	cmp	r3, #33	@ 0x21
 8005ce2:	d128      	bne.n	8005d36 <HAL_UART_DMAStop+0x80>
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d025      	beq.n	8005d36 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd fa44 	bl	80031b8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fd51 	bl	80067d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b40      	cmp	r3, #64	@ 0x40
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b22      	cmp	r3, #34	@ 0x22
 8005d56:	d128      	bne.n	8005daa <HAL_UART_DMAStop+0xf4>
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d025      	beq.n	8005daa <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d7e:	61fa      	str	r2, [r7, #28]
 8005d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	69b9      	ldr	r1, [r7, #24]
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e5      	bne.n	8005d5e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd fa0a 	bl	80031b8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fd3f 	bl	8006828 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3740      	adds	r7, #64	@ 0x40
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b0ba      	sub	sp, #232	@ 0xe8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10f      	bne.n	8005e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <HAL_UART_IRQHandler+0x66>
 8005e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fde7 	bl	80069e6 <UART_Receive_IT>
      return;
 8005e18:	e25b      	b.n	80062d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80de 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x22c>
 8005e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80d1 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_UART_IRQHandler+0xae>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_UART_IRQHandler+0xd2>
 8005e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	f043 0202 	orr.w	r2, r3, #2
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_UART_IRQHandler+0xf6>
 8005e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f043 0204 	orr.w	r2, r3, #4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d011      	beq.n	8005eda <HAL_UART_IRQHandler+0x126>
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	f043 0208 	orr.w	r2, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 81f2 	beq.w	80062c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_UART_IRQHandler+0x14e>
 8005ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fd72 	bl	80069e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <HAL_UART_IRQHandler+0x17a>
 8005f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d04f      	beq.n	8005fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fc7a 	bl	8006828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3e:	2b40      	cmp	r3, #64	@ 0x40
 8005f40:	d141      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3314      	adds	r3, #20
 8005f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d9      	bne.n	8005f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d013      	beq.n	8005fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006194 <HAL_UART_IRQHandler+0x3e0>)
 8005f9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fd f978 	bl	8003298 <HAL_DMA_Abort_IT>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	e00e      	b.n	8005fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9a8 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e00a      	b.n	8005fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f9a4 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e006      	b.n	8005fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9a0 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fda:	e175      	b.n	80062c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	bf00      	nop
    return;
 8005fde:	e173      	b.n	80062c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f040 814f 	bne.w	8006288 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8148 	beq.w	8006288 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8141 	beq.w	8006288 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006006:	2300      	movs	r3, #0
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	f040 80b6 	bne.w	8006198 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8145 	beq.w	80062cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800604a:	429a      	cmp	r2, r3
 800604c:	f080 813e 	bcs.w	80062cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006056:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006062:	f000 8088 	beq.w	8006176 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800607c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800609e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1d9      	bne.n	8006066 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3314      	adds	r3, #20
 80060b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e1      	bne.n	80060b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006112:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e3      	bne.n	80060ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006146:	f023 0310 	bic.w	r3, r3, #16
 800614a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006158:	65ba      	str	r2, [r7, #88]	@ 0x58
 800615a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800615e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e3      	bne.n	8006134 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	4618      	mov	r0, r3
 8006172:	f7fd f821 	bl	80031b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006184:	b29b      	uxth	r3, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	b29b      	uxth	r3, r3
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f8cb 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006192:	e09b      	b.n	80062cc <HAL_UART_IRQHandler+0x518>
 8006194:	080068ef 	.word	0x080068ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 808e 	beq.w	80062d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8089 	beq.w	80062d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80061e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e3      	bne.n	80061be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	623b      	str	r3, [r7, #32]
   return(result);
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3314      	adds	r3, #20
 8006216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800621a:	633a      	str	r2, [r7, #48]	@ 0x30
 800621c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	60fb      	str	r3, [r7, #12]
   return(result);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0310 	bic.w	r3, r3, #16
 8006252:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006260:	61fa      	str	r2, [r7, #28]
 8006262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	69b9      	ldr	r1, [r7, #24]
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	617b      	str	r3, [r7, #20]
   return(result);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e3      	bne.n	800623c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800627a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f851 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006286:	e023      	b.n	80062d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006290:	2b00      	cmp	r3, #0
 8006292:	d009      	beq.n	80062a8 <HAL_UART_IRQHandler+0x4f4>
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fb38 	bl	8006916 <UART_Transmit_IT>
    return;
 80062a6:	e014      	b.n	80062d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <HAL_UART_IRQHandler+0x51e>
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb78 	bl	80069b6 <UART_EndTransmit_IT>
    return;
 80062c6:	e004      	b.n	80062d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062d0:	bf00      	nop
  }
}
 80062d2:	37e8      	adds	r7, #232	@ 0xe8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b090      	sub	sp, #64	@ 0x40
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d137      	bne.n	80063cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800635c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635e:	2200      	movs	r2, #0
 8006360:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	623b      	str	r3, [r7, #32]
   return(result);
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006378:	63bb      	str	r3, [r7, #56]	@ 0x38
 800637a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3314      	adds	r3, #20
 8006380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006382:	633a      	str	r2, [r7, #48]	@ 0x30
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	330c      	adds	r3, #12
 80063b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063b6:	61fa      	str	r2, [r7, #28]
 80063b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69b9      	ldr	r1, [r7, #24]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	617b      	str	r3, [r7, #20]
   return(result);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063ca:	e002      	b.n	80063d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80063ce:	f7fc f95f 	bl	8002690 <HAL_UART_TxCpltCallback>
}
 80063d2:	bf00      	nop
 80063d4:	3740      	adds	r7, #64	@ 0x40
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff ff75 	bl	80062d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b09c      	sub	sp, #112	@ 0x70
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640e:	2b00      	cmp	r3, #0
 8006410:	d172      	bne.n	80064f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006414:	2200      	movs	r2, #0
 8006416:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800642a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800642e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006438:	65ba      	str	r2, [r7, #88]	@ 0x58
 800643a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800643e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800645c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	667b      	str	r3, [r7, #100]	@ 0x64
 8006464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3314      	adds	r3, #20
 800646a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800646c:	647a      	str	r2, [r7, #68]	@ 0x44
 800646e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800647a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e5      	bne.n	800644c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	623b      	str	r3, [r7, #32]
   return(result);
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006496:	663b      	str	r3, [r7, #96]	@ 0x60
 8006498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3314      	adds	r3, #20
 800649e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80064a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d119      	bne.n	80064f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0310 	bic.w	r3, r3, #16
 80064da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064e4:	61fa      	str	r2, [r7, #28]
 80064e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	69b9      	ldr	r1, [r7, #24]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	617b      	str	r3, [r7, #20]
   return(result);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064fa:	2200      	movs	r2, #0
 80064fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	2b01      	cmp	r3, #1
 8006504:	d106      	bne.n	8006514 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006508:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800650a:	4619      	mov	r1, r3
 800650c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800650e:	f7ff ff0b 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006512:	e002      	b.n	800651a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006514:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006516:	f7ff fee9 	bl	80062ec <HAL_UART_RxCpltCallback>
}
 800651a:	bf00      	nop
 800651c:	3770      	adds	r7, #112	@ 0x70
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653a:	2b01      	cmp	r3, #1
 800653c:	d108      	bne.n	8006550 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	b29b      	uxth	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff feed 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800654e:	e002      	b.n	8006556 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fed5 	bl	8006300 <HAL_UART_RxHalfCpltCallback>
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b80      	cmp	r3, #128	@ 0x80
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b21      	cmp	r3, #33	@ 0x21
 8006590:	d108      	bne.n	80065a4 <UART_DMAError+0x46>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800659e:	68b8      	ldr	r0, [r7, #8]
 80065a0:	f000 f91a 	bl	80067d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ae:	2b40      	cmp	r3, #64	@ 0x40
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b22      	cmp	r3, #34	@ 0x22
 80065c4:	d108      	bne.n	80065d8 <UART_DMAError+0x7a>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80065d2:	68b8      	ldr	r0, [r7, #8]
 80065d4:	f000 f928 	bl	8006828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065dc:	f043 0210 	orr.w	r2, r3, #16
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065e4:	68b8      	ldr	r0, [r7, #8]
 80065e6:	f7ff fe95 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	4613      	mov	r3, r2
 8006600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006602:	e03b      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d037      	beq.n	800667c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660c:	f7fc fb8c 	bl	8002d28 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	429a      	cmp	r2, r3
 800661a:	d302      	bcc.n	8006622 <UART_WaitOnFlagUntilTimeout+0x30>
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e03a      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d023      	beq.n	800667c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b80      	cmp	r3, #128	@ 0x80
 8006638:	d020      	beq.n	800667c <UART_WaitOnFlagUntilTimeout+0x8a>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b40      	cmp	r3, #64	@ 0x40
 800663e:	d01d      	beq.n	800667c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b08      	cmp	r3, #8
 800664c:	d116      	bne.n	800667c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f8df 	bl	8006828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2208      	movs	r2, #8
 800666e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e00f      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4013      	ands	r3, r2
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	429a      	cmp	r2, r3
 8006698:	d0b4      	beq.n	8006604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b098      	sub	sp, #96	@ 0x60
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2222      	movs	r2, #34	@ 0x22
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	4a3e      	ldr	r2, [pc, #248]	@ (80067cc <UART_Start_Receive_DMA+0x128>)
 80066d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	4a3d      	ldr	r2, [pc, #244]	@ (80067d0 <UART_Start_Receive_DMA+0x12c>)
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e0:	4a3c      	ldr	r2, [pc, #240]	@ (80067d4 <UART_Start_Receive_DMA+0x130>)
 80066e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e8:	2200      	movs	r2, #0
 80066ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80066ec:	f107 0308 	add.w	r3, r7, #8
 80066f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	f7fc fd00 	bl	8003108 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d019      	beq.n	800675a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800673c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006746:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800674c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e5      	bne.n	8006726 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	657b      	str	r3, [r7, #84]	@ 0x54
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800677a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800677c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	617b      	str	r3, [r7, #20]
   return(result);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80067b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6a39      	ldr	r1, [r7, #32]
 80067b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3760      	adds	r7, #96	@ 0x60
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	080063f7 	.word	0x080063f7
 80067d0:	08006523 	.word	0x08006523
 80067d4:	0800655f 	.word	0x0800655f

080067d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b089      	sub	sp, #36	@ 0x24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	61ba      	str	r2, [r7, #24]
 8006802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6979      	ldr	r1, [r7, #20]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	613b      	str	r3, [r7, #16]
   return(result);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800681c:	bf00      	nop
 800681e:	3724      	adds	r7, #36	@ 0x24
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b095      	sub	sp, #84	@ 0x54
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006850:	643a      	str	r2, [r7, #64]	@ 0x40
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	61fb      	str	r3, [r7, #28]
   return(result);
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3314      	adds	r3, #20
 8006882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800688a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	2b01      	cmp	r3, #1
 800689e:	d119      	bne.n	80068d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068c0:	61ba      	str	r2, [r7, #24]
 80068c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	613b      	str	r3, [r7, #16]
   return(result);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068e2:	bf00      	nop
 80068e4:	3754      	adds	r7, #84	@ 0x54
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff fd03 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b21      	cmp	r3, #33	@ 0x21
 8006928:	d13e      	bne.n	80069a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006932:	d114      	bne.n	800695e <UART_Transmit_IT+0x48>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d110      	bne.n	800695e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006950:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]
 800695c:	e008      	b.n	8006970 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6211      	str	r1, [r2, #32]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4619      	mov	r1, r3
 800697e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10f      	bne.n	80069a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006992:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e000      	b.n	80069aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fb fe5a 	bl	8002690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08c      	sub	sp, #48	@ 0x30
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b22      	cmp	r3, #34	@ 0x22
 80069f8:	f040 80ae 	bne.w	8006b58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a04:	d117      	bne.n	8006a36 <UART_Receive_IT+0x50>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d113      	bne.n	8006a36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a34:	e026      	b.n	8006a84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a48:	d007      	beq.n	8006a5a <UART_Receive_IT+0x74>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <UART_Receive_IT+0x82>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e008      	b.n	8006a7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4619      	mov	r1, r3
 8006a92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d15d      	bne.n	8006b54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0220 	bic.w	r2, r2, #32
 8006aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d135      	bne.n	8006b4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b04:	623a      	str	r2, [r7, #32]
 8006b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d10a      	bne.n	8006b3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fbf0 	bl	8006328 <HAL_UARTEx_RxEventCallback>
 8006b48:	e002      	b.n	8006b50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fbce 	bl	80062ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e002      	b.n	8006b5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3730      	adds	r7, #48	@ 0x30
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b68:	b0c0      	sub	sp, #256	@ 0x100
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	68d9      	ldr	r1, [r3, #12]
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	ea40 0301 	orr.w	r3, r0, r1
 8006b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bbc:	f021 010c 	bic.w	r1, r1, #12
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	6999      	ldr	r1, [r3, #24]
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	ea40 0301 	orr.w	r3, r0, r1
 8006bea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e30 <UART_SetConfig+0x2cc>)
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d005      	beq.n	8006c04 <UART_SetConfig+0xa0>
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8006e34 <UART_SetConfig+0x2d0>)
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d104      	bne.n	8006c0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c04:	f7fd f8f0 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 8006c08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c0c:	e003      	b.n	8006c16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c0e:	f7fd f8d7 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8006c12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c20:	f040 810c 	bne.w	8006e3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c36:	4622      	mov	r2, r4
 8006c38:	462b      	mov	r3, r5
 8006c3a:	1891      	adds	r1, r2, r2
 8006c3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c3e:	415b      	adcs	r3, r3
 8006c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c46:	4621      	mov	r1, r4
 8006c48:	eb12 0801 	adds.w	r8, r2, r1
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	eb43 0901 	adc.w	r9, r3, r1
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c66:	4690      	mov	r8, r2
 8006c68:	4699      	mov	r9, r3
 8006c6a:	4623      	mov	r3, r4
 8006c6c:	eb18 0303 	adds.w	r3, r8, r3
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c74:	462b      	mov	r3, r5
 8006c76:	eb49 0303 	adc.w	r3, r9, r3
 8006c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c92:	460b      	mov	r3, r1
 8006c94:	18db      	adds	r3, r3, r3
 8006c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c98:	4613      	mov	r3, r2
 8006c9a:	eb42 0303 	adc.w	r3, r2, r3
 8006c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ca8:	f7f9 ffae 	bl	8000c08 <__aeabi_uldivmod>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4b61      	ldr	r3, [pc, #388]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	011c      	lsls	r4, r3, #4
 8006cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	1891      	adds	r1, r2, r2
 8006cd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cd4:	415b      	adcs	r3, r3
 8006cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cdc:	4641      	mov	r1, r8
 8006cde:	eb12 0a01 	adds.w	sl, r2, r1
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cfc:	4692      	mov	sl, r2
 8006cfe:	469b      	mov	fp, r3
 8006d00:	4643      	mov	r3, r8
 8006d02:	eb1a 0303 	adds.w	r3, sl, r3
 8006d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	18db      	adds	r3, r3, r3
 8006d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d2e:	4613      	mov	r3, r2
 8006d30:	eb42 0303 	adc.w	r3, r2, r3
 8006d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d3e:	f7f9 ff63 	bl	8000c08 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	4b3b      	ldr	r3, [pc, #236]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	2264      	movs	r2, #100	@ 0x64
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
 8006d56:	1acb      	subs	r3, r1, r3
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d5e:	4b36      	ldr	r3, [pc, #216]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006d60:	fba3 2302 	umull	r2, r3, r3, r2
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d6c:	441c      	add	r4, r3
 8006d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	1891      	adds	r1, r2, r2
 8006d86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d88:	415b      	adcs	r3, r3
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d90:	4641      	mov	r1, r8
 8006d92:	1851      	adds	r1, r2, r1
 8006d94:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d96:	4649      	mov	r1, r9
 8006d98:	414b      	adcs	r3, r1
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006da8:	4659      	mov	r1, fp
 8006daa:	00cb      	lsls	r3, r1, #3
 8006dac:	4651      	mov	r1, sl
 8006dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006db2:	4651      	mov	r1, sl
 8006db4:	00ca      	lsls	r2, r1, #3
 8006db6:	4610      	mov	r0, r2
 8006db8:	4619      	mov	r1, r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	189b      	adds	r3, r3, r2
 8006dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	460a      	mov	r2, r1
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ddc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006de4:	460b      	mov	r3, r1
 8006de6:	18db      	adds	r3, r3, r3
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dea:	4613      	mov	r3, r2
 8006dec:	eb42 0303 	adc.w	r3, r2, r3
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006df6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dfa:	f7f9 ff05 	bl	8000c08 <__aeabi_uldivmod>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006e04:	fba3 1302 	umull	r1, r3, r3, r2
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	2164      	movs	r1, #100	@ 0x64
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	3332      	adds	r3, #50	@ 0x32
 8006e16:	4a08      	ldr	r2, [pc, #32]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006e18:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f003 0207 	and.w	r2, r3, #7
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4422      	add	r2, r4
 8006e2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e2c:	e106      	b.n	800703c <UART_SetConfig+0x4d8>
 8006e2e:	bf00      	nop
 8006e30:	40011000 	.word	0x40011000
 8006e34:	40011400 	.word	0x40011400
 8006e38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	6239      	str	r1, [r7, #32]
 8006e56:	415b      	adcs	r3, r3
 8006e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e5e:	4641      	mov	r1, r8
 8006e60:	1854      	adds	r4, r2, r1
 8006e62:	4649      	mov	r1, r9
 8006e64:	eb43 0501 	adc.w	r5, r3, r1
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	00eb      	lsls	r3, r5, #3
 8006e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e76:	00e2      	lsls	r2, r4, #3
 8006e78:	4614      	mov	r4, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	4643      	mov	r3, r8
 8006e7e:	18e3      	adds	r3, r4, r3
 8006e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e84:	464b      	mov	r3, r9
 8006e86:	eb45 0303 	adc.w	r3, r5, r3
 8006e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006eaa:	4629      	mov	r1, r5
 8006eac:	008b      	lsls	r3, r1, #2
 8006eae:	4621      	mov	r1, r4
 8006eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	008a      	lsls	r2, r1, #2
 8006eb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ebc:	f7f9 fea4 	bl	8000c08 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4b60      	ldr	r3, [pc, #384]	@ (8007048 <UART_SetConfig+0x4e4>)
 8006ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	011c      	lsls	r4, r3, #4
 8006ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ed8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006edc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	1891      	adds	r1, r2, r2
 8006ee6:	61b9      	str	r1, [r7, #24]
 8006ee8:	415b      	adcs	r3, r3
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	1851      	adds	r1, r2, r1
 8006ef4:	6139      	str	r1, [r7, #16]
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	414b      	adcs	r3, r1
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f08:	4659      	mov	r1, fp
 8006f0a:	00cb      	lsls	r3, r1, #3
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f12:	4651      	mov	r1, sl
 8006f14:	00ca      	lsls	r2, r1, #3
 8006f16:	4610      	mov	r0, r2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	189b      	adds	r3, r3, r2
 8006f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f24:	464b      	mov	r3, r9
 8006f26:	460a      	mov	r2, r1
 8006f28:	eb42 0303 	adc.w	r3, r2, r3
 8006f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f48:	4649      	mov	r1, r9
 8006f4a:	008b      	lsls	r3, r1, #2
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f52:	4641      	mov	r1, r8
 8006f54:	008a      	lsls	r2, r1, #2
 8006f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f5a:	f7f9 fe55 	bl	8000c08 <__aeabi_uldivmod>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	4b38      	ldr	r3, [pc, #224]	@ (8007048 <UART_SetConfig+0x4e4>)
 8006f66:	fba3 2301 	umull	r2, r3, r3, r1
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	2264      	movs	r2, #100	@ 0x64
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	1acb      	subs	r3, r1, r3
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	3332      	adds	r3, #50	@ 0x32
 8006f78:	4a33      	ldr	r2, [pc, #204]	@ (8007048 <UART_SetConfig+0x4e4>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f84:	441c      	add	r4, r3
 8006f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	1851      	adds	r1, r2, r1
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	4649      	mov	r1, r9
 8006fac:	414b      	adcs	r3, r1
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	00cb      	lsls	r3, r1, #3
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	00ca      	lsls	r2, r1, #3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	460a      	mov	r2, r1
 8006fda:	eb42 0303 	adc.w	r3, r2, r3
 8006fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fea:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	008b      	lsls	r3, r1, #2
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007002:	4641      	mov	r1, r8
 8007004:	008a      	lsls	r2, r1, #2
 8007006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800700a:	f7f9 fdfd 	bl	8000c08 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <UART_SetConfig+0x4e4>)
 8007014:	fba3 1302 	umull	r1, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2164      	movs	r1, #100	@ 0x64
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	3332      	adds	r3, #50	@ 0x32
 8007026:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <UART_SetConfig+0x4e4>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 020f 	and.w	r2, r3, #15
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4422      	add	r2, r4
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007042:	46bd      	mov	sp, r7
 8007044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007048:	51eb851f 	.word	0x51eb851f

0800704c <malloc>:
 800704c:	4b02      	ldr	r3, [pc, #8]	@ (8007058 <malloc+0xc>)
 800704e:	4601      	mov	r1, r0
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f000 b82d 	b.w	80070b0 <_malloc_r>
 8007056:	bf00      	nop
 8007058:	200002b4 	.word	0x200002b4

0800705c <free>:
 800705c:	4b02      	ldr	r3, [pc, #8]	@ (8007068 <free+0xc>)
 800705e:	4601      	mov	r1, r0
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f001 bdb1 	b.w	8008bc8 <_free_r>
 8007066:	bf00      	nop
 8007068:	200002b4 	.word	0x200002b4

0800706c <sbrk_aligned>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4e0f      	ldr	r6, [pc, #60]	@ (80070ac <sbrk_aligned+0x40>)
 8007070:	460c      	mov	r4, r1
 8007072:	6831      	ldr	r1, [r6, #0]
 8007074:	4605      	mov	r5, r0
 8007076:	b911      	cbnz	r1, 800707e <sbrk_aligned+0x12>
 8007078:	f000 fefc 	bl	8007e74 <_sbrk_r>
 800707c:	6030      	str	r0, [r6, #0]
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fef7 	bl	8007e74 <_sbrk_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d103      	bne.n	8007092 <sbrk_aligned+0x26>
 800708a:	f04f 34ff 	mov.w	r4, #4294967295
 800708e:	4620      	mov	r0, r4
 8007090:	bd70      	pop	{r4, r5, r6, pc}
 8007092:	1cc4      	adds	r4, r0, #3
 8007094:	f024 0403 	bic.w	r4, r4, #3
 8007098:	42a0      	cmp	r0, r4
 800709a:	d0f8      	beq.n	800708e <sbrk_aligned+0x22>
 800709c:	1a21      	subs	r1, r4, r0
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fee8 	bl	8007e74 <_sbrk_r>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d1f2      	bne.n	800708e <sbrk_aligned+0x22>
 80070a8:	e7ef      	b.n	800708a <sbrk_aligned+0x1e>
 80070aa:	bf00      	nop
 80070ac:	2000110c 	.word	0x2000110c

080070b0 <_malloc_r>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	1ccd      	adds	r5, r1, #3
 80070b6:	f025 0503 	bic.w	r5, r5, #3
 80070ba:	3508      	adds	r5, #8
 80070bc:	2d0c      	cmp	r5, #12
 80070be:	bf38      	it	cc
 80070c0:	250c      	movcc	r5, #12
 80070c2:	2d00      	cmp	r5, #0
 80070c4:	4606      	mov	r6, r0
 80070c6:	db01      	blt.n	80070cc <_malloc_r+0x1c>
 80070c8:	42a9      	cmp	r1, r5
 80070ca:	d904      	bls.n	80070d6 <_malloc_r+0x26>
 80070cc:	230c      	movs	r3, #12
 80070ce:	6033      	str	r3, [r6, #0]
 80070d0:	2000      	movs	r0, #0
 80070d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071ac <_malloc_r+0xfc>
 80070da:	f000 f869 	bl	80071b0 <__malloc_lock>
 80070de:	f8d8 3000 	ldr.w	r3, [r8]
 80070e2:	461c      	mov	r4, r3
 80070e4:	bb44      	cbnz	r4, 8007138 <_malloc_r+0x88>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff ffbf 	bl	800706c <sbrk_aligned>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	4604      	mov	r4, r0
 80070f2:	d158      	bne.n	80071a6 <_malloc_r+0xf6>
 80070f4:	f8d8 4000 	ldr.w	r4, [r8]
 80070f8:	4627      	mov	r7, r4
 80070fa:	2f00      	cmp	r7, #0
 80070fc:	d143      	bne.n	8007186 <_malloc_r+0xd6>
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d04b      	beq.n	800719a <_malloc_r+0xea>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	4639      	mov	r1, r7
 8007106:	4630      	mov	r0, r6
 8007108:	eb04 0903 	add.w	r9, r4, r3
 800710c:	f000 feb2 	bl	8007e74 <_sbrk_r>
 8007110:	4581      	cmp	r9, r0
 8007112:	d142      	bne.n	800719a <_malloc_r+0xea>
 8007114:	6821      	ldr	r1, [r4, #0]
 8007116:	1a6d      	subs	r5, r5, r1
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffa6 	bl	800706c <sbrk_aligned>
 8007120:	3001      	adds	r0, #1
 8007122:	d03a      	beq.n	800719a <_malloc_r+0xea>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	442b      	add	r3, r5
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	f8d8 3000 	ldr.w	r3, [r8]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	bb62      	cbnz	r2, 800718c <_malloc_r+0xdc>
 8007132:	f8c8 7000 	str.w	r7, [r8]
 8007136:	e00f      	b.n	8007158 <_malloc_r+0xa8>
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	1b52      	subs	r2, r2, r5
 800713c:	d420      	bmi.n	8007180 <_malloc_r+0xd0>
 800713e:	2a0b      	cmp	r2, #11
 8007140:	d917      	bls.n	8007172 <_malloc_r+0xc2>
 8007142:	1961      	adds	r1, r4, r5
 8007144:	42a3      	cmp	r3, r4
 8007146:	6025      	str	r5, [r4, #0]
 8007148:	bf18      	it	ne
 800714a:	6059      	strne	r1, [r3, #4]
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	bf08      	it	eq
 8007150:	f8c8 1000 	streq.w	r1, [r8]
 8007154:	5162      	str	r2, [r4, r5]
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	4630      	mov	r0, r6
 800715a:	f000 f82f 	bl	80071bc <__malloc_unlock>
 800715e:	f104 000b 	add.w	r0, r4, #11
 8007162:	1d23      	adds	r3, r4, #4
 8007164:	f020 0007 	bic.w	r0, r0, #7
 8007168:	1ac2      	subs	r2, r0, r3
 800716a:	bf1c      	itt	ne
 800716c:	1a1b      	subne	r3, r3, r0
 800716e:	50a3      	strne	r3, [r4, r2]
 8007170:	e7af      	b.n	80070d2 <_malloc_r+0x22>
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	42a3      	cmp	r3, r4
 8007176:	bf0c      	ite	eq
 8007178:	f8c8 2000 	streq.w	r2, [r8]
 800717c:	605a      	strne	r2, [r3, #4]
 800717e:	e7eb      	b.n	8007158 <_malloc_r+0xa8>
 8007180:	4623      	mov	r3, r4
 8007182:	6864      	ldr	r4, [r4, #4]
 8007184:	e7ae      	b.n	80070e4 <_malloc_r+0x34>
 8007186:	463c      	mov	r4, r7
 8007188:	687f      	ldr	r7, [r7, #4]
 800718a:	e7b6      	b.n	80070fa <_malloc_r+0x4a>
 800718c:	461a      	mov	r2, r3
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	42a3      	cmp	r3, r4
 8007192:	d1fb      	bne.n	800718c <_malloc_r+0xdc>
 8007194:	2300      	movs	r3, #0
 8007196:	6053      	str	r3, [r2, #4]
 8007198:	e7de      	b.n	8007158 <_malloc_r+0xa8>
 800719a:	230c      	movs	r3, #12
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	4630      	mov	r0, r6
 80071a0:	f000 f80c 	bl	80071bc <__malloc_unlock>
 80071a4:	e794      	b.n	80070d0 <_malloc_r+0x20>
 80071a6:	6005      	str	r5, [r0, #0]
 80071a8:	e7d6      	b.n	8007158 <_malloc_r+0xa8>
 80071aa:	bf00      	nop
 80071ac:	20001110 	.word	0x20001110

080071b0 <__malloc_lock>:
 80071b0:	4801      	ldr	r0, [pc, #4]	@ (80071b8 <__malloc_lock+0x8>)
 80071b2:	f000 beac 	b.w	8007f0e <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	20001254 	.word	0x20001254

080071bc <__malloc_unlock>:
 80071bc:	4801      	ldr	r0, [pc, #4]	@ (80071c4 <__malloc_unlock+0x8>)
 80071be:	f000 bea7 	b.w	8007f10 <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	20001254 	.word	0x20001254

080071c8 <_strtoul_l.constprop.0>:
 80071c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4e34      	ldr	r6, [pc, #208]	@ (80072a0 <_strtoul_l.constprop.0+0xd8>)
 80071ce:	4686      	mov	lr, r0
 80071d0:	460d      	mov	r5, r1
 80071d2:	4628      	mov	r0, r5
 80071d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071d8:	5d37      	ldrb	r7, [r6, r4]
 80071da:	f017 0708 	ands.w	r7, r7, #8
 80071de:	d1f8      	bne.n	80071d2 <_strtoul_l.constprop.0+0xa>
 80071e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80071e2:	d12f      	bne.n	8007244 <_strtoul_l.constprop.0+0x7c>
 80071e4:	782c      	ldrb	r4, [r5, #0]
 80071e6:	2701      	movs	r7, #1
 80071e8:	1c85      	adds	r5, r0, #2
 80071ea:	f033 0010 	bics.w	r0, r3, #16
 80071ee:	d109      	bne.n	8007204 <_strtoul_l.constprop.0+0x3c>
 80071f0:	2c30      	cmp	r4, #48	@ 0x30
 80071f2:	d12c      	bne.n	800724e <_strtoul_l.constprop.0+0x86>
 80071f4:	7828      	ldrb	r0, [r5, #0]
 80071f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80071fa:	2858      	cmp	r0, #88	@ 0x58
 80071fc:	d127      	bne.n	800724e <_strtoul_l.constprop.0+0x86>
 80071fe:	786c      	ldrb	r4, [r5, #1]
 8007200:	2310      	movs	r3, #16
 8007202:	3502      	adds	r5, #2
 8007204:	f04f 38ff 	mov.w	r8, #4294967295
 8007208:	2600      	movs	r6, #0
 800720a:	fbb8 f8f3 	udiv	r8, r8, r3
 800720e:	fb03 f908 	mul.w	r9, r3, r8
 8007212:	ea6f 0909 	mvn.w	r9, r9
 8007216:	4630      	mov	r0, r6
 8007218:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800721c:	f1bc 0f09 	cmp.w	ip, #9
 8007220:	d81c      	bhi.n	800725c <_strtoul_l.constprop.0+0x94>
 8007222:	4664      	mov	r4, ip
 8007224:	42a3      	cmp	r3, r4
 8007226:	dd2a      	ble.n	800727e <_strtoul_l.constprop.0+0xb6>
 8007228:	f1b6 3fff 	cmp.w	r6, #4294967295
 800722c:	d007      	beq.n	800723e <_strtoul_l.constprop.0+0x76>
 800722e:	4580      	cmp	r8, r0
 8007230:	d322      	bcc.n	8007278 <_strtoul_l.constprop.0+0xb0>
 8007232:	d101      	bne.n	8007238 <_strtoul_l.constprop.0+0x70>
 8007234:	45a1      	cmp	r9, r4
 8007236:	db1f      	blt.n	8007278 <_strtoul_l.constprop.0+0xb0>
 8007238:	fb00 4003 	mla	r0, r0, r3, r4
 800723c:	2601      	movs	r6, #1
 800723e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007242:	e7e9      	b.n	8007218 <_strtoul_l.constprop.0+0x50>
 8007244:	2c2b      	cmp	r4, #43	@ 0x2b
 8007246:	bf04      	itt	eq
 8007248:	782c      	ldrbeq	r4, [r5, #0]
 800724a:	1c85      	addeq	r5, r0, #2
 800724c:	e7cd      	b.n	80071ea <_strtoul_l.constprop.0+0x22>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1d8      	bne.n	8007204 <_strtoul_l.constprop.0+0x3c>
 8007252:	2c30      	cmp	r4, #48	@ 0x30
 8007254:	bf0c      	ite	eq
 8007256:	2308      	moveq	r3, #8
 8007258:	230a      	movne	r3, #10
 800725a:	e7d3      	b.n	8007204 <_strtoul_l.constprop.0+0x3c>
 800725c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007260:	f1bc 0f19 	cmp.w	ip, #25
 8007264:	d801      	bhi.n	800726a <_strtoul_l.constprop.0+0xa2>
 8007266:	3c37      	subs	r4, #55	@ 0x37
 8007268:	e7dc      	b.n	8007224 <_strtoul_l.constprop.0+0x5c>
 800726a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800726e:	f1bc 0f19 	cmp.w	ip, #25
 8007272:	d804      	bhi.n	800727e <_strtoul_l.constprop.0+0xb6>
 8007274:	3c57      	subs	r4, #87	@ 0x57
 8007276:	e7d5      	b.n	8007224 <_strtoul_l.constprop.0+0x5c>
 8007278:	f04f 36ff 	mov.w	r6, #4294967295
 800727c:	e7df      	b.n	800723e <_strtoul_l.constprop.0+0x76>
 800727e:	1c73      	adds	r3, r6, #1
 8007280:	d106      	bne.n	8007290 <_strtoul_l.constprop.0+0xc8>
 8007282:	2322      	movs	r3, #34	@ 0x22
 8007284:	f8ce 3000 	str.w	r3, [lr]
 8007288:	4630      	mov	r0, r6
 800728a:	b932      	cbnz	r2, 800729a <_strtoul_l.constprop.0+0xd2>
 800728c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007290:	b107      	cbz	r7, 8007294 <_strtoul_l.constprop.0+0xcc>
 8007292:	4240      	negs	r0, r0
 8007294:	2a00      	cmp	r2, #0
 8007296:	d0f9      	beq.n	800728c <_strtoul_l.constprop.0+0xc4>
 8007298:	b106      	cbz	r6, 800729c <_strtoul_l.constprop.0+0xd4>
 800729a:	1e69      	subs	r1, r5, #1
 800729c:	6011      	str	r1, [r2, #0]
 800729e:	e7f5      	b.n	800728c <_strtoul_l.constprop.0+0xc4>
 80072a0:	08009f65 	.word	0x08009f65

080072a4 <strtoul>:
 80072a4:	4613      	mov	r3, r2
 80072a6:	460a      	mov	r2, r1
 80072a8:	4601      	mov	r1, r0
 80072aa:	4802      	ldr	r0, [pc, #8]	@ (80072b4 <strtoul+0x10>)
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f7ff bf8b 	b.w	80071c8 <_strtoul_l.constprop.0>
 80072b2:	bf00      	nop
 80072b4:	200002b4 	.word	0x200002b4

080072b8 <__cvt>:
 80072b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072bc:	ec57 6b10 	vmov	r6, r7, d0
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	460c      	mov	r4, r1
 80072c4:	4619      	mov	r1, r3
 80072c6:	463b      	mov	r3, r7
 80072c8:	bfbb      	ittet	lt
 80072ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072ce:	461f      	movlt	r7, r3
 80072d0:	2300      	movge	r3, #0
 80072d2:	232d      	movlt	r3, #45	@ 0x2d
 80072d4:	700b      	strb	r3, [r1, #0]
 80072d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072dc:	4691      	mov	r9, r2
 80072de:	f023 0820 	bic.w	r8, r3, #32
 80072e2:	bfbc      	itt	lt
 80072e4:	4632      	movlt	r2, r6
 80072e6:	4616      	movlt	r6, r2
 80072e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072ec:	d005      	beq.n	80072fa <__cvt+0x42>
 80072ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072f2:	d100      	bne.n	80072f6 <__cvt+0x3e>
 80072f4:	3401      	adds	r4, #1
 80072f6:	2102      	movs	r1, #2
 80072f8:	e000      	b.n	80072fc <__cvt+0x44>
 80072fa:	2103      	movs	r1, #3
 80072fc:	ab03      	add	r3, sp, #12
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	ab02      	add	r3, sp, #8
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	ec47 6b10 	vmov	d0, r6, r7
 8007308:	4653      	mov	r3, sl
 800730a:	4622      	mov	r2, r4
 800730c:	f000 fe98 	bl	8008040 <_dtoa_r>
 8007310:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007314:	4605      	mov	r5, r0
 8007316:	d119      	bne.n	800734c <__cvt+0x94>
 8007318:	f019 0f01 	tst.w	r9, #1
 800731c:	d00e      	beq.n	800733c <__cvt+0x84>
 800731e:	eb00 0904 	add.w	r9, r0, r4
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	f7f9 fbfd 	bl	8000b28 <__aeabi_dcmpeq>
 800732e:	b108      	cbz	r0, 8007334 <__cvt+0x7c>
 8007330:	f8cd 900c 	str.w	r9, [sp, #12]
 8007334:	2230      	movs	r2, #48	@ 0x30
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	454b      	cmp	r3, r9
 800733a:	d31e      	bcc.n	800737a <__cvt+0xc2>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007340:	1b5b      	subs	r3, r3, r5
 8007342:	4628      	mov	r0, r5
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	b004      	add	sp, #16
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007350:	eb00 0904 	add.w	r9, r0, r4
 8007354:	d1e5      	bne.n	8007322 <__cvt+0x6a>
 8007356:	7803      	ldrb	r3, [r0, #0]
 8007358:	2b30      	cmp	r3, #48	@ 0x30
 800735a:	d10a      	bne.n	8007372 <__cvt+0xba>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f9 fbe0 	bl	8000b28 <__aeabi_dcmpeq>
 8007368:	b918      	cbnz	r0, 8007372 <__cvt+0xba>
 800736a:	f1c4 0401 	rsb	r4, r4, #1
 800736e:	f8ca 4000 	str.w	r4, [sl]
 8007372:	f8da 3000 	ldr.w	r3, [sl]
 8007376:	4499      	add	r9, r3
 8007378:	e7d3      	b.n	8007322 <__cvt+0x6a>
 800737a:	1c59      	adds	r1, r3, #1
 800737c:	9103      	str	r1, [sp, #12]
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e7d9      	b.n	8007336 <__cvt+0x7e>

08007382 <__exponent>:
 8007382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007384:	2900      	cmp	r1, #0
 8007386:	bfba      	itte	lt
 8007388:	4249      	neglt	r1, r1
 800738a:	232d      	movlt	r3, #45	@ 0x2d
 800738c:	232b      	movge	r3, #43	@ 0x2b
 800738e:	2909      	cmp	r1, #9
 8007390:	7002      	strb	r2, [r0, #0]
 8007392:	7043      	strb	r3, [r0, #1]
 8007394:	dd29      	ble.n	80073ea <__exponent+0x68>
 8007396:	f10d 0307 	add.w	r3, sp, #7
 800739a:	461d      	mov	r5, r3
 800739c:	270a      	movs	r7, #10
 800739e:	461a      	mov	r2, r3
 80073a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80073a4:	fb07 1416 	mls	r4, r7, r6, r1
 80073a8:	3430      	adds	r4, #48	@ 0x30
 80073aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073ae:	460c      	mov	r4, r1
 80073b0:	2c63      	cmp	r4, #99	@ 0x63
 80073b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073b6:	4631      	mov	r1, r6
 80073b8:	dcf1      	bgt.n	800739e <__exponent+0x1c>
 80073ba:	3130      	adds	r1, #48	@ 0x30
 80073bc:	1e94      	subs	r4, r2, #2
 80073be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073c2:	1c41      	adds	r1, r0, #1
 80073c4:	4623      	mov	r3, r4
 80073c6:	42ab      	cmp	r3, r5
 80073c8:	d30a      	bcc.n	80073e0 <__exponent+0x5e>
 80073ca:	f10d 0309 	add.w	r3, sp, #9
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	42ac      	cmp	r4, r5
 80073d2:	bf88      	it	hi
 80073d4:	2300      	movhi	r3, #0
 80073d6:	3302      	adds	r3, #2
 80073d8:	4403      	add	r3, r0
 80073da:	1a18      	subs	r0, r3, r0
 80073dc:	b003      	add	sp, #12
 80073de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073e8:	e7ed      	b.n	80073c6 <__exponent+0x44>
 80073ea:	2330      	movs	r3, #48	@ 0x30
 80073ec:	3130      	adds	r1, #48	@ 0x30
 80073ee:	7083      	strb	r3, [r0, #2]
 80073f0:	70c1      	strb	r1, [r0, #3]
 80073f2:	1d03      	adds	r3, r0, #4
 80073f4:	e7f1      	b.n	80073da <__exponent+0x58>
	...

080073f8 <_printf_float>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	b08d      	sub	sp, #52	@ 0x34
 80073fe:	460c      	mov	r4, r1
 8007400:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007404:	4616      	mov	r6, r2
 8007406:	461f      	mov	r7, r3
 8007408:	4605      	mov	r5, r0
 800740a:	f000 fcfb 	bl	8007e04 <_localeconv_r>
 800740e:	6803      	ldr	r3, [r0, #0]
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	4618      	mov	r0, r3
 8007414:	f7f8 ff5c 	bl	80002d0 <strlen>
 8007418:	2300      	movs	r3, #0
 800741a:	930a      	str	r3, [sp, #40]	@ 0x28
 800741c:	f8d8 3000 	ldr.w	r3, [r8]
 8007420:	9005      	str	r0, [sp, #20]
 8007422:	3307      	adds	r3, #7
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	f103 0208 	add.w	r2, r3, #8
 800742c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007430:	f8d4 b000 	ldr.w	fp, [r4]
 8007434:	f8c8 2000 	str.w	r2, [r8]
 8007438:	e9d3 8900 	ldrd	r8, r9, [r3]
 800743c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007440:	9307      	str	r3, [sp, #28]
 8007442:	f8cd 8018 	str.w	r8, [sp, #24]
 8007446:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800744a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800744e:	4b9c      	ldr	r3, [pc, #624]	@ (80076c0 <_printf_float+0x2c8>)
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	f7f9 fb9a 	bl	8000b8c <__aeabi_dcmpun>
 8007458:	bb70      	cbnz	r0, 80074b8 <_printf_float+0xc0>
 800745a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800745e:	4b98      	ldr	r3, [pc, #608]	@ (80076c0 <_printf_float+0x2c8>)
 8007460:	f04f 32ff 	mov.w	r2, #4294967295
 8007464:	f7f9 fb74 	bl	8000b50 <__aeabi_dcmple>
 8007468:	bb30      	cbnz	r0, 80074b8 <_printf_float+0xc0>
 800746a:	2200      	movs	r2, #0
 800746c:	2300      	movs	r3, #0
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7f9 fb63 	bl	8000b3c <__aeabi_dcmplt>
 8007476:	b110      	cbz	r0, 800747e <_printf_float+0x86>
 8007478:	232d      	movs	r3, #45	@ 0x2d
 800747a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800747e:	4a91      	ldr	r2, [pc, #580]	@ (80076c4 <_printf_float+0x2cc>)
 8007480:	4b91      	ldr	r3, [pc, #580]	@ (80076c8 <_printf_float+0x2d0>)
 8007482:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007486:	bf94      	ite	ls
 8007488:	4690      	movls	r8, r2
 800748a:	4698      	movhi	r8, r3
 800748c:	2303      	movs	r3, #3
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	f02b 0304 	bic.w	r3, fp, #4
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	f04f 0900 	mov.w	r9, #0
 800749a:	9700      	str	r7, [sp, #0]
 800749c:	4633      	mov	r3, r6
 800749e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074a0:	4621      	mov	r1, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 f9d2 	bl	800784c <_printf_common>
 80074a8:	3001      	adds	r0, #1
 80074aa:	f040 808d 	bne.w	80075c8 <_printf_float+0x1d0>
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	b00d      	add	sp, #52	@ 0x34
 80074b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	f7f9 fb64 	bl	8000b8c <__aeabi_dcmpun>
 80074c4:	b140      	cbz	r0, 80074d8 <_printf_float+0xe0>
 80074c6:	464b      	mov	r3, r9
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfbc      	itt	lt
 80074cc:	232d      	movlt	r3, #45	@ 0x2d
 80074ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074d2:	4a7e      	ldr	r2, [pc, #504]	@ (80076cc <_printf_float+0x2d4>)
 80074d4:	4b7e      	ldr	r3, [pc, #504]	@ (80076d0 <_printf_float+0x2d8>)
 80074d6:	e7d4      	b.n	8007482 <_printf_float+0x8a>
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074de:	9206      	str	r2, [sp, #24]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	d13b      	bne.n	800755c <_printf_float+0x164>
 80074e4:	2306      	movs	r3, #6
 80074e6:	6063      	str	r3, [r4, #4]
 80074e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074ec:	2300      	movs	r3, #0
 80074ee:	6022      	str	r2, [r4, #0]
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80074f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074f8:	ab09      	add	r3, sp, #36	@ 0x24
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	ec49 8b10 	vmov	d0, r8, r9
 8007502:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007506:	4628      	mov	r0, r5
 8007508:	f7ff fed6 	bl	80072b8 <__cvt>
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007510:	2b47      	cmp	r3, #71	@ 0x47
 8007512:	4680      	mov	r8, r0
 8007514:	d129      	bne.n	800756a <_printf_float+0x172>
 8007516:	1cc8      	adds	r0, r1, #3
 8007518:	db02      	blt.n	8007520 <_printf_float+0x128>
 800751a:	6863      	ldr	r3, [r4, #4]
 800751c:	4299      	cmp	r1, r3
 800751e:	dd41      	ble.n	80075a4 <_printf_float+0x1ac>
 8007520:	f1aa 0a02 	sub.w	sl, sl, #2
 8007524:	fa5f fa8a 	uxtb.w	sl, sl
 8007528:	3901      	subs	r1, #1
 800752a:	4652      	mov	r2, sl
 800752c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007530:	9109      	str	r1, [sp, #36]	@ 0x24
 8007532:	f7ff ff26 	bl	8007382 <__exponent>
 8007536:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007538:	1813      	adds	r3, r2, r0
 800753a:	2a01      	cmp	r2, #1
 800753c:	4681      	mov	r9, r0
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	dc02      	bgt.n	8007548 <_printf_float+0x150>
 8007542:	6822      	ldr	r2, [r4, #0]
 8007544:	07d2      	lsls	r2, r2, #31
 8007546:	d501      	bpl.n	800754c <_printf_float+0x154>
 8007548:	3301      	adds	r3, #1
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0a2      	beq.n	800749a <_printf_float+0xa2>
 8007554:	232d      	movs	r3, #45	@ 0x2d
 8007556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800755a:	e79e      	b.n	800749a <_printf_float+0xa2>
 800755c:	9a06      	ldr	r2, [sp, #24]
 800755e:	2a47      	cmp	r2, #71	@ 0x47
 8007560:	d1c2      	bne.n	80074e8 <_printf_float+0xf0>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1c0      	bne.n	80074e8 <_printf_float+0xf0>
 8007566:	2301      	movs	r3, #1
 8007568:	e7bd      	b.n	80074e6 <_printf_float+0xee>
 800756a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800756e:	d9db      	bls.n	8007528 <_printf_float+0x130>
 8007570:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007574:	d118      	bne.n	80075a8 <_printf_float+0x1b0>
 8007576:	2900      	cmp	r1, #0
 8007578:	6863      	ldr	r3, [r4, #4]
 800757a:	dd0b      	ble.n	8007594 <_printf_float+0x19c>
 800757c:	6121      	str	r1, [r4, #16]
 800757e:	b913      	cbnz	r3, 8007586 <_printf_float+0x18e>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d0      	lsls	r0, r2, #31
 8007584:	d502      	bpl.n	800758c <_printf_float+0x194>
 8007586:	3301      	adds	r3, #1
 8007588:	440b      	add	r3, r1
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800758e:	f04f 0900 	mov.w	r9, #0
 8007592:	e7db      	b.n	800754c <_printf_float+0x154>
 8007594:	b913      	cbnz	r3, 800759c <_printf_float+0x1a4>
 8007596:	6822      	ldr	r2, [r4, #0]
 8007598:	07d2      	lsls	r2, r2, #31
 800759a:	d501      	bpl.n	80075a0 <_printf_float+0x1a8>
 800759c:	3302      	adds	r3, #2
 800759e:	e7f4      	b.n	800758a <_printf_float+0x192>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e7f2      	b.n	800758a <_printf_float+0x192>
 80075a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075aa:	4299      	cmp	r1, r3
 80075ac:	db05      	blt.n	80075ba <_printf_float+0x1c2>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	6121      	str	r1, [r4, #16]
 80075b2:	07d8      	lsls	r0, r3, #31
 80075b4:	d5ea      	bpl.n	800758c <_printf_float+0x194>
 80075b6:	1c4b      	adds	r3, r1, #1
 80075b8:	e7e7      	b.n	800758a <_printf_float+0x192>
 80075ba:	2900      	cmp	r1, #0
 80075bc:	bfd4      	ite	le
 80075be:	f1c1 0202 	rsble	r2, r1, #2
 80075c2:	2201      	movgt	r2, #1
 80075c4:	4413      	add	r3, r2
 80075c6:	e7e0      	b.n	800758a <_printf_float+0x192>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	055a      	lsls	r2, r3, #21
 80075cc:	d407      	bmi.n	80075de <_printf_float+0x1e6>
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	4642      	mov	r2, r8
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	d12b      	bne.n	8007634 <_printf_float+0x23c>
 80075dc:	e767      	b.n	80074ae <_printf_float+0xb6>
 80075de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075e2:	f240 80dd 	bls.w	80077a0 <_printf_float+0x3a8>
 80075e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	f7f9 fa9b 	bl	8000b28 <__aeabi_dcmpeq>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d033      	beq.n	800765e <_printf_float+0x266>
 80075f6:	4a37      	ldr	r2, [pc, #220]	@ (80076d4 <_printf_float+0x2dc>)
 80075f8:	2301      	movs	r3, #1
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f af54 	beq.w	80074ae <_printf_float+0xb6>
 8007606:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800760a:	4543      	cmp	r3, r8
 800760c:	db02      	blt.n	8007614 <_printf_float+0x21c>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	07d8      	lsls	r0, r3, #31
 8007612:	d50f      	bpl.n	8007634 <_printf_float+0x23c>
 8007614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f af45 	beq.w	80074ae <_printf_float+0xb6>
 8007624:	f04f 0900 	mov.w	r9, #0
 8007628:	f108 38ff 	add.w	r8, r8, #4294967295
 800762c:	f104 0a1a 	add.w	sl, r4, #26
 8007630:	45c8      	cmp	r8, r9
 8007632:	dc09      	bgt.n	8007648 <_printf_float+0x250>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	079b      	lsls	r3, r3, #30
 8007638:	f100 8103 	bmi.w	8007842 <_printf_float+0x44a>
 800763c:	68e0      	ldr	r0, [r4, #12]
 800763e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007640:	4298      	cmp	r0, r3
 8007642:	bfb8      	it	lt
 8007644:	4618      	movlt	r0, r3
 8007646:	e734      	b.n	80074b2 <_printf_float+0xba>
 8007648:	2301      	movs	r3, #1
 800764a:	4652      	mov	r2, sl
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f af2b 	beq.w	80074ae <_printf_float+0xb6>
 8007658:	f109 0901 	add.w	r9, r9, #1
 800765c:	e7e8      	b.n	8007630 <_printf_float+0x238>
 800765e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	dc39      	bgt.n	80076d8 <_printf_float+0x2e0>
 8007664:	4a1b      	ldr	r2, [pc, #108]	@ (80076d4 <_printf_float+0x2dc>)
 8007666:	2301      	movs	r3, #1
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f af1d 	beq.w	80074ae <_printf_float+0xb6>
 8007674:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007678:	ea59 0303 	orrs.w	r3, r9, r3
 800767c:	d102      	bne.n	8007684 <_printf_float+0x28c>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	07d9      	lsls	r1, r3, #31
 8007682:	d5d7      	bpl.n	8007634 <_printf_float+0x23c>
 8007684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f af0d 	beq.w	80074ae <_printf_float+0xb6>
 8007694:	f04f 0a00 	mov.w	sl, #0
 8007698:	f104 0b1a 	add.w	fp, r4, #26
 800769c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769e:	425b      	negs	r3, r3
 80076a0:	4553      	cmp	r3, sl
 80076a2:	dc01      	bgt.n	80076a8 <_printf_float+0x2b0>
 80076a4:	464b      	mov	r3, r9
 80076a6:	e793      	b.n	80075d0 <_printf_float+0x1d8>
 80076a8:	2301      	movs	r3, #1
 80076aa:	465a      	mov	r2, fp
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f aefb 	beq.w	80074ae <_printf_float+0xb6>
 80076b8:	f10a 0a01 	add.w	sl, sl, #1
 80076bc:	e7ee      	b.n	800769c <_printf_float+0x2a4>
 80076be:	bf00      	nop
 80076c0:	7fefffff 	.word	0x7fefffff
 80076c4:	0800a065 	.word	0x0800a065
 80076c8:	0800a069 	.word	0x0800a069
 80076cc:	0800a06d 	.word	0x0800a06d
 80076d0:	0800a071 	.word	0x0800a071
 80076d4:	0800a075 	.word	0x0800a075
 80076d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076de:	4553      	cmp	r3, sl
 80076e0:	bfa8      	it	ge
 80076e2:	4653      	movge	r3, sl
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	4699      	mov	r9, r3
 80076e8:	dc36      	bgt.n	8007758 <_printf_float+0x360>
 80076ea:	f04f 0b00 	mov.w	fp, #0
 80076ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076f2:	f104 021a 	add.w	r2, r4, #26
 80076f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076f8:	9306      	str	r3, [sp, #24]
 80076fa:	eba3 0309 	sub.w	r3, r3, r9
 80076fe:	455b      	cmp	r3, fp
 8007700:	dc31      	bgt.n	8007766 <_printf_float+0x36e>
 8007702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007704:	459a      	cmp	sl, r3
 8007706:	dc3a      	bgt.n	800777e <_printf_float+0x386>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	07da      	lsls	r2, r3, #31
 800770c:	d437      	bmi.n	800777e <_printf_float+0x386>
 800770e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007710:	ebaa 0903 	sub.w	r9, sl, r3
 8007714:	9b06      	ldr	r3, [sp, #24]
 8007716:	ebaa 0303 	sub.w	r3, sl, r3
 800771a:	4599      	cmp	r9, r3
 800771c:	bfa8      	it	ge
 800771e:	4699      	movge	r9, r3
 8007720:	f1b9 0f00 	cmp.w	r9, #0
 8007724:	dc33      	bgt.n	800778e <_printf_float+0x396>
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800772e:	f104 0b1a 	add.w	fp, r4, #26
 8007732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007734:	ebaa 0303 	sub.w	r3, sl, r3
 8007738:	eba3 0309 	sub.w	r3, r3, r9
 800773c:	4543      	cmp	r3, r8
 800773e:	f77f af79 	ble.w	8007634 <_printf_float+0x23c>
 8007742:	2301      	movs	r3, #1
 8007744:	465a      	mov	r2, fp
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f aeae 	beq.w	80074ae <_printf_float+0xb6>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	e7ec      	b.n	8007732 <_printf_float+0x33a>
 8007758:	4642      	mov	r2, r8
 800775a:	4631      	mov	r1, r6
 800775c:	4628      	mov	r0, r5
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	d1c2      	bne.n	80076ea <_printf_float+0x2f2>
 8007764:	e6a3      	b.n	80074ae <_printf_float+0xb6>
 8007766:	2301      	movs	r3, #1
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	9206      	str	r2, [sp, #24]
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f ae9c 	beq.w	80074ae <_printf_float+0xb6>
 8007776:	9a06      	ldr	r2, [sp, #24]
 8007778:	f10b 0b01 	add.w	fp, fp, #1
 800777c:	e7bb      	b.n	80076f6 <_printf_float+0x2fe>
 800777e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	d1c0      	bne.n	800770e <_printf_float+0x316>
 800778c:	e68f      	b.n	80074ae <_printf_float+0xb6>
 800778e:	9a06      	ldr	r2, [sp, #24]
 8007790:	464b      	mov	r3, r9
 8007792:	4442      	add	r2, r8
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	d1c3      	bne.n	8007726 <_printf_float+0x32e>
 800779e:	e686      	b.n	80074ae <_printf_float+0xb6>
 80077a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077a4:	f1ba 0f01 	cmp.w	sl, #1
 80077a8:	dc01      	bgt.n	80077ae <_printf_float+0x3b6>
 80077aa:	07db      	lsls	r3, r3, #31
 80077ac:	d536      	bpl.n	800781c <_printf_float+0x424>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4642      	mov	r2, r8
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f ae78 	beq.w	80074ae <_printf_float+0xb6>
 80077be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae70 	beq.w	80074ae <_printf_float+0xb6>
 80077ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077da:	f7f9 f9a5 	bl	8000b28 <__aeabi_dcmpeq>
 80077de:	b9c0      	cbnz	r0, 8007812 <_printf_float+0x41a>
 80077e0:	4653      	mov	r3, sl
 80077e2:	f108 0201 	add.w	r2, r8, #1
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	d10c      	bne.n	800780a <_printf_float+0x412>
 80077f0:	e65d      	b.n	80074ae <_printf_float+0xb6>
 80077f2:	2301      	movs	r3, #1
 80077f4:	465a      	mov	r2, fp
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f ae56 	beq.w	80074ae <_printf_float+0xb6>
 8007802:	f108 0801 	add.w	r8, r8, #1
 8007806:	45d0      	cmp	r8, sl
 8007808:	dbf3      	blt.n	80077f2 <_printf_float+0x3fa>
 800780a:	464b      	mov	r3, r9
 800780c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007810:	e6df      	b.n	80075d2 <_printf_float+0x1da>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	f104 0b1a 	add.w	fp, r4, #26
 800781a:	e7f4      	b.n	8007806 <_printf_float+0x40e>
 800781c:	2301      	movs	r3, #1
 800781e:	4642      	mov	r2, r8
 8007820:	e7e1      	b.n	80077e6 <_printf_float+0x3ee>
 8007822:	2301      	movs	r3, #1
 8007824:	464a      	mov	r2, r9
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f ae3e 	beq.w	80074ae <_printf_float+0xb6>
 8007832:	f108 0801 	add.w	r8, r8, #1
 8007836:	68e3      	ldr	r3, [r4, #12]
 8007838:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800783a:	1a5b      	subs	r3, r3, r1
 800783c:	4543      	cmp	r3, r8
 800783e:	dcf0      	bgt.n	8007822 <_printf_float+0x42a>
 8007840:	e6fc      	b.n	800763c <_printf_float+0x244>
 8007842:	f04f 0800 	mov.w	r8, #0
 8007846:	f104 0919 	add.w	r9, r4, #25
 800784a:	e7f4      	b.n	8007836 <_printf_float+0x43e>

0800784c <_printf_common>:
 800784c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	4616      	mov	r6, r2
 8007852:	4698      	mov	r8, r3
 8007854:	688a      	ldr	r2, [r1, #8]
 8007856:	690b      	ldr	r3, [r1, #16]
 8007858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800785c:	4293      	cmp	r3, r2
 800785e:	bfb8      	it	lt
 8007860:	4613      	movlt	r3, r2
 8007862:	6033      	str	r3, [r6, #0]
 8007864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007868:	4607      	mov	r7, r0
 800786a:	460c      	mov	r4, r1
 800786c:	b10a      	cbz	r2, 8007872 <_printf_common+0x26>
 800786e:	3301      	adds	r3, #1
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	0699      	lsls	r1, r3, #26
 8007876:	bf42      	ittt	mi
 8007878:	6833      	ldrmi	r3, [r6, #0]
 800787a:	3302      	addmi	r3, #2
 800787c:	6033      	strmi	r3, [r6, #0]
 800787e:	6825      	ldr	r5, [r4, #0]
 8007880:	f015 0506 	ands.w	r5, r5, #6
 8007884:	d106      	bne.n	8007894 <_printf_common+0x48>
 8007886:	f104 0a19 	add.w	sl, r4, #25
 800788a:	68e3      	ldr	r3, [r4, #12]
 800788c:	6832      	ldr	r2, [r6, #0]
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	42ab      	cmp	r3, r5
 8007892:	dc26      	bgt.n	80078e2 <_printf_common+0x96>
 8007894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	3b00      	subs	r3, #0
 800789c:	bf18      	it	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	0692      	lsls	r2, r2, #26
 80078a2:	d42b      	bmi.n	80078fc <_printf_common+0xb0>
 80078a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078a8:	4641      	mov	r1, r8
 80078aa:	4638      	mov	r0, r7
 80078ac:	47c8      	blx	r9
 80078ae:	3001      	adds	r0, #1
 80078b0:	d01e      	beq.n	80078f0 <_printf_common+0xa4>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	f003 0306 	and.w	r3, r3, #6
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	bf02      	ittt	eq
 80078be:	68e5      	ldreq	r5, [r4, #12]
 80078c0:	6833      	ldreq	r3, [r6, #0]
 80078c2:	1aed      	subeq	r5, r5, r3
 80078c4:	68a3      	ldr	r3, [r4, #8]
 80078c6:	bf0c      	ite	eq
 80078c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078cc:	2500      	movne	r5, #0
 80078ce:	4293      	cmp	r3, r2
 80078d0:	bfc4      	itt	gt
 80078d2:	1a9b      	subgt	r3, r3, r2
 80078d4:	18ed      	addgt	r5, r5, r3
 80078d6:	2600      	movs	r6, #0
 80078d8:	341a      	adds	r4, #26
 80078da:	42b5      	cmp	r5, r6
 80078dc:	d11a      	bne.n	8007914 <_printf_common+0xc8>
 80078de:	2000      	movs	r0, #0
 80078e0:	e008      	b.n	80078f4 <_printf_common+0xa8>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4652      	mov	r2, sl
 80078e6:	4641      	mov	r1, r8
 80078e8:	4638      	mov	r0, r7
 80078ea:	47c8      	blx	r9
 80078ec:	3001      	adds	r0, #1
 80078ee:	d103      	bne.n	80078f8 <_printf_common+0xac>
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f8:	3501      	adds	r5, #1
 80078fa:	e7c6      	b.n	800788a <_printf_common+0x3e>
 80078fc:	18e1      	adds	r1, r4, r3
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	2030      	movs	r0, #48	@ 0x30
 8007902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007906:	4422      	add	r2, r4
 8007908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800790c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007910:	3302      	adds	r3, #2
 8007912:	e7c7      	b.n	80078a4 <_printf_common+0x58>
 8007914:	2301      	movs	r3, #1
 8007916:	4622      	mov	r2, r4
 8007918:	4641      	mov	r1, r8
 800791a:	4638      	mov	r0, r7
 800791c:	47c8      	blx	r9
 800791e:	3001      	adds	r0, #1
 8007920:	d0e6      	beq.n	80078f0 <_printf_common+0xa4>
 8007922:	3601      	adds	r6, #1
 8007924:	e7d9      	b.n	80078da <_printf_common+0x8e>
	...

08007928 <_printf_i>:
 8007928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	7e0f      	ldrb	r7, [r1, #24]
 800792e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007930:	2f78      	cmp	r7, #120	@ 0x78
 8007932:	4691      	mov	r9, r2
 8007934:	4680      	mov	r8, r0
 8007936:	460c      	mov	r4, r1
 8007938:	469a      	mov	sl, r3
 800793a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800793e:	d807      	bhi.n	8007950 <_printf_i+0x28>
 8007940:	2f62      	cmp	r7, #98	@ 0x62
 8007942:	d80a      	bhi.n	800795a <_printf_i+0x32>
 8007944:	2f00      	cmp	r7, #0
 8007946:	f000 80d2 	beq.w	8007aee <_printf_i+0x1c6>
 800794a:	2f58      	cmp	r7, #88	@ 0x58
 800794c:	f000 80b9 	beq.w	8007ac2 <_printf_i+0x19a>
 8007950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007958:	e03a      	b.n	80079d0 <_printf_i+0xa8>
 800795a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800795e:	2b15      	cmp	r3, #21
 8007960:	d8f6      	bhi.n	8007950 <_printf_i+0x28>
 8007962:	a101      	add	r1, pc, #4	@ (adr r1, 8007968 <_printf_i+0x40>)
 8007964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007968:	080079c1 	.word	0x080079c1
 800796c:	080079d5 	.word	0x080079d5
 8007970:	08007951 	.word	0x08007951
 8007974:	08007951 	.word	0x08007951
 8007978:	08007951 	.word	0x08007951
 800797c:	08007951 	.word	0x08007951
 8007980:	080079d5 	.word	0x080079d5
 8007984:	08007951 	.word	0x08007951
 8007988:	08007951 	.word	0x08007951
 800798c:	08007951 	.word	0x08007951
 8007990:	08007951 	.word	0x08007951
 8007994:	08007ad5 	.word	0x08007ad5
 8007998:	080079ff 	.word	0x080079ff
 800799c:	08007a8f 	.word	0x08007a8f
 80079a0:	08007951 	.word	0x08007951
 80079a4:	08007951 	.word	0x08007951
 80079a8:	08007af7 	.word	0x08007af7
 80079ac:	08007951 	.word	0x08007951
 80079b0:	080079ff 	.word	0x080079ff
 80079b4:	08007951 	.word	0x08007951
 80079b8:	08007951 	.word	0x08007951
 80079bc:	08007a97 	.word	0x08007a97
 80079c0:	6833      	ldr	r3, [r6, #0]
 80079c2:	1d1a      	adds	r2, r3, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6032      	str	r2, [r6, #0]
 80079c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079d0:	2301      	movs	r3, #1
 80079d2:	e09d      	b.n	8007b10 <_printf_i+0x1e8>
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	6031      	str	r1, [r6, #0]
 80079dc:	0606      	lsls	r6, r0, #24
 80079de:	d501      	bpl.n	80079e4 <_printf_i+0xbc>
 80079e0:	681d      	ldr	r5, [r3, #0]
 80079e2:	e003      	b.n	80079ec <_printf_i+0xc4>
 80079e4:	0645      	lsls	r5, r0, #25
 80079e6:	d5fb      	bpl.n	80079e0 <_printf_i+0xb8>
 80079e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	da03      	bge.n	80079f8 <_printf_i+0xd0>
 80079f0:	232d      	movs	r3, #45	@ 0x2d
 80079f2:	426d      	negs	r5, r5
 80079f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f8:	4859      	ldr	r0, [pc, #356]	@ (8007b60 <_printf_i+0x238>)
 80079fa:	230a      	movs	r3, #10
 80079fc:	e011      	b.n	8007a22 <_printf_i+0xfa>
 80079fe:	6821      	ldr	r1, [r4, #0]
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	0608      	lsls	r0, r1, #24
 8007a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a08:	d402      	bmi.n	8007a10 <_printf_i+0xe8>
 8007a0a:	0649      	lsls	r1, r1, #25
 8007a0c:	bf48      	it	mi
 8007a0e:	b2ad      	uxthmi	r5, r5
 8007a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a12:	4853      	ldr	r0, [pc, #332]	@ (8007b60 <_printf_i+0x238>)
 8007a14:	6033      	str	r3, [r6, #0]
 8007a16:	bf14      	ite	ne
 8007a18:	230a      	movne	r3, #10
 8007a1a:	2308      	moveq	r3, #8
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a22:	6866      	ldr	r6, [r4, #4]
 8007a24:	60a6      	str	r6, [r4, #8]
 8007a26:	2e00      	cmp	r6, #0
 8007a28:	bfa2      	ittt	ge
 8007a2a:	6821      	ldrge	r1, [r4, #0]
 8007a2c:	f021 0104 	bicge.w	r1, r1, #4
 8007a30:	6021      	strge	r1, [r4, #0]
 8007a32:	b90d      	cbnz	r5, 8007a38 <_printf_i+0x110>
 8007a34:	2e00      	cmp	r6, #0
 8007a36:	d04b      	beq.n	8007ad0 <_printf_i+0x1a8>
 8007a38:	4616      	mov	r6, r2
 8007a3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a3e:	fb03 5711 	mls	r7, r3, r1, r5
 8007a42:	5dc7      	ldrb	r7, [r0, r7]
 8007a44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a48:	462f      	mov	r7, r5
 8007a4a:	42bb      	cmp	r3, r7
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	d9f4      	bls.n	8007a3a <_printf_i+0x112>
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d10b      	bne.n	8007a6c <_printf_i+0x144>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07df      	lsls	r7, r3, #31
 8007a58:	d508      	bpl.n	8007a6c <_printf_i+0x144>
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	6861      	ldr	r1, [r4, #4]
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	bfde      	ittt	le
 8007a62:	2330      	movle	r3, #48	@ 0x30
 8007a64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a6c:	1b92      	subs	r2, r2, r6
 8007a6e:	6122      	str	r2, [r4, #16]
 8007a70:	f8cd a000 	str.w	sl, [sp]
 8007a74:	464b      	mov	r3, r9
 8007a76:	aa03      	add	r2, sp, #12
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	f7ff fee6 	bl	800784c <_printf_common>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d14a      	bne.n	8007b1a <_printf_i+0x1f2>
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	b004      	add	sp, #16
 8007a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	f043 0320 	orr.w	r3, r3, #32
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	4833      	ldr	r0, [pc, #204]	@ (8007b64 <_printf_i+0x23c>)
 8007a98:	2778      	movs	r7, #120	@ 0x78
 8007a9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	6831      	ldr	r1, [r6, #0]
 8007aa2:	061f      	lsls	r7, r3, #24
 8007aa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aa8:	d402      	bmi.n	8007ab0 <_printf_i+0x188>
 8007aaa:	065f      	lsls	r7, r3, #25
 8007aac:	bf48      	it	mi
 8007aae:	b2ad      	uxthmi	r5, r5
 8007ab0:	6031      	str	r1, [r6, #0]
 8007ab2:	07d9      	lsls	r1, r3, #31
 8007ab4:	bf44      	itt	mi
 8007ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8007aba:	6023      	strmi	r3, [r4, #0]
 8007abc:	b11d      	cbz	r5, 8007ac6 <_printf_i+0x19e>
 8007abe:	2310      	movs	r3, #16
 8007ac0:	e7ac      	b.n	8007a1c <_printf_i+0xf4>
 8007ac2:	4827      	ldr	r0, [pc, #156]	@ (8007b60 <_printf_i+0x238>)
 8007ac4:	e7e9      	b.n	8007a9a <_printf_i+0x172>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f023 0320 	bic.w	r3, r3, #32
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	e7f6      	b.n	8007abe <_printf_i+0x196>
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	e7bd      	b.n	8007a50 <_printf_i+0x128>
 8007ad4:	6833      	ldr	r3, [r6, #0]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	6961      	ldr	r1, [r4, #20]
 8007ada:	1d18      	adds	r0, r3, #4
 8007adc:	6030      	str	r0, [r6, #0]
 8007ade:	062e      	lsls	r6, r5, #24
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	d501      	bpl.n	8007ae8 <_printf_i+0x1c0>
 8007ae4:	6019      	str	r1, [r3, #0]
 8007ae6:	e002      	b.n	8007aee <_printf_i+0x1c6>
 8007ae8:	0668      	lsls	r0, r5, #25
 8007aea:	d5fb      	bpl.n	8007ae4 <_printf_i+0x1bc>
 8007aec:	8019      	strh	r1, [r3, #0]
 8007aee:	2300      	movs	r3, #0
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	4616      	mov	r6, r2
 8007af4:	e7bc      	b.n	8007a70 <_printf_i+0x148>
 8007af6:	6833      	ldr	r3, [r6, #0]
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	6032      	str	r2, [r6, #0]
 8007afc:	681e      	ldr	r6, [r3, #0]
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	2100      	movs	r1, #0
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7f8 fb94 	bl	8000230 <memchr>
 8007b08:	b108      	cbz	r0, 8007b0e <_printf_i+0x1e6>
 8007b0a:	1b80      	subs	r0, r0, r6
 8007b0c:	6060      	str	r0, [r4, #4]
 8007b0e:	6863      	ldr	r3, [r4, #4]
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	2300      	movs	r3, #0
 8007b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b18:	e7aa      	b.n	8007a70 <_printf_i+0x148>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4649      	mov	r1, r9
 8007b20:	4640      	mov	r0, r8
 8007b22:	47d0      	blx	sl
 8007b24:	3001      	adds	r0, #1
 8007b26:	d0ad      	beq.n	8007a84 <_printf_i+0x15c>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	079b      	lsls	r3, r3, #30
 8007b2c:	d413      	bmi.n	8007b56 <_printf_i+0x22e>
 8007b2e:	68e0      	ldr	r0, [r4, #12]
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	4298      	cmp	r0, r3
 8007b34:	bfb8      	it	lt
 8007b36:	4618      	movlt	r0, r3
 8007b38:	e7a6      	b.n	8007a88 <_printf_i+0x160>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d09d      	beq.n	8007a84 <_printf_i+0x15c>
 8007b48:	3501      	adds	r5, #1
 8007b4a:	68e3      	ldr	r3, [r4, #12]
 8007b4c:	9903      	ldr	r1, [sp, #12]
 8007b4e:	1a5b      	subs	r3, r3, r1
 8007b50:	42ab      	cmp	r3, r5
 8007b52:	dcf2      	bgt.n	8007b3a <_printf_i+0x212>
 8007b54:	e7eb      	b.n	8007b2e <_printf_i+0x206>
 8007b56:	2500      	movs	r5, #0
 8007b58:	f104 0619 	add.w	r6, r4, #25
 8007b5c:	e7f5      	b.n	8007b4a <_printf_i+0x222>
 8007b5e:	bf00      	nop
 8007b60:	0800a077 	.word	0x0800a077
 8007b64:	0800a088 	.word	0x0800a088

08007b68 <std>:
 8007b68:	2300      	movs	r3, #0
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b76:	6083      	str	r3, [r0, #8]
 8007b78:	8181      	strh	r1, [r0, #12]
 8007b7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b7c:	81c2      	strh	r2, [r0, #14]
 8007b7e:	6183      	str	r3, [r0, #24]
 8007b80:	4619      	mov	r1, r3
 8007b82:	2208      	movs	r2, #8
 8007b84:	305c      	adds	r0, #92	@ 0x5c
 8007b86:	f000 f914 	bl	8007db2 <memset>
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <std+0x58>)
 8007b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <std+0x5c>)
 8007b90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <std+0x60>)
 8007b94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b96:	4b0d      	ldr	r3, [pc, #52]	@ (8007bcc <std+0x64>)
 8007b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <std+0x68>)
 8007b9c:	6224      	str	r4, [r4, #32]
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d006      	beq.n	8007bb0 <std+0x48>
 8007ba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ba6:	4294      	cmp	r4, r2
 8007ba8:	d002      	beq.n	8007bb0 <std+0x48>
 8007baa:	33d0      	adds	r3, #208	@ 0xd0
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d105      	bne.n	8007bbc <std+0x54>
 8007bb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f000 b9a8 	b.w	8007f0c <__retarget_lock_init_recursive>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08007d2d 	.word	0x08007d2d
 8007bc4:	08007d4f 	.word	0x08007d4f
 8007bc8:	08007d87 	.word	0x08007d87
 8007bcc:	08007dab 	.word	0x08007dab
 8007bd0:	20001114 	.word	0x20001114

08007bd4 <stdio_exit_handler>:
 8007bd4:	4a02      	ldr	r2, [pc, #8]	@ (8007be0 <stdio_exit_handler+0xc>)
 8007bd6:	4903      	ldr	r1, [pc, #12]	@ (8007be4 <stdio_exit_handler+0x10>)
 8007bd8:	4803      	ldr	r0, [pc, #12]	@ (8007be8 <stdio_exit_handler+0x14>)
 8007bda:	f000 b869 	b.w	8007cb0 <_fwalk_sglue>
 8007bde:	bf00      	nop
 8007be0:	200002a8 	.word	0x200002a8
 8007be4:	08009719 	.word	0x08009719
 8007be8:	200002b8 	.word	0x200002b8

08007bec <cleanup_stdio>:
 8007bec:	6841      	ldr	r1, [r0, #4]
 8007bee:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <cleanup_stdio+0x34>)
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	d001      	beq.n	8007bfc <cleanup_stdio+0x10>
 8007bf8:	f001 fd8e 	bl	8009718 <_fflush_r>
 8007bfc:	68a1      	ldr	r1, [r4, #8]
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <cleanup_stdio+0x38>)
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d002      	beq.n	8007c0a <cleanup_stdio+0x1e>
 8007c04:	4620      	mov	r0, r4
 8007c06:	f001 fd87 	bl	8009718 <_fflush_r>
 8007c0a:	68e1      	ldr	r1, [r4, #12]
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <cleanup_stdio+0x3c>)
 8007c0e:	4299      	cmp	r1, r3
 8007c10:	d004      	beq.n	8007c1c <cleanup_stdio+0x30>
 8007c12:	4620      	mov	r0, r4
 8007c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c18:	f001 bd7e 	b.w	8009718 <_fflush_r>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	20001114 	.word	0x20001114
 8007c24:	2000117c 	.word	0x2000117c
 8007c28:	200011e4 	.word	0x200011e4

08007c2c <global_stdio_init.part.0>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <global_stdio_init.part.0+0x30>)
 8007c30:	4c0b      	ldr	r4, [pc, #44]	@ (8007c60 <global_stdio_init.part.0+0x34>)
 8007c32:	4a0c      	ldr	r2, [pc, #48]	@ (8007c64 <global_stdio_init.part.0+0x38>)
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	4620      	mov	r0, r4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	f7ff ff94 	bl	8007b68 <std>
 8007c40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c44:	2201      	movs	r2, #1
 8007c46:	2109      	movs	r1, #9
 8007c48:	f7ff ff8e 	bl	8007b68 <std>
 8007c4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c50:	2202      	movs	r2, #2
 8007c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c56:	2112      	movs	r1, #18
 8007c58:	f7ff bf86 	b.w	8007b68 <std>
 8007c5c:	2000124c 	.word	0x2000124c
 8007c60:	20001114 	.word	0x20001114
 8007c64:	08007bd5 	.word	0x08007bd5

08007c68 <__sfp_lock_acquire>:
 8007c68:	4801      	ldr	r0, [pc, #4]	@ (8007c70 <__sfp_lock_acquire+0x8>)
 8007c6a:	f000 b950 	b.w	8007f0e <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20001255 	.word	0x20001255

08007c74 <__sfp_lock_release>:
 8007c74:	4801      	ldr	r0, [pc, #4]	@ (8007c7c <__sfp_lock_release+0x8>)
 8007c76:	f000 b94b 	b.w	8007f10 <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20001255 	.word	0x20001255

08007c80 <__sinit>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7ff fff0 	bl	8007c68 <__sfp_lock_acquire>
 8007c88:	6a23      	ldr	r3, [r4, #32]
 8007c8a:	b11b      	cbz	r3, 8007c94 <__sinit+0x14>
 8007c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c90:	f7ff bff0 	b.w	8007c74 <__sfp_lock_release>
 8007c94:	4b04      	ldr	r3, [pc, #16]	@ (8007ca8 <__sinit+0x28>)
 8007c96:	6223      	str	r3, [r4, #32]
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <__sinit+0x2c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f5      	bne.n	8007c8c <__sinit+0xc>
 8007ca0:	f7ff ffc4 	bl	8007c2c <global_stdio_init.part.0>
 8007ca4:	e7f2      	b.n	8007c8c <__sinit+0xc>
 8007ca6:	bf00      	nop
 8007ca8:	08007bed 	.word	0x08007bed
 8007cac:	2000124c 	.word	0x2000124c

08007cb0 <_fwalk_sglue>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4688      	mov	r8, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc4:	d505      	bpl.n	8007cd2 <_fwalk_sglue+0x22>
 8007cc6:	6824      	ldr	r4, [r4, #0]
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d1f7      	bne.n	8007cbc <_fwalk_sglue+0xc>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d907      	bls.n	8007ce8 <_fwalk_sglue+0x38>
 8007cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d003      	beq.n	8007ce8 <_fwalk_sglue+0x38>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	4306      	orrs	r6, r0
 8007ce8:	3568      	adds	r5, #104	@ 0x68
 8007cea:	e7e9      	b.n	8007cc0 <_fwalk_sglue+0x10>

08007cec <siprintf>:
 8007cec:	b40e      	push	{r1, r2, r3}
 8007cee:	b500      	push	{lr}
 8007cf0:	b09c      	sub	sp, #112	@ 0x70
 8007cf2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007cf4:	9002      	str	r0, [sp, #8]
 8007cf6:	9006      	str	r0, [sp, #24]
 8007cf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007cfc:	4809      	ldr	r0, [pc, #36]	@ (8007d24 <siprintf+0x38>)
 8007cfe:	9107      	str	r1, [sp, #28]
 8007d00:	9104      	str	r1, [sp, #16]
 8007d02:	4909      	ldr	r1, [pc, #36]	@ (8007d28 <siprintf+0x3c>)
 8007d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d08:	9105      	str	r1, [sp, #20]
 8007d0a:	6800      	ldr	r0, [r0, #0]
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	a902      	add	r1, sp, #8
 8007d10:	f001 fb82 	bl	8009418 <_svfiprintf_r>
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	b01c      	add	sp, #112	@ 0x70
 8007d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d20:	b003      	add	sp, #12
 8007d22:	4770      	bx	lr
 8007d24:	200002b4 	.word	0x200002b4
 8007d28:	ffff0208 	.word	0xffff0208

08007d2c <__sread>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	460c      	mov	r4, r1
 8007d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d34:	f000 f88c 	bl	8007e50 <_read_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	bfab      	itete	ge
 8007d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d40:	181b      	addge	r3, r3, r0
 8007d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d46:	bfac      	ite	ge
 8007d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d4a:	81a3      	strhlt	r3, [r4, #12]
 8007d4c:	bd10      	pop	{r4, pc}

08007d4e <__swrite>:
 8007d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d52:	461f      	mov	r7, r3
 8007d54:	898b      	ldrh	r3, [r1, #12]
 8007d56:	05db      	lsls	r3, r3, #23
 8007d58:	4605      	mov	r5, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	d505      	bpl.n	8007d6c <__swrite+0x1e>
 8007d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d64:	2302      	movs	r3, #2
 8007d66:	2200      	movs	r2, #0
 8007d68:	f000 f860 	bl	8007e2c <_lseek_r>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	4632      	mov	r2, r6
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d82:	f000 b887 	b.w	8007e94 <_write_r>

08007d86 <__sseek>:
 8007d86:	b510      	push	{r4, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8e:	f000 f84d 	bl	8007e2c <_lseek_r>
 8007d92:	1c43      	adds	r3, r0, #1
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	bf15      	itete	ne
 8007d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007da2:	81a3      	strheq	r3, [r4, #12]
 8007da4:	bf18      	it	ne
 8007da6:	81a3      	strhne	r3, [r4, #12]
 8007da8:	bd10      	pop	{r4, pc}

08007daa <__sclose>:
 8007daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dae:	f000 b82d 	b.w	8007e0c <_close_r>

08007db2 <memset>:
 8007db2:	4402      	add	r2, r0
 8007db4:	4603      	mov	r3, r0
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d100      	bne.n	8007dbc <memset+0xa>
 8007dba:	4770      	bx	lr
 8007dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc0:	e7f9      	b.n	8007db6 <memset+0x4>

08007dc2 <strchr>:
 8007dc2:	b2c9      	uxtb	r1, r1
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dcc:	b112      	cbz	r2, 8007dd4 <strchr+0x12>
 8007dce:	428a      	cmp	r2, r1
 8007dd0:	d1f9      	bne.n	8007dc6 <strchr+0x4>
 8007dd2:	4770      	bx	lr
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	bf18      	it	ne
 8007dd8:	2000      	movne	r0, #0
 8007dda:	4770      	bx	lr

08007ddc <strncpy>:
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	3901      	subs	r1, #1
 8007de0:	4603      	mov	r3, r0
 8007de2:	b132      	cbz	r2, 8007df2 <strncpy+0x16>
 8007de4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007de8:	f803 4b01 	strb.w	r4, [r3], #1
 8007dec:	3a01      	subs	r2, #1
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	d1f7      	bne.n	8007de2 <strncpy+0x6>
 8007df2:	441a      	add	r2, r3
 8007df4:	2100      	movs	r1, #0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d100      	bne.n	8007dfc <strncpy+0x20>
 8007dfa:	bd10      	pop	{r4, pc}
 8007dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8007e00:	e7f9      	b.n	8007df6 <strncpy+0x1a>
	...

08007e04 <_localeconv_r>:
 8007e04:	4800      	ldr	r0, [pc, #0]	@ (8007e08 <_localeconv_r+0x4>)
 8007e06:	4770      	bx	lr
 8007e08:	200003f4 	.word	0x200003f4

08007e0c <_close_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	@ (8007e28 <_close_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7fa fe80 	bl	8002b1c <_close>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_close_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_close_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20001250 	.word	0x20001250

08007e2c <_lseek_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	@ (8007e4c <_lseek_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7fa fe95 	bl	8002b6a <_lseek>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_lseek_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_lseek_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20001250 	.word	0x20001250

08007e50 <_read_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	@ (8007e70 <_read_r+0x20>)
 8007e54:	4604      	mov	r4, r0
 8007e56:	4608      	mov	r0, r1
 8007e58:	4611      	mov	r1, r2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7fa fe23 	bl	8002aaa <_read>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_read_r+0x1e>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_read_r+0x1e>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20001250 	.word	0x20001250

08007e74 <_sbrk_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d06      	ldr	r5, [pc, #24]	@ (8007e90 <_sbrk_r+0x1c>)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	f7fa fe80 	bl	8002b84 <_sbrk>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_sbrk_r+0x1a>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_sbrk_r+0x1a>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	20001250 	.word	0x20001250

08007e94 <_write_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d07      	ldr	r5, [pc, #28]	@ (8007eb4 <_write_r+0x20>)
 8007e98:	4604      	mov	r4, r0
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7fa fe1e 	bl	8002ae4 <_write>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_write_r+0x1e>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_write_r+0x1e>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20001250 	.word	0x20001250

08007eb8 <__errno>:
 8007eb8:	4b01      	ldr	r3, [pc, #4]	@ (8007ec0 <__errno+0x8>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	200002b4 	.word	0x200002b4

08007ec4 <__libc_init_array>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8007efc <__libc_init_array+0x38>)
 8007ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8007f00 <__libc_init_array+0x3c>)
 8007eca:	1b64      	subs	r4, r4, r5
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	2600      	movs	r6, #0
 8007ed0:	42a6      	cmp	r6, r4
 8007ed2:	d109      	bne.n	8007ee8 <__libc_init_array+0x24>
 8007ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8007f04 <__libc_init_array+0x40>)
 8007ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8007f08 <__libc_init_array+0x44>)
 8007ed8:	f001 ff9e 	bl	8009e18 <_init>
 8007edc:	1b64      	subs	r4, r4, r5
 8007ede:	10a4      	asrs	r4, r4, #2
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	42a6      	cmp	r6, r4
 8007ee4:	d105      	bne.n	8007ef2 <__libc_init_array+0x2e>
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eec:	4798      	blx	r3
 8007eee:	3601      	adds	r6, #1
 8007ef0:	e7ee      	b.n	8007ed0 <__libc_init_array+0xc>
 8007ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef6:	4798      	blx	r3
 8007ef8:	3601      	adds	r6, #1
 8007efa:	e7f2      	b.n	8007ee2 <__libc_init_array+0x1e>
 8007efc:	0800a2e0 	.word	0x0800a2e0
 8007f00:	0800a2e0 	.word	0x0800a2e0
 8007f04:	0800a2e0 	.word	0x0800a2e0
 8007f08:	0800a2e4 	.word	0x0800a2e4

08007f0c <__retarget_lock_init_recursive>:
 8007f0c:	4770      	bx	lr

08007f0e <__retarget_lock_acquire_recursive>:
 8007f0e:	4770      	bx	lr

08007f10 <__retarget_lock_release_recursive>:
 8007f10:	4770      	bx	lr

08007f12 <memcpy>:
 8007f12:	440a      	add	r2, r1
 8007f14:	4291      	cmp	r1, r2
 8007f16:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f1a:	d100      	bne.n	8007f1e <memcpy+0xc>
 8007f1c:	4770      	bx	lr
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f28:	4291      	cmp	r1, r2
 8007f2a:	d1f9      	bne.n	8007f20 <memcpy+0xe>
 8007f2c:	bd10      	pop	{r4, pc}

08007f2e <quorem>:
 8007f2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f32:	6903      	ldr	r3, [r0, #16]
 8007f34:	690c      	ldr	r4, [r1, #16]
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	4607      	mov	r7, r0
 8007f3a:	db7e      	blt.n	800803a <quorem+0x10c>
 8007f3c:	3c01      	subs	r4, #1
 8007f3e:	f101 0814 	add.w	r8, r1, #20
 8007f42:	00a3      	lsls	r3, r4, #2
 8007f44:	f100 0514 	add.w	r5, r0, #20
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f60:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f64:	d32e      	bcc.n	8007fc4 <quorem+0x96>
 8007f66:	f04f 0a00 	mov.w	sl, #0
 8007f6a:	46c4      	mov	ip, r8
 8007f6c:	46ae      	mov	lr, r5
 8007f6e:	46d3      	mov	fp, sl
 8007f70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f74:	b298      	uxth	r0, r3
 8007f76:	fb06 a000 	mla	r0, r6, r0, sl
 8007f7a:	0c02      	lsrs	r2, r0, #16
 8007f7c:	0c1b      	lsrs	r3, r3, #16
 8007f7e:	fb06 2303 	mla	r3, r6, r3, r2
 8007f82:	f8de 2000 	ldr.w	r2, [lr]
 8007f86:	b280      	uxth	r0, r0
 8007f88:	b292      	uxth	r2, r2
 8007f8a:	1a12      	subs	r2, r2, r0
 8007f8c:	445a      	add	r2, fp
 8007f8e:	f8de 0000 	ldr.w	r0, [lr]
 8007f92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fa6:	45e1      	cmp	r9, ip
 8007fa8:	f84e 2b04 	str.w	r2, [lr], #4
 8007fac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fb0:	d2de      	bcs.n	8007f70 <quorem+0x42>
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	58eb      	ldr	r3, [r5, r3]
 8007fb6:	b92b      	cbnz	r3, 8007fc4 <quorem+0x96>
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	3b04      	subs	r3, #4
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	d32f      	bcc.n	8008022 <quorem+0xf4>
 8007fc2:	613c      	str	r4, [r7, #16]
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	f001 f8c3 	bl	8009150 <__mcmp>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	db25      	blt.n	800801a <quorem+0xec>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fd6:	f8d1 c000 	ldr.w	ip, [r1]
 8007fda:	fa1f fe82 	uxth.w	lr, r2
 8007fde:	fa1f f38c 	uxth.w	r3, ip
 8007fe2:	eba3 030e 	sub.w	r3, r3, lr
 8007fe6:	4403      	add	r3, r0
 8007fe8:	0c12      	lsrs	r2, r2, #16
 8007fea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff8:	45c1      	cmp	r9, r8
 8007ffa:	f841 3b04 	str.w	r3, [r1], #4
 8007ffe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008002:	d2e6      	bcs.n	8007fd2 <quorem+0xa4>
 8008004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800800c:	b922      	cbnz	r2, 8008018 <quorem+0xea>
 800800e:	3b04      	subs	r3, #4
 8008010:	429d      	cmp	r5, r3
 8008012:	461a      	mov	r2, r3
 8008014:	d30b      	bcc.n	800802e <quorem+0x100>
 8008016:	613c      	str	r4, [r7, #16]
 8008018:	3601      	adds	r6, #1
 800801a:	4630      	mov	r0, r6
 800801c:	b003      	add	sp, #12
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	3b04      	subs	r3, #4
 8008026:	2a00      	cmp	r2, #0
 8008028:	d1cb      	bne.n	8007fc2 <quorem+0x94>
 800802a:	3c01      	subs	r4, #1
 800802c:	e7c6      	b.n	8007fbc <quorem+0x8e>
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	3b04      	subs	r3, #4
 8008032:	2a00      	cmp	r2, #0
 8008034:	d1ef      	bne.n	8008016 <quorem+0xe8>
 8008036:	3c01      	subs	r4, #1
 8008038:	e7ea      	b.n	8008010 <quorem+0xe2>
 800803a:	2000      	movs	r0, #0
 800803c:	e7ee      	b.n	800801c <quorem+0xee>
	...

08008040 <_dtoa_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	69c7      	ldr	r7, [r0, #28]
 8008046:	b099      	sub	sp, #100	@ 0x64
 8008048:	ed8d 0b02 	vstr	d0, [sp, #8]
 800804c:	ec55 4b10 	vmov	r4, r5, d0
 8008050:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008052:	9109      	str	r1, [sp, #36]	@ 0x24
 8008054:	4683      	mov	fp, r0
 8008056:	920e      	str	r2, [sp, #56]	@ 0x38
 8008058:	9313      	str	r3, [sp, #76]	@ 0x4c
 800805a:	b97f      	cbnz	r7, 800807c <_dtoa_r+0x3c>
 800805c:	2010      	movs	r0, #16
 800805e:	f7fe fff5 	bl	800704c <malloc>
 8008062:	4602      	mov	r2, r0
 8008064:	f8cb 001c 	str.w	r0, [fp, #28]
 8008068:	b920      	cbnz	r0, 8008074 <_dtoa_r+0x34>
 800806a:	4ba7      	ldr	r3, [pc, #668]	@ (8008308 <_dtoa_r+0x2c8>)
 800806c:	21ef      	movs	r1, #239	@ 0xef
 800806e:	48a7      	ldr	r0, [pc, #668]	@ (800830c <_dtoa_r+0x2cc>)
 8008070:	f001 fb94 	bl	800979c <__assert_func>
 8008074:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008078:	6007      	str	r7, [r0, #0]
 800807a:	60c7      	str	r7, [r0, #12]
 800807c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008080:	6819      	ldr	r1, [r3, #0]
 8008082:	b159      	cbz	r1, 800809c <_dtoa_r+0x5c>
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	604a      	str	r2, [r1, #4]
 8008088:	2301      	movs	r3, #1
 800808a:	4093      	lsls	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
 800808e:	4658      	mov	r0, fp
 8008090:	f000 fe24 	bl	8008cdc <_Bfree>
 8008094:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	1e2b      	subs	r3, r5, #0
 800809e:	bfb9      	ittee	lt
 80080a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080a4:	9303      	strlt	r3, [sp, #12]
 80080a6:	2300      	movge	r3, #0
 80080a8:	6033      	strge	r3, [r6, #0]
 80080aa:	9f03      	ldr	r7, [sp, #12]
 80080ac:	4b98      	ldr	r3, [pc, #608]	@ (8008310 <_dtoa_r+0x2d0>)
 80080ae:	bfbc      	itt	lt
 80080b0:	2201      	movlt	r2, #1
 80080b2:	6032      	strlt	r2, [r6, #0]
 80080b4:	43bb      	bics	r3, r7
 80080b6:	d112      	bne.n	80080de <_dtoa_r+0x9e>
 80080b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080c4:	4323      	orrs	r3, r4
 80080c6:	f000 854d 	beq.w	8008b64 <_dtoa_r+0xb24>
 80080ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008324 <_dtoa_r+0x2e4>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 854f 	beq.w	8008b74 <_dtoa_r+0xb34>
 80080d6:	f10a 0303 	add.w	r3, sl, #3
 80080da:	f000 bd49 	b.w	8008b70 <_dtoa_r+0xb30>
 80080de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	ec51 0b17 	vmov	r0, r1, d7
 80080e8:	2300      	movs	r3, #0
 80080ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80080ee:	f7f8 fd1b 	bl	8000b28 <__aeabi_dcmpeq>
 80080f2:	4680      	mov	r8, r0
 80080f4:	b158      	cbz	r0, 800810e <_dtoa_r+0xce>
 80080f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080f8:	2301      	movs	r3, #1
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080fe:	b113      	cbz	r3, 8008106 <_dtoa_r+0xc6>
 8008100:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008102:	4b84      	ldr	r3, [pc, #528]	@ (8008314 <_dtoa_r+0x2d4>)
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008328 <_dtoa_r+0x2e8>
 800810a:	f000 bd33 	b.w	8008b74 <_dtoa_r+0xb34>
 800810e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008112:	aa16      	add	r2, sp, #88	@ 0x58
 8008114:	a917      	add	r1, sp, #92	@ 0x5c
 8008116:	4658      	mov	r0, fp
 8008118:	f001 f8ca 	bl	80092b0 <__d2b>
 800811c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008120:	4681      	mov	r9, r0
 8008122:	2e00      	cmp	r6, #0
 8008124:	d077      	beq.n	8008216 <_dtoa_r+0x1d6>
 8008126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008128:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800812c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008134:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008138:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800813c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008140:	4619      	mov	r1, r3
 8008142:	2200      	movs	r2, #0
 8008144:	4b74      	ldr	r3, [pc, #464]	@ (8008318 <_dtoa_r+0x2d8>)
 8008146:	f7f8 f8cf 	bl	80002e8 <__aeabi_dsub>
 800814a:	a369      	add	r3, pc, #420	@ (adr r3, 80082f0 <_dtoa_r+0x2b0>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 fa82 	bl	8000658 <__aeabi_dmul>
 8008154:	a368      	add	r3, pc, #416	@ (adr r3, 80082f8 <_dtoa_r+0x2b8>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f8 f8c7 	bl	80002ec <__adddf3>
 800815e:	4604      	mov	r4, r0
 8008160:	4630      	mov	r0, r6
 8008162:	460d      	mov	r5, r1
 8008164:	f7f8 fa0e 	bl	8000584 <__aeabi_i2d>
 8008168:	a365      	add	r3, pc, #404	@ (adr r3, 8008300 <_dtoa_r+0x2c0>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f7f8 fa73 	bl	8000658 <__aeabi_dmul>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 f8b7 	bl	80002ec <__adddf3>
 800817e:	4604      	mov	r4, r0
 8008180:	460d      	mov	r5, r1
 8008182:	f7f8 fd19 	bl	8000bb8 <__aeabi_d2iz>
 8008186:	2200      	movs	r2, #0
 8008188:	4607      	mov	r7, r0
 800818a:	2300      	movs	r3, #0
 800818c:	4620      	mov	r0, r4
 800818e:	4629      	mov	r1, r5
 8008190:	f7f8 fcd4 	bl	8000b3c <__aeabi_dcmplt>
 8008194:	b140      	cbz	r0, 80081a8 <_dtoa_r+0x168>
 8008196:	4638      	mov	r0, r7
 8008198:	f7f8 f9f4 	bl	8000584 <__aeabi_i2d>
 800819c:	4622      	mov	r2, r4
 800819e:	462b      	mov	r3, r5
 80081a0:	f7f8 fcc2 	bl	8000b28 <__aeabi_dcmpeq>
 80081a4:	b900      	cbnz	r0, 80081a8 <_dtoa_r+0x168>
 80081a6:	3f01      	subs	r7, #1
 80081a8:	2f16      	cmp	r7, #22
 80081aa:	d851      	bhi.n	8008250 <_dtoa_r+0x210>
 80081ac:	4b5b      	ldr	r3, [pc, #364]	@ (800831c <_dtoa_r+0x2dc>)
 80081ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ba:	f7f8 fcbf 	bl	8000b3c <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d048      	beq.n	8008254 <_dtoa_r+0x214>
 80081c2:	3f01      	subs	r7, #1
 80081c4:	2300      	movs	r3, #0
 80081c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80081c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081ca:	1b9b      	subs	r3, r3, r6
 80081cc:	1e5a      	subs	r2, r3, #1
 80081ce:	bf44      	itt	mi
 80081d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80081d4:	2300      	movmi	r3, #0
 80081d6:	9208      	str	r2, [sp, #32]
 80081d8:	bf54      	ite	pl
 80081da:	f04f 0800 	movpl.w	r8, #0
 80081de:	9308      	strmi	r3, [sp, #32]
 80081e0:	2f00      	cmp	r7, #0
 80081e2:	db39      	blt.n	8008258 <_dtoa_r+0x218>
 80081e4:	9b08      	ldr	r3, [sp, #32]
 80081e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80081e8:	443b      	add	r3, r7
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	2300      	movs	r3, #0
 80081ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80081f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d864      	bhi.n	80082c0 <_dtoa_r+0x280>
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	bfc4      	itt	gt
 80081fa:	3b04      	subgt	r3, #4
 80081fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80081fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008200:	f1a3 0302 	sub.w	r3, r3, #2
 8008204:	bfcc      	ite	gt
 8008206:	2400      	movgt	r4, #0
 8008208:	2401      	movle	r4, #1
 800820a:	2b03      	cmp	r3, #3
 800820c:	d863      	bhi.n	80082d6 <_dtoa_r+0x296>
 800820e:	e8df f003 	tbb	[pc, r3]
 8008212:	372a      	.short	0x372a
 8008214:	5535      	.short	0x5535
 8008216:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800821a:	441e      	add	r6, r3
 800821c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008220:	2b20      	cmp	r3, #32
 8008222:	bfc1      	itttt	gt
 8008224:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008228:	409f      	lslgt	r7, r3
 800822a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800822e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008232:	bfd6      	itet	le
 8008234:	f1c3 0320 	rsble	r3, r3, #32
 8008238:	ea47 0003 	orrgt.w	r0, r7, r3
 800823c:	fa04 f003 	lslle.w	r0, r4, r3
 8008240:	f7f8 f990 	bl	8000564 <__aeabi_ui2d>
 8008244:	2201      	movs	r2, #1
 8008246:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800824a:	3e01      	subs	r6, #1
 800824c:	9214      	str	r2, [sp, #80]	@ 0x50
 800824e:	e777      	b.n	8008140 <_dtoa_r+0x100>
 8008250:	2301      	movs	r3, #1
 8008252:	e7b8      	b.n	80081c6 <_dtoa_r+0x186>
 8008254:	9012      	str	r0, [sp, #72]	@ 0x48
 8008256:	e7b7      	b.n	80081c8 <_dtoa_r+0x188>
 8008258:	427b      	negs	r3, r7
 800825a:	930a      	str	r3, [sp, #40]	@ 0x28
 800825c:	2300      	movs	r3, #0
 800825e:	eba8 0807 	sub.w	r8, r8, r7
 8008262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008264:	e7c4      	b.n	80081f0 <_dtoa_r+0x1b0>
 8008266:	2300      	movs	r3, #0
 8008268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800826a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800826c:	2b00      	cmp	r3, #0
 800826e:	dc35      	bgt.n	80082dc <_dtoa_r+0x29c>
 8008270:	2301      	movs	r3, #1
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	461a      	mov	r2, r3
 8008278:	920e      	str	r2, [sp, #56]	@ 0x38
 800827a:	e00b      	b.n	8008294 <_dtoa_r+0x254>
 800827c:	2301      	movs	r3, #1
 800827e:	e7f3      	b.n	8008268 <_dtoa_r+0x228>
 8008280:	2300      	movs	r3, #0
 8008282:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	3301      	adds	r3, #1
 800828c:	2b01      	cmp	r3, #1
 800828e:	9307      	str	r3, [sp, #28]
 8008290:	bfb8      	it	lt
 8008292:	2301      	movlt	r3, #1
 8008294:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008298:	2100      	movs	r1, #0
 800829a:	2204      	movs	r2, #4
 800829c:	f102 0514 	add.w	r5, r2, #20
 80082a0:	429d      	cmp	r5, r3
 80082a2:	d91f      	bls.n	80082e4 <_dtoa_r+0x2a4>
 80082a4:	6041      	str	r1, [r0, #4]
 80082a6:	4658      	mov	r0, fp
 80082a8:	f000 fcd8 	bl	8008c5c <_Balloc>
 80082ac:	4682      	mov	sl, r0
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d13c      	bne.n	800832c <_dtoa_r+0x2ec>
 80082b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008320 <_dtoa_r+0x2e0>)
 80082b4:	4602      	mov	r2, r0
 80082b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80082ba:	e6d8      	b.n	800806e <_dtoa_r+0x2e>
 80082bc:	2301      	movs	r3, #1
 80082be:	e7e0      	b.n	8008282 <_dtoa_r+0x242>
 80082c0:	2401      	movs	r4, #1
 80082c2:	2300      	movs	r3, #0
 80082c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	9307      	str	r3, [sp, #28]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2312      	movs	r3, #18
 80082d4:	e7d0      	b.n	8008278 <_dtoa_r+0x238>
 80082d6:	2301      	movs	r3, #1
 80082d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082da:	e7f5      	b.n	80082c8 <_dtoa_r+0x288>
 80082dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	e7d7      	b.n	8008294 <_dtoa_r+0x254>
 80082e4:	3101      	adds	r1, #1
 80082e6:	0052      	lsls	r2, r2, #1
 80082e8:	e7d8      	b.n	800829c <_dtoa_r+0x25c>
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w
 80082f0:	636f4361 	.word	0x636f4361
 80082f4:	3fd287a7 	.word	0x3fd287a7
 80082f8:	8b60c8b3 	.word	0x8b60c8b3
 80082fc:	3fc68a28 	.word	0x3fc68a28
 8008300:	509f79fb 	.word	0x509f79fb
 8008304:	3fd34413 	.word	0x3fd34413
 8008308:	0800a0a6 	.word	0x0800a0a6
 800830c:	0800a0bd 	.word	0x0800a0bd
 8008310:	7ff00000 	.word	0x7ff00000
 8008314:	0800a076 	.word	0x0800a076
 8008318:	3ff80000 	.word	0x3ff80000
 800831c:	0800a1b8 	.word	0x0800a1b8
 8008320:	0800a115 	.word	0x0800a115
 8008324:	0800a0a2 	.word	0x0800a0a2
 8008328:	0800a075 	.word	0x0800a075
 800832c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008330:	6018      	str	r0, [r3, #0]
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	2b0e      	cmp	r3, #14
 8008336:	f200 80a4 	bhi.w	8008482 <_dtoa_r+0x442>
 800833a:	2c00      	cmp	r4, #0
 800833c:	f000 80a1 	beq.w	8008482 <_dtoa_r+0x442>
 8008340:	2f00      	cmp	r7, #0
 8008342:	dd33      	ble.n	80083ac <_dtoa_r+0x36c>
 8008344:	4bad      	ldr	r3, [pc, #692]	@ (80085fc <_dtoa_r+0x5bc>)
 8008346:	f007 020f 	and.w	r2, r7, #15
 800834a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800834e:	ed93 7b00 	vldr	d7, [r3]
 8008352:	05f8      	lsls	r0, r7, #23
 8008354:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800835c:	d516      	bpl.n	800838c <_dtoa_r+0x34c>
 800835e:	4ba8      	ldr	r3, [pc, #672]	@ (8008600 <_dtoa_r+0x5c0>)
 8008360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008368:	f7f8 faa0 	bl	80008ac <__aeabi_ddiv>
 800836c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008370:	f004 040f 	and.w	r4, r4, #15
 8008374:	2603      	movs	r6, #3
 8008376:	4da2      	ldr	r5, [pc, #648]	@ (8008600 <_dtoa_r+0x5c0>)
 8008378:	b954      	cbnz	r4, 8008390 <_dtoa_r+0x350>
 800837a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800837e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008382:	f7f8 fa93 	bl	80008ac <__aeabi_ddiv>
 8008386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800838a:	e028      	b.n	80083de <_dtoa_r+0x39e>
 800838c:	2602      	movs	r6, #2
 800838e:	e7f2      	b.n	8008376 <_dtoa_r+0x336>
 8008390:	07e1      	lsls	r1, r4, #31
 8008392:	d508      	bpl.n	80083a6 <_dtoa_r+0x366>
 8008394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800839c:	f7f8 f95c 	bl	8000658 <__aeabi_dmul>
 80083a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083a4:	3601      	adds	r6, #1
 80083a6:	1064      	asrs	r4, r4, #1
 80083a8:	3508      	adds	r5, #8
 80083aa:	e7e5      	b.n	8008378 <_dtoa_r+0x338>
 80083ac:	f000 80d2 	beq.w	8008554 <_dtoa_r+0x514>
 80083b0:	427c      	negs	r4, r7
 80083b2:	4b92      	ldr	r3, [pc, #584]	@ (80085fc <_dtoa_r+0x5bc>)
 80083b4:	4d92      	ldr	r5, [pc, #584]	@ (8008600 <_dtoa_r+0x5c0>)
 80083b6:	f004 020f 	and.w	r2, r4, #15
 80083ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083c6:	f7f8 f947 	bl	8000658 <__aeabi_dmul>
 80083ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ce:	1124      	asrs	r4, r4, #4
 80083d0:	2300      	movs	r3, #0
 80083d2:	2602      	movs	r6, #2
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	f040 80b2 	bne.w	800853e <_dtoa_r+0x4fe>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1d3      	bne.n	8008386 <_dtoa_r+0x346>
 80083de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80b7 	beq.w	8008558 <_dtoa_r+0x518>
 80083ea:	4b86      	ldr	r3, [pc, #536]	@ (8008604 <_dtoa_r+0x5c4>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f8 fba3 	bl	8000b3c <__aeabi_dcmplt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f000 80ae 	beq.w	8008558 <_dtoa_r+0x518>
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 80aa 	beq.w	8008558 <_dtoa_r+0x518>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	dd37      	ble.n	800847a <_dtoa_r+0x43a>
 800840a:	1e7b      	subs	r3, r7, #1
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	4620      	mov	r0, r4
 8008410:	4b7d      	ldr	r3, [pc, #500]	@ (8008608 <_dtoa_r+0x5c8>)
 8008412:	2200      	movs	r2, #0
 8008414:	4629      	mov	r1, r5
 8008416:	f7f8 f91f 	bl	8000658 <__aeabi_dmul>
 800841a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800841e:	9c00      	ldr	r4, [sp, #0]
 8008420:	3601      	adds	r6, #1
 8008422:	4630      	mov	r0, r6
 8008424:	f7f8 f8ae 	bl	8000584 <__aeabi_i2d>
 8008428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800842c:	f7f8 f914 	bl	8000658 <__aeabi_dmul>
 8008430:	4b76      	ldr	r3, [pc, #472]	@ (800860c <_dtoa_r+0x5cc>)
 8008432:	2200      	movs	r2, #0
 8008434:	f7f7 ff5a 	bl	80002ec <__adddf3>
 8008438:	4605      	mov	r5, r0
 800843a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800843e:	2c00      	cmp	r4, #0
 8008440:	f040 808d 	bne.w	800855e <_dtoa_r+0x51e>
 8008444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008448:	4b71      	ldr	r3, [pc, #452]	@ (8008610 <_dtoa_r+0x5d0>)
 800844a:	2200      	movs	r2, #0
 800844c:	f7f7 ff4c 	bl	80002e8 <__aeabi_dsub>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008458:	462a      	mov	r2, r5
 800845a:	4633      	mov	r3, r6
 800845c:	f7f8 fb8c 	bl	8000b78 <__aeabi_dcmpgt>
 8008460:	2800      	cmp	r0, #0
 8008462:	f040 828b 	bne.w	800897c <_dtoa_r+0x93c>
 8008466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846a:	462a      	mov	r2, r5
 800846c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008470:	f7f8 fb64 	bl	8000b3c <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	f040 8128 	bne.w	80086ca <_dtoa_r+0x68a>
 800847a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800847e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008482:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008484:	2b00      	cmp	r3, #0
 8008486:	f2c0 815a 	blt.w	800873e <_dtoa_r+0x6fe>
 800848a:	2f0e      	cmp	r7, #14
 800848c:	f300 8157 	bgt.w	800873e <_dtoa_r+0x6fe>
 8008490:	4b5a      	ldr	r3, [pc, #360]	@ (80085fc <_dtoa_r+0x5bc>)
 8008492:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008496:	ed93 7b00 	vldr	d7, [r3]
 800849a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800849c:	2b00      	cmp	r3, #0
 800849e:	ed8d 7b00 	vstr	d7, [sp]
 80084a2:	da03      	bge.n	80084ac <_dtoa_r+0x46c>
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f340 8101 	ble.w	80086ae <_dtoa_r+0x66e>
 80084ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084b0:	4656      	mov	r6, sl
 80084b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 f9f7 	bl	80008ac <__aeabi_ddiv>
 80084be:	f7f8 fb7b 	bl	8000bb8 <__aeabi_d2iz>
 80084c2:	4680      	mov	r8, r0
 80084c4:	f7f8 f85e 	bl	8000584 <__aeabi_i2d>
 80084c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084cc:	f7f8 f8c4 	bl	8000658 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084dc:	f7f7 ff04 	bl	80002e8 <__aeabi_dsub>
 80084e0:	f806 4b01 	strb.w	r4, [r6], #1
 80084e4:	9d07      	ldr	r5, [sp, #28]
 80084e6:	eba6 040a 	sub.w	r4, r6, sl
 80084ea:	42a5      	cmp	r5, r4
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	f040 8117 	bne.w	8008722 <_dtoa_r+0x6e2>
 80084f4:	f7f7 fefa 	bl	80002ec <__adddf3>
 80084f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	f7f8 fb3a 	bl	8000b78 <__aeabi_dcmpgt>
 8008504:	2800      	cmp	r0, #0
 8008506:	f040 80f9 	bne.w	80086fc <_dtoa_r+0x6bc>
 800850a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f8 fb09 	bl	8000b28 <__aeabi_dcmpeq>
 8008516:	b118      	cbz	r0, 8008520 <_dtoa_r+0x4e0>
 8008518:	f018 0f01 	tst.w	r8, #1
 800851c:	f040 80ee 	bne.w	80086fc <_dtoa_r+0x6bc>
 8008520:	4649      	mov	r1, r9
 8008522:	4658      	mov	r0, fp
 8008524:	f000 fbda 	bl	8008cdc <_Bfree>
 8008528:	2300      	movs	r3, #0
 800852a:	7033      	strb	r3, [r6, #0]
 800852c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800852e:	3701      	adds	r7, #1
 8008530:	601f      	str	r7, [r3, #0]
 8008532:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 831d 	beq.w	8008b74 <_dtoa_r+0xb34>
 800853a:	601e      	str	r6, [r3, #0]
 800853c:	e31a      	b.n	8008b74 <_dtoa_r+0xb34>
 800853e:	07e2      	lsls	r2, r4, #31
 8008540:	d505      	bpl.n	800854e <_dtoa_r+0x50e>
 8008542:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008546:	f7f8 f887 	bl	8000658 <__aeabi_dmul>
 800854a:	3601      	adds	r6, #1
 800854c:	2301      	movs	r3, #1
 800854e:	1064      	asrs	r4, r4, #1
 8008550:	3508      	adds	r5, #8
 8008552:	e73f      	b.n	80083d4 <_dtoa_r+0x394>
 8008554:	2602      	movs	r6, #2
 8008556:	e742      	b.n	80083de <_dtoa_r+0x39e>
 8008558:	9c07      	ldr	r4, [sp, #28]
 800855a:	9704      	str	r7, [sp, #16]
 800855c:	e761      	b.n	8008422 <_dtoa_r+0x3e2>
 800855e:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <_dtoa_r+0x5bc>)
 8008560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008562:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008566:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800856a:	4454      	add	r4, sl
 800856c:	2900      	cmp	r1, #0
 800856e:	d053      	beq.n	8008618 <_dtoa_r+0x5d8>
 8008570:	4928      	ldr	r1, [pc, #160]	@ (8008614 <_dtoa_r+0x5d4>)
 8008572:	2000      	movs	r0, #0
 8008574:	f7f8 f99a 	bl	80008ac <__aeabi_ddiv>
 8008578:	4633      	mov	r3, r6
 800857a:	462a      	mov	r2, r5
 800857c:	f7f7 feb4 	bl	80002e8 <__aeabi_dsub>
 8008580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008584:	4656      	mov	r6, sl
 8008586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800858a:	f7f8 fb15 	bl	8000bb8 <__aeabi_d2iz>
 800858e:	4605      	mov	r5, r0
 8008590:	f7f7 fff8 	bl	8000584 <__aeabi_i2d>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859c:	f7f7 fea4 	bl	80002e8 <__aeabi_dsub>
 80085a0:	3530      	adds	r5, #48	@ 0x30
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085aa:	f806 5b01 	strb.w	r5, [r6], #1
 80085ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085b2:	f7f8 fac3 	bl	8000b3c <__aeabi_dcmplt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d171      	bne.n	800869e <_dtoa_r+0x65e>
 80085ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085be:	4911      	ldr	r1, [pc, #68]	@ (8008604 <_dtoa_r+0x5c4>)
 80085c0:	2000      	movs	r0, #0
 80085c2:	f7f7 fe91 	bl	80002e8 <__aeabi_dsub>
 80085c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085ca:	f7f8 fab7 	bl	8000b3c <__aeabi_dcmplt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f040 8095 	bne.w	80086fe <_dtoa_r+0x6be>
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	f43f af50 	beq.w	800847a <_dtoa_r+0x43a>
 80085da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085de:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <_dtoa_r+0x5c8>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	f7f8 f839 	bl	8000658 <__aeabi_dmul>
 80085e6:	4b08      	ldr	r3, [pc, #32]	@ (8008608 <_dtoa_r+0x5c8>)
 80085e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085ec:	2200      	movs	r2, #0
 80085ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f2:	f7f8 f831 	bl	8000658 <__aeabi_dmul>
 80085f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085fa:	e7c4      	b.n	8008586 <_dtoa_r+0x546>
 80085fc:	0800a1b8 	.word	0x0800a1b8
 8008600:	0800a190 	.word	0x0800a190
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	40240000 	.word	0x40240000
 800860c:	401c0000 	.word	0x401c0000
 8008610:	40140000 	.word	0x40140000
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	4631      	mov	r1, r6
 800861a:	4628      	mov	r0, r5
 800861c:	f7f8 f81c 	bl	8000658 <__aeabi_dmul>
 8008620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008624:	9415      	str	r4, [sp, #84]	@ 0x54
 8008626:	4656      	mov	r6, sl
 8008628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862c:	f7f8 fac4 	bl	8000bb8 <__aeabi_d2iz>
 8008630:	4605      	mov	r5, r0
 8008632:	f7f7 ffa7 	bl	8000584 <__aeabi_i2d>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863e:	f7f7 fe53 	bl	80002e8 <__aeabi_dsub>
 8008642:	3530      	adds	r5, #48	@ 0x30
 8008644:	f806 5b01 	strb.w	r5, [r6], #1
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	42a6      	cmp	r6, r4
 800864e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	d124      	bne.n	80086a2 <_dtoa_r+0x662>
 8008658:	4bac      	ldr	r3, [pc, #688]	@ (800890c <_dtoa_r+0x8cc>)
 800865a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800865e:	f7f7 fe45 	bl	80002ec <__adddf3>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866a:	f7f8 fa85 	bl	8000b78 <__aeabi_dcmpgt>
 800866e:	2800      	cmp	r0, #0
 8008670:	d145      	bne.n	80086fe <_dtoa_r+0x6be>
 8008672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008676:	49a5      	ldr	r1, [pc, #660]	@ (800890c <_dtoa_r+0x8cc>)
 8008678:	2000      	movs	r0, #0
 800867a:	f7f7 fe35 	bl	80002e8 <__aeabi_dsub>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008686:	f7f8 fa59 	bl	8000b3c <__aeabi_dcmplt>
 800868a:	2800      	cmp	r0, #0
 800868c:	f43f aef5 	beq.w	800847a <_dtoa_r+0x43a>
 8008690:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008692:	1e73      	subs	r3, r6, #1
 8008694:	9315      	str	r3, [sp, #84]	@ 0x54
 8008696:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800869a:	2b30      	cmp	r3, #48	@ 0x30
 800869c:	d0f8      	beq.n	8008690 <_dtoa_r+0x650>
 800869e:	9f04      	ldr	r7, [sp, #16]
 80086a0:	e73e      	b.n	8008520 <_dtoa_r+0x4e0>
 80086a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008910 <_dtoa_r+0x8d0>)
 80086a4:	f7f7 ffd8 	bl	8000658 <__aeabi_dmul>
 80086a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ac:	e7bc      	b.n	8008628 <_dtoa_r+0x5e8>
 80086ae:	d10c      	bne.n	80086ca <_dtoa_r+0x68a>
 80086b0:	4b98      	ldr	r3, [pc, #608]	@ (8008914 <_dtoa_r+0x8d4>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086b8:	f7f7 ffce 	bl	8000658 <__aeabi_dmul>
 80086bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c0:	f7f8 fa50 	bl	8000b64 <__aeabi_dcmpge>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f000 8157 	beq.w	8008978 <_dtoa_r+0x938>
 80086ca:	2400      	movs	r4, #0
 80086cc:	4625      	mov	r5, r4
 80086ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086d0:	43db      	mvns	r3, r3
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	4656      	mov	r6, sl
 80086d6:	2700      	movs	r7, #0
 80086d8:	4621      	mov	r1, r4
 80086da:	4658      	mov	r0, fp
 80086dc:	f000 fafe 	bl	8008cdc <_Bfree>
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	d0dc      	beq.n	800869e <_dtoa_r+0x65e>
 80086e4:	b12f      	cbz	r7, 80086f2 <_dtoa_r+0x6b2>
 80086e6:	42af      	cmp	r7, r5
 80086e8:	d003      	beq.n	80086f2 <_dtoa_r+0x6b2>
 80086ea:	4639      	mov	r1, r7
 80086ec:	4658      	mov	r0, fp
 80086ee:	f000 faf5 	bl	8008cdc <_Bfree>
 80086f2:	4629      	mov	r1, r5
 80086f4:	4658      	mov	r0, fp
 80086f6:	f000 faf1 	bl	8008cdc <_Bfree>
 80086fa:	e7d0      	b.n	800869e <_dtoa_r+0x65e>
 80086fc:	9704      	str	r7, [sp, #16]
 80086fe:	4633      	mov	r3, r6
 8008700:	461e      	mov	r6, r3
 8008702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008706:	2a39      	cmp	r2, #57	@ 0x39
 8008708:	d107      	bne.n	800871a <_dtoa_r+0x6da>
 800870a:	459a      	cmp	sl, r3
 800870c:	d1f8      	bne.n	8008700 <_dtoa_r+0x6c0>
 800870e:	9a04      	ldr	r2, [sp, #16]
 8008710:	3201      	adds	r2, #1
 8008712:	9204      	str	r2, [sp, #16]
 8008714:	2230      	movs	r2, #48	@ 0x30
 8008716:	f88a 2000 	strb.w	r2, [sl]
 800871a:	781a      	ldrb	r2, [r3, #0]
 800871c:	3201      	adds	r2, #1
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	e7bd      	b.n	800869e <_dtoa_r+0x65e>
 8008722:	4b7b      	ldr	r3, [pc, #492]	@ (8008910 <_dtoa_r+0x8d0>)
 8008724:	2200      	movs	r2, #0
 8008726:	f7f7 ff97 	bl	8000658 <__aeabi_dmul>
 800872a:	2200      	movs	r2, #0
 800872c:	2300      	movs	r3, #0
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	f7f8 f9f9 	bl	8000b28 <__aeabi_dcmpeq>
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f aebb 	beq.w	80084b2 <_dtoa_r+0x472>
 800873c:	e6f0      	b.n	8008520 <_dtoa_r+0x4e0>
 800873e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008740:	2a00      	cmp	r2, #0
 8008742:	f000 80db 	beq.w	80088fc <_dtoa_r+0x8bc>
 8008746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008748:	2a01      	cmp	r2, #1
 800874a:	f300 80bf 	bgt.w	80088cc <_dtoa_r+0x88c>
 800874e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008750:	2a00      	cmp	r2, #0
 8008752:	f000 80b7 	beq.w	80088c4 <_dtoa_r+0x884>
 8008756:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800875a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800875c:	4646      	mov	r6, r8
 800875e:	9a08      	ldr	r2, [sp, #32]
 8008760:	2101      	movs	r1, #1
 8008762:	441a      	add	r2, r3
 8008764:	4658      	mov	r0, fp
 8008766:	4498      	add	r8, r3
 8008768:	9208      	str	r2, [sp, #32]
 800876a:	f000 fb6b 	bl	8008e44 <__i2b>
 800876e:	4605      	mov	r5, r0
 8008770:	b15e      	cbz	r6, 800878a <_dtoa_r+0x74a>
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	2b00      	cmp	r3, #0
 8008776:	dd08      	ble.n	800878a <_dtoa_r+0x74a>
 8008778:	42b3      	cmp	r3, r6
 800877a:	9a08      	ldr	r2, [sp, #32]
 800877c:	bfa8      	it	ge
 800877e:	4633      	movge	r3, r6
 8008780:	eba8 0803 	sub.w	r8, r8, r3
 8008784:	1af6      	subs	r6, r6, r3
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	9308      	str	r3, [sp, #32]
 800878a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878c:	b1f3      	cbz	r3, 80087cc <_dtoa_r+0x78c>
 800878e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80b7 	beq.w	8008904 <_dtoa_r+0x8c4>
 8008796:	b18c      	cbz	r4, 80087bc <_dtoa_r+0x77c>
 8008798:	4629      	mov	r1, r5
 800879a:	4622      	mov	r2, r4
 800879c:	4658      	mov	r0, fp
 800879e:	f000 fc11 	bl	8008fc4 <__pow5mult>
 80087a2:	464a      	mov	r2, r9
 80087a4:	4601      	mov	r1, r0
 80087a6:	4605      	mov	r5, r0
 80087a8:	4658      	mov	r0, fp
 80087aa:	f000 fb61 	bl	8008e70 <__multiply>
 80087ae:	4649      	mov	r1, r9
 80087b0:	9004      	str	r0, [sp, #16]
 80087b2:	4658      	mov	r0, fp
 80087b4:	f000 fa92 	bl	8008cdc <_Bfree>
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	4699      	mov	r9, r3
 80087bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087be:	1b1a      	subs	r2, r3, r4
 80087c0:	d004      	beq.n	80087cc <_dtoa_r+0x78c>
 80087c2:	4649      	mov	r1, r9
 80087c4:	4658      	mov	r0, fp
 80087c6:	f000 fbfd 	bl	8008fc4 <__pow5mult>
 80087ca:	4681      	mov	r9, r0
 80087cc:	2101      	movs	r1, #1
 80087ce:	4658      	mov	r0, fp
 80087d0:	f000 fb38 	bl	8008e44 <__i2b>
 80087d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d6:	4604      	mov	r4, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 81cf 	beq.w	8008b7c <_dtoa_r+0xb3c>
 80087de:	461a      	mov	r2, r3
 80087e0:	4601      	mov	r1, r0
 80087e2:	4658      	mov	r0, fp
 80087e4:	f000 fbee 	bl	8008fc4 <__pow5mult>
 80087e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	4604      	mov	r4, r0
 80087ee:	f300 8095 	bgt.w	800891c <_dtoa_r+0x8dc>
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f040 8087 	bne.w	8008908 <_dtoa_r+0x8c8>
 80087fa:	9b03      	ldr	r3, [sp, #12]
 80087fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008800:	2b00      	cmp	r3, #0
 8008802:	f040 8089 	bne.w	8008918 <_dtoa_r+0x8d8>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800880c:	0d1b      	lsrs	r3, r3, #20
 800880e:	051b      	lsls	r3, r3, #20
 8008810:	b12b      	cbz	r3, 800881e <_dtoa_r+0x7de>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	3301      	adds	r3, #1
 8008816:	9308      	str	r3, [sp, #32]
 8008818:	f108 0801 	add.w	r8, r8, #1
 800881c:	2301      	movs	r3, #1
 800881e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 81b0 	beq.w	8008b88 <_dtoa_r+0xb48>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800882e:	6918      	ldr	r0, [r3, #16]
 8008830:	f000 fabc 	bl	8008dac <__hi0bits>
 8008834:	f1c0 0020 	rsb	r0, r0, #32
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	4418      	add	r0, r3
 800883c:	f010 001f 	ands.w	r0, r0, #31
 8008840:	d077      	beq.n	8008932 <_dtoa_r+0x8f2>
 8008842:	f1c0 0320 	rsb	r3, r0, #32
 8008846:	2b04      	cmp	r3, #4
 8008848:	dd6b      	ble.n	8008922 <_dtoa_r+0x8e2>
 800884a:	9b08      	ldr	r3, [sp, #32]
 800884c:	f1c0 001c 	rsb	r0, r0, #28
 8008850:	4403      	add	r3, r0
 8008852:	4480      	add	r8, r0
 8008854:	4406      	add	r6, r0
 8008856:	9308      	str	r3, [sp, #32]
 8008858:	f1b8 0f00 	cmp.w	r8, #0
 800885c:	dd05      	ble.n	800886a <_dtoa_r+0x82a>
 800885e:	4649      	mov	r1, r9
 8008860:	4642      	mov	r2, r8
 8008862:	4658      	mov	r0, fp
 8008864:	f000 fc08 	bl	8009078 <__lshift>
 8008868:	4681      	mov	r9, r0
 800886a:	9b08      	ldr	r3, [sp, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd05      	ble.n	800887c <_dtoa_r+0x83c>
 8008870:	4621      	mov	r1, r4
 8008872:	461a      	mov	r2, r3
 8008874:	4658      	mov	r0, fp
 8008876:	f000 fbff 	bl	8009078 <__lshift>
 800887a:	4604      	mov	r4, r0
 800887c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800887e:	2b00      	cmp	r3, #0
 8008880:	d059      	beq.n	8008936 <_dtoa_r+0x8f6>
 8008882:	4621      	mov	r1, r4
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fc63 	bl	8009150 <__mcmp>
 800888a:	2800      	cmp	r0, #0
 800888c:	da53      	bge.n	8008936 <_dtoa_r+0x8f6>
 800888e:	1e7b      	subs	r3, r7, #1
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	4649      	mov	r1, r9
 8008894:	2300      	movs	r3, #0
 8008896:	220a      	movs	r2, #10
 8008898:	4658      	mov	r0, fp
 800889a:	f000 fa41 	bl	8008d20 <__multadd>
 800889e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a0:	4681      	mov	r9, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8172 	beq.w	8008b8c <_dtoa_r+0xb4c>
 80088a8:	2300      	movs	r3, #0
 80088aa:	4629      	mov	r1, r5
 80088ac:	220a      	movs	r2, #10
 80088ae:	4658      	mov	r0, fp
 80088b0:	f000 fa36 	bl	8008d20 <__multadd>
 80088b4:	9b00      	ldr	r3, [sp, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	4605      	mov	r5, r0
 80088ba:	dc67      	bgt.n	800898c <_dtoa_r+0x94c>
 80088bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088be:	2b02      	cmp	r3, #2
 80088c0:	dc41      	bgt.n	8008946 <_dtoa_r+0x906>
 80088c2:	e063      	b.n	800898c <_dtoa_r+0x94c>
 80088c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80088c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088ca:	e746      	b.n	800875a <_dtoa_r+0x71a>
 80088cc:	9b07      	ldr	r3, [sp, #28]
 80088ce:	1e5c      	subs	r4, r3, #1
 80088d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	bfbf      	itttt	lt
 80088d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80088da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088dc:	1ae3      	sublt	r3, r4, r3
 80088de:	bfb4      	ite	lt
 80088e0:	18d2      	addlt	r2, r2, r3
 80088e2:	1b1c      	subge	r4, r3, r4
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	bfbc      	itt	lt
 80088e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80088ea:	2400      	movlt	r4, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfb5      	itete	lt
 80088f0:	eba8 0603 	sublt.w	r6, r8, r3
 80088f4:	9b07      	ldrge	r3, [sp, #28]
 80088f6:	2300      	movlt	r3, #0
 80088f8:	4646      	movge	r6, r8
 80088fa:	e730      	b.n	800875e <_dtoa_r+0x71e>
 80088fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008900:	4646      	mov	r6, r8
 8008902:	e735      	b.n	8008770 <_dtoa_r+0x730>
 8008904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008906:	e75c      	b.n	80087c2 <_dtoa_r+0x782>
 8008908:	2300      	movs	r3, #0
 800890a:	e788      	b.n	800881e <_dtoa_r+0x7de>
 800890c:	3fe00000 	.word	0x3fe00000
 8008910:	40240000 	.word	0x40240000
 8008914:	40140000 	.word	0x40140000
 8008918:	9b02      	ldr	r3, [sp, #8]
 800891a:	e780      	b.n	800881e <_dtoa_r+0x7de>
 800891c:	2300      	movs	r3, #0
 800891e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008920:	e782      	b.n	8008828 <_dtoa_r+0x7e8>
 8008922:	d099      	beq.n	8008858 <_dtoa_r+0x818>
 8008924:	9a08      	ldr	r2, [sp, #32]
 8008926:	331c      	adds	r3, #28
 8008928:	441a      	add	r2, r3
 800892a:	4498      	add	r8, r3
 800892c:	441e      	add	r6, r3
 800892e:	9208      	str	r2, [sp, #32]
 8008930:	e792      	b.n	8008858 <_dtoa_r+0x818>
 8008932:	4603      	mov	r3, r0
 8008934:	e7f6      	b.n	8008924 <_dtoa_r+0x8e4>
 8008936:	9b07      	ldr	r3, [sp, #28]
 8008938:	9704      	str	r7, [sp, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dc20      	bgt.n	8008980 <_dtoa_r+0x940>
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	2b02      	cmp	r3, #2
 8008944:	dd1e      	ble.n	8008984 <_dtoa_r+0x944>
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f47f aec0 	bne.w	80086ce <_dtoa_r+0x68e>
 800894e:	4621      	mov	r1, r4
 8008950:	2205      	movs	r2, #5
 8008952:	4658      	mov	r0, fp
 8008954:	f000 f9e4 	bl	8008d20 <__multadd>
 8008958:	4601      	mov	r1, r0
 800895a:	4604      	mov	r4, r0
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fbf7 	bl	8009150 <__mcmp>
 8008962:	2800      	cmp	r0, #0
 8008964:	f77f aeb3 	ble.w	80086ce <_dtoa_r+0x68e>
 8008968:	4656      	mov	r6, sl
 800896a:	2331      	movs	r3, #49	@ 0x31
 800896c:	f806 3b01 	strb.w	r3, [r6], #1
 8008970:	9b04      	ldr	r3, [sp, #16]
 8008972:	3301      	adds	r3, #1
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	e6ae      	b.n	80086d6 <_dtoa_r+0x696>
 8008978:	9c07      	ldr	r4, [sp, #28]
 800897a:	9704      	str	r7, [sp, #16]
 800897c:	4625      	mov	r5, r4
 800897e:	e7f3      	b.n	8008968 <_dtoa_r+0x928>
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 8104 	beq.w	8008b94 <_dtoa_r+0xb54>
 800898c:	2e00      	cmp	r6, #0
 800898e:	dd05      	ble.n	800899c <_dtoa_r+0x95c>
 8008990:	4629      	mov	r1, r5
 8008992:	4632      	mov	r2, r6
 8008994:	4658      	mov	r0, fp
 8008996:	f000 fb6f 	bl	8009078 <__lshift>
 800899a:	4605      	mov	r5, r0
 800899c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d05a      	beq.n	8008a58 <_dtoa_r+0xa18>
 80089a2:	6869      	ldr	r1, [r5, #4]
 80089a4:	4658      	mov	r0, fp
 80089a6:	f000 f959 	bl	8008c5c <_Balloc>
 80089aa:	4606      	mov	r6, r0
 80089ac:	b928      	cbnz	r0, 80089ba <_dtoa_r+0x97a>
 80089ae:	4b84      	ldr	r3, [pc, #528]	@ (8008bc0 <_dtoa_r+0xb80>)
 80089b0:	4602      	mov	r2, r0
 80089b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089b6:	f7ff bb5a 	b.w	800806e <_dtoa_r+0x2e>
 80089ba:	692a      	ldr	r2, [r5, #16]
 80089bc:	3202      	adds	r2, #2
 80089be:	0092      	lsls	r2, r2, #2
 80089c0:	f105 010c 	add.w	r1, r5, #12
 80089c4:	300c      	adds	r0, #12
 80089c6:	f7ff faa4 	bl	8007f12 <memcpy>
 80089ca:	2201      	movs	r2, #1
 80089cc:	4631      	mov	r1, r6
 80089ce:	4658      	mov	r0, fp
 80089d0:	f000 fb52 	bl	8009078 <__lshift>
 80089d4:	f10a 0301 	add.w	r3, sl, #1
 80089d8:	9307      	str	r3, [sp, #28]
 80089da:	9b00      	ldr	r3, [sp, #0]
 80089dc:	4453      	add	r3, sl
 80089de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	462f      	mov	r7, r5
 80089e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ea:	4605      	mov	r5, r0
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	4621      	mov	r1, r4
 80089f0:	3b01      	subs	r3, #1
 80089f2:	4648      	mov	r0, r9
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	f7ff fa9a 	bl	8007f2e <quorem>
 80089fa:	4639      	mov	r1, r7
 80089fc:	9002      	str	r0, [sp, #8]
 80089fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a02:	4648      	mov	r0, r9
 8008a04:	f000 fba4 	bl	8009150 <__mcmp>
 8008a08:	462a      	mov	r2, r5
 8008a0a:	9008      	str	r0, [sp, #32]
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4658      	mov	r0, fp
 8008a10:	f000 fbba 	bl	8009188 <__mdiff>
 8008a14:	68c2      	ldr	r2, [r0, #12]
 8008a16:	4606      	mov	r6, r0
 8008a18:	bb02      	cbnz	r2, 8008a5c <_dtoa_r+0xa1c>
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4648      	mov	r0, r9
 8008a1e:	f000 fb97 	bl	8009150 <__mcmp>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4631      	mov	r1, r6
 8008a26:	4658      	mov	r0, fp
 8008a28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a2a:	f000 f957 	bl	8008cdc <_Bfree>
 8008a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a32:	9e07      	ldr	r6, [sp, #28]
 8008a34:	ea43 0102 	orr.w	r1, r3, r2
 8008a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3a:	4319      	orrs	r1, r3
 8008a3c:	d110      	bne.n	8008a60 <_dtoa_r+0xa20>
 8008a3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a42:	d029      	beq.n	8008a98 <_dtoa_r+0xa58>
 8008a44:	9b08      	ldr	r3, [sp, #32]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dd02      	ble.n	8008a50 <_dtoa_r+0xa10>
 8008a4a:	9b02      	ldr	r3, [sp, #8]
 8008a4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	f883 8000 	strb.w	r8, [r3]
 8008a56:	e63f      	b.n	80086d8 <_dtoa_r+0x698>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	e7bb      	b.n	80089d4 <_dtoa_r+0x994>
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	e7e1      	b.n	8008a24 <_dtoa_r+0x9e4>
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	db04      	blt.n	8008a70 <_dtoa_r+0xa30>
 8008a66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	d120      	bne.n	8008ab2 <_dtoa_r+0xa72>
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	dded      	ble.n	8008a50 <_dtoa_r+0xa10>
 8008a74:	4649      	mov	r1, r9
 8008a76:	2201      	movs	r2, #1
 8008a78:	4658      	mov	r0, fp
 8008a7a:	f000 fafd 	bl	8009078 <__lshift>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4681      	mov	r9, r0
 8008a82:	f000 fb65 	bl	8009150 <__mcmp>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	dc03      	bgt.n	8008a92 <_dtoa_r+0xa52>
 8008a8a:	d1e1      	bne.n	8008a50 <_dtoa_r+0xa10>
 8008a8c:	f018 0f01 	tst.w	r8, #1
 8008a90:	d0de      	beq.n	8008a50 <_dtoa_r+0xa10>
 8008a92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a96:	d1d8      	bne.n	8008a4a <_dtoa_r+0xa0a>
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	2339      	movs	r3, #57	@ 0x39
 8008a9c:	7013      	strb	r3, [r2, #0]
 8008a9e:	4633      	mov	r3, r6
 8008aa0:	461e      	mov	r6, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008aa8:	2a39      	cmp	r2, #57	@ 0x39
 8008aaa:	d052      	beq.n	8008b52 <_dtoa_r+0xb12>
 8008aac:	3201      	adds	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	e612      	b.n	80086d8 <_dtoa_r+0x698>
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	dd07      	ble.n	8008ac6 <_dtoa_r+0xa86>
 8008ab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aba:	d0ed      	beq.n	8008a98 <_dtoa_r+0xa58>
 8008abc:	9a00      	ldr	r2, [sp, #0]
 8008abe:	f108 0301 	add.w	r3, r8, #1
 8008ac2:	7013      	strb	r3, [r2, #0]
 8008ac4:	e608      	b.n	80086d8 <_dtoa_r+0x698>
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	9a07      	ldr	r2, [sp, #28]
 8008aca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d028      	beq.n	8008b26 <_dtoa_r+0xae6>
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	220a      	movs	r2, #10
 8008ada:	4658      	mov	r0, fp
 8008adc:	f000 f920 	bl	8008d20 <__multadd>
 8008ae0:	42af      	cmp	r7, r5
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	f04f 020a 	mov.w	r2, #10
 8008aec:	4639      	mov	r1, r7
 8008aee:	4658      	mov	r0, fp
 8008af0:	d107      	bne.n	8008b02 <_dtoa_r+0xac2>
 8008af2:	f000 f915 	bl	8008d20 <__multadd>
 8008af6:	4607      	mov	r7, r0
 8008af8:	4605      	mov	r5, r0
 8008afa:	9b07      	ldr	r3, [sp, #28]
 8008afc:	3301      	adds	r3, #1
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	e774      	b.n	80089ec <_dtoa_r+0x9ac>
 8008b02:	f000 f90d 	bl	8008d20 <__multadd>
 8008b06:	4629      	mov	r1, r5
 8008b08:	4607      	mov	r7, r0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	220a      	movs	r2, #10
 8008b0e:	4658      	mov	r0, fp
 8008b10:	f000 f906 	bl	8008d20 <__multadd>
 8008b14:	4605      	mov	r5, r0
 8008b16:	e7f0      	b.n	8008afa <_dtoa_r+0xaba>
 8008b18:	9b00      	ldr	r3, [sp, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfcc      	ite	gt
 8008b1e:	461e      	movgt	r6, r3
 8008b20:	2601      	movle	r6, #1
 8008b22:	4456      	add	r6, sl
 8008b24:	2700      	movs	r7, #0
 8008b26:	4649      	mov	r1, r9
 8008b28:	2201      	movs	r2, #1
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f000 faa4 	bl	8009078 <__lshift>
 8008b30:	4621      	mov	r1, r4
 8008b32:	4681      	mov	r9, r0
 8008b34:	f000 fb0c 	bl	8009150 <__mcmp>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	dcb0      	bgt.n	8008a9e <_dtoa_r+0xa5e>
 8008b3c:	d102      	bne.n	8008b44 <_dtoa_r+0xb04>
 8008b3e:	f018 0f01 	tst.w	r8, #1
 8008b42:	d1ac      	bne.n	8008a9e <_dtoa_r+0xa5e>
 8008b44:	4633      	mov	r3, r6
 8008b46:	461e      	mov	r6, r3
 8008b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b4c:	2a30      	cmp	r2, #48	@ 0x30
 8008b4e:	d0fa      	beq.n	8008b46 <_dtoa_r+0xb06>
 8008b50:	e5c2      	b.n	80086d8 <_dtoa_r+0x698>
 8008b52:	459a      	cmp	sl, r3
 8008b54:	d1a4      	bne.n	8008aa0 <_dtoa_r+0xa60>
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	2331      	movs	r3, #49	@ 0x31
 8008b5e:	f88a 3000 	strb.w	r3, [sl]
 8008b62:	e5b9      	b.n	80086d8 <_dtoa_r+0x698>
 8008b64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bc4 <_dtoa_r+0xb84>
 8008b6a:	b11b      	cbz	r3, 8008b74 <_dtoa_r+0xb34>
 8008b6c:	f10a 0308 	add.w	r3, sl, #8
 8008b70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	4650      	mov	r0, sl
 8008b76:	b019      	add	sp, #100	@ 0x64
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	f77f ae37 	ble.w	80087f2 <_dtoa_r+0x7b2>
 8008b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b88:	2001      	movs	r0, #1
 8008b8a:	e655      	b.n	8008838 <_dtoa_r+0x7f8>
 8008b8c:	9b00      	ldr	r3, [sp, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f77f aed6 	ble.w	8008940 <_dtoa_r+0x900>
 8008b94:	4656      	mov	r6, sl
 8008b96:	4621      	mov	r1, r4
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f7ff f9c8 	bl	8007f2e <quorem>
 8008b9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ba2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	eba6 020a 	sub.w	r2, r6, sl
 8008bac:	4293      	cmp	r3, r2
 8008bae:	ddb3      	ble.n	8008b18 <_dtoa_r+0xad8>
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f000 f8b2 	bl	8008d20 <__multadd>
 8008bbc:	4681      	mov	r9, r0
 8008bbe:	e7ea      	b.n	8008b96 <_dtoa_r+0xb56>
 8008bc0:	0800a115 	.word	0x0800a115
 8008bc4:	0800a099 	.word	0x0800a099

08008bc8 <_free_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4605      	mov	r5, r0
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d041      	beq.n	8008c54 <_free_r+0x8c>
 8008bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd4:	1f0c      	subs	r4, r1, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	18e4      	addlt	r4, r4, r3
 8008bdc:	f7fe fae8 	bl	80071b0 <__malloc_lock>
 8008be0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c58 <_free_r+0x90>)
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	b933      	cbnz	r3, 8008bf4 <_free_r+0x2c>
 8008be6:	6063      	str	r3, [r4, #4]
 8008be8:	6014      	str	r4, [r2, #0]
 8008bea:	4628      	mov	r0, r5
 8008bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf0:	f7fe bae4 	b.w	80071bc <__malloc_unlock>
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	d908      	bls.n	8008c0a <_free_r+0x42>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	1821      	adds	r1, r4, r0
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf01      	itttt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	1809      	addeq	r1, r1, r0
 8008c06:	6021      	streq	r1, [r4, #0]
 8008c08:	e7ed      	b.n	8008be6 <_free_r+0x1e>
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	b10b      	cbz	r3, 8008c14 <_free_r+0x4c>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d9fa      	bls.n	8008c0a <_free_r+0x42>
 8008c14:	6811      	ldr	r1, [r2, #0]
 8008c16:	1850      	adds	r0, r2, r1
 8008c18:	42a0      	cmp	r0, r4
 8008c1a:	d10b      	bne.n	8008c34 <_free_r+0x6c>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	4401      	add	r1, r0
 8008c20:	1850      	adds	r0, r2, r1
 8008c22:	4283      	cmp	r3, r0
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	d1e0      	bne.n	8008bea <_free_r+0x22>
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	6053      	str	r3, [r2, #4]
 8008c2e:	4408      	add	r0, r1
 8008c30:	6010      	str	r0, [r2, #0]
 8008c32:	e7da      	b.n	8008bea <_free_r+0x22>
 8008c34:	d902      	bls.n	8008c3c <_free_r+0x74>
 8008c36:	230c      	movs	r3, #12
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	e7d6      	b.n	8008bea <_free_r+0x22>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	1821      	adds	r1, r4, r0
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf04      	itt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	6063      	str	r3, [r4, #4]
 8008c4a:	bf04      	itt	eq
 8008c4c:	1809      	addeq	r1, r1, r0
 8008c4e:	6021      	streq	r1, [r4, #0]
 8008c50:	6054      	str	r4, [r2, #4]
 8008c52:	e7ca      	b.n	8008bea <_free_r+0x22>
 8008c54:	bd38      	pop	{r3, r4, r5, pc}
 8008c56:	bf00      	nop
 8008c58:	20001110 	.word	0x20001110

08008c5c <_Balloc>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	69c6      	ldr	r6, [r0, #28]
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	b976      	cbnz	r6, 8008c84 <_Balloc+0x28>
 8008c66:	2010      	movs	r0, #16
 8008c68:	f7fe f9f0 	bl	800704c <malloc>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	61e0      	str	r0, [r4, #28]
 8008c70:	b920      	cbnz	r0, 8008c7c <_Balloc+0x20>
 8008c72:	4b18      	ldr	r3, [pc, #96]	@ (8008cd4 <_Balloc+0x78>)
 8008c74:	4818      	ldr	r0, [pc, #96]	@ (8008cd8 <_Balloc+0x7c>)
 8008c76:	216b      	movs	r1, #107	@ 0x6b
 8008c78:	f000 fd90 	bl	800979c <__assert_func>
 8008c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c80:	6006      	str	r6, [r0, #0]
 8008c82:	60c6      	str	r6, [r0, #12]
 8008c84:	69e6      	ldr	r6, [r4, #28]
 8008c86:	68f3      	ldr	r3, [r6, #12]
 8008c88:	b183      	cbz	r3, 8008cac <_Balloc+0x50>
 8008c8a:	69e3      	ldr	r3, [r4, #28]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c92:	b9b8      	cbnz	r0, 8008cc4 <_Balloc+0x68>
 8008c94:	2101      	movs	r1, #1
 8008c96:	fa01 f605 	lsl.w	r6, r1, r5
 8008c9a:	1d72      	adds	r2, r6, #5
 8008c9c:	0092      	lsls	r2, r2, #2
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 fd9a 	bl	80097d8 <_calloc_r>
 8008ca4:	b160      	cbz	r0, 8008cc0 <_Balloc+0x64>
 8008ca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008caa:	e00e      	b.n	8008cca <_Balloc+0x6e>
 8008cac:	2221      	movs	r2, #33	@ 0x21
 8008cae:	2104      	movs	r1, #4
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fd91 	bl	80097d8 <_calloc_r>
 8008cb6:	69e3      	ldr	r3, [r4, #28]
 8008cb8:	60f0      	str	r0, [r6, #12]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <_Balloc+0x2e>
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	6802      	ldr	r2, [r0, #0]
 8008cc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cd0:	e7f7      	b.n	8008cc2 <_Balloc+0x66>
 8008cd2:	bf00      	nop
 8008cd4:	0800a0a6 	.word	0x0800a0a6
 8008cd8:	0800a126 	.word	0x0800a126

08008cdc <_Bfree>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	69c6      	ldr	r6, [r0, #28]
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	b976      	cbnz	r6, 8008d04 <_Bfree+0x28>
 8008ce6:	2010      	movs	r0, #16
 8008ce8:	f7fe f9b0 	bl	800704c <malloc>
 8008cec:	4602      	mov	r2, r0
 8008cee:	61e8      	str	r0, [r5, #28]
 8008cf0:	b920      	cbnz	r0, 8008cfc <_Bfree+0x20>
 8008cf2:	4b09      	ldr	r3, [pc, #36]	@ (8008d18 <_Bfree+0x3c>)
 8008cf4:	4809      	ldr	r0, [pc, #36]	@ (8008d1c <_Bfree+0x40>)
 8008cf6:	218f      	movs	r1, #143	@ 0x8f
 8008cf8:	f000 fd50 	bl	800979c <__assert_func>
 8008cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d00:	6006      	str	r6, [r0, #0]
 8008d02:	60c6      	str	r6, [r0, #12]
 8008d04:	b13c      	cbz	r4, 8008d16 <_Bfree+0x3a>
 8008d06:	69eb      	ldr	r3, [r5, #28]
 8008d08:	6862      	ldr	r2, [r4, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d10:	6021      	str	r1, [r4, #0]
 8008d12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d16:	bd70      	pop	{r4, r5, r6, pc}
 8008d18:	0800a0a6 	.word	0x0800a0a6
 8008d1c:	0800a126 	.word	0x0800a126

08008d20 <__multadd>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	690d      	ldr	r5, [r1, #16]
 8008d26:	4607      	mov	r7, r0
 8008d28:	460c      	mov	r4, r1
 8008d2a:	461e      	mov	r6, r3
 8008d2c:	f101 0c14 	add.w	ip, r1, #20
 8008d30:	2000      	movs	r0, #0
 8008d32:	f8dc 3000 	ldr.w	r3, [ip]
 8008d36:	b299      	uxth	r1, r3
 8008d38:	fb02 6101 	mla	r1, r2, r1, r6
 8008d3c:	0c1e      	lsrs	r6, r3, #16
 8008d3e:	0c0b      	lsrs	r3, r1, #16
 8008d40:	fb02 3306 	mla	r3, r2, r6, r3
 8008d44:	b289      	uxth	r1, r1
 8008d46:	3001      	adds	r0, #1
 8008d48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d4c:	4285      	cmp	r5, r0
 8008d4e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d56:	dcec      	bgt.n	8008d32 <__multadd+0x12>
 8008d58:	b30e      	cbz	r6, 8008d9e <__multadd+0x7e>
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	42ab      	cmp	r3, r5
 8008d5e:	dc19      	bgt.n	8008d94 <__multadd+0x74>
 8008d60:	6861      	ldr	r1, [r4, #4]
 8008d62:	4638      	mov	r0, r7
 8008d64:	3101      	adds	r1, #1
 8008d66:	f7ff ff79 	bl	8008c5c <_Balloc>
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	b928      	cbnz	r0, 8008d7a <__multadd+0x5a>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b0c      	ldr	r3, [pc, #48]	@ (8008da4 <__multadd+0x84>)
 8008d72:	480d      	ldr	r0, [pc, #52]	@ (8008da8 <__multadd+0x88>)
 8008d74:	21ba      	movs	r1, #186	@ 0xba
 8008d76:	f000 fd11 	bl	800979c <__assert_func>
 8008d7a:	6922      	ldr	r2, [r4, #16]
 8008d7c:	3202      	adds	r2, #2
 8008d7e:	f104 010c 	add.w	r1, r4, #12
 8008d82:	0092      	lsls	r2, r2, #2
 8008d84:	300c      	adds	r0, #12
 8008d86:	f7ff f8c4 	bl	8007f12 <memcpy>
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff ffa5 	bl	8008cdc <_Bfree>
 8008d92:	4644      	mov	r4, r8
 8008d94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d98:	3501      	adds	r5, #1
 8008d9a:	615e      	str	r6, [r3, #20]
 8008d9c:	6125      	str	r5, [r4, #16]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da4:	0800a115 	.word	0x0800a115
 8008da8:	0800a126 	.word	0x0800a126

08008dac <__hi0bits>:
 8008dac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008db0:	4603      	mov	r3, r0
 8008db2:	bf36      	itet	cc
 8008db4:	0403      	lslcc	r3, r0, #16
 8008db6:	2000      	movcs	r0, #0
 8008db8:	2010      	movcc	r0, #16
 8008dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dbe:	bf3c      	itt	cc
 8008dc0:	021b      	lslcc	r3, r3, #8
 8008dc2:	3008      	addcc	r0, #8
 8008dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dc8:	bf3c      	itt	cc
 8008dca:	011b      	lslcc	r3, r3, #4
 8008dcc:	3004      	addcc	r0, #4
 8008dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd2:	bf3c      	itt	cc
 8008dd4:	009b      	lslcc	r3, r3, #2
 8008dd6:	3002      	addcc	r0, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	db05      	blt.n	8008de8 <__hi0bits+0x3c>
 8008ddc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008de0:	f100 0001 	add.w	r0, r0, #1
 8008de4:	bf08      	it	eq
 8008de6:	2020      	moveq	r0, #32
 8008de8:	4770      	bx	lr

08008dea <__lo0bits>:
 8008dea:	6803      	ldr	r3, [r0, #0]
 8008dec:	4602      	mov	r2, r0
 8008dee:	f013 0007 	ands.w	r0, r3, #7
 8008df2:	d00b      	beq.n	8008e0c <__lo0bits+0x22>
 8008df4:	07d9      	lsls	r1, r3, #31
 8008df6:	d421      	bmi.n	8008e3c <__lo0bits+0x52>
 8008df8:	0798      	lsls	r0, r3, #30
 8008dfa:	bf49      	itett	mi
 8008dfc:	085b      	lsrmi	r3, r3, #1
 8008dfe:	089b      	lsrpl	r3, r3, #2
 8008e00:	2001      	movmi	r0, #1
 8008e02:	6013      	strmi	r3, [r2, #0]
 8008e04:	bf5c      	itt	pl
 8008e06:	6013      	strpl	r3, [r2, #0]
 8008e08:	2002      	movpl	r0, #2
 8008e0a:	4770      	bx	lr
 8008e0c:	b299      	uxth	r1, r3
 8008e0e:	b909      	cbnz	r1, 8008e14 <__lo0bits+0x2a>
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	2010      	movs	r0, #16
 8008e14:	b2d9      	uxtb	r1, r3
 8008e16:	b909      	cbnz	r1, 8008e1c <__lo0bits+0x32>
 8008e18:	3008      	adds	r0, #8
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	0719      	lsls	r1, r3, #28
 8008e1e:	bf04      	itt	eq
 8008e20:	091b      	lsreq	r3, r3, #4
 8008e22:	3004      	addeq	r0, #4
 8008e24:	0799      	lsls	r1, r3, #30
 8008e26:	bf04      	itt	eq
 8008e28:	089b      	lsreq	r3, r3, #2
 8008e2a:	3002      	addeq	r0, #2
 8008e2c:	07d9      	lsls	r1, r3, #31
 8008e2e:	d403      	bmi.n	8008e38 <__lo0bits+0x4e>
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	f100 0001 	add.w	r0, r0, #1
 8008e36:	d003      	beq.n	8008e40 <__lo0bits+0x56>
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	4770      	bx	lr
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	4770      	bx	lr
 8008e40:	2020      	movs	r0, #32
 8008e42:	4770      	bx	lr

08008e44 <__i2b>:
 8008e44:	b510      	push	{r4, lr}
 8008e46:	460c      	mov	r4, r1
 8008e48:	2101      	movs	r1, #1
 8008e4a:	f7ff ff07 	bl	8008c5c <_Balloc>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	b928      	cbnz	r0, 8008e5e <__i2b+0x1a>
 8008e52:	4b05      	ldr	r3, [pc, #20]	@ (8008e68 <__i2b+0x24>)
 8008e54:	4805      	ldr	r0, [pc, #20]	@ (8008e6c <__i2b+0x28>)
 8008e56:	f240 1145 	movw	r1, #325	@ 0x145
 8008e5a:	f000 fc9f 	bl	800979c <__assert_func>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	6144      	str	r4, [r0, #20]
 8008e62:	6103      	str	r3, [r0, #16]
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	bf00      	nop
 8008e68:	0800a115 	.word	0x0800a115
 8008e6c:	0800a126 	.word	0x0800a126

08008e70 <__multiply>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	4614      	mov	r4, r2
 8008e76:	690a      	ldr	r2, [r1, #16]
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	bfa8      	it	ge
 8008e7e:	4623      	movge	r3, r4
 8008e80:	460f      	mov	r7, r1
 8008e82:	bfa4      	itt	ge
 8008e84:	460c      	movge	r4, r1
 8008e86:	461f      	movge	r7, r3
 8008e88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	6861      	ldr	r1, [r4, #4]
 8008e94:	eb0a 0609 	add.w	r6, sl, r9
 8008e98:	42b3      	cmp	r3, r6
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	bfb8      	it	lt
 8008e9e:	3101      	addlt	r1, #1
 8008ea0:	f7ff fedc 	bl	8008c5c <_Balloc>
 8008ea4:	b930      	cbnz	r0, 8008eb4 <__multiply+0x44>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	4b44      	ldr	r3, [pc, #272]	@ (8008fbc <__multiply+0x14c>)
 8008eaa:	4845      	ldr	r0, [pc, #276]	@ (8008fc0 <__multiply+0x150>)
 8008eac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008eb0:	f000 fc74 	bl	800979c <__assert_func>
 8008eb4:	f100 0514 	add.w	r5, r0, #20
 8008eb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4543      	cmp	r3, r8
 8008ec2:	d321      	bcc.n	8008f08 <__multiply+0x98>
 8008ec4:	f107 0114 	add.w	r1, r7, #20
 8008ec8:	f104 0214 	add.w	r2, r4, #20
 8008ecc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ed0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	1b13      	subs	r3, r2, r4
 8008ed8:	3b15      	subs	r3, #21
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	3304      	adds	r3, #4
 8008ee0:	f104 0715 	add.w	r7, r4, #21
 8008ee4:	42ba      	cmp	r2, r7
 8008ee6:	bf38      	it	cc
 8008ee8:	2304      	movcc	r3, #4
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	9103      	str	r1, [sp, #12]
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	d80c      	bhi.n	8008f0e <__multiply+0x9e>
 8008ef4:	2e00      	cmp	r6, #0
 8008ef6:	dd03      	ble.n	8008f00 <__multiply+0x90>
 8008ef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d05b      	beq.n	8008fb8 <__multiply+0x148>
 8008f00:	6106      	str	r6, [r0, #16]
 8008f02:	b005      	add	sp, #20
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	f843 2b04 	str.w	r2, [r3], #4
 8008f0c:	e7d8      	b.n	8008ec0 <__multiply+0x50>
 8008f0e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f12:	f1ba 0f00 	cmp.w	sl, #0
 8008f16:	d024      	beq.n	8008f62 <__multiply+0xf2>
 8008f18:	f104 0e14 	add.w	lr, r4, #20
 8008f1c:	46a9      	mov	r9, r5
 8008f1e:	f04f 0c00 	mov.w	ip, #0
 8008f22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f26:	f8d9 3000 	ldr.w	r3, [r9]
 8008f2a:	fa1f fb87 	uxth.w	fp, r7
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f38:	f8d9 7000 	ldr.w	r7, [r9]
 8008f3c:	4463      	add	r3, ip
 8008f3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f42:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f50:	4572      	cmp	r2, lr
 8008f52:	f849 3b04 	str.w	r3, [r9], #4
 8008f56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f5a:	d8e2      	bhi.n	8008f22 <__multiply+0xb2>
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	f845 c003 	str.w	ip, [r5, r3]
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f68:	3104      	adds	r1, #4
 8008f6a:	f1b9 0f00 	cmp.w	r9, #0
 8008f6e:	d021      	beq.n	8008fb4 <__multiply+0x144>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	f104 0c14 	add.w	ip, r4, #20
 8008f76:	46ae      	mov	lr, r5
 8008f78:	f04f 0a00 	mov.w	sl, #0
 8008f7c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f84:	fb09 770b 	mla	r7, r9, fp, r7
 8008f88:	4457      	add	r7, sl
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f90:	f84e 3b04 	str.w	r3, [lr], #4
 8008f94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f9c:	f8be 3000 	ldrh.w	r3, [lr]
 8008fa0:	fb09 330a 	mla	r3, r9, sl, r3
 8008fa4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008fa8:	4562      	cmp	r2, ip
 8008faa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fae:	d8e5      	bhi.n	8008f7c <__multiply+0x10c>
 8008fb0:	9f01      	ldr	r7, [sp, #4]
 8008fb2:	51eb      	str	r3, [r5, r7]
 8008fb4:	3504      	adds	r5, #4
 8008fb6:	e799      	b.n	8008eec <__multiply+0x7c>
 8008fb8:	3e01      	subs	r6, #1
 8008fba:	e79b      	b.n	8008ef4 <__multiply+0x84>
 8008fbc:	0800a115 	.word	0x0800a115
 8008fc0:	0800a126 	.word	0x0800a126

08008fc4 <__pow5mult>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	4615      	mov	r5, r2
 8008fca:	f012 0203 	ands.w	r2, r2, #3
 8008fce:	4607      	mov	r7, r0
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	d007      	beq.n	8008fe4 <__pow5mult+0x20>
 8008fd4:	4c25      	ldr	r4, [pc, #148]	@ (800906c <__pow5mult+0xa8>)
 8008fd6:	3a01      	subs	r2, #1
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fde:	f7ff fe9f 	bl	8008d20 <__multadd>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	10ad      	asrs	r5, r5, #2
 8008fe6:	d03d      	beq.n	8009064 <__pow5mult+0xa0>
 8008fe8:	69fc      	ldr	r4, [r7, #28]
 8008fea:	b97c      	cbnz	r4, 800900c <__pow5mult+0x48>
 8008fec:	2010      	movs	r0, #16
 8008fee:	f7fe f82d 	bl	800704c <malloc>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	61f8      	str	r0, [r7, #28]
 8008ff6:	b928      	cbnz	r0, 8009004 <__pow5mult+0x40>
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8009070 <__pow5mult+0xac>)
 8008ffa:	481e      	ldr	r0, [pc, #120]	@ (8009074 <__pow5mult+0xb0>)
 8008ffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009000:	f000 fbcc 	bl	800979c <__assert_func>
 8009004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009008:	6004      	str	r4, [r0, #0]
 800900a:	60c4      	str	r4, [r0, #12]
 800900c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009014:	b94c      	cbnz	r4, 800902a <__pow5mult+0x66>
 8009016:	f240 2171 	movw	r1, #625	@ 0x271
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ff12 	bl	8008e44 <__i2b>
 8009020:	2300      	movs	r3, #0
 8009022:	f8c8 0008 	str.w	r0, [r8, #8]
 8009026:	4604      	mov	r4, r0
 8009028:	6003      	str	r3, [r0, #0]
 800902a:	f04f 0900 	mov.w	r9, #0
 800902e:	07eb      	lsls	r3, r5, #31
 8009030:	d50a      	bpl.n	8009048 <__pow5mult+0x84>
 8009032:	4631      	mov	r1, r6
 8009034:	4622      	mov	r2, r4
 8009036:	4638      	mov	r0, r7
 8009038:	f7ff ff1a 	bl	8008e70 <__multiply>
 800903c:	4631      	mov	r1, r6
 800903e:	4680      	mov	r8, r0
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff fe4b 	bl	8008cdc <_Bfree>
 8009046:	4646      	mov	r6, r8
 8009048:	106d      	asrs	r5, r5, #1
 800904a:	d00b      	beq.n	8009064 <__pow5mult+0xa0>
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	b938      	cbnz	r0, 8009060 <__pow5mult+0x9c>
 8009050:	4622      	mov	r2, r4
 8009052:	4621      	mov	r1, r4
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ff0b 	bl	8008e70 <__multiply>
 800905a:	6020      	str	r0, [r4, #0]
 800905c:	f8c0 9000 	str.w	r9, [r0]
 8009060:	4604      	mov	r4, r0
 8009062:	e7e4      	b.n	800902e <__pow5mult+0x6a>
 8009064:	4630      	mov	r0, r6
 8009066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906a:	bf00      	nop
 800906c:	0800a180 	.word	0x0800a180
 8009070:	0800a0a6 	.word	0x0800a0a6
 8009074:	0800a126 	.word	0x0800a126

08009078 <__lshift>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	460c      	mov	r4, r1
 800907e:	6849      	ldr	r1, [r1, #4]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	4607      	mov	r7, r0
 800908a:	4691      	mov	r9, r2
 800908c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009090:	f108 0601 	add.w	r6, r8, #1
 8009094:	42b3      	cmp	r3, r6
 8009096:	db0b      	blt.n	80090b0 <__lshift+0x38>
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff fddf 	bl	8008c5c <_Balloc>
 800909e:	4605      	mov	r5, r0
 80090a0:	b948      	cbnz	r0, 80090b6 <__lshift+0x3e>
 80090a2:	4602      	mov	r2, r0
 80090a4:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <__lshift+0xd0>)
 80090a6:	4829      	ldr	r0, [pc, #164]	@ (800914c <__lshift+0xd4>)
 80090a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090ac:	f000 fb76 	bl	800979c <__assert_func>
 80090b0:	3101      	adds	r1, #1
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	e7ee      	b.n	8009094 <__lshift+0x1c>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f100 0114 	add.w	r1, r0, #20
 80090bc:	f100 0210 	add.w	r2, r0, #16
 80090c0:	4618      	mov	r0, r3
 80090c2:	4553      	cmp	r3, sl
 80090c4:	db33      	blt.n	800912e <__lshift+0xb6>
 80090c6:	6920      	ldr	r0, [r4, #16]
 80090c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090cc:	f104 0314 	add.w	r3, r4, #20
 80090d0:	f019 091f 	ands.w	r9, r9, #31
 80090d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090dc:	d02b      	beq.n	8009136 <__lshift+0xbe>
 80090de:	f1c9 0e20 	rsb	lr, r9, #32
 80090e2:	468a      	mov	sl, r1
 80090e4:	2200      	movs	r2, #0
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	fa00 f009 	lsl.w	r0, r0, r9
 80090ec:	4310      	orrs	r0, r2
 80090ee:	f84a 0b04 	str.w	r0, [sl], #4
 80090f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f6:	459c      	cmp	ip, r3
 80090f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090fc:	d8f3      	bhi.n	80090e6 <__lshift+0x6e>
 80090fe:	ebac 0304 	sub.w	r3, ip, r4
 8009102:	3b15      	subs	r3, #21
 8009104:	f023 0303 	bic.w	r3, r3, #3
 8009108:	3304      	adds	r3, #4
 800910a:	f104 0015 	add.w	r0, r4, #21
 800910e:	4584      	cmp	ip, r0
 8009110:	bf38      	it	cc
 8009112:	2304      	movcc	r3, #4
 8009114:	50ca      	str	r2, [r1, r3]
 8009116:	b10a      	cbz	r2, 800911c <__lshift+0xa4>
 8009118:	f108 0602 	add.w	r6, r8, #2
 800911c:	3e01      	subs	r6, #1
 800911e:	4638      	mov	r0, r7
 8009120:	612e      	str	r6, [r5, #16]
 8009122:	4621      	mov	r1, r4
 8009124:	f7ff fdda 	bl	8008cdc <_Bfree>
 8009128:	4628      	mov	r0, r5
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009132:	3301      	adds	r3, #1
 8009134:	e7c5      	b.n	80090c2 <__lshift+0x4a>
 8009136:	3904      	subs	r1, #4
 8009138:	f853 2b04 	ldr.w	r2, [r3], #4
 800913c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009140:	459c      	cmp	ip, r3
 8009142:	d8f9      	bhi.n	8009138 <__lshift+0xc0>
 8009144:	e7ea      	b.n	800911c <__lshift+0xa4>
 8009146:	bf00      	nop
 8009148:	0800a115 	.word	0x0800a115
 800914c:	0800a126 	.word	0x0800a126

08009150 <__mcmp>:
 8009150:	690a      	ldr	r2, [r1, #16]
 8009152:	4603      	mov	r3, r0
 8009154:	6900      	ldr	r0, [r0, #16]
 8009156:	1a80      	subs	r0, r0, r2
 8009158:	b530      	push	{r4, r5, lr}
 800915a:	d10e      	bne.n	800917a <__mcmp+0x2a>
 800915c:	3314      	adds	r3, #20
 800915e:	3114      	adds	r1, #20
 8009160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800916c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009170:	4295      	cmp	r5, r2
 8009172:	d003      	beq.n	800917c <__mcmp+0x2c>
 8009174:	d205      	bcs.n	8009182 <__mcmp+0x32>
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	bd30      	pop	{r4, r5, pc}
 800917c:	42a3      	cmp	r3, r4
 800917e:	d3f3      	bcc.n	8009168 <__mcmp+0x18>
 8009180:	e7fb      	b.n	800917a <__mcmp+0x2a>
 8009182:	2001      	movs	r0, #1
 8009184:	e7f9      	b.n	800917a <__mcmp+0x2a>
	...

08009188 <__mdiff>:
 8009188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	4689      	mov	r9, r1
 800918e:	4606      	mov	r6, r0
 8009190:	4611      	mov	r1, r2
 8009192:	4648      	mov	r0, r9
 8009194:	4614      	mov	r4, r2
 8009196:	f7ff ffdb 	bl	8009150 <__mcmp>
 800919a:	1e05      	subs	r5, r0, #0
 800919c:	d112      	bne.n	80091c4 <__mdiff+0x3c>
 800919e:	4629      	mov	r1, r5
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff fd5b 	bl	8008c5c <_Balloc>
 80091a6:	4602      	mov	r2, r0
 80091a8:	b928      	cbnz	r0, 80091b6 <__mdiff+0x2e>
 80091aa:	4b3f      	ldr	r3, [pc, #252]	@ (80092a8 <__mdiff+0x120>)
 80091ac:	f240 2137 	movw	r1, #567	@ 0x237
 80091b0:	483e      	ldr	r0, [pc, #248]	@ (80092ac <__mdiff+0x124>)
 80091b2:	f000 faf3 	bl	800979c <__assert_func>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091bc:	4610      	mov	r0, r2
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	bfbc      	itt	lt
 80091c6:	464b      	movlt	r3, r9
 80091c8:	46a1      	movlt	r9, r4
 80091ca:	4630      	mov	r0, r6
 80091cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d0:	bfba      	itte	lt
 80091d2:	461c      	movlt	r4, r3
 80091d4:	2501      	movlt	r5, #1
 80091d6:	2500      	movge	r5, #0
 80091d8:	f7ff fd40 	bl	8008c5c <_Balloc>
 80091dc:	4602      	mov	r2, r0
 80091de:	b918      	cbnz	r0, 80091e8 <__mdiff+0x60>
 80091e0:	4b31      	ldr	r3, [pc, #196]	@ (80092a8 <__mdiff+0x120>)
 80091e2:	f240 2145 	movw	r1, #581	@ 0x245
 80091e6:	e7e3      	b.n	80091b0 <__mdiff+0x28>
 80091e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091ec:	6926      	ldr	r6, [r4, #16]
 80091ee:	60c5      	str	r5, [r0, #12]
 80091f0:	f109 0310 	add.w	r3, r9, #16
 80091f4:	f109 0514 	add.w	r5, r9, #20
 80091f8:	f104 0e14 	add.w	lr, r4, #20
 80091fc:	f100 0b14 	add.w	fp, r0, #20
 8009200:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009204:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	46d9      	mov	r9, fp
 800920c:	f04f 0c00 	mov.w	ip, #0
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009216:	f853 af04 	ldr.w	sl, [r3, #4]!
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	fa1f f38a 	uxth.w	r3, sl
 8009220:	4619      	mov	r1, r3
 8009222:	b283      	uxth	r3, r0
 8009224:	1acb      	subs	r3, r1, r3
 8009226:	0c00      	lsrs	r0, r0, #16
 8009228:	4463      	add	r3, ip
 800922a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800922e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009232:	b29b      	uxth	r3, r3
 8009234:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009238:	4576      	cmp	r6, lr
 800923a:	f849 3b04 	str.w	r3, [r9], #4
 800923e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009242:	d8e5      	bhi.n	8009210 <__mdiff+0x88>
 8009244:	1b33      	subs	r3, r6, r4
 8009246:	3b15      	subs	r3, #21
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	3415      	adds	r4, #21
 800924e:	3304      	adds	r3, #4
 8009250:	42a6      	cmp	r6, r4
 8009252:	bf38      	it	cc
 8009254:	2304      	movcc	r3, #4
 8009256:	441d      	add	r5, r3
 8009258:	445b      	add	r3, fp
 800925a:	461e      	mov	r6, r3
 800925c:	462c      	mov	r4, r5
 800925e:	4544      	cmp	r4, r8
 8009260:	d30e      	bcc.n	8009280 <__mdiff+0xf8>
 8009262:	f108 0103 	add.w	r1, r8, #3
 8009266:	1b49      	subs	r1, r1, r5
 8009268:	f021 0103 	bic.w	r1, r1, #3
 800926c:	3d03      	subs	r5, #3
 800926e:	45a8      	cmp	r8, r5
 8009270:	bf38      	it	cc
 8009272:	2100      	movcc	r1, #0
 8009274:	440b      	add	r3, r1
 8009276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800927a:	b191      	cbz	r1, 80092a2 <__mdiff+0x11a>
 800927c:	6117      	str	r7, [r2, #16]
 800927e:	e79d      	b.n	80091bc <__mdiff+0x34>
 8009280:	f854 1b04 	ldr.w	r1, [r4], #4
 8009284:	46e6      	mov	lr, ip
 8009286:	0c08      	lsrs	r0, r1, #16
 8009288:	fa1c fc81 	uxtah	ip, ip, r1
 800928c:	4471      	add	r1, lr
 800928e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009292:	b289      	uxth	r1, r1
 8009294:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009298:	f846 1b04 	str.w	r1, [r6], #4
 800929c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a0:	e7dd      	b.n	800925e <__mdiff+0xd6>
 80092a2:	3f01      	subs	r7, #1
 80092a4:	e7e7      	b.n	8009276 <__mdiff+0xee>
 80092a6:	bf00      	nop
 80092a8:	0800a115 	.word	0x0800a115
 80092ac:	0800a126 	.word	0x0800a126

080092b0 <__d2b>:
 80092b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092b4:	460f      	mov	r7, r1
 80092b6:	2101      	movs	r1, #1
 80092b8:	ec59 8b10 	vmov	r8, r9, d0
 80092bc:	4616      	mov	r6, r2
 80092be:	f7ff fccd 	bl	8008c5c <_Balloc>
 80092c2:	4604      	mov	r4, r0
 80092c4:	b930      	cbnz	r0, 80092d4 <__d2b+0x24>
 80092c6:	4602      	mov	r2, r0
 80092c8:	4b23      	ldr	r3, [pc, #140]	@ (8009358 <__d2b+0xa8>)
 80092ca:	4824      	ldr	r0, [pc, #144]	@ (800935c <__d2b+0xac>)
 80092cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80092d0:	f000 fa64 	bl	800979c <__assert_func>
 80092d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092dc:	b10d      	cbz	r5, 80092e2 <__d2b+0x32>
 80092de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	f1b8 0300 	subs.w	r3, r8, #0
 80092e8:	d023      	beq.n	8009332 <__d2b+0x82>
 80092ea:	4668      	mov	r0, sp
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	f7ff fd7c 	bl	8008dea <__lo0bits>
 80092f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092f6:	b1d0      	cbz	r0, 800932e <__d2b+0x7e>
 80092f8:	f1c0 0320 	rsb	r3, r0, #32
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	430b      	orrs	r3, r1
 8009302:	40c2      	lsrs	r2, r0
 8009304:	6163      	str	r3, [r4, #20]
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	61a3      	str	r3, [r4, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	bf0c      	ite	eq
 8009310:	2201      	moveq	r2, #1
 8009312:	2202      	movne	r2, #2
 8009314:	6122      	str	r2, [r4, #16]
 8009316:	b1a5      	cbz	r5, 8009342 <__d2b+0x92>
 8009318:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800931c:	4405      	add	r5, r0
 800931e:	603d      	str	r5, [r7, #0]
 8009320:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009324:	6030      	str	r0, [r6, #0]
 8009326:	4620      	mov	r0, r4
 8009328:	b003      	add	sp, #12
 800932a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932e:	6161      	str	r1, [r4, #20]
 8009330:	e7ea      	b.n	8009308 <__d2b+0x58>
 8009332:	a801      	add	r0, sp, #4
 8009334:	f7ff fd59 	bl	8008dea <__lo0bits>
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	6163      	str	r3, [r4, #20]
 800933c:	3020      	adds	r0, #32
 800933e:	2201      	movs	r2, #1
 8009340:	e7e8      	b.n	8009314 <__d2b+0x64>
 8009342:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009346:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800934a:	6038      	str	r0, [r7, #0]
 800934c:	6918      	ldr	r0, [r3, #16]
 800934e:	f7ff fd2d 	bl	8008dac <__hi0bits>
 8009352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009356:	e7e5      	b.n	8009324 <__d2b+0x74>
 8009358:	0800a115 	.word	0x0800a115
 800935c:	0800a126 	.word	0x0800a126

08009360 <__ssputs_r>:
 8009360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009364:	688e      	ldr	r6, [r1, #8]
 8009366:	461f      	mov	r7, r3
 8009368:	42be      	cmp	r6, r7
 800936a:	680b      	ldr	r3, [r1, #0]
 800936c:	4682      	mov	sl, r0
 800936e:	460c      	mov	r4, r1
 8009370:	4690      	mov	r8, r2
 8009372:	d82d      	bhi.n	80093d0 <__ssputs_r+0x70>
 8009374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009378:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800937c:	d026      	beq.n	80093cc <__ssputs_r+0x6c>
 800937e:	6965      	ldr	r5, [r4, #20]
 8009380:	6909      	ldr	r1, [r1, #16]
 8009382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009386:	eba3 0901 	sub.w	r9, r3, r1
 800938a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800938e:	1c7b      	adds	r3, r7, #1
 8009390:	444b      	add	r3, r9
 8009392:	106d      	asrs	r5, r5, #1
 8009394:	429d      	cmp	r5, r3
 8009396:	bf38      	it	cc
 8009398:	461d      	movcc	r5, r3
 800939a:	0553      	lsls	r3, r2, #21
 800939c:	d527      	bpl.n	80093ee <__ssputs_r+0x8e>
 800939e:	4629      	mov	r1, r5
 80093a0:	f7fd fe86 	bl	80070b0 <_malloc_r>
 80093a4:	4606      	mov	r6, r0
 80093a6:	b360      	cbz	r0, 8009402 <__ssputs_r+0xa2>
 80093a8:	6921      	ldr	r1, [r4, #16]
 80093aa:	464a      	mov	r2, r9
 80093ac:	f7fe fdb1 	bl	8007f12 <memcpy>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	6126      	str	r6, [r4, #16]
 80093be:	6165      	str	r5, [r4, #20]
 80093c0:	444e      	add	r6, r9
 80093c2:	eba5 0509 	sub.w	r5, r5, r9
 80093c6:	6026      	str	r6, [r4, #0]
 80093c8:	60a5      	str	r5, [r4, #8]
 80093ca:	463e      	mov	r6, r7
 80093cc:	42be      	cmp	r6, r7
 80093ce:	d900      	bls.n	80093d2 <__ssputs_r+0x72>
 80093d0:	463e      	mov	r6, r7
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	4632      	mov	r2, r6
 80093d6:	4641      	mov	r1, r8
 80093d8:	f000 f9c6 	bl	8009768 <memmove>
 80093dc:	68a3      	ldr	r3, [r4, #8]
 80093de:	1b9b      	subs	r3, r3, r6
 80093e0:	60a3      	str	r3, [r4, #8]
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	4433      	add	r3, r6
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	2000      	movs	r0, #0
 80093ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ee:	462a      	mov	r2, r5
 80093f0:	f000 fa18 	bl	8009824 <_realloc_r>
 80093f4:	4606      	mov	r6, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d1e0      	bne.n	80093bc <__ssputs_r+0x5c>
 80093fa:	6921      	ldr	r1, [r4, #16]
 80093fc:	4650      	mov	r0, sl
 80093fe:	f7ff fbe3 	bl	8008bc8 <_free_r>
 8009402:	230c      	movs	r3, #12
 8009404:	f8ca 3000 	str.w	r3, [sl]
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e7e9      	b.n	80093ea <__ssputs_r+0x8a>
	...

08009418 <_svfiprintf_r>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	4698      	mov	r8, r3
 800941e:	898b      	ldrh	r3, [r1, #12]
 8009420:	061b      	lsls	r3, r3, #24
 8009422:	b09d      	sub	sp, #116	@ 0x74
 8009424:	4607      	mov	r7, r0
 8009426:	460d      	mov	r5, r1
 8009428:	4614      	mov	r4, r2
 800942a:	d510      	bpl.n	800944e <_svfiprintf_r+0x36>
 800942c:	690b      	ldr	r3, [r1, #16]
 800942e:	b973      	cbnz	r3, 800944e <_svfiprintf_r+0x36>
 8009430:	2140      	movs	r1, #64	@ 0x40
 8009432:	f7fd fe3d 	bl	80070b0 <_malloc_r>
 8009436:	6028      	str	r0, [r5, #0]
 8009438:	6128      	str	r0, [r5, #16]
 800943a:	b930      	cbnz	r0, 800944a <_svfiprintf_r+0x32>
 800943c:	230c      	movs	r3, #12
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b01d      	add	sp, #116	@ 0x74
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	2340      	movs	r3, #64	@ 0x40
 800944c:	616b      	str	r3, [r5, #20]
 800944e:	2300      	movs	r3, #0
 8009450:	9309      	str	r3, [sp, #36]	@ 0x24
 8009452:	2320      	movs	r3, #32
 8009454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009458:	f8cd 800c 	str.w	r8, [sp, #12]
 800945c:	2330      	movs	r3, #48	@ 0x30
 800945e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095fc <_svfiprintf_r+0x1e4>
 8009462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009466:	f04f 0901 	mov.w	r9, #1
 800946a:	4623      	mov	r3, r4
 800946c:	469a      	mov	sl, r3
 800946e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009472:	b10a      	cbz	r2, 8009478 <_svfiprintf_r+0x60>
 8009474:	2a25      	cmp	r2, #37	@ 0x25
 8009476:	d1f9      	bne.n	800946c <_svfiprintf_r+0x54>
 8009478:	ebba 0b04 	subs.w	fp, sl, r4
 800947c:	d00b      	beq.n	8009496 <_svfiprintf_r+0x7e>
 800947e:	465b      	mov	r3, fp
 8009480:	4622      	mov	r2, r4
 8009482:	4629      	mov	r1, r5
 8009484:	4638      	mov	r0, r7
 8009486:	f7ff ff6b 	bl	8009360 <__ssputs_r>
 800948a:	3001      	adds	r0, #1
 800948c:	f000 80a7 	beq.w	80095de <_svfiprintf_r+0x1c6>
 8009490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009492:	445a      	add	r2, fp
 8009494:	9209      	str	r2, [sp, #36]	@ 0x24
 8009496:	f89a 3000 	ldrb.w	r3, [sl]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 809f 	beq.w	80095de <_svfiprintf_r+0x1c6>
 80094a0:	2300      	movs	r3, #0
 80094a2:	f04f 32ff 	mov.w	r2, #4294967295
 80094a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094aa:	f10a 0a01 	add.w	sl, sl, #1
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	9307      	str	r3, [sp, #28]
 80094b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80094b8:	4654      	mov	r4, sl
 80094ba:	2205      	movs	r2, #5
 80094bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c0:	484e      	ldr	r0, [pc, #312]	@ (80095fc <_svfiprintf_r+0x1e4>)
 80094c2:	f7f6 feb5 	bl	8000230 <memchr>
 80094c6:	9a04      	ldr	r2, [sp, #16]
 80094c8:	b9d8      	cbnz	r0, 8009502 <_svfiprintf_r+0xea>
 80094ca:	06d0      	lsls	r0, r2, #27
 80094cc:	bf44      	itt	mi
 80094ce:	2320      	movmi	r3, #32
 80094d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094d4:	0711      	lsls	r1, r2, #28
 80094d6:	bf44      	itt	mi
 80094d8:	232b      	movmi	r3, #43	@ 0x2b
 80094da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094de:	f89a 3000 	ldrb.w	r3, [sl]
 80094e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80094e4:	d015      	beq.n	8009512 <_svfiprintf_r+0xfa>
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	4654      	mov	r4, sl
 80094ea:	2000      	movs	r0, #0
 80094ec:	f04f 0c0a 	mov.w	ip, #10
 80094f0:	4621      	mov	r1, r4
 80094f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f6:	3b30      	subs	r3, #48	@ 0x30
 80094f8:	2b09      	cmp	r3, #9
 80094fa:	d94b      	bls.n	8009594 <_svfiprintf_r+0x17c>
 80094fc:	b1b0      	cbz	r0, 800952c <_svfiprintf_r+0x114>
 80094fe:	9207      	str	r2, [sp, #28]
 8009500:	e014      	b.n	800952c <_svfiprintf_r+0x114>
 8009502:	eba0 0308 	sub.w	r3, r0, r8
 8009506:	fa09 f303 	lsl.w	r3, r9, r3
 800950a:	4313      	orrs	r3, r2
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	46a2      	mov	sl, r4
 8009510:	e7d2      	b.n	80094b8 <_svfiprintf_r+0xa0>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	1d19      	adds	r1, r3, #4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	9103      	str	r1, [sp, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	bfbb      	ittet	lt
 800951e:	425b      	neglt	r3, r3
 8009520:	f042 0202 	orrlt.w	r2, r2, #2
 8009524:	9307      	strge	r3, [sp, #28]
 8009526:	9307      	strlt	r3, [sp, #28]
 8009528:	bfb8      	it	lt
 800952a:	9204      	strlt	r2, [sp, #16]
 800952c:	7823      	ldrb	r3, [r4, #0]
 800952e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009530:	d10a      	bne.n	8009548 <_svfiprintf_r+0x130>
 8009532:	7863      	ldrb	r3, [r4, #1]
 8009534:	2b2a      	cmp	r3, #42	@ 0x2a
 8009536:	d132      	bne.n	800959e <_svfiprintf_r+0x186>
 8009538:	9b03      	ldr	r3, [sp, #12]
 800953a:	1d1a      	adds	r2, r3, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	9203      	str	r2, [sp, #12]
 8009540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009544:	3402      	adds	r4, #2
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800960c <_svfiprintf_r+0x1f4>
 800954c:	7821      	ldrb	r1, [r4, #0]
 800954e:	2203      	movs	r2, #3
 8009550:	4650      	mov	r0, sl
 8009552:	f7f6 fe6d 	bl	8000230 <memchr>
 8009556:	b138      	cbz	r0, 8009568 <_svfiprintf_r+0x150>
 8009558:	9b04      	ldr	r3, [sp, #16]
 800955a:	eba0 000a 	sub.w	r0, r0, sl
 800955e:	2240      	movs	r2, #64	@ 0x40
 8009560:	4082      	lsls	r2, r0
 8009562:	4313      	orrs	r3, r2
 8009564:	3401      	adds	r4, #1
 8009566:	9304      	str	r3, [sp, #16]
 8009568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956c:	4824      	ldr	r0, [pc, #144]	@ (8009600 <_svfiprintf_r+0x1e8>)
 800956e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009572:	2206      	movs	r2, #6
 8009574:	f7f6 fe5c 	bl	8000230 <memchr>
 8009578:	2800      	cmp	r0, #0
 800957a:	d036      	beq.n	80095ea <_svfiprintf_r+0x1d2>
 800957c:	4b21      	ldr	r3, [pc, #132]	@ (8009604 <_svfiprintf_r+0x1ec>)
 800957e:	bb1b      	cbnz	r3, 80095c8 <_svfiprintf_r+0x1b0>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	3307      	adds	r3, #7
 8009584:	f023 0307 	bic.w	r3, r3, #7
 8009588:	3308      	adds	r3, #8
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958e:	4433      	add	r3, r6
 8009590:	9309      	str	r3, [sp, #36]	@ 0x24
 8009592:	e76a      	b.n	800946a <_svfiprintf_r+0x52>
 8009594:	fb0c 3202 	mla	r2, ip, r2, r3
 8009598:	460c      	mov	r4, r1
 800959a:	2001      	movs	r0, #1
 800959c:	e7a8      	b.n	80094f0 <_svfiprintf_r+0xd8>
 800959e:	2300      	movs	r3, #0
 80095a0:	3401      	adds	r4, #1
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	4619      	mov	r1, r3
 80095a6:	f04f 0c0a 	mov.w	ip, #10
 80095aa:	4620      	mov	r0, r4
 80095ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b0:	3a30      	subs	r2, #48	@ 0x30
 80095b2:	2a09      	cmp	r2, #9
 80095b4:	d903      	bls.n	80095be <_svfiprintf_r+0x1a6>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0c6      	beq.n	8009548 <_svfiprintf_r+0x130>
 80095ba:	9105      	str	r1, [sp, #20]
 80095bc:	e7c4      	b.n	8009548 <_svfiprintf_r+0x130>
 80095be:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c2:	4604      	mov	r4, r0
 80095c4:	2301      	movs	r3, #1
 80095c6:	e7f0      	b.n	80095aa <_svfiprintf_r+0x192>
 80095c8:	ab03      	add	r3, sp, #12
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	462a      	mov	r2, r5
 80095ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009608 <_svfiprintf_r+0x1f0>)
 80095d0:	a904      	add	r1, sp, #16
 80095d2:	4638      	mov	r0, r7
 80095d4:	f7fd ff10 	bl	80073f8 <_printf_float>
 80095d8:	1c42      	adds	r2, r0, #1
 80095da:	4606      	mov	r6, r0
 80095dc:	d1d6      	bne.n	800958c <_svfiprintf_r+0x174>
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	065b      	lsls	r3, r3, #25
 80095e2:	f53f af2d 	bmi.w	8009440 <_svfiprintf_r+0x28>
 80095e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095e8:	e72c      	b.n	8009444 <_svfiprintf_r+0x2c>
 80095ea:	ab03      	add	r3, sp, #12
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	462a      	mov	r2, r5
 80095f0:	4b05      	ldr	r3, [pc, #20]	@ (8009608 <_svfiprintf_r+0x1f0>)
 80095f2:	a904      	add	r1, sp, #16
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7fe f997 	bl	8007928 <_printf_i>
 80095fa:	e7ed      	b.n	80095d8 <_svfiprintf_r+0x1c0>
 80095fc:	0800a280 	.word	0x0800a280
 8009600:	0800a28a 	.word	0x0800a28a
 8009604:	080073f9 	.word	0x080073f9
 8009608:	08009361 	.word	0x08009361
 800960c:	0800a286 	.word	0x0800a286

08009610 <__sflush_r>:
 8009610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009618:	0716      	lsls	r6, r2, #28
 800961a:	4605      	mov	r5, r0
 800961c:	460c      	mov	r4, r1
 800961e:	d454      	bmi.n	80096ca <__sflush_r+0xba>
 8009620:	684b      	ldr	r3, [r1, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	dc02      	bgt.n	800962c <__sflush_r+0x1c>
 8009626:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	dd48      	ble.n	80096be <__sflush_r+0xae>
 800962c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800962e:	2e00      	cmp	r6, #0
 8009630:	d045      	beq.n	80096be <__sflush_r+0xae>
 8009632:	2300      	movs	r3, #0
 8009634:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009638:	682f      	ldr	r7, [r5, #0]
 800963a:	6a21      	ldr	r1, [r4, #32]
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	d030      	beq.n	80096a2 <__sflush_r+0x92>
 8009640:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	0759      	lsls	r1, r3, #29
 8009646:	d505      	bpl.n	8009654 <__sflush_r+0x44>
 8009648:	6863      	ldr	r3, [r4, #4]
 800964a:	1ad2      	subs	r2, r2, r3
 800964c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800964e:	b10b      	cbz	r3, 8009654 <__sflush_r+0x44>
 8009650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009652:	1ad2      	subs	r2, r2, r3
 8009654:	2300      	movs	r3, #0
 8009656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009658:	6a21      	ldr	r1, [r4, #32]
 800965a:	4628      	mov	r0, r5
 800965c:	47b0      	blx	r6
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	d106      	bne.n	8009672 <__sflush_r+0x62>
 8009664:	6829      	ldr	r1, [r5, #0]
 8009666:	291d      	cmp	r1, #29
 8009668:	d82b      	bhi.n	80096c2 <__sflush_r+0xb2>
 800966a:	4a2a      	ldr	r2, [pc, #168]	@ (8009714 <__sflush_r+0x104>)
 800966c:	410a      	asrs	r2, r1
 800966e:	07d6      	lsls	r6, r2, #31
 8009670:	d427      	bmi.n	80096c2 <__sflush_r+0xb2>
 8009672:	2200      	movs	r2, #0
 8009674:	6062      	str	r2, [r4, #4]
 8009676:	04d9      	lsls	r1, r3, #19
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	6022      	str	r2, [r4, #0]
 800967c:	d504      	bpl.n	8009688 <__sflush_r+0x78>
 800967e:	1c42      	adds	r2, r0, #1
 8009680:	d101      	bne.n	8009686 <__sflush_r+0x76>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	b903      	cbnz	r3, 8009688 <__sflush_r+0x78>
 8009686:	6560      	str	r0, [r4, #84]	@ 0x54
 8009688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800968a:	602f      	str	r7, [r5, #0]
 800968c:	b1b9      	cbz	r1, 80096be <__sflush_r+0xae>
 800968e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009692:	4299      	cmp	r1, r3
 8009694:	d002      	beq.n	800969c <__sflush_r+0x8c>
 8009696:	4628      	mov	r0, r5
 8009698:	f7ff fa96 	bl	8008bc8 <_free_r>
 800969c:	2300      	movs	r3, #0
 800969e:	6363      	str	r3, [r4, #52]	@ 0x34
 80096a0:	e00d      	b.n	80096be <__sflush_r+0xae>
 80096a2:	2301      	movs	r3, #1
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b0      	blx	r6
 80096a8:	4602      	mov	r2, r0
 80096aa:	1c50      	adds	r0, r2, #1
 80096ac:	d1c9      	bne.n	8009642 <__sflush_r+0x32>
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0c6      	beq.n	8009642 <__sflush_r+0x32>
 80096b4:	2b1d      	cmp	r3, #29
 80096b6:	d001      	beq.n	80096bc <__sflush_r+0xac>
 80096b8:	2b16      	cmp	r3, #22
 80096ba:	d11e      	bne.n	80096fa <__sflush_r+0xea>
 80096bc:	602f      	str	r7, [r5, #0]
 80096be:	2000      	movs	r0, #0
 80096c0:	e022      	b.n	8009708 <__sflush_r+0xf8>
 80096c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c6:	b21b      	sxth	r3, r3
 80096c8:	e01b      	b.n	8009702 <__sflush_r+0xf2>
 80096ca:	690f      	ldr	r7, [r1, #16]
 80096cc:	2f00      	cmp	r7, #0
 80096ce:	d0f6      	beq.n	80096be <__sflush_r+0xae>
 80096d0:	0793      	lsls	r3, r2, #30
 80096d2:	680e      	ldr	r6, [r1, #0]
 80096d4:	bf08      	it	eq
 80096d6:	694b      	ldreq	r3, [r1, #20]
 80096d8:	600f      	str	r7, [r1, #0]
 80096da:	bf18      	it	ne
 80096dc:	2300      	movne	r3, #0
 80096de:	eba6 0807 	sub.w	r8, r6, r7
 80096e2:	608b      	str	r3, [r1, #8]
 80096e4:	f1b8 0f00 	cmp.w	r8, #0
 80096e8:	dde9      	ble.n	80096be <__sflush_r+0xae>
 80096ea:	6a21      	ldr	r1, [r4, #32]
 80096ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096ee:	4643      	mov	r3, r8
 80096f0:	463a      	mov	r2, r7
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b0      	blx	r6
 80096f6:	2800      	cmp	r0, #0
 80096f8:	dc08      	bgt.n	800970c <__sflush_r+0xfc>
 80096fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970c:	4407      	add	r7, r0
 800970e:	eba8 0800 	sub.w	r8, r8, r0
 8009712:	e7e7      	b.n	80096e4 <__sflush_r+0xd4>
 8009714:	dfbffffe 	.word	0xdfbffffe

08009718 <_fflush_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	690b      	ldr	r3, [r1, #16]
 800971c:	4605      	mov	r5, r0
 800971e:	460c      	mov	r4, r1
 8009720:	b913      	cbnz	r3, 8009728 <_fflush_r+0x10>
 8009722:	2500      	movs	r5, #0
 8009724:	4628      	mov	r0, r5
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	b118      	cbz	r0, 8009732 <_fflush_r+0x1a>
 800972a:	6a03      	ldr	r3, [r0, #32]
 800972c:	b90b      	cbnz	r3, 8009732 <_fflush_r+0x1a>
 800972e:	f7fe faa7 	bl	8007c80 <__sinit>
 8009732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f3      	beq.n	8009722 <_fflush_r+0xa>
 800973a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800973c:	07d0      	lsls	r0, r2, #31
 800973e:	d404      	bmi.n	800974a <_fflush_r+0x32>
 8009740:	0599      	lsls	r1, r3, #22
 8009742:	d402      	bmi.n	800974a <_fflush_r+0x32>
 8009744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009746:	f7fe fbe2 	bl	8007f0e <__retarget_lock_acquire_recursive>
 800974a:	4628      	mov	r0, r5
 800974c:	4621      	mov	r1, r4
 800974e:	f7ff ff5f 	bl	8009610 <__sflush_r>
 8009752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009754:	07da      	lsls	r2, r3, #31
 8009756:	4605      	mov	r5, r0
 8009758:	d4e4      	bmi.n	8009724 <_fflush_r+0xc>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	059b      	lsls	r3, r3, #22
 800975e:	d4e1      	bmi.n	8009724 <_fflush_r+0xc>
 8009760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009762:	f7fe fbd5 	bl	8007f10 <__retarget_lock_release_recursive>
 8009766:	e7dd      	b.n	8009724 <_fflush_r+0xc>

08009768 <memmove>:
 8009768:	4288      	cmp	r0, r1
 800976a:	b510      	push	{r4, lr}
 800976c:	eb01 0402 	add.w	r4, r1, r2
 8009770:	d902      	bls.n	8009778 <memmove+0x10>
 8009772:	4284      	cmp	r4, r0
 8009774:	4623      	mov	r3, r4
 8009776:	d807      	bhi.n	8009788 <memmove+0x20>
 8009778:	1e43      	subs	r3, r0, #1
 800977a:	42a1      	cmp	r1, r4
 800977c:	d008      	beq.n	8009790 <memmove+0x28>
 800977e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009786:	e7f8      	b.n	800977a <memmove+0x12>
 8009788:	4402      	add	r2, r0
 800978a:	4601      	mov	r1, r0
 800978c:	428a      	cmp	r2, r1
 800978e:	d100      	bne.n	8009792 <memmove+0x2a>
 8009790:	bd10      	pop	{r4, pc}
 8009792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800979a:	e7f7      	b.n	800978c <memmove+0x24>

0800979c <__assert_func>:
 800979c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800979e:	4614      	mov	r4, r2
 80097a0:	461a      	mov	r2, r3
 80097a2:	4b09      	ldr	r3, [pc, #36]	@ (80097c8 <__assert_func+0x2c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4605      	mov	r5, r0
 80097a8:	68d8      	ldr	r0, [r3, #12]
 80097aa:	b954      	cbnz	r4, 80097c2 <__assert_func+0x26>
 80097ac:	4b07      	ldr	r3, [pc, #28]	@ (80097cc <__assert_func+0x30>)
 80097ae:	461c      	mov	r4, r3
 80097b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097b4:	9100      	str	r1, [sp, #0]
 80097b6:	462b      	mov	r3, r5
 80097b8:	4905      	ldr	r1, [pc, #20]	@ (80097d0 <__assert_func+0x34>)
 80097ba:	f000 f86f 	bl	800989c <fiprintf>
 80097be:	f000 f87f 	bl	80098c0 <abort>
 80097c2:	4b04      	ldr	r3, [pc, #16]	@ (80097d4 <__assert_func+0x38>)
 80097c4:	e7f4      	b.n	80097b0 <__assert_func+0x14>
 80097c6:	bf00      	nop
 80097c8:	200002b4 	.word	0x200002b4
 80097cc:	0800a2d6 	.word	0x0800a2d6
 80097d0:	0800a2a8 	.word	0x0800a2a8
 80097d4:	0800a29b 	.word	0x0800a29b

080097d8 <_calloc_r>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	fba1 5402 	umull	r5, r4, r1, r2
 80097de:	b93c      	cbnz	r4, 80097f0 <_calloc_r+0x18>
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7fd fc65 	bl	80070b0 <_malloc_r>
 80097e6:	4606      	mov	r6, r0
 80097e8:	b928      	cbnz	r0, 80097f6 <_calloc_r+0x1e>
 80097ea:	2600      	movs	r6, #0
 80097ec:	4630      	mov	r0, r6
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	220c      	movs	r2, #12
 80097f2:	6002      	str	r2, [r0, #0]
 80097f4:	e7f9      	b.n	80097ea <_calloc_r+0x12>
 80097f6:	462a      	mov	r2, r5
 80097f8:	4621      	mov	r1, r4
 80097fa:	f7fe fada 	bl	8007db2 <memset>
 80097fe:	e7f5      	b.n	80097ec <_calloc_r+0x14>

08009800 <__ascii_mbtowc>:
 8009800:	b082      	sub	sp, #8
 8009802:	b901      	cbnz	r1, 8009806 <__ascii_mbtowc+0x6>
 8009804:	a901      	add	r1, sp, #4
 8009806:	b142      	cbz	r2, 800981a <__ascii_mbtowc+0x1a>
 8009808:	b14b      	cbz	r3, 800981e <__ascii_mbtowc+0x1e>
 800980a:	7813      	ldrb	r3, [r2, #0]
 800980c:	600b      	str	r3, [r1, #0]
 800980e:	7812      	ldrb	r2, [r2, #0]
 8009810:	1e10      	subs	r0, r2, #0
 8009812:	bf18      	it	ne
 8009814:	2001      	movne	r0, #1
 8009816:	b002      	add	sp, #8
 8009818:	4770      	bx	lr
 800981a:	4610      	mov	r0, r2
 800981c:	e7fb      	b.n	8009816 <__ascii_mbtowc+0x16>
 800981e:	f06f 0001 	mvn.w	r0, #1
 8009822:	e7f8      	b.n	8009816 <__ascii_mbtowc+0x16>

08009824 <_realloc_r>:
 8009824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	4680      	mov	r8, r0
 800982a:	4615      	mov	r5, r2
 800982c:	460c      	mov	r4, r1
 800982e:	b921      	cbnz	r1, 800983a <_realloc_r+0x16>
 8009830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	4611      	mov	r1, r2
 8009836:	f7fd bc3b 	b.w	80070b0 <_malloc_r>
 800983a:	b92a      	cbnz	r2, 8009848 <_realloc_r+0x24>
 800983c:	f7ff f9c4 	bl	8008bc8 <_free_r>
 8009840:	2400      	movs	r4, #0
 8009842:	4620      	mov	r0, r4
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	f000 f841 	bl	80098ce <_malloc_usable_size_r>
 800984c:	4285      	cmp	r5, r0
 800984e:	4606      	mov	r6, r0
 8009850:	d802      	bhi.n	8009858 <_realloc_r+0x34>
 8009852:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009856:	d8f4      	bhi.n	8009842 <_realloc_r+0x1e>
 8009858:	4629      	mov	r1, r5
 800985a:	4640      	mov	r0, r8
 800985c:	f7fd fc28 	bl	80070b0 <_malloc_r>
 8009860:	4607      	mov	r7, r0
 8009862:	2800      	cmp	r0, #0
 8009864:	d0ec      	beq.n	8009840 <_realloc_r+0x1c>
 8009866:	42b5      	cmp	r5, r6
 8009868:	462a      	mov	r2, r5
 800986a:	4621      	mov	r1, r4
 800986c:	bf28      	it	cs
 800986e:	4632      	movcs	r2, r6
 8009870:	f7fe fb4f 	bl	8007f12 <memcpy>
 8009874:	4621      	mov	r1, r4
 8009876:	4640      	mov	r0, r8
 8009878:	f7ff f9a6 	bl	8008bc8 <_free_r>
 800987c:	463c      	mov	r4, r7
 800987e:	e7e0      	b.n	8009842 <_realloc_r+0x1e>

08009880 <__ascii_wctomb>:
 8009880:	4603      	mov	r3, r0
 8009882:	4608      	mov	r0, r1
 8009884:	b141      	cbz	r1, 8009898 <__ascii_wctomb+0x18>
 8009886:	2aff      	cmp	r2, #255	@ 0xff
 8009888:	d904      	bls.n	8009894 <__ascii_wctomb+0x14>
 800988a:	228a      	movs	r2, #138	@ 0x8a
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	4770      	bx	lr
 8009894:	700a      	strb	r2, [r1, #0]
 8009896:	2001      	movs	r0, #1
 8009898:	4770      	bx	lr
	...

0800989c <fiprintf>:
 800989c:	b40e      	push	{r1, r2, r3}
 800989e:	b503      	push	{r0, r1, lr}
 80098a0:	4601      	mov	r1, r0
 80098a2:	ab03      	add	r3, sp, #12
 80098a4:	4805      	ldr	r0, [pc, #20]	@ (80098bc <fiprintf+0x20>)
 80098a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098aa:	6800      	ldr	r0, [r0, #0]
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	f000 f83f 	bl	8009930 <_vfiprintf_r>
 80098b2:	b002      	add	sp, #8
 80098b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098b8:	b003      	add	sp, #12
 80098ba:	4770      	bx	lr
 80098bc:	200002b4 	.word	0x200002b4

080098c0 <abort>:
 80098c0:	b508      	push	{r3, lr}
 80098c2:	2006      	movs	r0, #6
 80098c4:	f000 fa08 	bl	8009cd8 <raise>
 80098c8:	2001      	movs	r0, #1
 80098ca:	f7f9 f8e3 	bl	8002a94 <_exit>

080098ce <_malloc_usable_size_r>:
 80098ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d2:	1f18      	subs	r0, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfbc      	itt	lt
 80098d8:	580b      	ldrlt	r3, [r1, r0]
 80098da:	18c0      	addlt	r0, r0, r3
 80098dc:	4770      	bx	lr

080098de <__sfputc_r>:
 80098de:	6893      	ldr	r3, [r2, #8]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	b410      	push	{r4}
 80098e6:	6093      	str	r3, [r2, #8]
 80098e8:	da08      	bge.n	80098fc <__sfputc_r+0x1e>
 80098ea:	6994      	ldr	r4, [r2, #24]
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	db01      	blt.n	80098f4 <__sfputc_r+0x16>
 80098f0:	290a      	cmp	r1, #10
 80098f2:	d103      	bne.n	80098fc <__sfputc_r+0x1e>
 80098f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f8:	f000 b932 	b.w	8009b60 <__swbuf_r>
 80098fc:	6813      	ldr	r3, [r2, #0]
 80098fe:	1c58      	adds	r0, r3, #1
 8009900:	6010      	str	r0, [r2, #0]
 8009902:	7019      	strb	r1, [r3, #0]
 8009904:	4608      	mov	r0, r1
 8009906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990a:	4770      	bx	lr

0800990c <__sfputs_r>:
 800990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990e:	4606      	mov	r6, r0
 8009910:	460f      	mov	r7, r1
 8009912:	4614      	mov	r4, r2
 8009914:	18d5      	adds	r5, r2, r3
 8009916:	42ac      	cmp	r4, r5
 8009918:	d101      	bne.n	800991e <__sfputs_r+0x12>
 800991a:	2000      	movs	r0, #0
 800991c:	e007      	b.n	800992e <__sfputs_r+0x22>
 800991e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009922:	463a      	mov	r2, r7
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff ffda 	bl	80098de <__sfputc_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d1f3      	bne.n	8009916 <__sfputs_r+0xa>
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009930 <_vfiprintf_r>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	460d      	mov	r5, r1
 8009936:	b09d      	sub	sp, #116	@ 0x74
 8009938:	4614      	mov	r4, r2
 800993a:	4698      	mov	r8, r3
 800993c:	4606      	mov	r6, r0
 800993e:	b118      	cbz	r0, 8009948 <_vfiprintf_r+0x18>
 8009940:	6a03      	ldr	r3, [r0, #32]
 8009942:	b90b      	cbnz	r3, 8009948 <_vfiprintf_r+0x18>
 8009944:	f7fe f99c 	bl	8007c80 <__sinit>
 8009948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	d405      	bmi.n	800995a <_vfiprintf_r+0x2a>
 800994e:	89ab      	ldrh	r3, [r5, #12]
 8009950:	059a      	lsls	r2, r3, #22
 8009952:	d402      	bmi.n	800995a <_vfiprintf_r+0x2a>
 8009954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009956:	f7fe fada 	bl	8007f0e <__retarget_lock_acquire_recursive>
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	071b      	lsls	r3, r3, #28
 800995e:	d501      	bpl.n	8009964 <_vfiprintf_r+0x34>
 8009960:	692b      	ldr	r3, [r5, #16]
 8009962:	b99b      	cbnz	r3, 800998c <_vfiprintf_r+0x5c>
 8009964:	4629      	mov	r1, r5
 8009966:	4630      	mov	r0, r6
 8009968:	f000 f938 	bl	8009bdc <__swsetup_r>
 800996c:	b170      	cbz	r0, 800998c <_vfiprintf_r+0x5c>
 800996e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009970:	07dc      	lsls	r4, r3, #31
 8009972:	d504      	bpl.n	800997e <_vfiprintf_r+0x4e>
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	b01d      	add	sp, #116	@ 0x74
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	89ab      	ldrh	r3, [r5, #12]
 8009980:	0598      	lsls	r0, r3, #22
 8009982:	d4f7      	bmi.n	8009974 <_vfiprintf_r+0x44>
 8009984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009986:	f7fe fac3 	bl	8007f10 <__retarget_lock_release_recursive>
 800998a:	e7f3      	b.n	8009974 <_vfiprintf_r+0x44>
 800998c:	2300      	movs	r3, #0
 800998e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009990:	2320      	movs	r3, #32
 8009992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009996:	f8cd 800c 	str.w	r8, [sp, #12]
 800999a:	2330      	movs	r3, #48	@ 0x30
 800999c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b4c <_vfiprintf_r+0x21c>
 80099a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099a4:	f04f 0901 	mov.w	r9, #1
 80099a8:	4623      	mov	r3, r4
 80099aa:	469a      	mov	sl, r3
 80099ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b0:	b10a      	cbz	r2, 80099b6 <_vfiprintf_r+0x86>
 80099b2:	2a25      	cmp	r2, #37	@ 0x25
 80099b4:	d1f9      	bne.n	80099aa <_vfiprintf_r+0x7a>
 80099b6:	ebba 0b04 	subs.w	fp, sl, r4
 80099ba:	d00b      	beq.n	80099d4 <_vfiprintf_r+0xa4>
 80099bc:	465b      	mov	r3, fp
 80099be:	4622      	mov	r2, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	4630      	mov	r0, r6
 80099c4:	f7ff ffa2 	bl	800990c <__sfputs_r>
 80099c8:	3001      	adds	r0, #1
 80099ca:	f000 80a7 	beq.w	8009b1c <_vfiprintf_r+0x1ec>
 80099ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d0:	445a      	add	r2, fp
 80099d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80099d4:	f89a 3000 	ldrb.w	r3, [sl]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 809f 	beq.w	8009b1c <_vfiprintf_r+0x1ec>
 80099de:	2300      	movs	r3, #0
 80099e0:	f04f 32ff 	mov.w	r2, #4294967295
 80099e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e8:	f10a 0a01 	add.w	sl, sl, #1
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	9307      	str	r3, [sp, #28]
 80099f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f6:	4654      	mov	r4, sl
 80099f8:	2205      	movs	r2, #5
 80099fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fe:	4853      	ldr	r0, [pc, #332]	@ (8009b4c <_vfiprintf_r+0x21c>)
 8009a00:	f7f6 fc16 	bl	8000230 <memchr>
 8009a04:	9a04      	ldr	r2, [sp, #16]
 8009a06:	b9d8      	cbnz	r0, 8009a40 <_vfiprintf_r+0x110>
 8009a08:	06d1      	lsls	r1, r2, #27
 8009a0a:	bf44      	itt	mi
 8009a0c:	2320      	movmi	r3, #32
 8009a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a12:	0713      	lsls	r3, r2, #28
 8009a14:	bf44      	itt	mi
 8009a16:	232b      	movmi	r3, #43	@ 0x2b
 8009a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a22:	d015      	beq.n	8009a50 <_vfiprintf_r+0x120>
 8009a24:	9a07      	ldr	r2, [sp, #28]
 8009a26:	4654      	mov	r4, sl
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f04f 0c0a 	mov.w	ip, #10
 8009a2e:	4621      	mov	r1, r4
 8009a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a34:	3b30      	subs	r3, #48	@ 0x30
 8009a36:	2b09      	cmp	r3, #9
 8009a38:	d94b      	bls.n	8009ad2 <_vfiprintf_r+0x1a2>
 8009a3a:	b1b0      	cbz	r0, 8009a6a <_vfiprintf_r+0x13a>
 8009a3c:	9207      	str	r2, [sp, #28]
 8009a3e:	e014      	b.n	8009a6a <_vfiprintf_r+0x13a>
 8009a40:	eba0 0308 	sub.w	r3, r0, r8
 8009a44:	fa09 f303 	lsl.w	r3, r9, r3
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	46a2      	mov	sl, r4
 8009a4e:	e7d2      	b.n	80099f6 <_vfiprintf_r+0xc6>
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	1d19      	adds	r1, r3, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	9103      	str	r1, [sp, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bfbb      	ittet	lt
 8009a5c:	425b      	neglt	r3, r3
 8009a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a62:	9307      	strge	r3, [sp, #28]
 8009a64:	9307      	strlt	r3, [sp, #28]
 8009a66:	bfb8      	it	lt
 8009a68:	9204      	strlt	r2, [sp, #16]
 8009a6a:	7823      	ldrb	r3, [r4, #0]
 8009a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a6e:	d10a      	bne.n	8009a86 <_vfiprintf_r+0x156>
 8009a70:	7863      	ldrb	r3, [r4, #1]
 8009a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a74:	d132      	bne.n	8009adc <_vfiprintf_r+0x1ac>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	1d1a      	adds	r2, r3, #4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	9203      	str	r2, [sp, #12]
 8009a7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a82:	3402      	adds	r4, #2
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b5c <_vfiprintf_r+0x22c>
 8009a8a:	7821      	ldrb	r1, [r4, #0]
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	4650      	mov	r0, sl
 8009a90:	f7f6 fbce 	bl	8000230 <memchr>
 8009a94:	b138      	cbz	r0, 8009aa6 <_vfiprintf_r+0x176>
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	eba0 000a 	sub.w	r0, r0, sl
 8009a9c:	2240      	movs	r2, #64	@ 0x40
 8009a9e:	4082      	lsls	r2, r0
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	3401      	adds	r4, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aaa:	4829      	ldr	r0, [pc, #164]	@ (8009b50 <_vfiprintf_r+0x220>)
 8009aac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ab0:	2206      	movs	r2, #6
 8009ab2:	f7f6 fbbd 	bl	8000230 <memchr>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d03f      	beq.n	8009b3a <_vfiprintf_r+0x20a>
 8009aba:	4b26      	ldr	r3, [pc, #152]	@ (8009b54 <_vfiprintf_r+0x224>)
 8009abc:	bb1b      	cbnz	r3, 8009b06 <_vfiprintf_r+0x1d6>
 8009abe:	9b03      	ldr	r3, [sp, #12]
 8009ac0:	3307      	adds	r3, #7
 8009ac2:	f023 0307 	bic.w	r3, r3, #7
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	9303      	str	r3, [sp, #12]
 8009aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009acc:	443b      	add	r3, r7
 8009ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad0:	e76a      	b.n	80099a8 <_vfiprintf_r+0x78>
 8009ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	2001      	movs	r0, #1
 8009ada:	e7a8      	b.n	8009a2e <_vfiprintf_r+0xfe>
 8009adc:	2300      	movs	r3, #0
 8009ade:	3401      	adds	r4, #1
 8009ae0:	9305      	str	r3, [sp, #20]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	f04f 0c0a 	mov.w	ip, #10
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aee:	3a30      	subs	r2, #48	@ 0x30
 8009af0:	2a09      	cmp	r2, #9
 8009af2:	d903      	bls.n	8009afc <_vfiprintf_r+0x1cc>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0c6      	beq.n	8009a86 <_vfiprintf_r+0x156>
 8009af8:	9105      	str	r1, [sp, #20]
 8009afa:	e7c4      	b.n	8009a86 <_vfiprintf_r+0x156>
 8009afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b00:	4604      	mov	r4, r0
 8009b02:	2301      	movs	r3, #1
 8009b04:	e7f0      	b.n	8009ae8 <_vfiprintf_r+0x1b8>
 8009b06:	ab03      	add	r3, sp, #12
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	4b12      	ldr	r3, [pc, #72]	@ (8009b58 <_vfiprintf_r+0x228>)
 8009b0e:	a904      	add	r1, sp, #16
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7fd fc71 	bl	80073f8 <_printf_float>
 8009b16:	4607      	mov	r7, r0
 8009b18:	1c78      	adds	r0, r7, #1
 8009b1a:	d1d6      	bne.n	8009aca <_vfiprintf_r+0x19a>
 8009b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b1e:	07d9      	lsls	r1, r3, #31
 8009b20:	d405      	bmi.n	8009b2e <_vfiprintf_r+0x1fe>
 8009b22:	89ab      	ldrh	r3, [r5, #12]
 8009b24:	059a      	lsls	r2, r3, #22
 8009b26:	d402      	bmi.n	8009b2e <_vfiprintf_r+0x1fe>
 8009b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b2a:	f7fe f9f1 	bl	8007f10 <__retarget_lock_release_recursive>
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	065b      	lsls	r3, r3, #25
 8009b32:	f53f af1f 	bmi.w	8009974 <_vfiprintf_r+0x44>
 8009b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b38:	e71e      	b.n	8009978 <_vfiprintf_r+0x48>
 8009b3a:	ab03      	add	r3, sp, #12
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4b05      	ldr	r3, [pc, #20]	@ (8009b58 <_vfiprintf_r+0x228>)
 8009b42:	a904      	add	r1, sp, #16
 8009b44:	4630      	mov	r0, r6
 8009b46:	f7fd feef 	bl	8007928 <_printf_i>
 8009b4a:	e7e4      	b.n	8009b16 <_vfiprintf_r+0x1e6>
 8009b4c:	0800a280 	.word	0x0800a280
 8009b50:	0800a28a 	.word	0x0800a28a
 8009b54:	080073f9 	.word	0x080073f9
 8009b58:	0800990d 	.word	0x0800990d
 8009b5c:	0800a286 	.word	0x0800a286

08009b60 <__swbuf_r>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	460e      	mov	r6, r1
 8009b64:	4614      	mov	r4, r2
 8009b66:	4605      	mov	r5, r0
 8009b68:	b118      	cbz	r0, 8009b72 <__swbuf_r+0x12>
 8009b6a:	6a03      	ldr	r3, [r0, #32]
 8009b6c:	b90b      	cbnz	r3, 8009b72 <__swbuf_r+0x12>
 8009b6e:	f7fe f887 	bl	8007c80 <__sinit>
 8009b72:	69a3      	ldr	r3, [r4, #24]
 8009b74:	60a3      	str	r3, [r4, #8]
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	071a      	lsls	r2, r3, #28
 8009b7a:	d501      	bpl.n	8009b80 <__swbuf_r+0x20>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	b943      	cbnz	r3, 8009b92 <__swbuf_r+0x32>
 8009b80:	4621      	mov	r1, r4
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 f82a 	bl	8009bdc <__swsetup_r>
 8009b88:	b118      	cbz	r0, 8009b92 <__swbuf_r+0x32>
 8009b8a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b8e:	4638      	mov	r0, r7
 8009b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	1a98      	subs	r0, r3, r2
 8009b98:	6963      	ldr	r3, [r4, #20]
 8009b9a:	b2f6      	uxtb	r6, r6
 8009b9c:	4283      	cmp	r3, r0
 8009b9e:	4637      	mov	r7, r6
 8009ba0:	dc05      	bgt.n	8009bae <__swbuf_r+0x4e>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7ff fdb7 	bl	8009718 <_fflush_r>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d1ed      	bne.n	8009b8a <__swbuf_r+0x2a>
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	60a3      	str	r3, [r4, #8]
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	6022      	str	r2, [r4, #0]
 8009bba:	701e      	strb	r6, [r3, #0]
 8009bbc:	6962      	ldr	r2, [r4, #20]
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d004      	beq.n	8009bce <__swbuf_r+0x6e>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	07db      	lsls	r3, r3, #31
 8009bc8:	d5e1      	bpl.n	8009b8e <__swbuf_r+0x2e>
 8009bca:	2e0a      	cmp	r6, #10
 8009bcc:	d1df      	bne.n	8009b8e <__swbuf_r+0x2e>
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7ff fda1 	bl	8009718 <_fflush_r>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d0d9      	beq.n	8009b8e <__swbuf_r+0x2e>
 8009bda:	e7d6      	b.n	8009b8a <__swbuf_r+0x2a>

08009bdc <__swsetup_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4b29      	ldr	r3, [pc, #164]	@ (8009c84 <__swsetup_r+0xa8>)
 8009be0:	4605      	mov	r5, r0
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	460c      	mov	r4, r1
 8009be6:	b118      	cbz	r0, 8009bf0 <__swsetup_r+0x14>
 8009be8:	6a03      	ldr	r3, [r0, #32]
 8009bea:	b90b      	cbnz	r3, 8009bf0 <__swsetup_r+0x14>
 8009bec:	f7fe f848 	bl	8007c80 <__sinit>
 8009bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf4:	0719      	lsls	r1, r3, #28
 8009bf6:	d422      	bmi.n	8009c3e <__swsetup_r+0x62>
 8009bf8:	06da      	lsls	r2, r3, #27
 8009bfa:	d407      	bmi.n	8009c0c <__swsetup_r+0x30>
 8009bfc:	2209      	movs	r2, #9
 8009bfe:	602a      	str	r2, [r5, #0]
 8009c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0a:	e033      	b.n	8009c74 <__swsetup_r+0x98>
 8009c0c:	0758      	lsls	r0, r3, #29
 8009c0e:	d512      	bpl.n	8009c36 <__swsetup_r+0x5a>
 8009c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c12:	b141      	cbz	r1, 8009c26 <__swsetup_r+0x4a>
 8009c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c18:	4299      	cmp	r1, r3
 8009c1a:	d002      	beq.n	8009c22 <__swsetup_r+0x46>
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f7fe ffd3 	bl	8008bc8 <_free_r>
 8009c22:	2300      	movs	r3, #0
 8009c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6063      	str	r3, [r4, #4]
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f043 0308 	orr.w	r3, r3, #8
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	b94b      	cbnz	r3, 8009c56 <__swsetup_r+0x7a>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c4c:	d003      	beq.n	8009c56 <__swsetup_r+0x7a>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 f883 	bl	8009d5c <__smakebuf_r>
 8009c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5a:	f013 0201 	ands.w	r2, r3, #1
 8009c5e:	d00a      	beq.n	8009c76 <__swsetup_r+0x9a>
 8009c60:	2200      	movs	r2, #0
 8009c62:	60a2      	str	r2, [r4, #8]
 8009c64:	6962      	ldr	r2, [r4, #20]
 8009c66:	4252      	negs	r2, r2
 8009c68:	61a2      	str	r2, [r4, #24]
 8009c6a:	6922      	ldr	r2, [r4, #16]
 8009c6c:	b942      	cbnz	r2, 8009c80 <__swsetup_r+0xa4>
 8009c6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c72:	d1c5      	bne.n	8009c00 <__swsetup_r+0x24>
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	0799      	lsls	r1, r3, #30
 8009c78:	bf58      	it	pl
 8009c7a:	6962      	ldrpl	r2, [r4, #20]
 8009c7c:	60a2      	str	r2, [r4, #8]
 8009c7e:	e7f4      	b.n	8009c6a <__swsetup_r+0x8e>
 8009c80:	2000      	movs	r0, #0
 8009c82:	e7f7      	b.n	8009c74 <__swsetup_r+0x98>
 8009c84:	200002b4 	.word	0x200002b4

08009c88 <_raise_r>:
 8009c88:	291f      	cmp	r1, #31
 8009c8a:	b538      	push	{r3, r4, r5, lr}
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	d904      	bls.n	8009c9c <_raise_r+0x14>
 8009c92:	2316      	movs	r3, #22
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c9e:	b112      	cbz	r2, 8009ca6 <_raise_r+0x1e>
 8009ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca4:	b94b      	cbnz	r3, 8009cba <_raise_r+0x32>
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 f830 	bl	8009d0c <_getpid_r>
 8009cac:	4622      	mov	r2, r4
 8009cae:	4601      	mov	r1, r0
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb6:	f000 b817 	b.w	8009ce8 <_kill_r>
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d00a      	beq.n	8009cd4 <_raise_r+0x4c>
 8009cbe:	1c59      	adds	r1, r3, #1
 8009cc0:	d103      	bne.n	8009cca <_raise_r+0x42>
 8009cc2:	2316      	movs	r3, #22
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	e7e7      	b.n	8009c9a <_raise_r+0x12>
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	4798      	blx	r3
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e7e0      	b.n	8009c9a <_raise_r+0x12>

08009cd8 <raise>:
 8009cd8:	4b02      	ldr	r3, [pc, #8]	@ (8009ce4 <raise+0xc>)
 8009cda:	4601      	mov	r1, r0
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	f7ff bfd3 	b.w	8009c88 <_raise_r>
 8009ce2:	bf00      	nop
 8009ce4:	200002b4 	.word	0x200002b4

08009ce8 <_kill_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	@ (8009d08 <_kill_r+0x20>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	f7f8 febd 	bl	8002a74 <_kill>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	d102      	bne.n	8009d04 <_kill_r+0x1c>
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	b103      	cbz	r3, 8009d04 <_kill_r+0x1c>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	bf00      	nop
 8009d08:	20001250 	.word	0x20001250

08009d0c <_getpid_r>:
 8009d0c:	f7f8 beaa 	b.w	8002a64 <_getpid>

08009d10 <__swhatbuf_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	460c      	mov	r4, r1
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	b096      	sub	sp, #88	@ 0x58
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	461e      	mov	r6, r3
 8009d20:	da0d      	bge.n	8009d3e <__swhatbuf_r+0x2e>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d28:	f04f 0100 	mov.w	r1, #0
 8009d2c:	bf14      	ite	ne
 8009d2e:	2340      	movne	r3, #64	@ 0x40
 8009d30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d34:	2000      	movs	r0, #0
 8009d36:	6031      	str	r1, [r6, #0]
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	b016      	add	sp, #88	@ 0x58
 8009d3c:	bd70      	pop	{r4, r5, r6, pc}
 8009d3e:	466a      	mov	r2, sp
 8009d40:	f000 f848 	bl	8009dd4 <_fstat_r>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	dbec      	blt.n	8009d22 <__swhatbuf_r+0x12>
 8009d48:	9901      	ldr	r1, [sp, #4]
 8009d4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d52:	4259      	negs	r1, r3
 8009d54:	4159      	adcs	r1, r3
 8009d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d5a:	e7eb      	b.n	8009d34 <__swhatbuf_r+0x24>

08009d5c <__smakebuf_r>:
 8009d5c:	898b      	ldrh	r3, [r1, #12]
 8009d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d60:	079d      	lsls	r5, r3, #30
 8009d62:	4606      	mov	r6, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	d507      	bpl.n	8009d78 <__smakebuf_r+0x1c>
 8009d68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	6123      	str	r3, [r4, #16]
 8009d70:	2301      	movs	r3, #1
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	b003      	add	sp, #12
 8009d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d78:	ab01      	add	r3, sp, #4
 8009d7a:	466a      	mov	r2, sp
 8009d7c:	f7ff ffc8 	bl	8009d10 <__swhatbuf_r>
 8009d80:	9f00      	ldr	r7, [sp, #0]
 8009d82:	4605      	mov	r5, r0
 8009d84:	4639      	mov	r1, r7
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7fd f992 	bl	80070b0 <_malloc_r>
 8009d8c:	b948      	cbnz	r0, 8009da2 <__smakebuf_r+0x46>
 8009d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d92:	059a      	lsls	r2, r3, #22
 8009d94:	d4ee      	bmi.n	8009d74 <__smakebuf_r+0x18>
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	f043 0302 	orr.w	r3, r3, #2
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	e7e2      	b.n	8009d68 <__smakebuf_r+0xc>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	6020      	str	r0, [r4, #0]
 8009da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009db2:	b15b      	cbz	r3, 8009dcc <__smakebuf_r+0x70>
 8009db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 f81d 	bl	8009df8 <_isatty_r>
 8009dbe:	b128      	cbz	r0, 8009dcc <__smakebuf_r+0x70>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	431d      	orrs	r5, r3
 8009dd0:	81a5      	strh	r5, [r4, #12]
 8009dd2:	e7cf      	b.n	8009d74 <__smakebuf_r+0x18>

08009dd4 <_fstat_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	@ (8009df4 <_fstat_r+0x20>)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	4611      	mov	r1, r2
 8009de0:	602b      	str	r3, [r5, #0]
 8009de2:	f7f8 fea7 	bl	8002b34 <_fstat>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d102      	bne.n	8009df0 <_fstat_r+0x1c>
 8009dea:	682b      	ldr	r3, [r5, #0]
 8009dec:	b103      	cbz	r3, 8009df0 <_fstat_r+0x1c>
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	bd38      	pop	{r3, r4, r5, pc}
 8009df2:	bf00      	nop
 8009df4:	20001250 	.word	0x20001250

08009df8 <_isatty_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	@ (8009e14 <_isatty_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f8 fea6 	bl	8002b54 <_isatty>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_isatty_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_isatty_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20001250 	.word	0x20001250

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
