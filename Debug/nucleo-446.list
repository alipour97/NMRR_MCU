
nucleo-446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a910  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800aae0  0800aae0  0000bae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b058  0800b058  0000d470  2**0
                  CONTENTS
  4 .ARM          00000008  0800b058  0800b058  0000c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b060  0800b060  0000d470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b060  0800b060  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b064  0800b064  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800b068  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e358  20000470  0800b4d8  0000d470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001e7c8  0800b4d8  0000d7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156bf  00000000  00000000  0000d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003017  00000000  00000000  00022b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00025b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de6  00000000  00000000  00026d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eb4  00000000  00000000  00027b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f80  00000000  00000000  0004b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e3e  00000000  00000000  00062942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c64  00000000  00000000  001397c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000470 	.word	0x20000470
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aac8 	.word	0x0800aac8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000474 	.word	0x20000474
 800020c:	0800aac8 	.word	0x0800aac8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_frsub>:
 8000c08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	e002      	b.n	8000c14 <__addsf3>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fsub>:
 8000c10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c14 <__addsf3>:
 8000c14:	0042      	lsls	r2, r0, #1
 8000c16:	bf1f      	itttt	ne
 8000c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c1c:	ea92 0f03 	teqne	r2, r3
 8000c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c28:	d06a      	beq.n	8000d00 <__addsf3+0xec>
 8000c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c32:	bfc1      	itttt	gt
 8000c34:	18d2      	addgt	r2, r2, r3
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	4048      	eorgt	r0, r1
 8000c3a:	4041      	eorgt	r1, r0
 8000c3c:	bfb8      	it	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	2b19      	cmp	r3, #25
 8000c42:	bf88      	it	hi
 8000c44:	4770      	bxhi	lr
 8000c46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4249      	negne	r1, r1
 8000c66:	ea92 0f03 	teq	r2, r3
 8000c6a:	d03f      	beq.n	8000cec <__addsf3+0xd8>
 8000c6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c70:	fa41 fc03 	asr.w	ip, r1, r3
 8000c74:	eb10 000c 	adds.w	r0, r0, ip
 8000c78:	f1c3 0320 	rsb	r3, r3, #32
 8000c7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__addsf3+0x78>
 8000c86:	4249      	negs	r1, r1
 8000c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c90:	d313      	bcc.n	8000cba <__addsf3+0xa6>
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c96:	d306      	bcc.n	8000ca6 <__addsf3+0x92>
 8000c98:	0840      	lsrs	r0, r0, #1
 8000c9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9e:	f102 0201 	add.w	r2, r2, #1
 8000ca2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ca4:	d251      	bcs.n	8000d4a <__addsf3+0x136>
 8000ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	ea40 0003 	orr.w	r0, r0, r3
 8000cb8:	4770      	bx	lr
 8000cba:	0049      	lsls	r1, r1, #1
 8000cbc:	eb40 0000 	adc.w	r0, r0, r0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cc8:	d2ed      	bcs.n	8000ca6 <__addsf3+0x92>
 8000cca:	fab0 fc80 	clz	ip, r0
 8000cce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cda:	bfaa      	itet	ge
 8000cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce0:	4252      	neglt	r2, r2
 8000ce2:	4318      	orrge	r0, r3
 8000ce4:	bfbc      	itt	lt
 8000ce6:	40d0      	lsrlt	r0, r2
 8000ce8:	4318      	orrlt	r0, r3
 8000cea:	4770      	bx	lr
 8000cec:	f092 0f00 	teq	r2, #0
 8000cf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cf4:	bf06      	itte	eq
 8000cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cfa:	3201      	addeq	r2, #1
 8000cfc:	3b01      	subne	r3, #1
 8000cfe:	e7b5      	b.n	8000c6c <__addsf3+0x58>
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d021      	beq.n	8000d54 <__addsf3+0x140>
 8000d10:	ea92 0f03 	teq	r2, r3
 8000d14:	d004      	beq.n	8000d20 <__addsf3+0x10c>
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	bf08      	it	eq
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	4770      	bx	lr
 8000d20:	ea90 0f01 	teq	r0, r1
 8000d24:	bf1c      	itt	ne
 8000d26:	2000      	movne	r0, #0
 8000d28:	4770      	bxne	lr
 8000d2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d2e:	d104      	bne.n	8000d3a <__addsf3+0x126>
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	bf28      	it	cs
 8000d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d38:	4770      	bx	lr
 8000d3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d3e:	bf3c      	itt	cc
 8000d40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bxcc	lr
 8000d46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d52:	4770      	bx	lr
 8000d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d58:	bf16      	itet	ne
 8000d5a:	4608      	movne	r0, r1
 8000d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d60:	4601      	movne	r1, r0
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	bf06      	itte	eq
 8000d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d6a:	ea90 0f01 	teqeq	r0, r1
 8000d6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_ui2f>:
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e004      	b.n	8000d84 <__aeabi_i2f+0x8>
 8000d7a:	bf00      	nop

08000d7c <__aeabi_i2f>:
 8000d7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d80:	bf48      	it	mi
 8000d82:	4240      	negmi	r0, r0
 8000d84:	ea5f 0c00 	movs.w	ip, r0
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d90:	4601      	mov	r1, r0
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	e01c      	b.n	8000dd2 <__aeabi_l2f+0x2a>

08000d98 <__aeabi_ul2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e00a      	b.n	8000dbc <__aeabi_l2f+0x14>
 8000da6:	bf00      	nop

08000da8 <__aeabi_l2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000db4:	d502      	bpl.n	8000dbc <__aeabi_l2f+0x14>
 8000db6:	4240      	negs	r0, r0
 8000db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbc:	ea5f 0c01 	movs.w	ip, r1
 8000dc0:	bf02      	ittt	eq
 8000dc2:	4684      	moveq	ip, r0
 8000dc4:	4601      	moveq	r1, r0
 8000dc6:	2000      	moveq	r0, #0
 8000dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dcc:	bf08      	it	eq
 8000dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dd6:	fabc f28c 	clz	r2, ip
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de0:	db10      	blt.n	8000e04 <__aeabi_l2f+0x5c>
 8000de2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de6:	4463      	add	r3, ip
 8000de8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000df4:	fa20 f202 	lsr.w	r2, r0, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	f020 0001 	biceq.w	r0, r0, #1
 8000e02:	4770      	bx	lr
 8000e04:	f102 0220 	add.w	r2, r2, #32
 8000e08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e14:	fa21 f202 	lsr.w	r2, r1, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_uldivmod>:
 8000e24:	b953      	cbnz	r3, 8000e3c <__aeabi_uldivmod+0x18>
 8000e26:	b94a      	cbnz	r2, 8000e3c <__aeabi_uldivmod+0x18>
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	bf08      	it	eq
 8000e2c:	2800      	cmpeq	r0, #0
 8000e2e:	bf1c      	itt	ne
 8000e30:	f04f 31ff 	movne.w	r1, #4294967295
 8000e34:	f04f 30ff 	movne.w	r0, #4294967295
 8000e38:	f000 b96a 	b.w	8001110 <__aeabi_idiv0>
 8000e3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e44:	f000 f806 	bl	8000e54 <__udivmoddi4>
 8000e48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e50:	b004      	add	sp, #16
 8000e52:	4770      	bx	lr

08000e54 <__udivmoddi4>:
 8000e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e58:	9d08      	ldr	r5, [sp, #32]
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d14e      	bne.n	8000efe <__udivmoddi4+0xaa>
 8000e60:	4694      	mov	ip, r2
 8000e62:	458c      	cmp	ip, r1
 8000e64:	4686      	mov	lr, r0
 8000e66:	fab2 f282 	clz	r2, r2
 8000e6a:	d962      	bls.n	8000f32 <__udivmoddi4+0xde>
 8000e6c:	b14a      	cbz	r2, 8000e82 <__udivmoddi4+0x2e>
 8000e6e:	f1c2 0320 	rsb	r3, r2, #32
 8000e72:	4091      	lsls	r1, r2
 8000e74:	fa20 f303 	lsr.w	r3, r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	4319      	orrs	r1, r3
 8000e7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e86:	fa1f f68c 	uxth.w	r6, ip
 8000e8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e92:	fb07 1114 	mls	r1, r7, r4, r1
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb04 f106 	mul.w	r1, r4, r6
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x64>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000eaa:	f080 8112 	bcs.w	80010d2 <__udivmoddi4+0x27e>
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f240 810f 	bls.w	80010d2 <__udivmoddi4+0x27e>
 8000eb4:	3c02      	subs	r4, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1a59      	subs	r1, r3, r1
 8000eba:	fa1f f38e 	uxth.w	r3, lr
 8000ebe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f606 	mul.w	r6, r0, r6
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	d90a      	bls.n	8000ee8 <__udivmoddi4+0x94>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eda:	f080 80fc 	bcs.w	80010d6 <__udivmoddi4+0x282>
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	f240 80f9 	bls.w	80010d6 <__udivmoddi4+0x282>
 8000ee4:	4463      	add	r3, ip
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eee:	2100      	movs	r1, #0
 8000ef0:	b11d      	cbz	r5, 8000efa <__udivmoddi4+0xa6>
 8000ef2:	40d3      	lsrs	r3, r2
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	e9c5 3200 	strd	r3, r2, [r5]
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d905      	bls.n	8000f0e <__udivmoddi4+0xba>
 8000f02:	b10d      	cbz	r5, 8000f08 <__udivmoddi4+0xb4>
 8000f04:	e9c5 0100 	strd	r0, r1, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e7f5      	b.n	8000efa <__udivmoddi4+0xa6>
 8000f0e:	fab3 f183 	clz	r1, r3
 8000f12:	2900      	cmp	r1, #0
 8000f14:	d146      	bne.n	8000fa4 <__udivmoddi4+0x150>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d302      	bcc.n	8000f20 <__udivmoddi4+0xcc>
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	f0c0 80f0 	bcc.w	8001100 <__udivmoddi4+0x2ac>
 8000f20:	1a86      	subs	r6, r0, r2
 8000f22:	eb64 0303 	sbc.w	r3, r4, r3
 8000f26:	2001      	movs	r0, #1
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d0e6      	beq.n	8000efa <__udivmoddi4+0xa6>
 8000f2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f30:	e7e3      	b.n	8000efa <__udivmoddi4+0xa6>
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	f040 8090 	bne.w	8001058 <__udivmoddi4+0x204>
 8000f38:	eba1 040c 	sub.w	r4, r1, ip
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa1f f78c 	uxth.w	r7, ip
 8000f44:	2101      	movs	r1, #1
 8000f46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f56:	fb07 f006 	mul.w	r0, r7, r6
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x11c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f66:	d202      	bcs.n	8000f6e <__udivmoddi4+0x11a>
 8000f68:	4298      	cmp	r0, r3
 8000f6a:	f200 80cd 	bhi.w	8001108 <__udivmoddi4+0x2b4>
 8000f6e:	4626      	mov	r6, r4
 8000f70:	1a1c      	subs	r4, r3, r0
 8000f72:	fa1f f38e 	uxth.w	r3, lr
 8000f76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f82:	fb00 f707 	mul.w	r7, r0, r7
 8000f86:	429f      	cmp	r7, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x148>
 8000f8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f92:	d202      	bcs.n	8000f9a <__udivmoddi4+0x146>
 8000f94:	429f      	cmp	r7, r3
 8000f96:	f200 80b0 	bhi.w	80010fa <__udivmoddi4+0x2a6>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	1bdb      	subs	r3, r3, r7
 8000f9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fa2:	e7a5      	b.n	8000ef0 <__udivmoddi4+0x9c>
 8000fa4:	f1c1 0620 	rsb	r6, r1, #32
 8000fa8:	408b      	lsls	r3, r1
 8000faa:	fa22 f706 	lsr.w	r7, r2, r6
 8000fae:	431f      	orrs	r7, r3
 8000fb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000fb8:	ea43 030c 	orr.w	r3, r3, ip
 8000fbc:	40f4      	lsrs	r4, r6
 8000fbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000fc2:	0c38      	lsrs	r0, r7, #16
 8000fc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000fcc:	fa1f fc87 	uxth.w	ip, r7
 8000fd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fdc:	45a1      	cmp	r9, r4
 8000fde:	fa02 f201 	lsl.w	r2, r2, r1
 8000fe2:	d90a      	bls.n	8000ffa <__udivmoddi4+0x1a6>
 8000fe4:	193c      	adds	r4, r7, r4
 8000fe6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fea:	f080 8084 	bcs.w	80010f6 <__udivmoddi4+0x2a2>
 8000fee:	45a1      	cmp	r9, r4
 8000ff0:	f240 8081 	bls.w	80010f6 <__udivmoddi4+0x2a2>
 8000ff4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ff8:	443c      	add	r4, r7
 8000ffa:	eba4 0409 	sub.w	r4, r4, r9
 8000ffe:	fa1f f983 	uxth.w	r9, r3
 8001002:	fbb4 f3f0 	udiv	r3, r4, r0
 8001006:	fb00 4413 	mls	r4, r0, r3, r4
 800100a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800100e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001012:	45a4      	cmp	ip, r4
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x1d2>
 8001016:	193c      	adds	r4, r7, r4
 8001018:	f103 30ff 	add.w	r0, r3, #4294967295
 800101c:	d267      	bcs.n	80010ee <__udivmoddi4+0x29a>
 800101e:	45a4      	cmp	ip, r4
 8001020:	d965      	bls.n	80010ee <__udivmoddi4+0x29a>
 8001022:	3b02      	subs	r3, #2
 8001024:	443c      	add	r4, r7
 8001026:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800102a:	fba0 9302 	umull	r9, r3, r0, r2
 800102e:	eba4 040c 	sub.w	r4, r4, ip
 8001032:	429c      	cmp	r4, r3
 8001034:	46ce      	mov	lr, r9
 8001036:	469c      	mov	ip, r3
 8001038:	d351      	bcc.n	80010de <__udivmoddi4+0x28a>
 800103a:	d04e      	beq.n	80010da <__udivmoddi4+0x286>
 800103c:	b155      	cbz	r5, 8001054 <__udivmoddi4+0x200>
 800103e:	ebb8 030e 	subs.w	r3, r8, lr
 8001042:	eb64 040c 	sbc.w	r4, r4, ip
 8001046:	fa04 f606 	lsl.w	r6, r4, r6
 800104a:	40cb      	lsrs	r3, r1
 800104c:	431e      	orrs	r6, r3
 800104e:	40cc      	lsrs	r4, r1
 8001050:	e9c5 6400 	strd	r6, r4, [r5]
 8001054:	2100      	movs	r1, #0
 8001056:	e750      	b.n	8000efa <__udivmoddi4+0xa6>
 8001058:	f1c2 0320 	rsb	r3, r2, #32
 800105c:	fa20 f103 	lsr.w	r1, r0, r3
 8001060:	fa0c fc02 	lsl.w	ip, ip, r2
 8001064:	fa24 f303 	lsr.w	r3, r4, r3
 8001068:	4094      	lsls	r4, r2
 800106a:	430c      	orrs	r4, r1
 800106c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001070:	fa00 fe02 	lsl.w	lr, r0, r2
 8001074:	fa1f f78c 	uxth.w	r7, ip
 8001078:	fbb3 f0f8 	udiv	r0, r3, r8
 800107c:	fb08 3110 	mls	r1, r8, r0, r3
 8001080:	0c23      	lsrs	r3, r4, #16
 8001082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001086:	fb00 f107 	mul.w	r1, r0, r7
 800108a:	4299      	cmp	r1, r3
 800108c:	d908      	bls.n	80010a0 <__udivmoddi4+0x24c>
 800108e:	eb1c 0303 	adds.w	r3, ip, r3
 8001092:	f100 36ff 	add.w	r6, r0, #4294967295
 8001096:	d22c      	bcs.n	80010f2 <__udivmoddi4+0x29e>
 8001098:	4299      	cmp	r1, r3
 800109a:	d92a      	bls.n	80010f2 <__udivmoddi4+0x29e>
 800109c:	3802      	subs	r0, #2
 800109e:	4463      	add	r3, ip
 80010a0:	1a5b      	subs	r3, r3, r1
 80010a2:	b2a4      	uxth	r4, r4
 80010a4:	fbb3 f1f8 	udiv	r1, r3, r8
 80010a8:	fb08 3311 	mls	r3, r8, r1, r3
 80010ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b0:	fb01 f307 	mul.w	r3, r1, r7
 80010b4:	42a3      	cmp	r3, r4
 80010b6:	d908      	bls.n	80010ca <__udivmoddi4+0x276>
 80010b8:	eb1c 0404 	adds.w	r4, ip, r4
 80010bc:	f101 36ff 	add.w	r6, r1, #4294967295
 80010c0:	d213      	bcs.n	80010ea <__udivmoddi4+0x296>
 80010c2:	42a3      	cmp	r3, r4
 80010c4:	d911      	bls.n	80010ea <__udivmoddi4+0x296>
 80010c6:	3902      	subs	r1, #2
 80010c8:	4464      	add	r4, ip
 80010ca:	1ae4      	subs	r4, r4, r3
 80010cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010d0:	e739      	b.n	8000f46 <__udivmoddi4+0xf2>
 80010d2:	4604      	mov	r4, r0
 80010d4:	e6f0      	b.n	8000eb8 <__udivmoddi4+0x64>
 80010d6:	4608      	mov	r0, r1
 80010d8:	e706      	b.n	8000ee8 <__udivmoddi4+0x94>
 80010da:	45c8      	cmp	r8, r9
 80010dc:	d2ae      	bcs.n	800103c <__udivmoddi4+0x1e8>
 80010de:	ebb9 0e02 	subs.w	lr, r9, r2
 80010e2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010e6:	3801      	subs	r0, #1
 80010e8:	e7a8      	b.n	800103c <__udivmoddi4+0x1e8>
 80010ea:	4631      	mov	r1, r6
 80010ec:	e7ed      	b.n	80010ca <__udivmoddi4+0x276>
 80010ee:	4603      	mov	r3, r0
 80010f0:	e799      	b.n	8001026 <__udivmoddi4+0x1d2>
 80010f2:	4630      	mov	r0, r6
 80010f4:	e7d4      	b.n	80010a0 <__udivmoddi4+0x24c>
 80010f6:	46d6      	mov	lr, sl
 80010f8:	e77f      	b.n	8000ffa <__udivmoddi4+0x1a6>
 80010fa:	4463      	add	r3, ip
 80010fc:	3802      	subs	r0, #2
 80010fe:	e74d      	b.n	8000f9c <__udivmoddi4+0x148>
 8001100:	4606      	mov	r6, r0
 8001102:	4623      	mov	r3, r4
 8001104:	4608      	mov	r0, r1
 8001106:	e70f      	b.n	8000f28 <__udivmoddi4+0xd4>
 8001108:	3e02      	subs	r6, #2
 800110a:	4463      	add	r3, ip
 800110c:	e730      	b.n	8000f70 <__udivmoddi4+0x11c>
 800110e:	bf00      	nop

08001110 <__aeabi_idiv0>:
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <ad717x_set_channel_status>:
 *			    	and False in case of Disable
 * @return Returns 0 for success or negative error code in case of failure.
*******************************************************************************/
int ad717x_set_channel_status(ad717x_dev *device, uint8_t channel_id,
			      bool channel_status)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
 8001120:	4613      	mov	r3, r2
 8001122:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *chn_register;
	int ret;

	if (!device)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <ad717x_set_channel_status+0x1a>
		return -EINVAL;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <ad717x_set_channel_status+0x88>)
 800112c:	e031      	b.n	8001192 <ad717x_set_channel_status+0x7e>

	/* Point to the Channel register */
	chn_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	3310      	adds	r3, #16
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fa40 	bl	80015bc <AD717X_GetReg>
 800113c:	60f8      	str	r0, [r7, #12]
	if (!chn_register)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <ad717x_set_channel_status+0x34>
		return -EINVAL;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <ad717x_set_channel_status+0x88>)
 8001146:	e024      	b.n	8001192 <ad717x_set_channel_status+0x7e>

	if (channel_status)
 8001148:	78bb      	ldrb	r3, [r7, #2]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <ad717x_set_channel_status+0x48>
		/* Assign the Channel enable bit and write to channel register */
		chn_register->value |= AD717X_CHMAP_REG_CH_EN;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	e005      	b.n	8001168 <ad717x_set_channel_status+0x54>
	else
		chn_register->value &= ~(AD717X_CHMAP_REG_CH_EN);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	3310      	adds	r3, #16
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fae3 	bl	800173c <AD717X_WriteRegister>
 8001176:	60b8      	str	r0, [r7, #8]
	if (ret < 0)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da01      	bge.n	8001182 <ad717x_set_channel_status+0x6e>
		return ret;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	e007      	b.n	8001192 <ad717x_set_channel_status+0x7e>
	device->chan_map[channel_id].channel_enable = channel_status;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	330a      	adds	r3, #10
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	78ba      	ldrb	r2, [r7, #2]
 800118e:	719a      	strb	r2, [r3, #6]

	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	ffffd929 	.word	0xffffd929

080011a0 <ad717x_set_adc_mode>:
 * @param device - AD717x Device Descriptor
 * @param adc_mode - ADC Mode to be configured
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_adc_mode(ad717x_dev *device, enum ad717x_mode adc_mode)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <ad717x_set_adc_mode+0x16>
		return -EINVAL;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <ad717x_set_adc_mode+0x6c>)
 80011b4:	e026      	b.n	8001204 <ad717x_set_adc_mode+0x64>

	/* Retrieve the ADC Mode reigster */
	adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 80011b6:	2101      	movs	r1, #1
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f9ff 	bl	80015bc <AD717X_GetReg>
 80011be:	60f8      	str	r0, [r7, #12]
	if (!adc_mode_reg)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <ad717x_set_adc_mode+0x2a>
		return -EINVAL;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <ad717x_set_adc_mode+0x6c>)
 80011c8:	e01c      	b.n	8001204 <ad717x_set_adc_mode+0x64>

	/* Clear the Mode[6:4] bits in the ADC Mode Register */
	adc_mode_reg->value &= ~(AD717X_ADCMODE_REG_MODE_MSK);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]

	/* Set the required conversion mode, write to register */
	adc_mode_reg->value |= AD717X_ADCMODE_REG_MODE(adc_mode);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011e2:	431a      	orrs	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]
	device->mode = adc_mode;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	78fa      	ldrb	r2, [r7, #3]
 80011ec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 80011f0:	2101      	movs	r1, #1
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 faa2 	bl	800173c <AD717X_WriteRegister>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da01      	bge.n	8001202 <ad717x_set_adc_mode+0x62>
		return -EINVAL;
 80011fe:	4b03      	ldr	r3, [pc, #12]	@ (800120c <ad717x_set_adc_mode+0x6c>)
 8001200:	e000      	b.n	8001204 <ad717x_set_adc_mode+0x64>



	return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	ffffd929 	.word	0xffffd929

08001210 <ad717x_connect_analog_input>:
 * @param analog_input - Analog Inputs to the Channel
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_connect_analog_input(ad717x_dev *device, uint8_t channel_id,
				union ad717x_analog_inputs analog_input)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	803a      	strh	r2, [r7, #0]
 800121c:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *channel_reg;

	if (!device)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <ad717x_connect_analog_input+0x18>
		return -EINVAL;
 8001224:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <ad717x_connect_analog_input+0x114>)
 8001226:	e079      	b.n	800131c <ad717x_connect_analog_input+0x10c>

	/* Retrieve the channel register */
	channel_reg = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	3310      	adds	r3, #16
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4619      	mov	r1, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f9c3 	bl	80015bc <AD717X_GetReg>
 8001236:	60f8      	str	r0, [r7, #12]
	if (!channel_reg)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <ad717x_connect_analog_input+0x32>
		return -EINVAL;
 800123e:	4b39      	ldr	r3, [pc, #228]	@ (8001324 <ad717x_connect_analog_input+0x114>)
 8001240:	e06c      	b.n	800131c <ad717x_connect_analog_input+0x10c>

	switch ((uint8_t)device->active_device) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7a9b      	ldrb	r3, [r3, #10]
 8001246:	2b04      	cmp	r3, #4
 8001248:	dc02      	bgt.n	8001250 <ad717x_connect_analog_input+0x40>
 800124a:	2b00      	cmp	r3, #0
 800124c:	da04      	bge.n	8001258 <ad717x_connect_analog_input+0x48>
 800124e:	e062      	b.n	8001316 <ad717x_connect_analog_input+0x106>
 8001250:	3b05      	subs	r3, #5
 8001252:	2b06      	cmp	r3, #6
 8001254:	d85f      	bhi.n	8001316 <ad717x_connect_analog_input+0x106>
 8001256:	e024      	b.n	80012a2 <ad717x_connect_analog_input+0x92>
	case ID_AD4112 :
	case ID_AD4114 :
	case ID_AD4115 :
	case ID_AD4116 :
		/* Clear and Set the required analog input pair to channel */
		channel_reg->value  &= ~AD717x_CHANNEL_INPUT_MASK;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001260:	f023 0303 	bic.w	r3, r3, #3
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	6053      	str	r3, [r2, #4]
		channel_reg->value |= AD4111_CHMAP_REG_INPUT(analog_input.analog_input_pairs);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	883b      	ldrh	r3, [r7, #0]
 800126e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	3310      	adds	r3, #16
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fa5b 	bl	800173c <AD717X_WriteRegister>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	da01      	bge.n	8001290 <ad717x_connect_analog_input+0x80>
			return -EINVAL;
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <ad717x_connect_analog_input+0x114>)
 800128e:	e045      	b.n	800131c <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001290:	78fb      	ldrb	r3, [r7, #3]
			analog_input.analog_input_pairs;
 8001292:	8839      	ldrh	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.analog_input_pairs =
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	330a      	adds	r3, #10
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	460a      	mov	r2, r1
 800129e:	811a      	strh	r2, [r3, #8]
		break;
 80012a0:	e03b      	b.n	800131a <ad717x_connect_analog_input+0x10a>
	case ID_AD7175_8:
	case ID_AD7176_2:
	case ID_AD7177_2:
	case ID_AD7172_2:
		/* Select the Positive Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINPOS_MSK;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	605a      	str	r2, [r3, #4]
		channel_reg->value |=  AD717X_CHMAP_REG_AINPOS(
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	783b      	ldrb	r3, [r7, #0]
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80012ba:	431a      	orrs	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	605a      	str	r2, [r3, #4]
					       analog_input.ainp.pos_analog_input);

		/* Select the Negative Analog Input */
		channel_reg->value &= ~AD717X_CHMAP_REG_AINNEG_MSK;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 021f 	bic.w	r2, r3, #31
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	605a      	str	r2, [r3, #4]
		channel_reg->value |= AD717X_CHMAP_REG_AINNEG(
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	431a      	orrs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	605a      	str	r2, [r3, #4]
					      analog_input.ainp.neg_analog_input);
		if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	3310      	adds	r3, #16
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 fa29 	bl	800173c <AD717X_WriteRegister>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da01      	bge.n	80012f4 <ad717x_connect_analog_input+0xe4>
			return -EINVAL;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <ad717x_connect_analog_input+0x114>)
 80012f2:	e013      	b.n	800131c <ad717x_connect_analog_input+0x10c>

		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80012f4:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.pos_analog_input;
 80012f6:	7839      	ldrb	r1, [r7, #0]
		device->chan_map[channel_id].analog_inputs.ainp.pos_analog_input =
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	330a      	adds	r3, #10
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	460a      	mov	r2, r1
 8001302:	721a      	strb	r2, [r3, #8]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 8001304:	78fb      	ldrb	r3, [r7, #3]
			analog_input.ainp.neg_analog_input;
 8001306:	7879      	ldrb	r1, [r7, #1]
		device->chan_map[channel_id].analog_inputs.ainp.neg_analog_input =
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	330a      	adds	r3, #10
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	725a      	strb	r2, [r3, #9]
		break;
 8001314:	e001      	b.n	800131a <ad717x_connect_analog_input+0x10a>

	default :
		return -EINVAL;
 8001316:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <ad717x_connect_analog_input+0x114>)
 8001318:	e000      	b.n	800131c <ad717x_connect_analog_input+0x10c>
	}

	return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	ffffd929 	.word	0xffffd929

08001328 <ad717x_assign_setup>:
 * @param channel_id - Channel ID (number)
 * @param setup - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_assign_setup(ad717x_dev *device, uint8_t channel_id, uint8_t setup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *p_register;

	if (!device)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <ad717x_assign_setup+0x1a>
		return -EINVAL;
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <ad717x_assign_setup+0x84>)
 8001340:	e02f      	b.n	80013a2 <ad717x_assign_setup+0x7a>

	/* Retrieve the Channel Register */
	p_register = AD717X_GetReg(device, AD717X_CHMAP0_REG + channel_id);
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	3310      	adds	r3, #16
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f936 	bl	80015bc <AD717X_GetReg>
 8001350:	60f8      	str	r0, [r7, #12]
	if (!p_register)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <ad717x_assign_setup+0x34>
		return -EINVAL;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <ad717x_assign_setup+0x84>)
 800135a:	e022      	b.n	80013a2 <ad717x_assign_setup+0x7a>

	/* Assign set up to the chosen channel */
	p_register->value &= ~AD717X_CHMAP_REG_SETUP_SEL_MSK;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	605a      	str	r2, [r3, #4]
	p_register->value |= AD717X_CHMAP_REG_SETUP_SEL(setup);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	78bb      	ldrb	r3, [r7, #2]
 800136e:	031b      	lsls	r3, r3, #12
 8001370:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001374:	431a      	orrs	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device, AD717X_CHMAP0_REG + channel_id) < 0)
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	3310      	adds	r3, #16
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f9da 	bl	800173c <AD717X_WriteRegister>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	da01      	bge.n	8001392 <ad717x_assign_setup+0x6a>
		return -EINVAL;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <ad717x_assign_setup+0x84>)
 8001390:	e007      	b.n	80013a2 <ad717x_assign_setup+0x7a>
	device->chan_map[channel_id].setup_sel = setup;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	330a      	adds	r3, #10
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	78ba      	ldrb	r2, [r7, #2]
 800139e:	71da      	strb	r2, [r3, #7]

	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	ffffd929 	.word	0xffffd929

080013b0 <ad717x_set_polarity>:
 * @param bipolar - Polarity Select:True in case of Bipolar, False in case of Unipolar
 * @param setup_id - Setup ID (number)
 * @return Returns 0 for success or negative error code in case of failure.
*****************************************************************************/
int ad717x_set_polarity(ad717x_dev* device, bool bipolar, uint8_t setup_id)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	4613      	mov	r3, r2
 80013be:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;

	if (!device)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <ad717x_set_polarity+0x1a>
		return -EINVAL;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <ad717x_set_polarity+0x84>)
 80013c8:	e030      	b.n	800142c <ad717x_set_polarity+0x7c>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 80013ca:	78bb      	ldrb	r3, [r7, #2]
 80013cc:	3320      	adds	r3, #32
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4619      	mov	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f8f2 	bl	80015bc <AD717X_GetReg>
 80013d8:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <ad717x_set_polarity+0x34>
		return -EINVAL;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <ad717x_set_polarity+0x84>)
 80013e2:	e023      	b.n	800142c <ad717x_set_polarity+0x7c>

	/* Set the BI_UNIPOLAR bit in case of BIPOLAR operation */
	if (bipolar)
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <ad717x_set_polarity+0x48>
		setup_reg->value |= AD717X_SETUP_CONF_REG_BI_UNIPOLAR;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	e005      	b.n	8001404 <ad717x_set_polarity+0x54>
	else
		setup_reg->value &= ~(AD717X_SETUP_CONF_REG_BI_UNIPOLAR);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 8001404:	78bb      	ldrb	r3, [r7, #2]
 8001406:	3320      	adds	r3, #32
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f995 	bl	800173c <AD717X_WriteRegister>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	da01      	bge.n	800141c <ad717x_set_polarity+0x6c>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <ad717x_set_polarity+0x84>)
 800141a:	e007      	b.n	800142c <ad717x_set_polarity+0x7c>
	device->setups[setup_id].bi_unipolar = bipolar;
 800141c:	78bb      	ldrb	r3, [r7, #2]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	3302      	adds	r3, #2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	715a      	strb	r2, [r3, #5]

	return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	ffffd929 	.word	0xffffd929

08001438 <ad717x_set_reference_source>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_set_reference_source(ad717x_dev* device,
				enum ad717x_reference_source ref_source, uint8_t setup_id)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
 8001444:	4613      	mov	r3, r2
 8001446:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg* setup_reg;
	ad717x_st_reg *adc_mode_reg;

	if (!device)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <ad717x_set_reference_source+0x1a>
		return -EINVAL;
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ad717x_set_reference_source+0xc0>)
 8001450:	e04e      	b.n	80014f0 <ad717x_set_reference_source+0xb8>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001452:	78bb      	ldrb	r3, [r7, #2]
 8001454:	3320      	adds	r3, #32
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f8ae 	bl	80015bc <AD717X_GetReg>
 8001460:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <ad717x_set_reference_source+0x34>
		return -EINVAL;
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <ad717x_set_reference_source+0xc0>)
 800146a:	e041      	b.n	80014f0 <ad717x_set_reference_source+0xb8>

	/* Choose the reference source for the selected setup */
	setup_reg->value &= ~AD717X_SETUP_CONF_REG_REF_SEL_MSK;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]
	setup_reg->value |= (AD717X_SETUP_CONF_REG_REF_SEL(ref_source));
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]

	if (AD717X_WriteRegister(device,
 800148a:	78bb      	ldrb	r3, [r7, #2]
 800148c:	3320      	adds	r3, #32
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f952 	bl	800173c <AD717X_WriteRegister>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	da01      	bge.n	80014a2 <ad717x_set_reference_source+0x6a>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <ad717x_set_reference_source+0xc0>)
 80014a0:	e026      	b.n	80014f0 <ad717x_set_reference_source+0xb8>
	device->setups[setup_id].ref_source = ref_source;
 80014a2:	78bb      	ldrb	r3, [r7, #2]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	3302      	adds	r3, #2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	78fa      	ldrb	r2, [r7, #3]
 80014ae:	721a      	strb	r2, [r3, #8]

	/* Enable the REF_EN Bit in case of Internal reference */
	if (ref_source == INTERNAL_REF) {
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d11b      	bne.n	80014ee <ad717x_set_reference_source+0xb6>
		/* Retrieve the ADC Mode reigster */
		adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
 80014b6:	2101      	movs	r1, #1
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f87f 	bl	80015bc <AD717X_GetReg>
 80014be:	60b8      	str	r0, [r7, #8]
		if (!adc_mode_reg)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <ad717x_set_reference_source+0x92>
			return -EINVAL;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <ad717x_set_reference_source+0xc0>)
 80014c8:	e012      	b.n	80014f0 <ad717x_set_reference_source+0xb8>

		/* Set the REF_EN Bit */
		adc_mode_reg->value |= AD717X_ADCMODE_REG_REF_EN;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	605a      	str	r2, [r3, #4]
		if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
 80014d6:	2101      	movs	r1, #1
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f92f 	bl	800173c <AD717X_WriteRegister>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da01      	bge.n	80014e8 <ad717x_set_reference_source+0xb0>
			return -EINVAL;
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <ad717x_set_reference_source+0xc0>)
 80014e6:	e003      	b.n	80014f0 <ad717x_set_reference_source+0xb8>
		device->ref_en = true;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	72da      	strb	r2, [r3, #11]
	}

	return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	ffffd929 	.word	0xffffd929

080014fc <ad717x_enable_input_buffer>:
 * @param setup_id - Setup ID (Number)
 * @return Returns 0 for success or negative error code in case of failure.
******************************************************************************/
int ad717x_enable_input_buffer(ad717x_dev* device,
			       bool inbuf_en, bool refbuf_en, uint8_t setup_id)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4603      	mov	r3, r0
 800150c:	70fb      	strb	r3, [r7, #3]
 800150e:	460b      	mov	r3, r1
 8001510:	70bb      	strb	r3, [r7, #2]
 8001512:	4613      	mov	r3, r2
 8001514:	707b      	strb	r3, [r7, #1]
	ad717x_st_reg* setup_reg;

	if (!device)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <ad717x_enable_input_buffer+0x24>
		return -EINVAL;
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <ad717x_enable_input_buffer+0xbc>)
 800151e:	e047      	b.n	80015b0 <ad717x_enable_input_buffer+0xb4>

	/* Retrieve the SETUPCON Register */
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	3320      	adds	r3, #32
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f847 	bl	80015bc <AD717X_GetReg>
 800152e:	60f8      	str	r0, [r7, #12]
	if (!setup_reg)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <ad717x_enable_input_buffer+0x3e>
		return -EINVAL;
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <ad717x_enable_input_buffer+0xbc>)
 8001538:	e03a      	b.n	80015b0 <ad717x_enable_input_buffer+0xb4>

	if (inbuf_en)
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <ad717x_enable_input_buffer+0x52>
		/* Enable input buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_AINBUF_P |
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	e005      	b.n	800155a <ad717x_enable_input_buffer+0x5e>
				     AD717X_SETUP_CONF_REG_AINBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_AINBUF_P |
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_AINBUF_N));
	if (refbuf_en)
 800155a:	78bb      	ldrb	r3, [r7, #2]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <ad717x_enable_input_buffer+0x72>
		/* Enable reference buffer for the chosen set up */
		setup_reg->value |= (AD717X_SETUP_CONF_REG_REFBUF_P |
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f443 6240 	orr.w	r2, r3, #3072	@ 0xc00
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e005      	b.n	800157a <ad717x_enable_input_buffer+0x7e>
				     AD717X_SETUP_CONF_REG_REFBUF_N);
	else
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_REFBUF_P |
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	605a      	str	r2, [r3, #4]
				       AD717X_SETUP_CONF_REG_REFBUF_N));

	if (AD717X_WriteRegister(device,
 800157a:	787b      	ldrb	r3, [r7, #1]
 800157c:	3320      	adds	r3, #32
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8da 	bl	800173c <AD717X_WriteRegister>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	da01      	bge.n	8001592 <ad717x_enable_input_buffer+0x96>
				 AD717X_SETUPCON0_REG + setup_id) < 0)
		return -EINVAL;
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <ad717x_enable_input_buffer+0xbc>)
 8001590:	e00e      	b.n	80015b0 <ad717x_enable_input_buffer+0xb4>
	device->setups[setup_id].input_buff = inbuf_en;
 8001592:	787b      	ldrb	r3, [r7, #1]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	3302      	adds	r3, #2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	71da      	strb	r2, [r3, #7]
	device->setups[setup_id].ref_buff = refbuf_en;
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	3302      	adds	r3, #2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	78ba      	ldrb	r2, [r7, #2]
 80015ac:	719a      	strb	r2, [r3, #6]

	return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	ffffd929 	.word	0xffffd929

080015bc <AD717X_GetReg>:
*
* @return A pointer to the register if found or 0.
*******************************************************************************/
ad717x_st_reg *AD717X_GetReg(ad717x_dev *device,
			     uint8_t reg_address)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	ad717x_st_reg *reg = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]

	if (!device || !device->regs)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <AD717X_GetReg+0x1e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <AD717X_GetReg+0x22>
		return 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	e021      	b.n	8001622 <AD717X_GetReg+0x66>

	for (i = 0; i < device->num_regs; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e018      	b.n	8001616 <AD717X_GetReg+0x5a>
		if (device->regs[i].addr == reg_address) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d109      	bne.n	8001610 <AD717X_GetReg+0x54>
			reg = &device->regs[i];
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	60bb      	str	r3, [r7, #8]
			break;
 800160e:	e007      	b.n	8001620 <AD717X_GetReg+0x64>
	for (i = 0; i < device->num_regs; i++) {
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7a1b      	ldrb	r3, [r3, #8]
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3e1      	bcc.n	80015e4 <AD717X_GetReg+0x28>
		}
	}

	return reg;
 8001620:	68bb      	ldr	r3, [r7, #8]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <AD717X_ReadRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_ReadRegister(ad717x_dev *device,
			    uint8_t addr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	@ 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
	int32_t ret       = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t Tx = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t Rx [8] = {0};
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
//	uint8_t i         = 0;
//	uint8_t check8    = 0;
//	uint8_t msgBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	ad717x_st_reg *pReg;

	if(!device)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <AD717X_ReadRegister+0x2a>
		return INVALID_VAL;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	e063      	b.n	8001722 <AD717X_ReadRegister+0xf2>

	pReg = AD717X_GetReg(device, addr);
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	4619      	mov	r1, r3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffac 	bl	80015bc <AD717X_GetReg>
 8001664:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (!pReg)
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <AD717X_ReadRegister+0x42>
		return INVALID_VAL;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	e057      	b.n	8001722 <AD717X_ReadRegister+0xf2>

	/* Build the Command word */
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
		    AD717X_COMM_REG_RA(pReg->addr);
 8001672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800167c:	b25b      	sxtb	r3, r3
	spi_read_reg.Tx = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
 800167e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001682:	b25b      	sxtb	r3, r3
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <AD717X_ReadRegister+0xfc>)
 8001688:	701a      	strb	r2, [r3, #0]
	Tx = spi_read_reg.Tx;
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <AD717X_ReadRegister+0xfc>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	spi_read_reg.pReg = pReg;
 8001692:	4a26      	ldr	r2, [pc, #152]	@ (800172c <AD717X_ReadRegister+0xfc>)
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	6053      	str	r3, [r2, #4]
//	spi_read_reg.size = pReg->size;

	/* Read data from the device */

	if(device->mode == CONTINUOUS)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d103      	bne.n	80016aa <AD717X_ReadRegister+0x7a>
		spi_status = READING;
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <AD717X_ReadRegister+0x100>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e03a      	b.n	8001720 <AD717X_ReadRegister+0xf0>
	else
	{
		HAL_SPI_Transmit(SPI, &Tx, 1, 100);
 80016aa:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	4820      	ldr	r0, [pc, #128]	@ (8001734 <AD717X_ReadRegister+0x104>)
 80016b4:	f003 fda9 	bl	800520a <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 80016b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f107 0120 	add.w	r1, r7, #32
 80016c2:	2364      	movs	r3, #100	@ 0x64
 80016c4:	481b      	ldr	r0, [pc, #108]	@ (8001734 <AD717X_ReadRegister+0x104>)
 80016c6:	f003 fee4 	bl	8005492 <HAL_SPI_Receive>
		pReg->value = 0;
 80016ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016d4:	e011      	b.n	80016fa <AD717X_ReadRegister+0xca>
			pReg->value <<= 8;
 80016d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	021a      	lsls	r2, r3, #8
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	605a      	str	r2, [r3, #4]
			pReg->value += Rx[i];
 80016e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f107 0120 	add.w	r1, r7, #32
 80016e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016ea:	440a      	add	r2, r1
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	441a      	add	r2, r3
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < pReg->size; i++) {
 80016f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016f6:	3301      	adds	r3, #1
 80016f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80016fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001700:	429a      	cmp	r2, r3
 8001702:	dbe8      	blt.n	80016d6 <AD717X_ReadRegister+0xa6>
		}
		char hexString[24];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 8001704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	461a      	mov	r2, r3
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	490a      	ldr	r1, [pc, #40]	@ (8001738 <AD717X_ReadRegister+0x108>)
 8001710:	4618      	mov	r0, r3
 8001712:	f007 f92d 	bl	8008970 <siprintf>
		send_string(hexString);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fdb4 	bl	8002288 <send_string>
	*/
	/* Build the result */

//	}

	return ret;
 8001720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001722:	4618      	mov	r0, r3
 8001724:	3738      	adds	r7, #56	@ 0x38
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2001e650 	.word	0x2001e650
 8001730:	2001e64c 	.word	0x2001e64c
 8001734:	2000048c 	.word	0x2000048c
 8001738:	0800aae0 	.word	0x0800aae0

0800173c <AD717X_WriteRegister>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_WriteRegister(ad717x_dev *device,
			     uint8_t addr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
	int32_t ret      = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
	int32_t regValue = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
	uint8_t wrBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001750:	4a32      	ldr	r2, [pc, #200]	@ (800181c <AD717X_WriteRegister+0xe0>)
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800175a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i        = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	76fb      	strb	r3, [r7, #27]
//	uint8_t crc8     = 0;
	ad717x_st_reg *preg;

	if(!device)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <AD717X_WriteRegister+0x32>
		return INVALID_VAL;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	e051      	b.n	8001812 <AD717X_WriteRegister+0xd6>

	preg = AD717X_GetReg(device, addr);
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff22 	bl	80015bc <AD717X_GetReg>
 8001778:	6138      	str	r0, [r7, #16]
	if (!preg)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <AD717X_WriteRegister+0x4a>
		return INVALID_VAL;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e045      	b.n	8001812 <AD717X_WriteRegister+0xd6>

	/* Build the Command word */
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
		   AD717X_COMM_REG_RA(preg->addr);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	681b      	ldr	r3, [r3, #0]
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001790:	b2db      	uxtb	r3, r3
 8001792:	723b      	strb	r3, [r7, #8]

	/* Fill the write buffer */
	regValue = preg->value;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 800179a:	2300      	movs	r3, #0
 800179c:	76fb      	strb	r3, [r7, #27]
 800179e:	e00f      	b.n	80017c0 <AD717X_WriteRegister+0x84>
		wrBuf[preg->size - i] = regValue & 0xFF;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	7efb      	ldrb	r3, [r7, #27]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	3320      	adds	r3, #32
 80017ae:	443b      	add	r3, r7
 80017b0:	f803 2c18 	strb.w	r2, [r3, #-24]
		regValue >>= 8;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	121b      	asrs	r3, r3, #8
 80017b8:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < preg->size; i++) {
 80017ba:	7efb      	ldrb	r3, [r7, #27]
 80017bc:	3301      	adds	r3, #1
 80017be:	76fb      	strb	r3, [r7, #27]
 80017c0:	7efa      	ldrb	r2, [r7, #27]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbea      	blt.n	80017a0 <AD717X_WriteRegister+0x64>
	/* Write data to the device */
//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       (device->useCRC != AD717X_DISABLE) ?
//				       preg->size + 2 : preg->size + 1);
	memcpy(spi_write_reg.Tx, wrBuf, 8);
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <AD717X_WriteRegister+0xe4>)
 80017cc:	461a      	mov	r2, r3
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d6:	e882 0003 	stmia.w	r2, {r0, r1}
	spi_write_reg.pReg = preg;
 80017da:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <AD717X_WriteRegister+0xe4>)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	60d3      	str	r3, [r2, #12]
//			ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
//
//		}
//
//	}
	if(device->mode == CONTINUOUS)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <AD717X_WriteRegister+0xb6>
		spi_status = WRITING;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <AD717X_WriteRegister+0xe8>)
 80017ec:	2203      	movs	r2, #3
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e00c      	b.n	800180c <AD717X_WriteRegister+0xd0>
	else
	{
		ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f107 0108 	add.w	r1, r7, #8
 8001800:	2364      	movs	r3, #100	@ 0x64
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <AD717X_WriteRegister+0xec>)
 8001804:	f003 fd01 	bl	800520a <HAL_SPI_Transmit>
 8001808:	4603      	mov	r3, r0
 800180a:	617b      	str	r3, [r7, #20]
	}
//	ret = (int) HAL_SPI_Transmit(SPI, wrBuf, preg->size + 1, 100);
	ret = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
	return ret;
 8001810:	697b      	ldr	r3, [r7, #20]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0800aaf8 	.word	0x0800aaf8
 8001820:	2001e658 	.word	0x2001e658
 8001824:	2001e64c 	.word	0x2001e64c
 8001828:	2000048c 	.word	0x2000048c

0800182c <AD717X_Reset>:
* @param device - The handler of the instance of the driver.
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Reset(ad717x_dev *device)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
	uint8_t wrBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001838:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <AD717X_Reset+0x40>)
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001842:	e883 0003 	stmia.w	r3, {r0, r1}

	if(!device)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <AD717X_Reset+0x26>
		return INVALID_VAL;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e007      	b.n	8001862 <AD717X_Reset+0x36>

//	ret = no_os_spi_write_and_read(device->spi_desc,
//				       wrBuf,
//				       8);
	HAL_SPI_Transmit(SPI, wrBuf, 8, 100);
 8001852:	f107 010c 	add.w	r1, r7, #12
 8001856:	2364      	movs	r3, #100	@ 0x64
 8001858:	2208      	movs	r2, #8
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <AD717X_Reset+0x44>)
 800185c:	f003 fcd5 	bl	800520a <HAL_SPI_Transmit>
	return ret;
 8001860:	697b      	ldr	r3, [r7, #20]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0800ab00 	.word	0x0800ab00
 8001870:	2000048c 	.word	0x2000048c

08001874 <AD717X_ComputeDataregSize>:
* @param device - The handler of the instance of the driver.
*
* @return 0in case of success or negative code in case of failure.
*******************************************************************************/
int32_t AD717X_ComputeDataregSize(ad717x_dev *device)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	ad717x_st_reg *reg_ptr;
	ad717x_st_reg *datareg_ptr;
	uint16_t case_var;

	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_IFMODE_REG);
 800187c:	2102      	movs	r1, #2
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe9c 	bl	80015bc <AD717X_GetReg>
 8001884:	6178      	str	r0, [r7, #20]
	/* Get data register pointer */
	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
 8001886:	2104      	movs	r1, #4
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fe97 	bl	80015bc <AD717X_GetReg>
 800188e:	6138      	str	r0, [r7, #16]
	case_var = reg_ptr->value & (AD717X_IFMODE_REG_DATA_STAT |
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	b29b      	uxth	r3, r3
 8001896:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 800189a:	81fb      	strh	r3, [r7, #14]
				     AD717X_IFMODE_REG_DATA_WL16);

	/* Compute data register size */
	datareg_ptr->size = 3;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2203      	movs	r2, #3
 80018a0:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_WL16) == AD717X_IFMODE_REG_DATA_WL16)
 80018a2:	89fb      	ldrh	r3, [r7, #14]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <AD717X_ComputeDataregSize+0x42>
		datareg_ptr->size--;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	609a      	str	r2, [r3, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_STAT) == AD717X_IFMODE_REG_DATA_STAT)
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <AD717X_ComputeDataregSize+0x56>
		datareg_ptr->size++;
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]

	/* Get ID register pointer */
	reg_ptr = AD717X_GetReg(device, AD717X_ID_REG);
 80018ca:	2107      	movs	r1, #7
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fe75 	bl	80015bc <AD717X_GetReg>
 80018d2:	6178      	str	r0, [r7, #20]

	/* If the part is 32/24 bit wide add a byte to the read */
	if((reg_ptr->value & AD717X_ID_REG_MASK) == AD7177_2_ID_REG_VALUE)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80018dc:	4013      	ands	r3, r2
 80018de:	f644 72d0 	movw	r2, #20432	@ 0x4fd0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d104      	bne.n	80018f0 <AD717X_ComputeDataregSize+0x7c>
		datareg_ptr->size++;
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]

	return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <ad717x_configure_device_odr>:
 * @return 0 in case of success, negative error code otherwise
 */
int32_t ad717x_configure_device_odr(ad717x_dev *dev,
				    uint8_t filtcon_id,
				    uint8_t odr_sel)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	70fb      	strb	r3, [r7, #3]
 8001908:	4613      	mov	r3, r2
 800190a:	70bb      	strb	r3, [r7, #2]
	ad717x_st_reg *filtcon_reg;
	int32_t ret;

	/* Retrieve the FILTCON register */
	filtcon_reg = AD717X_GetReg(dev,
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	3328      	adds	r3, #40	@ 0x28
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fe51 	bl	80015bc <AD717X_GetReg>
 800191a:	60f8      	str	r0, [r7, #12]
				    AD717X_FILTCON0_REG + filtcon_id);
	if (!filtcon_reg) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <ad717x_configure_device_odr+0x2a>
		return -EINVAL;
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <ad717x_configure_device_odr+0x6c>)
 8001924:	e01b      	b.n	800195e <ad717x_configure_device_odr+0x62>
	}

	/* Clear the ODR bits, configure the requested ODR */
	filtcon_reg->value &= ~(AD717x_ODR_MSK);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 021f 	bic.w	r2, r3, #31
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
	filtcon_reg->value |= AD717X_FILT_CONF_REG_ODR(odr_sel);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	431a      	orrs	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	605a      	str	r2, [r3, #4]

	ret = AD717X_WriteRegister(dev, AD717X_FILTCON0_REG + filtcon_id);
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	3328      	adds	r3, #40	@ 0x28
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fef6 	bl	800173c <AD717X_WriteRegister>
 8001950:	60b8      	str	r0, [r7, #8]
	if (ret) {
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <ad717x_configure_device_odr+0x60>
		return ret;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	e000      	b.n	800195e <ad717x_configure_device_odr+0x62>
	}

	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	ffffd929 	.word	0xffffd929

0800196c <AD717X_Init>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Init(ad717x_dev **device,
		    ad717x_init_param init_param)
{
 800196c:	b084      	sub	sp, #16
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800197a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;
	ad717x_st_reg *preg;
	uint8_t setup_index;
	uint8_t ch_index;

	dev = (ad717x_dev *)malloc(sizeof(*dev));
 800197e:	20bc      	movs	r0, #188	@ 0xbc
 8001980:	f006 f9a6 	bl	8007cd0 <malloc>
 8001984:	4603      	mov	r3, r0
 8001986:	613b      	str	r3, [r7, #16]
	if (!dev)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <AD717X_Init+0x28>
		return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e07d      	b.n	8001a90 <AD717X_Init+0x124>

	dev->regs = init_param.regs;
 8001994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
	dev->num_regs = init_param.num_regs;
 800199a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	721a      	strb	r2, [r3, #8]
//	ret = no_os_spi_init(&dev->spi_desc, &init_param.spi_init);
//	if (ret < 0)
//		return ret;

	/*  Reset the device interface.*/
	ret = AD717X_Reset(dev);
 80019a2:	6938      	ldr	r0, [r7, #16]
 80019a4:	f7ff ff42 	bl	800182c <AD717X_Reset>
 80019a8:	60f8      	str	r0, [r7, #12]
	if (ret < 0)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da01      	bge.n	80019b4 <AD717X_Init+0x48>
		return ret;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	e06d      	b.n	8001a90 <AD717X_Init+0x124>

	/* Initialize ADC mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
	if(ret < 0)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da01      	bge.n	80019be <AD717X_Init+0x52>
		return ret;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	e068      	b.n	8001a90 <AD717X_Init+0x124>

	/* Initialize Interface mode register. */
//	ret = AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
	if(ret < 0)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da01      	bge.n	80019c8 <AD717X_Init+0x5c>
		return ret;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	e063      	b.n	8001a90 <AD717X_Init+0x124>

	/* Get CRC State */
//	ret = AD717X_UpdateCRCSetting(dev);
	if(ret < 0)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da01      	bge.n	80019d2 <AD717X_Init+0x66>
		return ret;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	e05e      	b.n	8001a90 <AD717X_Init+0x124>

	/* Initialize registers AD717X_GPIOCON_REG through AD717X_OFFSET0_REG */
	preg = AD717X_GetReg(dev, AD717X_GPIOCON_REG);
 80019d2:	2106      	movs	r1, #6
 80019d4:	6938      	ldr	r0, [r7, #16]
 80019d6:	f7ff fdf1 	bl	80015bc <AD717X_GetReg>
 80019da:	60b8      	str	r0, [r7, #8]
	if (!preg)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <AD717X_Init+0x7c>
		return INVALID_VAL;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e053      	b.n	8001a90 <AD717X_Init+0x124>
//			break;
//		preg ++;
//	}

	/* Read ID register to identify the part */
	ret = AD717X_ReadRegister(dev, AD717X_ID_REG);
 80019e8:	2107      	movs	r1, #7
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f7ff fe20 	bl	8001630 <AD717X_ReadRegister>
 80019f0:	60f8      	str	r0, [r7, #12]
	if(ret < 0)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	da01      	bge.n	80019fc <AD717X_Init+0x90>
		return ret;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	e049      	b.n	8001a90 <AD717X_Init+0x124>
	dev->active_device = init_param.active_device;
 80019fc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	729a      	strb	r2, [r3, #10]
	dev->num_channels = init_param.num_channels;
 8001a04:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	731a      	strb	r2, [r3, #12]

	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]
 8001a10:	e016      	b.n	8001a40 <AD717X_Init+0xd4>
		/* Set Polarity */
//		ret = ad717x_set_polarity(dev, init_param.setups[setup_index].bi_unipolar,
//					  setup_index);
		if (ret < 0)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da01      	bge.n	8001a1c <AD717X_Init+0xb0>
			return ret;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	e039      	b.n	8001a90 <AD717X_Init+0x124>

		/* Select the reference source */
//		ret = ad717x_set_reference_source(dev,
//						  init_param.setups[setup_index].ref_source, setup_index);
		if (ret < 0)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da01      	bge.n	8001a26 <AD717X_Init+0xba>
			return ret;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	e034      	b.n	8001a90 <AD717X_Init+0x124>
		/* Enable reference and input buffers */
//		ret = ad717x_enable_input_buffer(dev,
//						 init_param.setups[setup_index].input_buff,
//						 init_param.setups[setup_index].ref_buff,
//						 setup_index);
		if (ret < 0)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da01      	bge.n	8001a30 <AD717X_Init+0xc4>
			return ret;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	e02f      	b.n	8001a90 <AD717X_Init+0x124>

//		ret = ad717x_configure_device_odr(dev, setup_index,
//						  init_param.filter_configuration[setup_index].odr);
		if (ret < 0)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da01      	bge.n	8001a3a <AD717X_Init+0xce>
			return ret;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	e02a      	b.n	8001a90 <AD717X_Init+0x124>
	for (setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
 8001a40:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a44:	7dfa      	ldrb	r2, [r7, #23]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3e3      	bcc.n	8001a12 <AD717X_Init+0xa6>
	}

	/* Set Conversion Mode */
//	ret = ad717x_set_adc_mode(dev, init_param.mode);
	if (ret < 0)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da01      	bge.n	8001a54 <AD717X_Init+0xe8>
		return ret;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	e01d      	b.n	8001a90 <AD717X_Init+0x124>

	/*  Connect Analog Inputs, Assign Setup, Disable all channels */
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	75bb      	strb	r3, [r7, #22]
 8001a58:	e011      	b.n	8001a7e <AD717X_Init+0x112>
//		ret = ad717x_connect_analog_input(dev, ch_index,
//						  init_param.chan_map[ch_index].analog_inputs);
		if (ret < 0)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da01      	bge.n	8001a64 <AD717X_Init+0xf8>
			return ret;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e015      	b.n	8001a90 <AD717X_Init+0x124>

//		ret = ad717x_assign_setup(dev, ch_index,
//					  init_param.chan_map[ch_index].setup_sel);
		if (ret < 0)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da01      	bge.n	8001a6e <AD717X_Init+0x102>
			return ret;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	e010      	b.n	8001a90 <AD717X_Init+0x124>

//		ret = ad717x_set_channel_status(dev,ch_index,
//						init_param.chan_map[ch_index].channel_enable);
		if (ret < 0)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da01      	bge.n	8001a78 <AD717X_Init+0x10c>
			return ret;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	e00b      	b.n	8001a90 <AD717X_Init+0x124>
	for (ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	75bb      	strb	r3, [r7, #22]
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a82:	7dba      	ldrb	r2, [r7, #22]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3e8      	bcc.n	8001a5a <AD717X_Init+0xee>
	}
	*device = dev;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

	return ret;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a9a:	b004      	add	sp, #16
 8001a9c:	4770      	bx	lr
	...

08001aa0 <ad717x_set_clock>:

	return ret;
}

void ad717x_set_clock(ad717x_dev *dev, uint32_t clcck_sel)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	ad717x_st_reg *pReg = AD717X_GetReg(dev, AD717X_ADCMODE_REG);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fd85 	bl	80015bc <AD717X_GetReg>
 8001ab2:	60f8      	str	r0, [r7, #12]

	pReg->value |= AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	605a      	str	r2, [r3, #4]
	spi_write_reg.value = AD717X_ADCMODE_REG_CLKSEL(clcck_sel);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <ad717x_set_clock+0x48>)
 8001ad4:	6093      	str	r3, [r2, #8]
	AD717X_WriteRegister(dev, AD717X_ADCMODE_REG);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fe2f 	bl	800173c <AD717X_WriteRegister>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2001e658 	.word	0x2001e658

08001aec <ad717x_set_data_stat>:

void ad717x_set_data_stat(ad717x_dev *dev, bool stat)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
	ad717x_st_reg *reg_ptr;
//	ad717x_st_reg *datareg_ptr;
	/* Get interface mode register pointer */
	reg_ptr = AD717X_GetReg(dev, AD717X_IFMODE_REG);
 8001af8:	2102      	movs	r1, #2
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fd5e 	bl	80015bc <AD717X_GetReg>
 8001b00:	60f8      	str	r0, [r7, #12]
	/* Get data register pointer */
//	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
	if(stat)
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <ad717x_set_data_stat+0x2a>
		reg_ptr->value |= AD717X_IFMODE_REG_DATA_STAT;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	e005      	b.n	8001b22 <ad717x_set_data_stat+0x36>
	else
		reg_ptr->value &= ~(AD717X_IFMODE_REG_DATA_STAT);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
	AD717X_WriteRegister(dev, AD717X_IFMODE_REG);
 8001b22:	2102      	movs	r1, #2
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fe09 	bl	800173c <AD717X_WriteRegister>
	AD717X_ComputeDataregSize(dev);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fea2 	bl	8001874 <AD717X_ComputeDataregSize>

}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <adc_window>:
#include "ad717x.h"

void send_adc_data();

void adc_window()
{
 8001b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b3c:	b08a      	sub	sp, #40	@ 0x28
 8001b3e:	af00      	add	r7, sp, #0
	uint64_t pos = 0 , tq = 0;
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
	for(i = 0; i < window_buff_idx/2; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e020      	b.n	8001ba4 <adc_window+0x6c>
	{
		pos += pos_window[i];
 8001b62:	4a66      	ldr	r2, [pc, #408]	@ (8001cfc <adc_window+0x1c4>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4611      	mov	r1, r2
 8001b70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b74:	eb12 0800 	adds.w	r8, r2, r0
 8001b78:	eb43 0901 	adc.w	r9, r3, r1
 8001b7c:	e9c7 8908 	strd	r8, r9, [r7, #32]
		tq += tq_window[i];
 8001b80:	4a5f      	ldr	r2, [pc, #380]	@ (8001d00 <adc_window+0x1c8>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	461c      	mov	r4, r3
 8001b8c:	4615      	mov	r5, r2
 8001b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b92:	eb12 0a04 	adds.w	sl, r2, r4
 8001b96:	eb43 0b05 	adc.w	fp, r3, r5
 8001b9a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i = 0; i < window_buff_idx/2; i++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	4b57      	ldr	r3, [pc, #348]	@ (8001d04 <adc_window+0x1cc>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	dbd5      	blt.n	8001b62 <adc_window+0x2a>
	// if there is one data mismatch between pos and tq, add the latest data to window, but because in next window, the other one may be once more, I let it go for now ...
//	if(window_buff_idx % 2 == 1)
//	{
//		pos += pos_window[i];
//	}
	pos_time_buff[adc_buff_idx] = TIM.Instance->CNT;
 8001bb6:	4b54      	ldr	r3, [pc, #336]	@ (8001d08 <adc_window+0x1d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a54      	ldr	r2, [pc, #336]	@ (8001d0c <adc_window+0x1d4>)
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <adc_window+0x1d8>)
 8001bc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	pos_buff[adc_buff_idx] = pos / i; // copy mean of pos window to pos_buff
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	17da      	asrs	r2, r3, #31
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	60fa      	str	r2, [r7, #12]
 8001bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bda:	f7ff f923 	bl	8000e24 <__aeabi_uldivmod>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <adc_window+0x1d4>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4601      	mov	r1, r0
 8001bf0:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <adc_window+0x1dc>)
 8001bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	tq_buff[adc_buff_idx] = tq / i; // copy mean of tq window to tq_buff
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	17da      	asrs	r2, r3, #31
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c06:	f7ff f90d 	bl	8000e24 <__aeabi_uldivmod>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <adc_window+0x1d4>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <adc_window+0x1e0>)
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	adc_buff_idx++;
 8001c22:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <adc_window+0x1d4>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <adc_window+0x1d4>)
 8001c2e:	801a      	strh	r2, [r3, #0]
	window_buff_idx = 0;
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <adc_window+0x1cc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	801a      	strh	r2, [r3, #0]
	if(i > 0)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	dd3b      	ble.n	8001cb4 <adc_window+0x17c>
	{
		current_pos = ((float)pos / (1 << 23) - 1) * 25 * 12 / i;
 8001c3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c40:	f7ff f8aa 	bl	8000d98 <__aeabi_ul2f>
 8001c44:	ee06 0a90 	vmov	s13, r0
 8001c48:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001d1c <adc_window+0x1e4>
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c58:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001c64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <adc_window+0x1e8>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]
		current_tq = ((float)tq / (1 << 23) - 1) * 25 / i;
 8001c7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c80:	f7ff f88a 	bl	8000d98 <__aeabi_ul2f>
 8001c84:	ee06 0a90 	vmov	s13, r0
 8001c88:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001d1c <adc_window+0x1e4>
 8001c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c98:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001c9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <adc_window+0x1ec>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(adc_buff_idx >= ADC_BUFFER_SIZE)
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <adc_window+0x1d4>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b31      	cmp	r3, #49	@ 0x31
 8001cbc:	d919      	bls.n	8001cf2 <adc_window+0x1ba>
	{
		send_adc_data();
 8001cbe:	f000 f86d 	bl	8001d9c <send_adc_data>
		adc_buff_idx = 0;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <adc_window+0x1d4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]

		if(DAC_last_bulk)
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <adc_window+0x1f0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00f      	beq.n	8001cf2 <adc_window+0x1ba>
		{
			DAC_idx = 0;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <adc_window+0x1f4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
			DAC_EN = 0;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <adc_window+0x1f8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
			DAC_last_bulk = 0;
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <adc_window+0x1f0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
			delay_us(10000); // wait 10 ms
 8001ce4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001ce8:	f001 f8f8 	bl	8002edc <delay_us>
			send_string("{cmd,\r\nend_pattern,end}\r\n");
 8001cec:	4811      	ldr	r0, [pc, #68]	@ (8001d34 <adc_window+0x1fc>)
 8001cee:	f000 facb 	bl	8002288 <send_string>
		}
//		TIM.Instance->CNT = 0;
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfc:	20000f94 	.word	0x20000f94
 8001d00:	20000fbc 	.word	0x20000fbc
 8001d04:	20001176 	.word	0x20001176
 8001d08:	2000053c 	.word	0x2000053c
 8001d0c:	20001174 	.word	0x20001174
 8001d10:	20000e04 	.word	0x20000e04
 8001d14:	20000ecc 	.word	0x20000ecc
 8001d18:	200010ac 	.word	0x200010ac
 8001d1c:	4b000000 	.word	0x4b000000
 8001d20:	2001e668 	.word	0x2001e668
 8001d24:	2001e66c 	.word	0x2001e66c
 8001d28:	2001e645 	.word	0x2001e645
 8001d2c:	2001e642 	.word	0x2001e642
 8001d30:	2001e644 	.word	0x2001e644
 8001d34:	0800ab08 	.word	0x0800ab08

08001d38 <adc_to_buf>:

void adc_to_buf(uint32_t new_val)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

	if(adc_channel_offset == 0)
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <adc_to_buf+0x54>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10a      	bne.n	8001d5e <adc_to_buf+0x26>
	{
//		pos_time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
//		pos_buff[adc_buff_idx / 2] = new_val;
		pos_window[window_buff_idx / 2] = new_val;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <adc_to_buf+0x58>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4619      	mov	r1, r3
 8001d54:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <adc_to_buf+0x5c>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001d5c:	e009      	b.n	8001d72 <adc_to_buf+0x3a>
	}
	else
	{
//		tq_time_buff[adc_buff_idx / 2] = TIM.Instance->CNT;
//		tq_buff[adc_buff_idx / 2] = new_val;
		tq_window[window_buff_idx / 2] = new_val;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <adc_to_buf+0x58>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <adc_to_buf+0x60>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	window_buff_idx++;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <adc_to_buf+0x58>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <adc_to_buf+0x58>)
 8001d7e:	801a      	strh	r2, [r3, #0]
//	{
//		send_adc_data();
//		adc_buff_idx = 0;
////		TIM.Instance->CNT = 0;
//	}
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20001178 	.word	0x20001178
 8001d90:	20001176 	.word	0x20001176
 8001d94:	20000f94 	.word	0x20000f94
 8001d98:	20000fbc 	.word	0x20000fbc

08001d9c <send_adc_data>:

void send_adc_data()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	int array_length = sizeof(uint32_t) * ADC_BUFFER_SIZE;
 8001da2:	23c8      	movs	r3, #200	@ 0xc8
 8001da4:	607b      	str	r3, [r7, #4]

	sprintf((char*)tx_buffer, "{fdb,\r\n");
 8001da6:	4920      	ldr	r1, [pc, #128]	@ (8001e28 <send_adc_data+0x8c>)
 8001da8:	4820      	ldr	r0, [pc, #128]	@ (8001e2c <send_adc_data+0x90>)
 8001daa:	f006 fde1 	bl	8008970 <siprintf>
	memcpy(tx_buffer + 7, (uint8_t*) pos_time_buff, array_length);
 8001dae:	4820      	ldr	r0, [pc, #128]	@ (8001e30 <send_adc_data+0x94>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	491f      	ldr	r1, [pc, #124]	@ (8001e34 <send_adc_data+0x98>)
 8001db6:	f006 ff04 	bl	8008bc2 <memcpy>
	memcpy(tx_buffer + 7 + array_length, (uint8_t*) pos_buff, array_length);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <send_adc_data+0x90>)
 8001dc0:	4413      	add	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	491c      	ldr	r1, [pc, #112]	@ (8001e38 <send_adc_data+0x9c>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f006 fefb 	bl	8008bc2 <memcpy>
	memcpy(tx_buffer + 7 + 2 * array_length, (uint8_t*) tq_time_buff, array_length);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3307      	adds	r3, #7
 8001dd2:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <send_adc_data+0x90>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4918      	ldr	r1, [pc, #96]	@ (8001e3c <send_adc_data+0xa0>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f006 fef1 	bl	8008bc2 <memcpy>
	memcpy(tx_buffer + 7 + 3 * array_length, (uint8_t*) tq_buff, array_length);
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	3307      	adds	r3, #7
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <send_adc_data+0x90>)
 8001dec:	4413      	add	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4913      	ldr	r1, [pc, #76]	@ (8001e40 <send_adc_data+0xa4>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 fee5 	bl	8008bc2 <memcpy>
	sprintf((char*)tx_buffer+ 7 + 4 * array_length, ",end}\r\n");
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001e2c <send_adc_data+0x90>)
 8001e00:	4413      	add	r3, r2
 8001e02:	4910      	ldr	r1, [pc, #64]	@ (8001e44 <send_adc_data+0xa8>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 fdb3 	bl	8008970 <siprintf>

	HAL_UART_Transmit_DMA(PC_UART, tx_buffer, 4 * array_length + 14);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	330e      	adds	r3, #14
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	4904      	ldr	r1, [pc, #16]	@ (8001e2c <send_adc_data+0x90>)
 8001e1a:	480b      	ldr	r0, [pc, #44]	@ (8001e48 <send_adc_data+0xac>)
 8001e1c:	f004 fcf8 	bl	8006810 <HAL_UART_Transmit_DMA>

}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	0800ab24 	.word	0x0800ab24
 8001e2c:	20000ad4 	.word	0x20000ad4
 8001e30:	20000adb 	.word	0x20000adb
 8001e34:	20000e04 	.word	0x20000e04
 8001e38:	20000ecc 	.word	0x20000ecc
 8001e3c:	20000fe4 	.word	0x20000fe4
 8001e40:	200010ac 	.word	0x200010ac
 8001e44:	0800ab2c 	.word	0x0800ab2c
 8001e48:	200005cc 	.word	0x200005cc

08001e4c <adc_start>:
	}
	return receivedData;
}

void adc_start(int start)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	if(start)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <adc_start+0x2a>
	{
		adc_buff_idx = 0;
 8001e5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <adc_start+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	801a      	strh	r2, [r3, #0]
		TIM.Instance->CNT = 0;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <adc_start+0x5c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
		spi_status = SENDING;
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <adc_start+0x60>)
 8001e6a:	2206      	movs	r2, #6
 8001e6c:	701a      	strb	r2, [r3, #0]
		ADC_EN = 1;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <adc_start+0x64>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		spi_status = IDLE;
		adc_sm = ADC_IDLE;
		ADC_EN = 0;
	}

}
 8001e74:	e00f      	b.n	8001e96 <adc_start+0x4a>
		adc_buff_idx = 0;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <adc_start+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	801a      	strh	r2, [r3, #0]
		TIM.Instance->CNT = 0;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <adc_start+0x5c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24
		spi_status = IDLE;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <adc_start+0x60>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
		adc_sm = ADC_IDLE;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <adc_start+0x68>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
		ADC_EN = 0;
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <adc_start+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20001174 	.word	0x20001174
 8001ea8:	2000053c 	.word	0x2000053c
 8001eac:	2001e64c 	.word	0x2001e64c
 8001eb0:	2000117c 	.word	0x2000117c
 8001eb4:	2001e64d 	.word	0x2001e64d

08001eb8 <dac_read>:
#include "global.h"



uint32_t dac_read(uint8_t addr, int print)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b090      	sub	sp, #64	@ 0x40
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx[3] = {addr,0,0};
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t Rx[3] = {0};
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f94 <dac_read+0xdc>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	482c      	ldr	r0, [pc, #176]	@ (8001f98 <dac_read+0xe0>)
 8001ee8:	f002 fa9c 	bl	8004424 <HAL_GPIO_WritePin>
	delay_us(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f000 fff5 	bl	8002edc <delay_us>
	HAL_SPI_Transmit(DAC_SPI, Tx, 3, 100);
 8001ef2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001ef6:	2364      	movs	r3, #100	@ 0x64
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4828      	ldr	r0, [pc, #160]	@ (8001f9c <dac_read+0xe4>)
 8001efc:	f003 f985 	bl	800520a <HAL_SPI_Transmit>
	delay_us(1);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f000 ffeb 	bl	8002edc <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4823      	ldr	r0, [pc, #140]	@ (8001f98 <dac_read+0xe0>)
 8001f0c:	f002 fa8a 	bl	8004424 <HAL_GPIO_WritePin>
	delay_us(1);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f000 ffe3 	bl	8002edc <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2102      	movs	r1, #2
 8001f1a:	481f      	ldr	r0, [pc, #124]	@ (8001f98 <dac_read+0xe0>)
 8001f1c:	f002 fa82 	bl	8004424 <HAL_GPIO_WritePin>
	delay_us(1);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f000 ffdb 	bl	8002edc <delay_us>
	HAL_SPI_Receive(&hspi2, Rx, 3, 100);
 8001f26:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001f2a:	2364      	movs	r3, #100	@ 0x64
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	481b      	ldr	r0, [pc, #108]	@ (8001f9c <dac_read+0xe4>)
 8001f30:	f003 faaf 	bl	8005492 <HAL_SPI_Receive>
	delay_us(1);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f000 ffd1 	bl	8002edc <delay_us>
	HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4816      	ldr	r0, [pc, #88]	@ (8001f98 <dac_read+0xe0>)
 8001f40:	f002 fa70 	bl	8004424 <HAL_GPIO_WritePin>
	uint32_t reg_data = (Rx[0] << 16) | (Rx[1] << 8) | Rx[2];
 8001f44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001f56:	4313      	orrs	r3, r2
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
	if(print)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <dac_read+0xd0>
	{
		char hexString[35];  // Buffer to store "0x" + 4 hex digits + null terminator
		sprintf(hexString, "{inf,\r\ndac,0x%02x%02x%02x,end}\r\n", Rx[0], Rx[1], Rx[2]);  // Format as hex string with "0x" prefix
 8001f60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f64:	461a      	mov	r2, r3
 8001f66:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f70:	f107 0008 	add.w	r0, r7, #8
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	460b      	mov	r3, r1
 8001f78:	4909      	ldr	r1, [pc, #36]	@ (8001fa0 <dac_read+0xe8>)
 8001f7a:	f006 fcf9 	bl	8008970 <siprintf>
		send_string(hexString);
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f980 	bl	8002288 <send_string>
	}
	return reg_data;
 8001f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3738      	adds	r7, #56	@ 0x38
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	0800ab58 	.word	0x0800ab58
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	200004e4 	.word	0x200004e4
 8001fa0:	0800ab34 	.word	0x0800ab34

08001fa4 <dac_write>:

void dac_write(uint8_t addr, uint16_t value)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	460a      	mov	r2, r1
 8001fae:	71fb      	strb	r3, [r7, #7]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	80bb      	strh	r3, [r7, #4]
	uint8_t Tx[3] = {addr,(value & 0xFF00) >> 8, (value & 0x00FF) >> 0};
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	723b      	strb	r3, [r7, #8]
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	727b      	strb	r3, [r7, #9]
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	72bb      	strb	r3, [r7, #10]
	for(int i = 0; i < 1; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e019      	b.n	8002002 <dac_write+0x5e>
	{
		HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4810      	ldr	r0, [pc, #64]	@ (8002014 <dac_write+0x70>)
 8001fd4:	f002 fa26 	bl	8004424 <HAL_GPIO_WritePin>
		delay_us(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f000 ff7f 	bl	8002edc <delay_us>
		HAL_SPI_Transmit(DAC_SPI, Tx, 3, 100);
 8001fde:	f107 0108 	add.w	r1, r7, #8
 8001fe2:	2364      	movs	r3, #100	@ 0x64
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	480c      	ldr	r0, [pc, #48]	@ (8002018 <dac_write+0x74>)
 8001fe8:	f003 f90f 	bl	800520a <HAL_SPI_Transmit>
		delay_us(1);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f000 ff75 	bl	8002edc <delay_us>
		HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	4807      	ldr	r0, [pc, #28]	@ (8002014 <dac_write+0x70>)
 8001ff8:	f002 fa14 	bl	8004424 <HAL_GPIO_WritePin>
	for(int i = 0; i < 1; i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	dde2      	ble.n	8001fce <dac_write+0x2a>
	}
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40020400 	.word	0x40020400
 8002018:	200004e4 	.word	0x200004e4

0800201c <dac_update>:

void dac_update(float v)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t val = (uint16_t) (((v+10) / 20) * (1 << 16));
 8002026:	edd7 7a01 	vldr	s15, [r7, #4]
 800202a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800202e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002032:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002060 <dac_update+0x44>
 800203e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002046:	ee17 3a90 	vmov	r3, s15
 800204a:	81fb      	strh	r3, [r7, #14]
	dac_write(0x01, val);
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	4619      	mov	r1, r3
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff ffa7 	bl	8001fa4 <dac_write>
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	47800000 	.word	0x47800000

08002064 <dac_init>:

void dac_init(int num)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	//send full reset
	for(int i = 0; i < 3; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e006      	b.n	8002080 <dac_init+0x1c>
		dac_write(0x0f, 0x00);
 8002072:	2100      	movs	r1, #0
 8002074:	200f      	movs	r0, #15
 8002076:	f7ff ff95 	bl	8001fa4 <dac_write>
	for(int i = 0; i < 3; i++)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b02      	cmp	r3, #2
 8002084:	ddf5      	ble.n	8002072 <dac_init+0xe>
	for(int i = 0; i < 3; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	e006      	b.n	800209a <dac_init+0x36>
		dac_write(0x04, 0x08); // Set Control Register to mid scale and -+10V so V_out = 0
 800208c:	2108      	movs	r1, #8
 800208e:	2004      	movs	r0, #4
 8002090:	f7ff ff88 	bl	8001fa4 <dac_write>
	for(int i = 0; i < 3; i++)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b02      	cmp	r3, #2
 800209e:	ddf5      	ble.n	800208c <dac_init+0x28>
//		}
//
//	}


}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <new_pattern>:

void new_pattern(uint16_t length, uint8_t* pattern_ptr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	80fb      	strh	r3, [r7, #6]
	init_motor_pos = current_pos;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <new_pattern+0x84>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002134 <new_pattern+0x88>)
 80020be:	6013      	str	r3, [r2, #0]
	adc_start(0);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff fec3 	bl	8001e4c <adc_start>
	DAC_EN = 0;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <new_pattern+0x8c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
	DAC_idx = 0;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <new_pattern+0x90>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]
	DAC_length = length;
 80020d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002140 <new_pattern+0x94>)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	8013      	strh	r3, [r2, #0]
	memset(DAC_pattern, 0, DAC_PATTERN_SIZE);
 80020d8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80020dc:	2100      	movs	r1, #0
 80020de:	4819      	ldr	r0, [pc, #100]	@ (8002144 <new_pattern+0x98>)
 80020e0:	f006 fca9 	bl	8008a36 <memset>
	length = (length < DAC_BULK_SIZE) ? length : DAC_BULK_SIZE; // if length is more than BULK_SIZE, just copy the BULK
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2bfa      	cmp	r3, #250	@ 0xfa
 80020e8:	bf28      	it	cs
 80020ea:	23fa      	movcs	r3, #250	@ 0xfa
 80020ec:	80fb      	strh	r3, [r7, #6]
	memcpy(DAC_pattern, pattern_ptr, length * sizeof(float));
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	461a      	mov	r2, r3
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	4813      	ldr	r0, [pc, #76]	@ (8002144 <new_pattern+0x98>)
 80020f8:	f006 fd63 	bl	8008bc2 <memcpy>
	DAC_idx += length;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <new_pattern+0x90>)
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4413      	add	r3, r2
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <new_pattern+0x90>)
 8002108:	801a      	strh	r2, [r3, #0]

//	send_string("{dac,\r\n");
	char message[30];
	sprintf(message, "{dac,\r\n%d,end}\r\n", DAC_idx);
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <new_pattern+0x90>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	490c      	ldr	r1, [pc, #48]	@ (8002148 <new_pattern+0x9c>)
 8002116:	4618      	mov	r0, r3
 8002118:	f006 fc2a 	bl	8008970 <siprintf>
	send_string(message);
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f8b1 	bl	8002288 <send_string>
}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2001e668 	.word	0x2001e668
 8002134:	2001e670 	.word	0x2001e670
 8002138:	2001e644 	.word	0x2001e644
 800213c:	2001e642 	.word	0x2001e642
 8002140:	2001e640 	.word	0x2001e640
 8002144:	20001180 	.word	0x20001180
 8002148:	0800ab5c 	.word	0x0800ab5c

0800214c <bulk_pattern>:

void bulk_pattern(uint16_t length, uint8_t* pattern_ptr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	80fb      	strh	r3, [r7, #6]
	memcpy(DAC_pattern + DAC_idx, pattern_ptr, length * sizeof(float));
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <bulk_pattern+0x74>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <bulk_pattern+0x78>)
 8002160:	1898      	adds	r0, r3, r2
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	461a      	mov	r2, r3
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	f006 fd2a 	bl	8008bc2 <memcpy>
	DAC_idx += length;
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <bulk_pattern+0x74>)
 8002170:	881a      	ldrh	r2, [r3, #0]
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4413      	add	r3, r2
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <bulk_pattern+0x74>)
 800217a:	801a      	strh	r2, [r3, #0]

//	send_string("{dac,end}\r\n");
	char message[30];
	sprintf(message, "{dac,\r\n%d,end}\r\n", DAC_idx);
 800217c:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <bulk_pattern+0x74>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	4910      	ldr	r1, [pc, #64]	@ (80021c8 <bulk_pattern+0x7c>)
 8002188:	4618      	mov	r0, r3
 800218a:	f006 fbf1 	bl	8008970 <siprintf>
	send_string(message);
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f878 	bl	8002288 <send_string>
	if(DAC_idx >= DAC_length)
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <bulk_pattern+0x74>)
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <bulk_pattern+0x80>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d308      	bcc.n	80021b6 <bulk_pattern+0x6a>
	{
		DAC_idx = 0;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <bulk_pattern+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	801a      	strh	r2, [r3, #0]
		DAC_EN = 1;
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <bulk_pattern+0x84>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
		adc_start(1);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff fe4b 	bl	8001e4c <adc_start>
	}
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	@ 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2001e642 	.word	0x2001e642
 80021c4:	20001180 	.word	0x20001180
 80021c8:	0800ab5c 	.word	0x0800ab5c
 80021cc:	2001e640 	.word	0x2001e640
 80021d0:	2001e644 	.word	0x2001e644

080021d4 <check_pattern>:
// Check if pattern loads correctly -> To-Do
void check_pattern()
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <check_command>:
extern struct spi_write spi_write_reg;

extern ad717x_dev *pad717x_dev;
//extern enum SPI_STATUS spi_status;
extern int check_command(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0

	if(strchr((char*)uart_buffer, ',') != NULL)
 80021ea:	212c      	movs	r1, #44	@ 0x2c
 80021ec:	4821      	ldr	r0, [pc, #132]	@ (8002274 <check_command+0x90>)
 80021ee:	f006 fc2a 	bl	8008a46 <strchr>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <check_command+0x5a>
	{
		char *command;
		char *endptr = strchr((char*)uart_buffer, ',');
 80021f8:	212c      	movs	r1, #44	@ 0x2c
 80021fa:	481e      	ldr	r0, [pc, #120]	@ (8002274 <check_command+0x90>)
 80021fc:	f006 fc23 	bl	8008a46 <strchr>
 8002200:	60f8      	str	r0, [r7, #12]
		int length = endptr - (char*)uart_buffer;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <check_command+0x90>)
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	60bb      	str	r3, [r7, #8]
		command = (char*) malloc(length);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f005 fd5f 	bl	8007cd0 <malloc>
 8002212:	4603      	mov	r3, r0
 8002214:	607b      	str	r3, [r7, #4]
		strncpy(command, (char*) (uart_buffer+1), length);
 8002216:	4918      	ldr	r1, [pc, #96]	@ (8002278 <check_command+0x94>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	461a      	mov	r2, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f006 fc1f 	bl	8008a60 <strncpy>
		command[length-1] = '\0';
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3b01      	subs	r3, #1
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
		handle_command(command);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f858 	bl	80022e4 <handle_command>
		free(command);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f005 fd53 	bl	8007ce0 <free>
		return 1;
 800223a:	2301      	movs	r3, #1
 800223c:	e015      	b.n	800226a <check_command+0x86>
	}
	else if(strlen((char*) uart_buffer) > 200 || uart_timeout > 200){
 800223e:	480d      	ldr	r0, [pc, #52]	@ (8002274 <check_command+0x90>)
 8002240:	f7fe f846 	bl	80002d0 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	2bc8      	cmp	r3, #200	@ 0xc8
 8002248:	d803      	bhi.n	8002252 <check_command+0x6e>
 800224a:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <check_command+0x98>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002250:	d90a      	bls.n	8002268 <check_command+0x84>
		send_string("inf,\r\n");
 8002252:	480b      	ldr	r0, [pc, #44]	@ (8002280 <check_command+0x9c>)
 8002254:	f000 f818 	bl	8002288 <send_string>
		send_string(uart_buffer);
 8002258:	4806      	ldr	r0, [pc, #24]	@ (8002274 <check_command+0x90>)
 800225a:	f000 f815 	bl	8002288 <send_string>
		send_string(",end}\r\n");
 800225e:	4809      	ldr	r0, [pc, #36]	@ (8002284 <check_command+0xa0>)
 8002260:	f000 f812 	bl	8002288 <send_string>
		reset_uart();
 8002264:	f000 f824 	bl	80022b0 <reset_uart>
	}
	return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200006d4 	.word	0x200006d4
 8002278:	200006d5 	.word	0x200006d5
 800227c:	20000e02 	.word	0x20000e02
 8002280:	0800ab70 	.word	0x0800ab70
 8002284:	0800ab78 	.word	0x0800ab78

08002288 <send_string>:

extern void send_string(const char *msg)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(PC_UART, (uint8_t *)msg, strlen(msg), 100);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe f81d 	bl	80002d0 <strlen>
 8002296:	4603      	mov	r3, r0
 8002298:	b29a      	uxth	r2, r3
 800229a:	2364      	movs	r3, #100	@ 0x64
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4803      	ldr	r0, [pc, #12]	@ (80022ac <send_string+0x24>)
 80022a0:	f004 fa2a 	bl	80066f8 <HAL_UART_Transmit>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200005cc 	.word	0x200005cc

080022b0 <reset_uart>:

extern void reset_uart(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	strncpy((char*)uart_buffer, "", UART_BUFFER_SIZE);
 80022b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b8:	4907      	ldr	r1, [pc, #28]	@ (80022d8 <reset_uart+0x28>)
 80022ba:	4808      	ldr	r0, [pc, #32]	@ (80022dc <reset_uart+0x2c>)
 80022bc:	f006 fbd0 	bl	8008a60 <strncpy>
	HAL_UART_DMAStop(PC_UART);
 80022c0:	4807      	ldr	r0, [pc, #28]	@ (80022e0 <reset_uart+0x30>)
 80022c2:	f004 fb3a 	bl	800693a <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 80022c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ca:	4904      	ldr	r1, [pc, #16]	@ (80022dc <reset_uart+0x2c>)
 80022cc:	4804      	ldr	r0, [pc, #16]	@ (80022e0 <reset_uart+0x30>)
 80022ce:	f004 fb0f 	bl	80068f0 <HAL_UART_Receive_DMA>
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	0800ab80 	.word	0x0800ab80
 80022dc:	200006d4 	.word	0x200006d4
 80022e0:	200005cc 	.word	0x200005cc

080022e4 <handle_command>:


extern void handle_command(char* txt_in)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	uint8_t addr = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t value = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	char *command = txt_in;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
	char *addr_str = (char*)uart_buffer + strlen(command) + 2;
 80022fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022fc:	f7fd ffe8 	bl	80002d0 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	3302      	adds	r3, #2
 8002304:	4a97      	ldr	r2, [pc, #604]	@ (8002564 <handle_command+0x280>)
 8002306:	4413      	add	r3, r2
 8002308:	623b      	str	r3, [r7, #32]

	char *endptr = strchr((char*)addr_str, ',');
 800230a:	212c      	movs	r1, #44	@ 0x2c
 800230c:	6a38      	ldr	r0, [r7, #32]
 800230e:	f006 fb9a 	bl	8008a46 <strchr>
 8002312:	61f8      	str	r0, [r7, #28]
	int length = endptr - (char*)addr_str;
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	61bb      	str	r3, [r7, #24]
	char *value_str = (char*)addr_str + length + 1;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	3301      	adds	r3, #1
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
	if(strchr((char*)uart_buffer, '}') != NULL)
 8002326:	217d      	movs	r1, #125	@ 0x7d
 8002328:	488e      	ldr	r0, [pc, #568]	@ (8002564 <handle_command+0x280>)
 800232a:	f006 fb8c 	bl	8008a46 <strchr>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <handle_command+0x7c>
	{
		addr = (uint8_t)strtoul(addr_str, NULL, 16);
 8002334:	2210      	movs	r2, #16
 8002336:	2100      	movs	r1, #0
 8002338:	6a38      	ldr	r0, [r7, #32]
 800233a:	f005 fdf5 	bl	8007f28 <strtoul>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		value = (uint32_t)strtoul(value_str, NULL, 16);
 8002344:	2210      	movs	r2, #16
 8002346:	2100      	movs	r1, #0
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f005 fded 	bl	8007f28 <strtoul>
 800234e:	62b8      	str	r0, [r7, #40]	@ 0x28

		reset_uart();
		return;
	}
	else return;
	if(!strcmp(command, "get_id")){
 8002350:	4985      	ldr	r1, [pc, #532]	@ (8002568 <handle_command+0x284>)
 8002352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002354:	f7fd ff5c 	bl	8000210 <strcmp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d14a      	bne.n	80023f4 <handle_command+0x110>
 800235e:	e045      	b.n	80023ec <handle_command+0x108>
	else if(strstr(command, "pattern") != NULL) // if command contains "pattern", it may have '\0' and string search doens't work. so check it separately
 8002360:	4982      	ldr	r1, [pc, #520]	@ (800256c <handle_command+0x288>)
 8002362:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002364:	f006 fb8f 	bl	8008a86 <strstr>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80f3 	beq.w	8002556 <handle_command+0x272>
		uint16_t bulk = (uint16_t)strtoul(addr_str, NULL, 10);
 8002370:	220a      	movs	r2, #10
 8002372:	2100      	movs	r1, #0
 8002374:	6a38      	ldr	r0, [r7, #32]
 8002376:	f005 fdd7 	bl	8007f28 <strtoul>
 800237a:	4603      	mov	r3, r0
 800237c:	827b      	strh	r3, [r7, #18]
		endptr = (bulk < 250) ? value_str + bulk * sizeof(float) : value_str + DAC_BULK_SIZE * sizeof(float);
 800237e:	8a7b      	ldrh	r3, [r7, #18]
 8002380:	2bf9      	cmp	r3, #249	@ 0xf9
 8002382:	d804      	bhi.n	800238e <handle_command+0xaa>
 8002384:	8a7b      	ldrh	r3, [r7, #18]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4413      	add	r3, r2
 800238c:	e002      	b.n	8002394 <handle_command+0xb0>
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002394:	61fb      	str	r3, [r7, #28]
		if(*(endptr) != '}') return;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b7d      	cmp	r3, #125	@ 0x7d
 800239c:	f040 80dd 	bne.w	800255a <handle_command+0x276>
		if(!strcmp(command, "pattern_init"))
 80023a0:	4973      	ldr	r1, [pc, #460]	@ (8002570 <handle_command+0x28c>)
 80023a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023a4:	f7fd ff34 	bl	8000210 <strcmp>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <handle_command+0xd6>
			new_pattern(bulk, (uint8_t*)value_str);
 80023ae:	8a7b      	ldrh	r3, [r7, #18]
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe7a 	bl	80020ac <new_pattern>
 80023b8:	e015      	b.n	80023e6 <handle_command+0x102>
		else if(!strcmp(command, "pattern_bulk"))
 80023ba:	496e      	ldr	r1, [pc, #440]	@ (8002574 <handle_command+0x290>)
 80023bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023be:	f7fd ff27 	bl	8000210 <strcmp>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <handle_command+0xf0>
			bulk_pattern(bulk, (uint8_t*)value_str);
 80023c8:	8a7b      	ldrh	r3, [r7, #18]
 80023ca:	6979      	ldr	r1, [r7, #20]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff febd 	bl	800214c <bulk_pattern>
 80023d2:	e008      	b.n	80023e6 <handle_command+0x102>
		else if(!strcmp(command, "pattern_end"))
 80023d4:	4968      	ldr	r1, [pc, #416]	@ (8002578 <handle_command+0x294>)
 80023d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023d8:	f7fd ff1a 	bl	8000210 <strcmp>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <handle_command+0x102>
			check_pattern();
 80023e2:	f7ff fef7 	bl	80021d4 <check_pattern>
		reset_uart();
 80023e6:	f7ff ff63 	bl	80022b0 <reset_uart>
		return;
 80023ea:	e0b7      	b.n	800255c <handle_command+0x278>
		spi_status = GETID;
 80023ec:	4b63      	ldr	r3, [pc, #396]	@ (800257c <handle_command+0x298>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e0ad      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "getreg"))
 80023f4:	4962      	ldr	r1, [pc, #392]	@ (8002580 <handle_command+0x29c>)
 80023f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023f8:	f7fd ff0a 	bl	8000210 <strcmp>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <handle_command+0x130>
	{
		AD717X_ReadRegister(pad717x_dev, addr);
 8002402:	4b60      	ldr	r3, [pc, #384]	@ (8002584 <handle_command+0x2a0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f90f 	bl	8001630 <AD717X_ReadRegister>
 8002412:	e09d      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "writereg"))
 8002414:	495c      	ldr	r1, [pc, #368]	@ (8002588 <handle_command+0x2a4>)
 8002416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002418:	f7fd fefa 	bl	8000210 <strcmp>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d117      	bne.n	8002452 <handle_command+0x16e>
	{
		ad717x_st_reg *pReg = AD717X_GetReg(pad717x_dev, addr);
 8002422:	4b58      	ldr	r3, [pc, #352]	@ (8002584 <handle_command+0x2a0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f8c5 	bl	80015bc <AD717X_GetReg>
 8002432:	60f8      	str	r0, [r7, #12]
		pReg->value = value;
 8002434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	605a      	str	r2, [r3, #4]
		spi_write_reg.value = value;
 800243a:	4a54      	ldr	r2, [pc, #336]	@ (800258c <handle_command+0x2a8>)
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	6093      	str	r3, [r2, #8]
		AD717X_WriteRegister(pad717x_dev, addr);
 8002440:	4b50      	ldr	r3, [pc, #320]	@ (8002584 <handle_command+0x2a0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f976 	bl	800173c <AD717X_WriteRegister>
 8002450:	e07e      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "send"))
 8002452:	494f      	ldr	r1, [pc, #316]	@ (8002590 <handle_command+0x2ac>)
 8002454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002456:	f7fd fedb 	bl	8000210 <strcmp>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <handle_command+0x1a0>
	{
		if(spi_status != SENDING && adc_sm == ADC_IDLE)
 8002460:	4b46      	ldr	r3, [pc, #280]	@ (800257c <handle_command+0x298>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b06      	cmp	r3, #6
 8002468:	d008      	beq.n	800247c <handle_command+0x198>
 800246a:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <handle_command+0x2b0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <handle_command+0x198>
			adc_start(true);
 8002474:	2001      	movs	r0, #1
 8002476:	f7ff fce9 	bl	8001e4c <adc_start>
 800247a:	e069      	b.n	8002550 <handle_command+0x26c>
		else
			adc_start(false);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff fce5 	bl	8001e4c <adc_start>
 8002482:	e065      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "start"))
 8002484:	4944      	ldr	r1, [pc, #272]	@ (8002598 <handle_command+0x2b4>)
 8002486:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002488:	f7fd fec2 	bl	8000210 <strcmp>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <handle_command+0x1c6>
		if(addr) adc_start(true); else adc_start(false);
 8002492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <handle_command+0x1be>
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff fcd6 	bl	8001e4c <adc_start>
 80024a0:	e056      	b.n	8002550 <handle_command+0x26c>
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff fcd2 	bl	8001e4c <adc_start>
 80024a8:	e052      	b.n	8002550 <handle_command+0x26c>
	else if(!strcmp(command, "adc_mode"))
 80024aa:	493c      	ldr	r1, [pc, #240]	@ (800259c <handle_command+0x2b8>)
 80024ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ae:	f7fd feaf 	bl	8000210 <strcmp>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <handle_command+0x1e6>
	{
		ad717x_set_adc_mode(pad717x_dev, addr);
 80024b8:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <handle_command+0x2a0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fe6c 	bl	80011a0 <ad717x_set_adc_mode>
 80024c8:	e042      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "dac_read"))
 80024ca:	4935      	ldr	r1, [pc, #212]	@ (80025a0 <handle_command+0x2bc>)
 80024cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ce:	f7fd fe9f 	bl	8000210 <strcmp>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <handle_command+0x202>
	{
		dac_read(addr, 1);
 80024d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024dc:	2101      	movs	r1, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fcea 	bl	8001eb8 <dac_read>
 80024e4:	e034      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "dac_write"))
 80024e6:	492f      	ldr	r1, [pc, #188]	@ (80025a4 <handle_command+0x2c0>)
 80024e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ea:	f7fd fe91 	bl	8000210 <strcmp>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d108      	bne.n	8002506 <handle_command+0x222>
	{
		dac_write(addr, (uint16_t)value);
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fd50 	bl	8001fa4 <dac_write>
 8002504:	e024      	b.n	8002550 <handle_command+0x26c>
	}
	else if(!strcmp(command, "dac_update"))
 8002506:	4928      	ldr	r1, [pc, #160]	@ (80025a8 <handle_command+0x2c4>)
 8002508:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800250a:	f7fd fe81 	bl	8000210 <strcmp>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d115      	bne.n	8002540 <handle_command+0x25c>
	{
		value = (uint16_t)strtoul(value_str, NULL, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f005 fd05 	bl	8007f28 <strtoul>
 800251e:	4603      	mov	r3, r0
 8002520:	b29b      	uxth	r3, r3
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
		dac_update((float)value/1000);
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80025ac <handle_command+0x2c8>
 8002532:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002536:	eeb0 0a47 	vmov.f32	s0, s14
 800253a:	f7ff fd6f 	bl	800201c <dac_update>
 800253e:	e007      	b.n	8002550 <handle_command+0x26c>
	}

	else{
		send_string("{Unknown msg,end}\r\n");
 8002540:	481b      	ldr	r0, [pc, #108]	@ (80025b0 <handle_command+0x2cc>)
 8002542:	f7ff fea1 	bl	8002288 <send_string>
		send_string(command);
 8002546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002548:	f7ff fe9e 	bl	8002288 <send_string>
		reset_uart();
 800254c:	f7ff feb0 	bl	80022b0 <reset_uart>
	}
	reset_uart();
 8002550:	f7ff feae 	bl	80022b0 <reset_uart>
 8002554:	e002      	b.n	800255c <handle_command+0x278>
	else return;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <handle_command+0x278>
		if(*(endptr) != '}') return;
 800255a:	bf00      	nop

}
 800255c:	3730      	adds	r7, #48	@ 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200006d4 	.word	0x200006d4
 8002568:	0800abb8 	.word	0x0800abb8
 800256c:	0800ab84 	.word	0x0800ab84
 8002570:	0800ab8c 	.word	0x0800ab8c
 8002574:	0800ab9c 	.word	0x0800ab9c
 8002578:	0800abac 	.word	0x0800abac
 800257c:	2001e64c 	.word	0x2001e64c
 8002580:	0800abc0 	.word	0x0800abc0
 8002584:	2001e648 	.word	0x2001e648
 8002588:	0800abc8 	.word	0x0800abc8
 800258c:	2001e658 	.word	0x2001e658
 8002590:	0800abd4 	.word	0x0800abd4
 8002594:	2001e64d 	.word	0x2001e64d
 8002598:	0800abdc 	.word	0x0800abdc
 800259c:	0800abe4 	.word	0x0800abe4
 80025a0:	0800abf0 	.word	0x0800abf0
 80025a4:	0800abfc 	.word	0x0800abfc
 80025a8:	0800ac08 	.word	0x0800ac08
 80025ac:	447a0000 	.word	0x447a0000
 80025b0:	0800ac14 	.word	0x0800ac14

080025b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ba:	f000 fffb 	bl	80035b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025be:	f000 f8c3 	bl	8002748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c2:	f000 fa8b 	bl	8002adc <MX_GPIO_Init>
  MX_DMA_Init();
 80025c6:	f000 fa61 	bl	8002a8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025ca:	f000 fa35 	bl	8002a38 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80025ce:	f000 f92d 	bl	800282c <MX_SPI1_Init>
  MX_TIM2_Init();
 80025d2:	f000 f997 	bl	8002904 <MX_TIM2_Init>
  MX_SPI2_Init();
 80025d6:	f000 f95f 	bl	8002898 <MX_SPI2_Init>
  MX_TIM3_Init();
 80025da:	f000 f9df 	bl	800299c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ad717x_app_initialize();
 80025de:	f000 fb01 	bl	8002be4 <ad717x_app_initialize>


  ad717x_configure_device_odr(pad717x_dev, 0, sps_10417);
 80025e2:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <main+0x17c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2207      	movs	r2, #7
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f986 	bl	80018fc <ad717x_configure_device_odr>
  HAL_Delay(10);
 80025f0:	200a      	movs	r0, #10
 80025f2:	f001 f84b 	bl	800368c <HAL_Delay>
  ad717x_set_adc_mode(pad717x_dev, CONTINUOUS);
 80025f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002730 <main+0x17c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fdcf 	bl	80011a0 <ad717x_set_adc_mode>

  ad717x_set_clock(pad717x_dev, 3);
 8002602:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <main+0x17c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2103      	movs	r1, #3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fa49 	bl	8001aa0 <ad717x_set_clock>
  union ad717x_analog_inputs AIN_0;
  AIN_0.analog_input_pairs = VIN0_VIN1;
 800260e:	2301      	movs	r3, #1
 8002610:	813b      	strh	r3, [r7, #8]
  HAL_Delay(10);
 8002612:	200a      	movs	r0, #10
 8002614:	f001 f83a 	bl	800368c <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 0, AIN_0);
 8002618:	4b45      	ldr	r3, [pc, #276]	@ (8002730 <main+0x17c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	893a      	ldrh	r2, [r7, #8]
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fdf5 	bl	8001210 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8002626:	200a      	movs	r0, #10
 8002628:	f001 f830 	bl	800368c <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 0, 0);
 800262c:	4b40      	ldr	r3, [pc, #256]	@ (8002730 <main+0x17c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fe77 	bl	8001328 <ad717x_assign_setup>
  HAL_Delay(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f001 f826 	bl	800368c <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 0, 1);
 8002640:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <main+0x17c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fd63 	bl	8001114 <ad717x_set_channel_status>



  union ad717x_analog_inputs AIN_2;
  AIN_2.analog_input_pairs = VIN2_VIN3;
 800264e:	2343      	movs	r3, #67	@ 0x43
 8002650:	80bb      	strh	r3, [r7, #4]
  HAL_Delay(10);
 8002652:	200a      	movs	r0, #10
 8002654:	f001 f81a 	bl	800368c <HAL_Delay>
  ad717x_connect_analog_input(pad717x_dev, 2, AIN_2);
 8002658:	4b35      	ldr	r3, [pc, #212]	@ (8002730 <main+0x17c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	88ba      	ldrh	r2, [r7, #4]
 800265e:	2102      	movs	r1, #2
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fdd5 	bl	8001210 <ad717x_connect_analog_input>
  HAL_Delay(10);
 8002666:	200a      	movs	r0, #10
 8002668:	f001 f810 	bl	800368c <HAL_Delay>
  ad717x_set_channel_status(pad717x_dev, 2, 1);
 800266c:	4b30      	ldr	r3, [pc, #192]	@ (8002730 <main+0x17c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fd4d 	bl	8001114 <ad717x_set_channel_status>
  HAL_Delay(10);
 800267a:	200a      	movs	r0, #10
 800267c:	f001 f806 	bl	800368c <HAL_Delay>
  ad717x_assign_setup(pad717x_dev, 2, 0);
 8002680:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <main+0x17c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	2102      	movs	r1, #2
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fe4d 	bl	8001328 <ad717x_assign_setup>


  HAL_Delay(10);
 800268e:	200a      	movs	r0, #10
 8002690:	f000 fffc 	bl	800368c <HAL_Delay>
  ad717x_set_polarity(pad717x_dev, 1, 0);
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <main+0x17c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fe87 	bl	80013b0 <ad717x_set_polarity>
  HAL_Delay(10);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f000 fff2 	bl	800368c <HAL_Delay>
  ad717x_set_reference_source(pad717x_dev, EXTERNAL_REF, 0);
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <main+0x17c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fec1 	bl	8001438 <ad717x_set_reference_source>
  HAL_Delay(10);
 80026b6:	200a      	movs	r0, #10
 80026b8:	f000 ffe8 	bl	800368c <HAL_Delay>

  HAL_Delay(10);
 80026bc:	200a      	movs	r0, #10
 80026be:	f000 ffe5 	bl	800368c <HAL_Delay>
  ad717x_enable_input_buffer(pad717x_dev, 1, 0, 0);
 80026c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <main+0x17c>)
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2200      	movs	r2, #0
 80026ca:	2101      	movs	r1, #1
 80026cc:	f7fe ff16 	bl	80014fc <ad717x_enable_input_buffer>
  HAL_Delay(10);
 80026d0:	200a      	movs	r0, #10
 80026d2:	f000 ffdb 	bl	800368c <HAL_Delay>

  ad717x_set_data_stat(pad717x_dev, true);
 80026d6:	4b16      	ldr	r3, [pc, #88]	@ (8002730 <main+0x17c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fa05 	bl	8001aec <ad717x_set_data_stat>



  // Initial Message for PC:
  char *init_msg = "{inf,\r\nWelcome to Pourostad Project,end}\r\n";
 80026e2:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <main+0x180>)
 80026e4:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(PC_UART, (uint8_t*)init_msg, strlen(init_msg), 10);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7fd fdf2 	bl	80002d0 <strlen>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	230a      	movs	r3, #10
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	4810      	ldr	r0, [pc, #64]	@ (8002738 <main+0x184>)
 80026f6:	f003 ffff 	bl	80066f8 <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(PC_UART, uart_buffer, UART_BUFFER_SIZE);
 80026fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fe:	490f      	ldr	r1, [pc, #60]	@ (800273c <main+0x188>)
 8002700:	480d      	ldr	r0, [pc, #52]	@ (8002738 <main+0x184>)
 8002702:	f004 f8f5 	bl	80068f0 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim2.Instance->CNT = 0;
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <main+0x18c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 800270e:	480c      	ldr	r0, [pc, #48]	@ (8002740 <main+0x18c>)
 8002710:	f003 fb14 	bl	8005d3c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002714:	480b      	ldr	r0, [pc, #44]	@ (8002744 <main+0x190>)
 8002716:	f003 fb79 	bl	8005e0c <HAL_TIM_Base_Start_IT>
  dac_init(0); // init DAC for the first time
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fca2 	bl	8002064 <dac_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uart_buffer[0]!='\0')
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <main+0x188>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0fb      	beq.n	8002720 <main+0x16c>
	  {
		  check_command();
 8002728:	f7ff fd5c 	bl	80021e4 <check_command>
	  if(uart_buffer[0]!='\0')
 800272c:	e7f8      	b.n	8002720 <main+0x16c>
 800272e:	bf00      	nop
 8002730:	2001e648 	.word	0x2001e648
 8002734:	0800ac28 	.word	0x0800ac28
 8002738:	200005cc 	.word	0x200005cc
 800273c:	200006d4 	.word	0x200006d4
 8002740:	2000053c 	.word	0x2000053c
 8002744:	20000584 	.word	0x20000584

08002748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b094      	sub	sp, #80	@ 0x50
 800274c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2234      	movs	r2, #52	@ 0x34
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f006 f96d 	bl	8008a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	4b2c      	ldr	r3, [pc, #176]	@ (8002824 <SystemClock_Config+0xdc>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	4a2b      	ldr	r2, [pc, #172]	@ (8002824 <SystemClock_Config+0xdc>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6413      	str	r3, [r2, #64]	@ 0x40
 800277c:	4b29      	ldr	r3, [pc, #164]	@ (8002824 <SystemClock_Config+0xdc>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	2300      	movs	r3, #0
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <SystemClock_Config+0xe0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a25      	ldr	r2, [pc, #148]	@ (8002828 <SystemClock_Config+0xe0>)
 8002792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <SystemClock_Config+0xe0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ae:	2302      	movs	r3, #2
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027b8:	2304      	movs	r3, #4
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027bc:	23b4      	movs	r3, #180	@ 0xb4
 80027be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c0:	2302      	movs	r3, #2
 80027c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80027c4:	2306      	movs	r3, #6
 80027c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027c8:	2302      	movs	r3, #2
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 f9f3 	bl	8004bbc <HAL_RCC_OscConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027dc:	f000 fbe2 	bl	8002fa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027e0:	f001 fe52 	bl	8004488 <HAL_PWREx_EnableOverDrive>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80027ea:	f000 fbdb 	bl	8002fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ee:	230f      	movs	r3, #15
 80027f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f2:	2302      	movs	r3, #2
 80027f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002804:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	2105      	movs	r1, #5
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fe8b 	bl	8004528 <HAL_RCC_ClockConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002818:	f000 fbc4 	bl	8002fa4 <Error_Handler>
  }
}
 800281c:	bf00      	nop
 800281e:	3750      	adds	r7, #80	@ 0x50
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000

0800282c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002830:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002832:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <MX_SPI1_Init+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002836:	4b16      	ldr	r3, [pc, #88]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800283c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_SPI1_Init+0x64>)
 800284c:	2202      	movs	r2, #2
 800284e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002852:	2201      	movs	r2, #1
 8002854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800285c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800285e:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002860:	2210      	movs	r2, #16
 8002862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_SPI1_Init+0x64>)
 800286c:	2200      	movs	r2, #0
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_SPI1_Init+0x64>)
 8002878:	220a      	movs	r2, #10
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800287c:	4804      	ldr	r0, [pc, #16]	@ (8002890 <MX_SPI1_Init+0x64>)
 800287e:	f002 fc3b 	bl	80050f8 <HAL_SPI_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002888:	f000 fb8c 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	2000048c 	.word	0x2000048c
 8002894:	40013000 	.word	0x40013000

08002898 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800289c:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <MX_SPI2_Init+0x64>)
 800289e:	4a18      	ldr	r2, [pc, #96]	@ (8002900 <MX_SPI2_Init+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028a2:	4b16      	ldr	r3, [pc, #88]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b0:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028be:	2201      	movs	r2, #1
 80028c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028ca:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028cc:	2218      	movs	r2, #24
 80028ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d6:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028dc:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028e4:	220a      	movs	r2, #10
 80028e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028e8:	4804      	ldr	r0, [pc, #16]	@ (80028fc <MX_SPI2_Init+0x64>)
 80028ea:	f002 fc05 	bl	80050f8 <HAL_SPI_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028f4:	f000 fb56 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200004e4 	.word	0x200004e4
 8002900:	40003800 	.word	0x40003800

08002904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <MX_TIM2_Init+0x94>)
 8002922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <MX_TIM2_Init+0x94>)
 800292a:	2259      	movs	r2, #89	@ 0x59
 800292c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <MX_TIM2_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002934:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <MX_TIM2_Init+0x94>)
 8002936:	f04f 32ff 	mov.w	r2, #4294967295
 800293a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293c:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <MX_TIM2_Init+0x94>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <MX_TIM2_Init+0x94>)
 8002944:	2280      	movs	r2, #128	@ 0x80
 8002946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002948:	4813      	ldr	r0, [pc, #76]	@ (8002998 <MX_TIM2_Init+0x94>)
 800294a:	f003 f9a7 	bl	8005c9c <HAL_TIM_Base_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002954:	f000 fb26 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800295c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	@ (8002998 <MX_TIM2_Init+0x94>)
 8002966:	f003 fbb1 	bl	80060cc <HAL_TIM_ConfigClockSource>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002970:	f000 fb18 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	@ (8002998 <MX_TIM2_Init+0x94>)
 8002982:	f003 fdd9 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800298c:	f000 fb0a 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	2000053c 	.word	0x2000053c

0800299c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	463b      	mov	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <MX_TIM3_Init+0x98>)
 80029bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80029be:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029c0:	2259      	movs	r2, #89	@ 0x59
 80029c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80029ca:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d2:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029de:	4814      	ldr	r0, [pc, #80]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029e0:	f003 f95c 	bl	8005c9c <HAL_TIM_Base_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80029ea:	f000 fadb 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	4619      	mov	r1, r3
 80029fa:	480d      	ldr	r0, [pc, #52]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029fc:	f003 fb66 	bl	80060cc <HAL_TIM_ConfigClockSource>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a06:	f000 facd 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a12:	463b      	mov	r3, r7
 8002a14:	4619      	mov	r1, r3
 8002a16:	4806      	ldr	r0, [pc, #24]	@ (8002a30 <MX_TIM3_Init+0x94>)
 8002a18:	f003 fd8e 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a22:	f000 fabf 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000584 	.word	0x20000584
 8002a34:	40000400 	.word	0x40000400

08002a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a3c:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a3e:	4a11      	ldr	r2, [pc, #68]	@ (8002a84 <MX_USART2_UART_Init+0x4c>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a44:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <MX_USART2_UART_Init+0x50>)
 8002a46:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a60:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a6c:	4804      	ldr	r0, [pc, #16]	@ (8002a80 <MX_USART2_UART_Init+0x48>)
 8002a6e:	f003 fdf3 	bl	8006658 <HAL_UART_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002a78:	f000 fa94 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200005cc 	.word	0x200005cc
 8002a84:	40004400 	.word	0x40004400
 8002a88:	00119400 	.word	0x00119400

08002a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <MX_DMA_Init+0x4c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad8 <MX_DMA_Init+0x4c>)
 8002a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <MX_DMA_Init+0x4c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2010      	movs	r0, #16
 8002ab4:	f000 fee9 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ab8:	2010      	movs	r0, #16
 8002aba:	f000 ff02 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 2);
 8002abe:	2202      	movs	r2, #2
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2011      	movs	r0, #17
 8002ac4:	f000 fee1 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ac8:	2011      	movs	r0, #17
 8002aca:	f000 fefa 	bl	80038c2 <HAL_NVIC_EnableIRQ>

}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a37      	ldr	r2, [pc, #220]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a30      	ldr	r2, [pc, #192]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	4a29      	ldr	r2, [pc, #164]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3a:	4b27      	ldr	r3, [pc, #156]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b23      	ldr	r3, [pc, #140]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <MX_GPIO_Init+0xfc>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	2102      	movs	r1, #2
 8002b66:	481d      	ldr	r0, [pc, #116]	@ (8002bdc <MX_GPIO_Init+0x100>)
 8002b68:	f001 fc5c 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2140      	movs	r1, #64	@ 0x40
 8002b70:	481a      	ldr	r0, [pc, #104]	@ (8002bdc <MX_GPIO_Init+0x100>)
 8002b72:	f001 fc57 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin DRY_Pin */
  GPIO_InitStruct.Pin = B1_Pin|DRY_Pin;
 8002b76:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8002b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4814      	ldr	r0, [pc, #80]	@ (8002be0 <MX_GPIO_Init+0x104>)
 8002b8e:	f001 fab5 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin|SPI1_CS_Pin;
 8002b92:	2342      	movs	r3, #66	@ 0x42
 8002b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480c      	ldr	r0, [pc, #48]	@ (8002bdc <MX_GPIO_Init+0x100>)
 8002baa:	f001 faa7 	bl	80040fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2017      	movs	r0, #23
 8002bb4:	f000 fe69 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bb8:	2017      	movs	r0, #23
 8002bba:	f000 fe82 	bl	80038c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2028      	movs	r0, #40	@ 0x28
 8002bc4:	f000 fe61 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bc8:	2028      	movs	r0, #40	@ 0x28
 8002bca:	f000 fe7a 	bl	80038c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	@ 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40020800 	.word	0x40020800

08002be4 <ad717x_app_initialize>:

/* USER CODE BEGIN 4 */
int32_t ad717x_app_initialize(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0dc      	sub	sp, #368	@ 0x170
 8002be8:	af2c      	add	r7, sp, #176	@ 0xb0
	// Used to create the ad717x device
	ad717x_init_param ad717x_init = {
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	22bc      	movs	r2, #188	@ 0xbc
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f005 ff20 	bl	8008a36 <memset>
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <ad717x_app_initialize+0x50>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <ad717x_app_initialize+0x54>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	733b      	strb	r3, [r7, #12]
 8002c02:	2303      	movs	r3, #3
 8002c04:	737b      	strb	r3, [r7, #13]
 8002c06:	2301      	movs	r3, #1
 8002c08:	73bb      	strb	r3, [r7, #14]
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	2308      	movs	r3, #8
 8002c10:	743b      	strb	r3, [r7, #16]
		8,						// Setup Number

	};

	// Initialze the device
	return (AD717X_Init(&pad717x_dev, ad717x_init));
 8002c12:	4668      	mov	r0, sp
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	22b0      	movs	r2, #176	@ 0xb0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f005 ffd1 	bl	8008bc2 <memcpy>
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c24:	4805      	ldr	r0, [pc, #20]	@ (8002c3c <ad717x_app_initialize+0x58>)
 8002c26:	f7fe fea1 	bl	800196c <AD717X_Init>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	37c0      	adds	r7, #192	@ 0xc0
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000294 	.word	0x20000294
 8002c38:	20000298 	.word	0x20000298
 8002c3c:	2001e648 	.word	0x2001e648

08002c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b0a1      	sub	sp, #132	@ 0x84
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == DRY_Pin) {
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b80      	cmp	r3, #128	@ 0x80
 8002c4e:	f040 8129 	bne.w	8002ea4 <HAL_GPIO_EXTI_Callback+0x264>
	  adc_channel_offset++;
 8002c52:	4b97      	ldr	r3, [pc, #604]	@ (8002eb0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a95      	ldr	r2, [pc, #596]	@ (8002eb0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002c5a:	6013      	str	r3, [r2, #0]
	  if(spi_status == READING)
 8002c5c:	4b95      	ldr	r3, [pc, #596]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	f040 8091 	bne.w	8002d8a <HAL_GPIO_EXTI_Callback+0x14a>
	  {
//		  uint8_t Tx = 0x40;
		  uint8_t Rx[8] = {0};
 8002c68:	2300      	movs	r3, #0
 8002c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
//		  Rx[0] = 0x40;
//		  HAL_SPI_TransmitReceive(SPI, &Tx, Rx, 2, 10);
//		  HAL_SPI_Receive(SPI, Rx, 1, 100);
//		  adc_channel_offset = Rx[0] & 0x0f;

			ad717x_st_reg *pReg = (ad717x_st_reg*)spi_read_reg.pReg;
 8002c70:	4b91      	ldr	r3, [pc, #580]	@ (8002eb8 <HAL_GPIO_EXTI_Callback+0x278>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	667b      	str	r3, [r7, #100]	@ 0x64
//			uint8_t Rx[8] = {0};
			HAL_SPI_Transmit(SPI, &spi_read_reg.Tx, 1, 100);
 8002c76:	2364      	movs	r3, #100	@ 0x64
 8002c78:	2201      	movs	r2, #1
 8002c7a:	498f      	ldr	r1, [pc, #572]	@ (8002eb8 <HAL_GPIO_EXTI_Callback+0x278>)
 8002c7c:	488f      	ldr	r0, [pc, #572]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002c7e:	f002 fac4 	bl	800520a <HAL_SPI_Transmit>

			HAL_SPI_Receive(SPI, Rx, pReg->size, 100);
 8002c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002c8c:	2364      	movs	r3, #100	@ 0x64
 8002c8e:	488b      	ldr	r0, [pc, #556]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002c90:	f002 fbff 	bl	8005492 <HAL_SPI_Receive>


			pReg->value = 0;
 8002c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c96:	2200      	movs	r2, #0
 8002c98:	605a      	str	r2, [r3, #4]
			int data_size = pReg->size;
 8002c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	677b      	str	r3, [r7, #116]	@ 0x74
			if(pReg->addr == 0x04)
 8002ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d101      	bne.n	8002cac <HAL_GPIO_EXTI_Callback+0x6c>
				data_size = 3;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	677b      	str	r3, [r7, #116]	@ 0x74
			for(int i = 0; i < data_size; i++) {
 8002cac:	2300      	movs	r3, #0
 8002cae:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb0:	e011      	b.n	8002cd6 <HAL_GPIO_EXTI_Callback+0x96>
				pReg->value <<= 8;
 8002cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cba:	605a      	str	r2, [r3, #4]
				pReg->value += Rx[i];
 8002cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002cc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002cc6:	440a      	add	r2, r1
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	441a      	add	r2, r3
 8002ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cce:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < data_size; i++) {
 8002cd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dbe9      	blt.n	8002cb2 <HAL_GPIO_EXTI_Callback+0x72>
			}
		  	spi_status = IDLE;
 8002cde:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
		  	if(pReg->addr == 0x04) //if it is read data
 8002ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d13f      	bne.n	8002d6c <HAL_GPIO_EXTI_Callback+0x12c>
		  	{

		  		if(adc_sm == ADC_IDLE)
 8002cec:	4b74      	ldr	r3, [pc, #464]	@ (8002ec0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d129      	bne.n	8002d4a <HAL_GPIO_EXTI_Callback+0x10a>
		  		{
		  			float data = (((float) pReg->value / (1<<23))-1) * 25;
 8002cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d02:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002ec4 <HAL_GPIO_EXTI_Callback+0x284>
 8002d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d12:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
					char hexString[24];
					sprintf(hexString, "{inf,\r\n%u %.4f,end}", Rx[3], data);
 8002d1e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d22:	461c      	mov	r4, r3
 8002d24:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002d26:	f7fd fc3f 	bl	80005a8 <__aeabi_f2d>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002d32:	e9cd 2300 	strd	r2, r3, [sp]
 8002d36:	4622      	mov	r2, r4
 8002d38:	4963      	ldr	r1, [pc, #396]	@ (8002ec8 <HAL_GPIO_EXTI_Callback+0x288>)
 8002d3a:	f005 fe19 	bl	8008970 <siprintf>
					send_string(hexString);
 8002d3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff faa0 	bl	8002288 <send_string>
		  spi_status = SENDING;
	  }
  } else {
      __NOP();
  }
}
 8002d48:	e0ad      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
		  			adc_channel_offset = Rx[3];
 8002d4a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b57      	ldr	r3, [pc, #348]	@ (8002eb0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002d52:	601a      	str	r2, [r3, #0]
		  			adc_to_buf(pReg->value);
 8002d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe ffed 	bl	8001d38 <adc_to_buf>
		  			adc_sm = ADC_IDLE;
 8002d5e:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
		  			spi_status = SENDING;
 8002d64:	4b53      	ldr	r3, [pc, #332]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002d66:	2206      	movs	r2, #6
 8002d68:	701a      	strb	r2, [r3, #0]
}
 8002d6a:	e09c      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
				sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", (unsigned int)pReg->value);  // Format as hex string with "0x" prefix
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d76:	4955      	ldr	r1, [pc, #340]	@ (8002ecc <HAL_GPIO_EXTI_Callback+0x28c>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 fdf9 	bl	8008970 <siprintf>
				send_string(hexString);
 8002d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fa80 	bl	8002288 <send_string>
}
 8002d88:	e08d      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == WRITING)
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d11c      	bne.n	8002dce <HAL_GPIO_EXTI_Callback+0x18e>
		  ad717x_st_reg *pReg = (ad717x_st_reg*)spi_write_reg.pReg;
 8002d94:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
		  HAL_SPI_Transmit(SPI, spi_write_reg.Tx, pReg->size + 1, 100);
 8002d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	2364      	movs	r3, #100	@ 0x64
 8002da6:	494a      	ldr	r1, [pc, #296]	@ (8002ed0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002da8:	4844      	ldr	r0, [pc, #272]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002daa:	f002 fa2e 	bl	800520a <HAL_SPI_Transmit>
		  send_string("{inf,\r\nwrite done,end}\r\n");
 8002dae:	4849      	ldr	r0, [pc, #292]	@ (8002ed4 <HAL_GPIO_EXTI_Callback+0x294>)
 8002db0:	f7ff fa6a 	bl	8002288 <send_string>
		  spi_status = IDLE;
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, pReg->addr);
 8002dba:	4b47      	ldr	r3, [pc, #284]	@ (8002ed8 <HAL_GPIO_EXTI_Callback+0x298>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fe fc32 	bl	8001630 <AD717X_ReadRegister>
}
 8002dcc:	e06b      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == TRIGGER)
 8002dce:	4b39      	ldr	r3, [pc, #228]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d103      	bne.n	8002de0 <HAL_GPIO_EXTI_Callback+0x1a0>
		spi_status = READING;
 8002dd8:	4b36      	ldr	r3, [pc, #216]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002dda:	2202      	movs	r2, #2
 8002ddc:	701a      	strb	r2, [r3, #0]
}
 8002dde:	e062      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
	  else if (spi_status == GETID)
 8002de0:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d12e      	bne.n	8002e48 <HAL_GPIO_EXTI_Callback+0x208>
		uint8_t Tx = 0x47;
 8002dea:	2347      	movs	r3, #71	@ 0x47
 8002dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		uint8_t Rx[2] = {0};
 8002df0:	2300      	movs	r3, #0
 8002df2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 8002df4:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 8002df8:	230a      	movs	r3, #10
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	482f      	ldr	r0, [pc, #188]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002dfe:	f002 fa04 	bl	800520a <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, Rx, 2, 100);
 8002e02:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002e06:	2364      	movs	r3, #100	@ 0x64
 8002e08:	2202      	movs	r2, #2
 8002e0a:	482c      	ldr	r0, [pc, #176]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002e0c:	f002 fb41 	bl	8005492 <HAL_SPI_Receive>
		uint16_t receivedData = (Rx[0] << 8) | Rx[1];
 8002e10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	b21a      	sxth	r2, r3
 8002e18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sprintf(hexString, "{inf,\r\n0x%04x,end}\r\n", receivedData);  // Format as hex string with "0x" prefix
 8002e26:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	4927      	ldr	r1, [pc, #156]	@ (8002ecc <HAL_GPIO_EXTI_Callback+0x28c>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fd9d 	bl	8008970 <siprintf>
		send_string(hexString);
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fa24 	bl	8002288 <send_string>
		spi_status = IDLE;
 8002e40:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
}
 8002e46:	e02e      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == SENDING)
 8002e48:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d109      	bne.n	8002e66 <HAL_GPIO_EXTI_Callback+0x226>
		  adc_sm = ADC_READING;
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
		  AD717X_ReadRegister(pad717x_dev, 4);
 8002e58:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <HAL_GPIO_EXTI_Callback+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fbe6 	bl	8001630 <AD717X_ReadRegister>
}
 8002e64:	e01f      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
	  else if(spi_status == CHANNEL_OFFSET)
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d11a      	bne.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
		  uint8_t Tx = 0x40;
 8002e70:	2340      	movs	r3, #64	@ 0x40
 8002e72:	72fb      	strb	r3, [r7, #11]
		  uint8_t Rx[2] = {0};
 8002e74:	2300      	movs	r3, #0
 8002e76:	813b      	strh	r3, [r7, #8]
		  HAL_SPI_Transmit(SPI, &Tx, 1, 10);
 8002e78:	f107 010b 	add.w	r1, r7, #11
 8002e7c:	230a      	movs	r3, #10
 8002e7e:	2201      	movs	r2, #1
 8002e80:	480e      	ldr	r0, [pc, #56]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002e82:	f002 f9c2 	bl	800520a <HAL_SPI_Transmit>
		  HAL_SPI_Receive(SPI, Rx, 2, 100);
 8002e86:	f107 0108 	add.w	r1, r7, #8
 8002e8a:	2364      	movs	r3, #100	@ 0x64
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	480b      	ldr	r0, [pc, #44]	@ (8002ebc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002e90:	f002 faff 	bl	8005492 <HAL_SPI_Receive>
		  adc_channel_offset = Rx[1];
 8002e94:	7a7b      	ldrb	r3, [r7, #9]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002e9a:	601a      	str	r2, [r3, #0]
		  spi_status = SENDING;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002e9e:	2206      	movs	r2, #6
 8002ea0:	701a      	strb	r2, [r3, #0]
}
 8002ea2:	e000      	b.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x266>
      __NOP();
 8002ea4:	bf00      	nop
}
 8002ea6:	bf00      	nop
 8002ea8:	377c      	adds	r7, #124	@ 0x7c
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20001178 	.word	0x20001178
 8002eb4:	2001e64c 	.word	0x2001e64c
 8002eb8:	2001e650 	.word	0x2001e650
 8002ebc:	2000048c 	.word	0x2000048c
 8002ec0:	2001e64d 	.word	0x2001e64d
 8002ec4:	4b000000 	.word	0x4b000000
 8002ec8:	0800ac54 	.word	0x0800ac54
 8002ecc:	0800ac68 	.word	0x0800ac68
 8002ed0:	2001e658 	.word	0x2001e658
 8002ed4:	0800ac80 	.word	0x0800ac80
 8002ed8:	2001e648 	.word	0x2001e648

08002edc <delay_us>:

void delay_us(uint32_t us)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	uint32_t t_start = htim2.Instance->CNT;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <delay_us+0x30>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	60fb      	str	r3, [r7, #12]
	while(htim2.Instance->CNT - t_start < us);
 8002eec:	bf00      	nop
 8002eee:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <delay_us+0x30>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d8f7      	bhi.n	8002eee <delay_us+0x12>
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	2000053c 	.word	0x2000053c

08002f10 <HAL_UART_TxCpltCallback>:
//		pReg->value += Rx[i];
//	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d124      	bne.n	8002f80 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(ADC_EN)
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_PeriodElapsedCallback+0x20>
			adc_window();
 8002f40:	f7fe fdfa 	bl	8001b38 <adc_window>
		if(DAC_EN)
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			if(DAC_idx >= DAC_length)
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d303      	bcc.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0x3e>
			{
				DAC_last_bulk = 1; // It should be in state machine and in next data sending, we send end pattern, also;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]

				return;
 8002f60:	e00e      	b.n	8002f80 <HAL_TIM_PeriodElapsedCallback+0x5c>
			}
			dac_update(DAC_pattern[DAC_idx++]);
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	b291      	uxth	r1, r2
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f6c:	8011      	strh	r1, [r2, #0]
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7c:	f7ff f84e 	bl	800201c <dac_update>
		}
//		else
//			dac_update(init_motor_pos);
	}
}
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	2000117c 	.word	0x2000117c
 8002f90:	2001e644 	.word	0x2001e644
 8002f94:	2001e642 	.word	0x2001e642
 8002f98:	2001e640 	.word	0x2001e640
 8002f9c:	2001e645 	.word	0x2001e645
 8002fa0:	20001180 	.word	0x20001180

08002fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa8:	b672      	cpsid	i
}
 8002faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <Error_Handler+0x8>

08002fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <HAL_MspInit+0x4c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <HAL_MspInit+0x4c>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <HAL_MspInit+0x4c>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <HAL_MspInit+0x4c>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	4a08      	ldr	r2, [pc, #32]	@ (8002ffc <HAL_MspInit+0x4c>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_MspInit+0x4c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fee:	2007      	movs	r0, #7
 8002ff0:	f000 fc40 	bl	8003874 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08c      	sub	sp, #48	@ 0x30
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a32      	ldr	r2, [pc, #200]	@ (80030e8 <HAL_SPI_MspInit+0xe8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12c      	bne.n	800307c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a30      	ldr	r2, [pc, #192]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 800302c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a29      	ldr	r2, [pc, #164]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800305a:	23e0      	movs	r3, #224	@ 0xe0
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800306a:	2305      	movs	r3, #5
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	481e      	ldr	r0, [pc, #120]	@ (80030f0 <HAL_SPI_MspInit+0xf0>)
 8003076:	f001 f841 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800307a:	e031      	b.n	80030e0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1c      	ldr	r2, [pc, #112]	@ (80030f4 <HAL_SPI_MspInit+0xf4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d12c      	bne.n	80030e0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003094:	6413      	str	r3, [r2, #64]	@ 0x40
 8003096:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a10      	ldr	r2, [pc, #64]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <HAL_SPI_MspInit+0xec>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030d0:	2305      	movs	r3, #5
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4807      	ldr	r0, [pc, #28]	@ (80030f8 <HAL_SPI_MspInit+0xf8>)
 80030dc:	f001 f80e 	bl	80040fc <HAL_GPIO_Init>
}
 80030e0:	bf00      	nop
 80030e2:	3730      	adds	r7, #48	@ 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40013000 	.word	0x40013000
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40003800 	.word	0x40003800
 80030f8:	40020400 	.word	0x40020400

080030fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310c:	d10e      	bne.n	800312c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <HAL_TIM_Base_MspInit+0x70>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	4a15      	ldr	r2, [pc, #84]	@ (800316c <HAL_TIM_Base_MspInit+0x70>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6413      	str	r3, [r2, #64]	@ 0x40
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_TIM_Base_MspInit+0x70>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800312a:	e01a      	b.n	8003162 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	@ (8003170 <HAL_TIM_Base_MspInit+0x74>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d115      	bne.n	8003162 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_TIM_Base_MspInit+0x70>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	4a0b      	ldr	r2, [pc, #44]	@ (800316c <HAL_TIM_Base_MspInit+0x70>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6413      	str	r3, [r2, #64]	@ 0x40
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_TIM_Base_MspInit+0x70>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	201d      	movs	r0, #29
 8003158:	f000 fb97 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800315c:	201d      	movs	r0, #29
 800315e:	f000 fbb0 	bl	80038c2 <HAL_NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	40000400 	.word	0x40000400

08003174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a4c      	ldr	r2, [pc, #304]	@ (80032c4 <HAL_UART_MspInit+0x150>)
 8003192:	4293      	cmp	r3, r2
 8003194:	f040 8092 	bne.w	80032bc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_UART_MspInit+0x154>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	4a49      	ldr	r2, [pc, #292]	@ (80032c8 <HAL_UART_MspInit+0x154>)
 80031a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a8:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_UART_MspInit+0x154>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	4b43      	ldr	r3, [pc, #268]	@ (80032c8 <HAL_UART_MspInit+0x154>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	4a42      	ldr	r2, [pc, #264]	@ (80032c8 <HAL_UART_MspInit+0x154>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c4:	4b40      	ldr	r3, [pc, #256]	@ (80032c8 <HAL_UART_MspInit+0x154>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031d0:	230c      	movs	r3, #12
 80031d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	2302      	movs	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031dc:	2303      	movs	r3, #3
 80031de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031e0:	2307      	movs	r3, #7
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4619      	mov	r1, r3
 80031ea:	4838      	ldr	r0, [pc, #224]	@ (80032cc <HAL_UART_MspInit+0x158>)
 80031ec:	f000 ff86 	bl	80040fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80031f0:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 80031f2:	4a38      	ldr	r2, [pc, #224]	@ (80032d4 <HAL_UART_MspInit+0x160>)
 80031f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80031f6:	4b36      	ldr	r3, [pc, #216]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 80031f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031fe:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003204:	4b32      	ldr	r3, [pc, #200]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003206:	2200      	movs	r2, #0
 8003208:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 800320c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003210:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003218:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 800321a:	2200      	movs	r2, #0
 800321c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800321e:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003220:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003224:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003226:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003228:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800322c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800322e:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003230:	2200      	movs	r2, #0
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003234:	4826      	ldr	r0, [pc, #152]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003236:	f000 fb5f 	bl	80038f8 <HAL_DMA_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003240:	f7ff feb0 	bl	8002fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a22      	ldr	r2, [pc, #136]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c
 800324a:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <HAL_UART_MspInit+0x15c>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003250:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003252:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <HAL_UART_MspInit+0x168>)
 8003254:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003256:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003258:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800325c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800325e:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003260:	2240      	movs	r2, #64	@ 0x40
 8003262:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003264:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 800326c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003270:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003280:	2200      	movs	r2, #0
 8003282:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003284:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003286:	2200      	movs	r2, #0
 8003288:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 800328c:	2200      	movs	r2, #0
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003290:	4811      	ldr	r0, [pc, #68]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 8003292:	f000 fb31 	bl	80038f8 <HAL_DMA_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800329c:	f7ff fe82 	bl	8002fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0d      	ldr	r2, [pc, #52]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80032a6:	4a0c      	ldr	r2, [pc, #48]	@ (80032d8 <HAL_UART_MspInit+0x164>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 80032ac:	2202      	movs	r2, #2
 80032ae:	2100      	movs	r1, #0
 80032b0:	2026      	movs	r0, #38	@ 0x26
 80032b2:	f000 faea 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032b6:	2026      	movs	r0, #38	@ 0x26
 80032b8:	f000 fb03 	bl	80038c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80032bc:	bf00      	nop
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	20000614 	.word	0x20000614
 80032d4:	40026088 	.word	0x40026088
 80032d8:	20000674 	.word	0x20000674
 80032dc:	400260a0 	.word	0x400260a0

080032e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <NMI_Handler+0x4>

080032e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <HardFault_Handler+0x4>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <MemManage_Handler+0x4>

080032f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <BusFault_Handler+0x4>

08003300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <UsageFault_Handler+0x4>

08003308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003336:	f000 f989 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003344:	4802      	ldr	r0, [pc, #8]	@ (8003350 <DMA1_Stream5_IRQHandler+0x10>)
 8003346:	f000 fc6f 	bl	8003c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000614 	.word	0x20000614

08003354 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003358:	4802      	ldr	r0, [pc, #8]	@ (8003364 <DMA1_Stream6_IRQHandler+0x10>)
 800335a:	f000 fc65 	bl	8003c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000674 	.word	0x20000674

08003368 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRY_Pin);
 800336c:	2080      	movs	r0, #128	@ 0x80
 800336e:	f001 f873 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800337c:	4802      	ldr	r0, [pc, #8]	@ (8003388 <TIM3_IRQHandler+0x10>)
 800337e:	f002 fdb5 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000584 	.word	0x20000584

0800338c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003390:	4802      	ldr	r0, [pc, #8]	@ (800339c <USART2_IRQHandler+0x10>)
 8003392:	f003 fb51 	bl	8006a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200005cc 	.word	0x200005cc

080033a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80033a8:	f001 f856 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return 1;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_kill>:

int _kill(int pid, int sig)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033ca:	f005 fbcd 	bl	8008b68 <__errno>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2216      	movs	r2, #22
 80033d2:	601a      	str	r2, [r3, #0]
  return -1;
 80033d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_exit>:

void _exit (int status)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffe7 	bl	80033c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033f2:	bf00      	nop
 80033f4:	e7fd      	b.n	80033f2 <_exit+0x12>

080033f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e00a      	b.n	800341e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003408:	f3af 8000 	nop.w
 800340c:	4601      	mov	r1, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	60ba      	str	r2, [r7, #8]
 8003414:	b2ca      	uxtb	r2, r1
 8003416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	dbf0      	blt.n	8003408 <_read+0x12>
  }

  return len;
 8003426:	687b      	ldr	r3, [r7, #4]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e009      	b.n	8003456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	60ba      	str	r2, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	dbf1      	blt.n	8003442 <_write+0x12>
  }
  return len;
 800345e:	687b      	ldr	r3, [r7, #4]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_close>:

int _close(int file)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003490:	605a      	str	r2, [r3, #4]
  return 0;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <_isatty>:

int _isatty(int file)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034a8:	2301      	movs	r3, #1
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <_sbrk+0x5c>)
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <_sbrk+0x60>)
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <_sbrk+0x64>)
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <_sbrk+0x68>)
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034f2:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d207      	bcs.n	8003510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003500:	f005 fb32 	bl	8008b68 <__errno>
 8003504:	4603      	mov	r3, r0
 8003506:	220c      	movs	r2, #12
 8003508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	e009      	b.n	8003524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <_sbrk+0x64>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <_sbrk+0x64>)
 8003520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20020000 	.word	0x20020000
 8003530:	00000400 	.word	0x00000400
 8003534:	2001e674 	.word	0x2001e674
 8003538:	2001e7c8 	.word	0x2001e7c8

0800353c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003540:	4b06      	ldr	r3, [pc, #24]	@ (800355c <SystemInit+0x20>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	4a05      	ldr	r2, [pc, #20]	@ (800355c <SystemInit+0x20>)
 8003548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800354c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003564:	480d      	ldr	r0, [pc, #52]	@ (800359c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003566:	490e      	ldr	r1, [pc, #56]	@ (80035a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003568:	4a0e      	ldr	r2, [pc, #56]	@ (80035a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357a:	4a0b      	ldr	r2, [pc, #44]	@ (80035a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800357c:	4c0b      	ldr	r4, [pc, #44]	@ (80035ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800358a:	f7ff ffd7 	bl	800353c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800358e:	f005 faf1 	bl	8008b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003592:	f7ff f80f 	bl	80025b4 <main>
  bx  lr    
 8003596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800359c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a0:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 80035a4:	0800b068 	.word	0x0800b068
  ldr r2, =_sbss
 80035a8:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80035ac:	2001e7c8 	.word	0x2001e7c8

080035b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <ADC_IRQHandler>
	...

080035b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_Init+0x34>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <HAL_Init+0x34>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <HAL_Init+0x34>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a07      	ldr	r2, [pc, #28]	@ (80035e8 <HAL_Init+0x34>)
 80035ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ce:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 f94f 	bl	8003874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f000 f808 	bl	80035ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035dc:	f7ff fce8 	bl	8002fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_InitTick+0x54>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <HAL_InitTick+0x58>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f967 	bl	80038de <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00e      	b.n	8003638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d80a      	bhi.n	8003636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f000 f92f 	bl	800388a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4a06      	ldr	r2, [pc, #24]	@ (8003648 <HAL_InitTick+0x5c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	2000029c 	.word	0x2000029c
 8003644:	200002a4 	.word	0x200002a4
 8003648:	200002a0 	.word	0x200002a0

0800364c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_IncTick+0x20>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_IncTick+0x24>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4413      	add	r3, r2
 800365c:	4a04      	ldr	r2, [pc, #16]	@ (8003670 <HAL_IncTick+0x24>)
 800365e:	6013      	str	r3, [r2, #0]
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200002a4 	.word	0x200002a4
 8003670:	2001e678 	.word	0x2001e678

08003674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <HAL_GetTick+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	2001e678 	.word	0x2001e678

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff ffee 	bl	8003674 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036b2:	bf00      	nop
 80036b4:	f7ff ffde 	bl	8003674 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200002a4 	.word	0x200002a4

080036d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4907      	ldr	r1, [pc, #28]	@ (8003770 <__NVIC_EnableIRQ+0x38>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	db0a      	blt.n	800379e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	490c      	ldr	r1, [pc, #48]	@ (80037c0 <__NVIC_SetPriority+0x4c>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	440b      	add	r3, r1
 8003798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800379c:	e00a      	b.n	80037b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4908      	ldr	r1, [pc, #32]	@ (80037c4 <__NVIC_SetPriority+0x50>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3b04      	subs	r3, #4
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	440b      	add	r3, r1
 80037b2:	761a      	strb	r2, [r3, #24]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	@ 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f1c3 0307 	rsb	r3, r3, #7
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf28      	it	cs
 80037e6:	2304      	movcs	r3, #4
 80037e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d902      	bls.n	80037f8 <NVIC_EncodePriority+0x30>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3b03      	subs	r3, #3
 80037f6:	e000      	b.n	80037fa <NVIC_EncodePriority+0x32>
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	401a      	ands	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003810:	f04f 31ff 	mov.w	r1, #4294967295
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	43d9      	mvns	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	4313      	orrs	r3, r2
         );
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	@ 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003840:	d301      	bcc.n	8003846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003842:	2301      	movs	r3, #1
 8003844:	e00f      	b.n	8003866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <SysTick_Config+0x40>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384e:	210f      	movs	r1, #15
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	f7ff ff8e 	bl	8003774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <SysTick_Config+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <SysTick_Config+0x40>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff29 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	4603      	mov	r3, r0
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800389c:	f7ff ff3e 	bl	800371c <__NVIC_GetPriorityGrouping>
 80038a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	6978      	ldr	r0, [r7, #20]
 80038a8:	f7ff ff8e 	bl	80037c8 <NVIC_EncodePriority>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff5d 	bl	8003774 <__NVIC_SetPriority>
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff31 	bl	8003738 <__NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffa2 	bl	8003830 <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003904:	f7ff feb6 	bl	8003674 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e099      	b.n	8003a48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003934:	e00f      	b.n	8003956 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003936:	f7ff fe9d 	bl	8003674 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b05      	cmp	r3, #5
 8003942:	d908      	bls.n	8003956 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e078      	b.n	8003a48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e8      	bne.n	8003936 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4b38      	ldr	r3, [pc, #224]	@ (8003a50 <HAL_DMA_Init+0x158>)
 8003970:	4013      	ands	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003982:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d107      	bne.n	80039c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	4313      	orrs	r3, r2
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0307 	bic.w	r3, r3, #7
 80039d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d117      	bne.n	8003a1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fb01 	bl	8004004 <DMA_CheckFifoParam>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2240      	movs	r2, #64	@ 0x40
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a16:	2301      	movs	r3, #1
 8003a18:	e016      	b.n	8003a48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fab8 	bl	8003f98 <DMA_CalcBaseAndBitshift>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	223f      	movs	r2, #63	@ 0x3f
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	f010803f 	.word	0xf010803f

08003a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_DMA_Start_IT+0x26>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e040      	b.n	8003afc <HAL_DMA_Start_IT+0xa8>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d12f      	bne.n	8003aee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fa4a 	bl	8003f3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	223f      	movs	r2, #63	@ 0x3f
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0216 	orr.w	r2, r2, #22
 8003ac2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e005      	b.n	8003afa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
 8003af8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b12:	f7ff fdaf 	bl	8003674 <HAL_GetTick>
 8003b16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d008      	beq.n	8003b36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e052      	b.n	8003bdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0216 	bic.w	r2, r2, #22
 8003b44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <HAL_DMA_Abort+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0208 	bic.w	r2, r2, #8
 8003b74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b86:	e013      	b.n	8003bb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b88:	f7ff fd74 	bl	8003674 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d90c      	bls.n	8003bb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e015      	b.n	8003bdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e4      	bne.n	8003b88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	223f      	movs	r2, #63	@ 0x3f
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2280      	movs	r2, #128	@ 0x80
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00c      	b.n	8003c1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2205      	movs	r2, #5
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c34:	4b8e      	ldr	r3, [pc, #568]	@ (8003e70 <HAL_DMA_IRQHandler+0x248>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a8e      	ldr	r2, [pc, #568]	@ (8003e74 <HAL_DMA_IRQHandler+0x24c>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c52:	2208      	movs	r2, #8
 8003c54:	409a      	lsls	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01a      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0204 	bic.w	r2, r2, #4
 8003c7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c80:	2208      	movs	r2, #8
 8003c82:	409a      	lsls	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	2204      	movs	r2, #4
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cec:	2204      	movs	r2, #4
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	f043 0204 	orr.w	r2, r3, #4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	2210      	movs	r2, #16
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d043      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03c      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	2210      	movs	r2, #16
 8003d24:	409a      	lsls	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d108      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d024      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
 8003d56:	e01f      	b.n	8003d98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01b      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
 8003d68:	e016      	b.n	8003d98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0208 	bic.w	r2, r2, #8
 8003d86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 808f 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8087 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b05      	cmp	r3, #5
 8003dd0:	d136      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0216 	bic.w	r2, r2, #22
 8003de0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <HAL_DMA_IRQHandler+0x1da>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0208 	bic.w	r2, r2, #8
 8003e10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	223f      	movs	r2, #63	@ 0x3f
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d07e      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
        }
        return;
 8003e3e:	e079      	b.n	8003f34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01d      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10d      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d031      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
 8003e6c:	e02c      	b.n	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
 8003e6e:	bf00      	nop
 8003e70:	2000029c 	.word	0x2000029c
 8003e74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d023      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
 8003e88:	e01e      	b.n	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10f      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0210 	bic.w	r2, r2, #16
 8003ea6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d032      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d307      	bcc.n	8003f10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f2      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x2cc>
 8003f0e:	e000      	b.n	8003f12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f34:	bf00      	nop
    }
  }
}
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b40      	cmp	r3, #64	@ 0x40
 8003f68:	d108      	bne.n	8003f7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f7a:	e007      	b.n	8003f8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	3b10      	subs	r3, #16
 8003fa8:	4a14      	ldr	r2, [pc, #80]	@ (8003ffc <DMA_CalcBaseAndBitshift+0x64>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fb2:	4a13      	ldr	r2, [pc, #76]	@ (8004000 <DMA_CalcBaseAndBitshift+0x68>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d909      	bls.n	8003fda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	1d1a      	adds	r2, r3, #4
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fd8:	e007      	b.n	8003fea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	aaaaaaab 	.word	0xaaaaaaab
 8004000:	0800acdc 	.word	0x0800acdc

08004004 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11f      	bne.n	800405e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d856      	bhi.n	80040d2 <DMA_CheckFifoParam+0xce>
 8004024:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <DMA_CheckFifoParam+0x28>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	0800403d 	.word	0x0800403d
 8004030:	0800404f 	.word	0x0800404f
 8004034:	0800403d 	.word	0x0800403d
 8004038:	080040d3 	.word	0x080040d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d046      	beq.n	80040d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800404c:	e043      	b.n	80040d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004056:	d140      	bne.n	80040da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800405c:	e03d      	b.n	80040da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004066:	d121      	bne.n	80040ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d837      	bhi.n	80040de <DMA_CheckFifoParam+0xda>
 800406e:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <DMA_CheckFifoParam+0x70>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004085 	.word	0x08004085
 8004078:	0800408b 	.word	0x0800408b
 800407c:	08004085 	.word	0x08004085
 8004080:	0800409d 	.word	0x0800409d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
      break;
 8004088:	e030      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d025      	beq.n	80040e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409a:	e022      	b.n	80040e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a4:	d11f      	bne.n	80040e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040aa:	e01c      	b.n	80040e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d903      	bls.n	80040ba <DMA_CheckFifoParam+0xb6>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d003      	beq.n	80040c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040b8:	e018      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      break;
 80040be:	e015      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e00b      	b.n	80040ea <DMA_CheckFifoParam+0xe6>
      break;
 80040d2:	bf00      	nop
 80040d4:	e00a      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      break;
 80040d6:	bf00      	nop
 80040d8:	e008      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      break;
 80040da:	bf00      	nop
 80040dc:	e006      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      break;
 80040de:	bf00      	nop
 80040e0:	e004      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e002      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      break;   
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
    }
  } 
  
  return status; 
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop

080040fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	e165      	b.n	80043e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004118:	2201      	movs	r2, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4013      	ands	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	429a      	cmp	r2, r3
 8004132:	f040 8154 	bne.w	80043de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d005      	beq.n	800414e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800414a:	2b02      	cmp	r3, #2
 800414c:	d130      	bne.n	80041b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	2203      	movs	r2, #3
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004184:	2201      	movs	r2, #1
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 0201 	and.w	r2, r3, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d017      	beq.n	80041ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d123      	bne.n	8004240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	08da      	lsrs	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3208      	adds	r2, #8
 8004200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	220f      	movs	r2, #15
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	08da      	lsrs	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3208      	adds	r2, #8
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2203      	movs	r2, #3
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0203 	and.w	r2, r3, #3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80ae 	beq.w	80043de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <HAL_GPIO_Init+0x300>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	4a5c      	ldr	r2, [pc, #368]	@ (80043fc <HAL_GPIO_Init+0x300>)
 800428c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004290:	6453      	str	r3, [r2, #68]	@ 0x44
 8004292:	4b5a      	ldr	r3, [pc, #360]	@ (80043fc <HAL_GPIO_Init+0x300>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800429e:	4a58      	ldr	r2, [pc, #352]	@ (8004400 <HAL_GPIO_Init+0x304>)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	3302      	adds	r3, #2
 80042a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	220f      	movs	r2, #15
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004404 <HAL_GPIO_Init+0x308>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d025      	beq.n	8004316 <HAL_GPIO_Init+0x21a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004408 <HAL_GPIO_Init+0x30c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01f      	beq.n	8004312 <HAL_GPIO_Init+0x216>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a4d      	ldr	r2, [pc, #308]	@ (800440c <HAL_GPIO_Init+0x310>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d019      	beq.n	800430e <HAL_GPIO_Init+0x212>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004410 <HAL_GPIO_Init+0x314>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_GPIO_Init+0x20e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004414 <HAL_GPIO_Init+0x318>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00d      	beq.n	8004306 <HAL_GPIO_Init+0x20a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004418 <HAL_GPIO_Init+0x31c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <HAL_GPIO_Init+0x206>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a49      	ldr	r2, [pc, #292]	@ (800441c <HAL_GPIO_Init+0x320>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_GPIO_Init+0x202>
 80042fa:	2306      	movs	r3, #6
 80042fc:	e00c      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 80042fe:	2307      	movs	r3, #7
 8004300:	e00a      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 8004302:	2305      	movs	r3, #5
 8004304:	e008      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 8004306:	2304      	movs	r3, #4
 8004308:	e006      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 800430a:	2303      	movs	r3, #3
 800430c:	e004      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 800430e:	2302      	movs	r3, #2
 8004310:	e002      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_GPIO_Init+0x21c>
 8004316:	2300      	movs	r3, #0
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	f002 0203 	and.w	r2, r2, #3
 800431e:	0092      	lsls	r2, r2, #2
 8004320:	4093      	lsls	r3, r2
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004328:	4935      	ldr	r1, [pc, #212]	@ (8004400 <HAL_GPIO_Init+0x304>)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	3302      	adds	r3, #2
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004336:	4b3a      	ldr	r3, [pc, #232]	@ (8004420 <HAL_GPIO_Init+0x324>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800435a:	4a31      	ldr	r2, [pc, #196]	@ (8004420 <HAL_GPIO_Init+0x324>)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004360:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_GPIO_Init+0x324>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004384:	4a26      	ldr	r2, [pc, #152]	@ (8004420 <HAL_GPIO_Init+0x324>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800438a:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <HAL_GPIO_Init+0x324>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004420 <HAL_GPIO_Init+0x324>)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <HAL_GPIO_Init+0x324>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043d8:	4a11      	ldr	r2, [pc, #68]	@ (8004420 <HAL_GPIO_Init+0x324>)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	f67f ae96 	bls.w	8004118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3724      	adds	r7, #36	@ 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	40013800 	.word	0x40013800
 8004404:	40020000 	.word	0x40020000
 8004408:	40020400 	.word	0x40020400
 800440c:	40020800 	.word	0x40020800
 8004410:	40020c00 	.word	0x40020c00
 8004414:	40021000 	.word	0x40021000
 8004418:	40021400 	.word	0x40021400
 800441c:	40021800 	.word	0x40021800
 8004420:	40013c00 	.word	0x40013c00

08004424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
 8004430:	4613      	mov	r3, r2
 8004432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004434:	787b      	ldrb	r3, [r7, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004440:	e003      	b.n	800444a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	041a      	lsls	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004462:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800446e:	4a05      	ldr	r2, [pc, #20]	@ (8004484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fbe2 	bl	8002c40 <HAL_GPIO_EXTI_Callback>
  }
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40013c00 	.word	0x40013c00

08004488 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4b20      	ldr	r3, [pc, #128]	@ (8004518 <HAL_PWREx_EnableOverDrive+0x90>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <HAL_PWREx_EnableOverDrive+0x90>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <HAL_PWREx_EnableOverDrive+0x90>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_PWREx_EnableOverDrive+0x94>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b4:	f7ff f8de 	bl	8003674 <HAL_GetTick>
 80044b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044ba:	e009      	b.n	80044d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044bc:	f7ff f8da 	bl	8003674 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044ca:	d901      	bls.n	80044d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e01f      	b.n	8004510 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044d0:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <HAL_PWREx_EnableOverDrive+0x98>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044dc:	d1ee      	bne.n	80044bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044de:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e4:	f7ff f8c6 	bl	8003674 <HAL_GetTick>
 80044e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044ea:	e009      	b.n	8004500 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044ec:	f7ff f8c2 	bl	8003674 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044fa:	d901      	bls.n	8004500 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e007      	b.n	8004510 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <HAL_PWREx_EnableOverDrive+0x98>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800450c:	d1ee      	bne.n	80044ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	420e0040 	.word	0x420e0040
 8004520:	40007000 	.word	0x40007000
 8004524:	420e0044 	.word	0x420e0044

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cc      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b68      	ldr	r3, [pc, #416]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90c      	bls.n	8004564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b65      	ldr	r3, [pc, #404]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b63      	ldr	r3, [pc, #396]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0b8      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b59      	ldr	r3, [pc, #356]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a58      	ldr	r2, [pc, #352]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a52      	ldr	r2, [pc, #328]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b50      	ldr	r3, [pc, #320]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	494d      	ldr	r1, [pc, #308]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d044      	beq.n	8004648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d119      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	4b3f      	ldr	r3, [pc, #252]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e067      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004606:	4b37      	ldr	r3, [pc, #220]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 0203 	bic.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4934      	ldr	r1, [pc, #208]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004618:	f7ff f82c 	bl	8003674 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7ff f828 	bl	8003674 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e04f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	4b2b      	ldr	r3, [pc, #172]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 020c 	and.w	r2, r3, #12
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	429a      	cmp	r2, r3
 8004646:	d1eb      	bne.n	8004620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d20c      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e032      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b19      	ldr	r3, [pc, #100]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4916      	ldr	r1, [pc, #88]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490e      	ldr	r1, [pc, #56]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ae:	f000 f855 	bl	800475c <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490a      	ldr	r1, [pc, #40]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a09      	ldr	r2, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe ff8c 	bl	80035ec <HAL_InitTick>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40023c00 	.word	0x40023c00
 80046e4:	40023800 	.word	0x40023800
 80046e8:	0800acc4 	.word	0x0800acc4
 80046ec:	2000029c 	.word	0x2000029c
 80046f0:	200002a0 	.word	0x200002a0

080046f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	@ (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2000029c 	.word	0x2000029c

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	@ (800472c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4903      	ldr	r1, [pc, #12]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	0800acd4 	.word	0x0800acd4

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004738:	f7ff ffdc 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 800473c:	4602      	mov	r2, r0
 800473e:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0b5b      	lsrs	r3, r3, #13
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4903      	ldr	r1, [pc, #12]	@ (8004758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	0800acd4 	.word	0x0800acd4

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0ae      	sub	sp, #184	@ 0xb8
 8004762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004782:	4bcb      	ldr	r3, [pc, #812]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b0c      	cmp	r3, #12
 800478c:	f200 8206 	bhi.w	8004b9c <HAL_RCC_GetSysClockFreq+0x440>
 8004790:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047cd 	.word	0x080047cd
 800479c:	08004b9d 	.word	0x08004b9d
 80047a0:	08004b9d 	.word	0x08004b9d
 80047a4:	08004b9d 	.word	0x08004b9d
 80047a8:	080047d5 	.word	0x080047d5
 80047ac:	08004b9d 	.word	0x08004b9d
 80047b0:	08004b9d 	.word	0x08004b9d
 80047b4:	08004b9d 	.word	0x08004b9d
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	08004b9d 	.word	0x08004b9d
 80047c0:	08004b9d 	.word	0x08004b9d
 80047c4:	08004b9d 	.word	0x08004b9d
 80047c8:	080049cd 	.word	0x080049cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x358>)
 80047ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047d2:	e1e7      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d4:	4bb8      	ldr	r3, [pc, #736]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80047d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047da:	e1e3      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047dc:	4bb4      	ldr	r3, [pc, #720]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e8:	4bb1      	ldr	r3, [pc, #708]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d071      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f4:	4bae      	ldr	r3, [pc, #696]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004800:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482c:	0150      	lsls	r0, r2, #5
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4621      	mov	r1, r4
 8004834:	1a51      	subs	r1, r2, r1
 8004836:	6439      	str	r1, [r7, #64]	@ 0x40
 8004838:	4629      	mov	r1, r5
 800483a:	eb63 0301 	sbc.w	r3, r3, r1
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800484c:	4649      	mov	r1, r9
 800484e:	018b      	lsls	r3, r1, #6
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004856:	4641      	mov	r1, r8
 8004858:	018a      	lsls	r2, r1, #6
 800485a:	4641      	mov	r1, r8
 800485c:	1a51      	subs	r1, r2, r1
 800485e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004860:	4649      	mov	r1, r9
 8004862:	eb63 0301 	sbc.w	r3, r3, r1
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004874:	4649      	mov	r1, r9
 8004876:	00cb      	lsls	r3, r1, #3
 8004878:	4641      	mov	r1, r8
 800487a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800487e:	4641      	mov	r1, r8
 8004880:	00ca      	lsls	r2, r1, #3
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	4603      	mov	r3, r0
 8004888:	4622      	mov	r2, r4
 800488a:	189b      	adds	r3, r3, r2
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
 800488e:	462b      	mov	r3, r5
 8004890:	460a      	mov	r2, r1
 8004892:	eb42 0303 	adc.w	r3, r2, r3
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048a4:	4629      	mov	r1, r5
 80048a6:	024b      	lsls	r3, r1, #9
 80048a8:	4621      	mov	r1, r4
 80048aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ae:	4621      	mov	r1, r4
 80048b0:	024a      	lsls	r2, r1, #9
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80048c8:	f7fc faac 	bl	8000e24 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d6:	e067      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d8:	4b75      	ldr	r3, [pc, #468]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80048e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048f2:	2300      	movs	r3, #0
 80048f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800492c:	4649      	mov	r1, r9
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4641      	mov	r1, r8
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4641      	mov	r1, r8
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4641      	mov	r1, r8
 800493c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004940:	4649      	mov	r1, r9
 8004942:	eb63 0b01 	sbc.w	fp, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004952:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495a:	4692      	mov	sl, r2
 800495c:	469b      	mov	fp, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb1a 0303 	adds.w	r3, sl, r3
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	462b      	mov	r3, r5
 8004968:	eb4b 0303 	adc.w	r3, fp, r3
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004990:	2200      	movs	r2, #0
 8004992:	673b      	str	r3, [r7, #112]	@ 0x70
 8004994:	677a      	str	r2, [r7, #116]	@ 0x74
 8004996:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800499a:	f7fc fa43 	bl	8000e24 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4613      	mov	r3, r2
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049a8:	4b41      	ldr	r3, [pc, #260]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	3301      	adds	r3, #1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80049ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049ca:	e0eb      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049cc:	4b38      	ldr	r3, [pc, #224]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d8:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d06b      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e4:	4b32      	ldr	r3, [pc, #200]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	2200      	movs	r2, #0
 80049ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80049f8:	2300      	movs	r3, #0
 80049fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80049fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0159      	lsls	r1, r3, #5
 8004a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a12:	0150      	lsls	r0, r2, #5
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4621      	mov	r1, r4
 8004a1a:	1a51      	subs	r1, r2, r1
 8004a1c:	61b9      	str	r1, [r7, #24]
 8004a1e:	4629      	mov	r1, r5
 8004a20:	eb63 0301 	sbc.w	r3, r3, r1
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a32:	4659      	mov	r1, fp
 8004a34:	018b      	lsls	r3, r1, #6
 8004a36:	4651      	mov	r1, sl
 8004a38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	018a      	lsls	r2, r1, #6
 8004a40:	4651      	mov	r1, sl
 8004a42:	ebb2 0801 	subs.w	r8, r2, r1
 8004a46:	4659      	mov	r1, fp
 8004a48:	eb63 0901 	sbc.w	r9, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a60:	4690      	mov	r8, r2
 8004a62:	4699      	mov	r9, r3
 8004a64:	4623      	mov	r3, r4
 8004a66:	eb18 0303 	adds.w	r3, r8, r3
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	eb49 0303 	adc.w	r3, r9, r3
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a80:	4629      	mov	r1, r5
 8004a82:	024b      	lsls	r3, r1, #9
 8004a84:	4621      	mov	r1, r4
 8004a86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	024a      	lsls	r2, r1, #9
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a96:	2200      	movs	r2, #0
 8004a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa0:	f7fc f9c0 	bl	8000e24 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aae:	e065      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x420>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004acc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ace:	2300      	movs	r3, #0
 8004ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	464b      	mov	r3, r9
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	0159      	lsls	r1, r3, #5
 8004ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae8:	0150      	lsls	r0, r2, #5
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4641      	mov	r1, r8
 8004af0:	1a51      	subs	r1, r2, r1
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	4649      	mov	r1, r9
 8004af6:	eb63 0301 	sbc.w	r3, r3, r1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	018b      	lsls	r3, r1, #6
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b12:	4651      	mov	r1, sl
 8004b14:	018a      	lsls	r2, r1, #6
 8004b16:	4651      	mov	r1, sl
 8004b18:	1a54      	subs	r4, r2, r1
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	eb45 0303 	adc.w	r3, r5, r3
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4e:	4629      	mov	r1, r5
 8004b50:	028b      	lsls	r3, r1, #10
 8004b52:	4621      	mov	r1, r4
 8004b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b58:	4621      	mov	r1, r4
 8004b5a:	028a      	lsls	r2, r1, #10
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b64:	2200      	movs	r2, #0
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b6e:	f7fc f959 	bl	8000e24 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4613      	mov	r3, r2
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	0f1b      	lsrs	r3, r3, #28
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	37b8      	adds	r7, #184	@ 0xb8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e28d      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8083 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bdc:	4b94      	ldr	r3, [pc, #592]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d019      	beq.n	8004c1c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004be8:	4b91      	ldr	r3, [pc, #580]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
        || \
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004bf4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c00:	d00c      	beq.n	8004c1c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c02:	4b8b      	ldr	r3, [pc, #556]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d112      	bne.n	8004c34 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0e:	4b88      	ldr	r3, [pc, #544]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c1a:	d10b      	bne.n	8004c34 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	4b84      	ldr	r3, [pc, #528]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05b      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x124>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d157      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e25a      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_OscConfig+0x90>
 8004c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7b      	ldr	r2, [pc, #492]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e01d      	b.n	8004c88 <HAL_RCC_OscConfig+0xcc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0xb4>
 8004c56:	4b76      	ldr	r3, [pc, #472]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a75      	ldr	r2, [pc, #468]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b73      	ldr	r3, [pc, #460]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a72      	ldr	r2, [pc, #456]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e00b      	b.n	8004c88 <HAL_RCC_OscConfig+0xcc>
 8004c70:	4b6f      	ldr	r3, [pc, #444]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6e      	ldr	r2, [pc, #440]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6b      	ldr	r2, [pc, #428]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fe fcf0 	bl	8003674 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fe fcec 	bl	8003674 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	@ 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e21f      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0xdc>
 8004cb6:	e014      	b.n	8004ce2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fcdc 	bl	8003674 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fe fcd8 	bl	8003674 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	@ 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e20b      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd2:	4b57      	ldr	r3, [pc, #348]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x104>
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d06f      	beq.n	8004dce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cee:	4b50      	ldr	r3, [pc, #320]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d017      	beq.n	8004d2a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d105      	bne.n	8004d12 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d06:	4b4a      	ldr	r3, [pc, #296]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b47      	ldr	r3, [pc, #284]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d1a:	2b0c      	cmp	r3, #12
 8004d1c:	d11c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1e:	4b44      	ldr	r3, [pc, #272]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d116      	bne.n	8004d58 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCC_OscConfig+0x186>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e1d3      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4937      	ldr	r1, [pc, #220]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	e03a      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d020      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d60:	4b34      	ldr	r3, [pc, #208]	@ (8004e34 <HAL_RCC_OscConfig+0x278>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fe fc85 	bl	8003674 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6e:	f7fe fc81 	bl	8003674 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1b4      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	4b2b      	ldr	r3, [pc, #172]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8c:	4b28      	ldr	r3, [pc, #160]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4925      	ldr	r1, [pc, #148]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	600b      	str	r3, [r1, #0]
 8004da0:	e015      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCC_OscConfig+0x278>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fe fc64 	bl	8003674 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db0:	f7fe fc60 	bl	8003674 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e193      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d036      	beq.n	8004e48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de2:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <HAL_RCC_OscConfig+0x27c>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fe fc44 	bl	8003674 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fe fc40 	bl	8003674 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e173      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x234>
 8004e0e:	e01b      	b.n	8004e48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <HAL_RCC_OscConfig+0x27c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fe fc2d 	bl	8003674 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e1c:	e00e      	b.n	8004e3c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fe fc29 	bl	8003674 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d907      	bls.n	8004e3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e15c      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	42470000 	.word	0x42470000
 8004e38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ea      	bne.n	8004e1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8097 	beq.w	8004f84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b83      	ldr	r3, [pc, #524]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e76:	4b7c      	ldr	r3, [pc, #496]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e86:	4b79      	ldr	r3, [pc, #484]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d118      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e92:	4b76      	ldr	r3, [pc, #472]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a75      	ldr	r2, [pc, #468]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe fbe9 	bl	8003674 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fe fbe5 	bl	8003674 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e118      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x31e>
 8004ecc:	4b66      	ldr	r3, [pc, #408]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed0:	4a65      	ldr	r2, [pc, #404]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed8:	e01c      	b.n	8004f14 <HAL_RCC_OscConfig+0x358>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x340>
 8004ee2:	4b61      	ldr	r3, [pc, #388]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4a60      	ldr	r2, [pc, #384]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eee:	4b5e      	ldr	r3, [pc, #376]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efa:	e00b      	b.n	8004f14 <HAL_RCC_OscConfig+0x358>
 8004efc:	4b5a      	ldr	r3, [pc, #360]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f00:	4a59      	ldr	r2, [pc, #356]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f08:	4b57      	ldr	r3, [pc, #348]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a56      	ldr	r2, [pc, #344]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	f023 0304 	bic.w	r3, r3, #4
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fe fbaa 	bl	8003674 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fe fba6 	bl	8003674 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0d7      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ee      	beq.n	8004f24 <HAL_RCC_OscConfig+0x368>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fe fb94 	bl	8003674 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fe fb90 	bl	8003674 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0c1      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f66:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ee      	bne.n	8004f50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f78:	4b3b      	ldr	r3, [pc, #236]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80ad 	beq.w	80050e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8e:	4b36      	ldr	r3, [pc, #216]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d060      	beq.n	800505c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d145      	bne.n	800502e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b33      	ldr	r3, [pc, #204]	@ (8005070 <HAL_RCC_OscConfig+0x4b4>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fe fb64 	bl	8003674 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe fb60 	bl	8003674 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e093      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	4b29      	ldr	r3, [pc, #164]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	071b      	lsls	r3, r3, #28
 8004ffa:	491b      	ldr	r1, [pc, #108]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x4b4>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fe fb35 	bl	8003674 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500e:	f7fe fb31 	bl	8003674 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e064      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x452>
 800502c:	e05c      	b.n	80050e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <HAL_RCC_OscConfig+0x4b4>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fb1e 	bl	8003674 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fe fb1a 	bl	8003674 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e04d      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x480>
 800505a:	e045      	b.n	80050e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e040      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000
 8005070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005074:	4b1f      	ldr	r3, [pc, #124]	@ (80050f4 <HAL_RCC_OscConfig+0x538>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d030      	beq.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d129      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d122      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d119      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	3b01      	subs	r3, #1
 80050be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10f      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e07b      	b.n	8005202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511a:	d009      	beq.n	8005130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	61da      	str	r2, [r3, #28]
 8005122:	e005      	b.n	8005130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fd ff58 	bl	8003000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	f003 0104 	and.w	r1, r3, #4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	f003 0210 	and.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800521a:	f7fe fa2b 	bl	8003674 <HAL_GetTick>
 800521e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d001      	beq.n	8005234 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
 8005232:	e12a      	b.n	800548a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_SPI_Transmit+0x36>
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e122      	b.n	800548a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_SPI_Transmit+0x48>
 800524e:	2302      	movs	r3, #2
 8005250:	e11b      	b.n	800548a <HAL_SPI_Transmit+0x280>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052a0:	d10f      	bne.n	80052c2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052cc:	2b40      	cmp	r3, #64	@ 0x40
 80052ce:	d007      	beq.n	80052e0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e8:	d152      	bne.n	8005390 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Transmit+0xee>
 80052f2:	8b7b      	ldrh	r3, [r7, #26]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d145      	bne.n	8005384 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800531c:	e032      	b.n	8005384 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d112      	bne.n	8005352 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005350:	e018      	b.n	8005384 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005352:	f7fe f98f 	bl	8003674 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d803      	bhi.n	800536a <HAL_SPI_Transmit+0x160>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d102      	bne.n	8005370 <HAL_SPI_Transmit+0x166>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e082      	b.n	800548a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1c7      	bne.n	800531e <HAL_SPI_Transmit+0x114>
 800538e:	e053      	b.n	8005438 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_SPI_Transmit+0x194>
 8005398:	8b7b      	ldrh	r3, [r7, #26]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d147      	bne.n	800542e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053c4:	e033      	b.n	800542e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d113      	bne.n	80053fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	7812      	ldrb	r2, [r2, #0]
 80053e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053fa:	e018      	b.n	800542e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fc:	f7fe f93a 	bl	8003674 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d803      	bhi.n	8005414 <HAL_SPI_Transmit+0x20a>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d102      	bne.n	800541a <HAL_SPI_Transmit+0x210>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e02d      	b.n	800548a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1c6      	bne.n	80053c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fbd9 	bl	8005bf4 <SPI_EndRxTxTransaction>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005488:	2300      	movs	r3, #0
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b088      	sub	sp, #32
 8005496:	af02      	add	r7, sp, #8
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	603b      	str	r3, [r7, #0]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
 80054b0:	e104      	b.n	80056bc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ba:	d112      	bne.n	80054e2 <HAL_SPI_Receive+0x50>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10e      	bne.n	80054e2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2204      	movs	r2, #4
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f8f3 	bl	80056c4 <HAL_SPI_TransmitReceive>
 80054de:	4603      	mov	r3, r0
 80054e0:	e0ec      	b.n	80056bc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e2:	f7fe f8c7 	bl	8003674 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Receive+0x62>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0e1      	b.n	80056bc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_SPI_Receive+0x74>
 8005502:	2302      	movs	r3, #2
 8005504:	e0da      	b.n	80056bc <HAL_SPI_Receive+0x22a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2204      	movs	r2, #4
 8005512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	d10f      	bne.n	8005576 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005574:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b40      	cmp	r3, #64	@ 0x40
 8005582:	d007      	beq.n	8005594 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d170      	bne.n	800567e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800559c:	e035      	b.n	800560a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d115      	bne.n	80055d8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f103 020c 	add.w	r2, r3, #12
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055d6:	e018      	b.n	800560a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d8:	f7fe f84c 	bl	8003674 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d803      	bhi.n	80055f0 <HAL_SPI_Receive+0x15e>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Receive+0x164>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e058      	b.n	80056bc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1c4      	bne.n	800559e <HAL_SPI_Receive+0x10c>
 8005614:	e038      	b.n	8005688 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d113      	bne.n	800564c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	b292      	uxth	r2, r2
 8005630:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800564a:	e018      	b.n	800567e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564c:	f7fe f812 	bl	8003674 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d803      	bhi.n	8005664 <HAL_SPI_Receive+0x1d2>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d102      	bne.n	800566a <HAL_SPI_Receive+0x1d8>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e01e      	b.n	80056bc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1c6      	bne.n	8005616 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa4b 	bl	8005b28 <SPI_EndRxTransaction>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056d2:	2301      	movs	r3, #1
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d6:	f7fd ffcd 	bl	8003674 <HAL_GetTick>
 80056da:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056e2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056ea:	887b      	ldrh	r3, [r7, #2]
 80056ec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d00c      	beq.n	800570e <HAL_SPI_TransmitReceive+0x4a>
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056fa:	d106      	bne.n	800570a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <HAL_SPI_TransmitReceive+0x46>
 8005704:	7ffb      	ldrb	r3, [r7, #31]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d001      	beq.n	800570e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
 800570c:	e17f      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x5c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x5c>
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e174      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x6e>
 800572e:	2302      	movs	r3, #2
 8005730:	e16d      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b04      	cmp	r3, #4
 8005744:	d003      	beq.n	800574e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2205      	movs	r2, #5
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d007      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057aa:	d17e      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_TransmitReceive+0xf6>
 80057b4:	8afb      	ldrh	r3, [r7, #22]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d16c      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057de:	e059      	b.n	8005894 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d11b      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x162>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x162>
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d113      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x1a4>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d014      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	b292      	uxth	r2, r2
 800584a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005868:	f7fd ff04 	bl	8003674 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005874:	429a      	cmp	r2, r3
 8005876:	d80d      	bhi.n	8005894 <HAL_SPI_TransmitReceive+0x1d0>
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d009      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e0bc      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1a0      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x11c>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d19b      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x11c>
 80058a8:	e082      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x1f4>
 80058b2:	8afb      	ldrh	r3, [r7, #22]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d171      	bne.n	800599c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058de:	e05d      	b.n	800599c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d11c      	bne.n	8005928 <HAL_SPI_TransmitReceive+0x264>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d017      	beq.n	8005928 <HAL_SPI_TransmitReceive+0x264>
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d114      	bne.n	8005928 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d119      	bne.n	800596a <HAL_SPI_TransmitReceive+0x2a6>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d014      	beq.n	800596a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005966:	2301      	movs	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800596a:	f7fd fe83 	bl	8003674 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005976:	429a      	cmp	r2, r3
 8005978:	d803      	bhi.n	8005982 <HAL_SPI_TransmitReceive+0x2be>
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d102      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x2c4>
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e038      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d19c      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x21c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d197      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f91d 	bl	8005bf4 <SPI_EndRxTxTransaction>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e01d      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3728      	adds	r7, #40	@ 0x28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a28:	f7fd fe24 	bl	8003674 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a38:	f7fd fe1c 	bl	8003674 <HAL_GetTick>
 8005a3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a3e:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	015b      	lsls	r3, r3, #5
 8005a44:	0d1b      	lsrs	r3, r3, #20
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4e:	e054      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d050      	beq.n	8005afa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a58:	f7fd fe0c 	bl	8003674 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d902      	bls.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d13d      	bne.n	8005aea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a86:	d111      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a90:	d004      	beq.n	8005a9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a9a:	d107      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab4:	d10f      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ad4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e017      	b.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4013      	ands	r3, r2
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d19b      	bne.n	8005a50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2000029c 	.word	0x2000029c

08005b28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b3c:	d111      	bne.n	8005b62 <SPI_EndRxTransaction+0x3a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b46:	d004      	beq.n	8005b52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b50:	d107      	bne.n	8005b62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b6a:	d12a      	bne.n	8005bc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b74:	d012      	beq.n	8005b9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2180      	movs	r1, #128	@ 0x80
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ff49 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e026      	b.n	8005bea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ff36 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01a      	beq.n	8005be8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e013      	b.n	8005bea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2101      	movs	r1, #1
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff ff23 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e000      	b.n	8005bea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2201      	movs	r2, #1
 8005c08:	2102      	movs	r1, #2
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff ff04 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	f043 0220 	orr.w	r2, r3, #32
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e032      	b.n	8005c8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c26:	4b1b      	ldr	r3, [pc, #108]	@ (8005c94 <SPI_EndRxTxTransaction+0xa0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c98 <SPI_EndRxTxTransaction+0xa4>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	0d5b      	lsrs	r3, r3, #21
 8005c32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c44:	d112      	bne.n	8005c6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2180      	movs	r1, #128	@ 0x80
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fee1 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d016      	beq.n	8005c8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c60:	f043 0220 	orr.w	r2, r3, #32
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e00f      	b.n	8005c8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c82:	2b80      	cmp	r3, #128	@ 0x80
 8005c84:	d0f2      	beq.n	8005c6c <SPI_EndRxTxTransaction+0x78>
 8005c86:	e000      	b.n	8005c8a <SPI_EndRxTxTransaction+0x96>
        break;
 8005c88:	bf00      	nop
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	2000029c 	.word	0x2000029c
 8005c98:	165e9f81 	.word	0x165e9f81

08005c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e041      	b.n	8005d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fd fa1a 	bl	80030fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f000 fae6 	bl	80062ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d001      	beq.n	8005d54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e046      	b.n	8005de2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a23      	ldr	r2, [pc, #140]	@ (8005df0 <HAL_TIM_Base_Start+0xb4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6e:	d01d      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_TIM_Base_Start+0xb8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <HAL_TIM_Base_Start+0xbc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_TIM_Base_Start+0xc0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	@ (8005e00 <HAL_TIM_Base_Start+0xc4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <HAL_TIM_Base_Start+0xc8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIM_Base_Start+0x70>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_TIM_Base_Start+0xcc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d111      	bne.n	8005dd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d010      	beq.n	8005de0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	e007      	b.n	8005de0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40010400 	.word	0x40010400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40001800 	.word	0x40001800

08005e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d001      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e04e      	b.n	8005ec2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a23      	ldr	r2, [pc, #140]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4e:	d01d      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1c      	ldr	r2, [pc, #112]	@ (8005edc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x80>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d111      	bne.n	8005eb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d010      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	e007      	b.n	8005ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40001800 	.word	0x40001800

08005eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d020      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0202 	mvn.w	r2, #2
 8005f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f999 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f98b 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f99c 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0204 	mvn.w	r2, #4
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f973 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f965 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f976 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d020      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0208 	mvn.w	r2, #8
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f94d 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f93f 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f950 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0210 	mvn.w	r2, #16
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2208      	movs	r2, #8
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f927 	bl	800626e <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f919 	bl	800625a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f92a 	bl	8006282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0201 	mvn.w	r2, #1
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fc ff66 	bl	8002f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00c      	beq.n	800607c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fae4 	bl	8006644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8fb 	bl	8006296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00c      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0220 	mvn.w	r2, #32
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fab6 	bl	8006630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e0b4      	b.n	8006252 <HAL_TIM_ConfigClockSource+0x186>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800610e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006120:	d03e      	beq.n	80061a0 <HAL_TIM_ConfigClockSource+0xd4>
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006126:	f200 8087 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 800612a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612e:	f000 8086 	beq.w	800623e <HAL_TIM_ConfigClockSource+0x172>
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006136:	d87f      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006138:	2b70      	cmp	r3, #112	@ 0x70
 800613a:	d01a      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0xa6>
 800613c:	2b70      	cmp	r3, #112	@ 0x70
 800613e:	d87b      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006140:	2b60      	cmp	r3, #96	@ 0x60
 8006142:	d050      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x11a>
 8006144:	2b60      	cmp	r3, #96	@ 0x60
 8006146:	d877      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006148:	2b50      	cmp	r3, #80	@ 0x50
 800614a:	d03c      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0xfa>
 800614c:	2b50      	cmp	r3, #80	@ 0x50
 800614e:	d873      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006150:	2b40      	cmp	r3, #64	@ 0x40
 8006152:	d058      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x13a>
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d86f      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006158:	2b30      	cmp	r3, #48	@ 0x30
 800615a:	d064      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x15a>
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d86b      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006160:	2b20      	cmp	r3, #32
 8006162:	d060      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x15a>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d867      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05c      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x15a>
 800616c:	2b10      	cmp	r3, #16
 800616e:	d05a      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x15a>
 8006170:	e062      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006182:	f000 f9b9 	bl	80064f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	609a      	str	r2, [r3, #8]
      break;
 800619e:	e04f      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b0:	f000 f9a2 	bl	80064f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c2:	609a      	str	r2, [r3, #8]
      break;
 80061c4:	e03c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 f916 	bl	8006404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2150      	movs	r1, #80	@ 0x50
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f96f 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 80061e4:	e02c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f2:	461a      	mov	r2, r3
 80061f4:	f000 f935 	bl	8006462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2160      	movs	r1, #96	@ 0x60
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f95f 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 8006204:	e01c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006212:	461a      	mov	r2, r3
 8006214:	f000 f8f6 	bl	8006404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2140      	movs	r1, #64	@ 0x40
 800621e:	4618      	mov	r0, r3
 8006220:	f000 f94f 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 8006224:	e00c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f000 f946 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 8006236:	e003      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
      break;
 800623c:	e000      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800623e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a46      	ldr	r2, [pc, #280]	@ (80063d8 <TIM_Base_SetConfig+0x12c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ca:	d00f      	beq.n	80062ec <TIM_Base_SetConfig+0x40>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a43      	ldr	r2, [pc, #268]	@ (80063dc <TIM_Base_SetConfig+0x130>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00b      	beq.n	80062ec <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a42      	ldr	r2, [pc, #264]	@ (80063e0 <TIM_Base_SetConfig+0x134>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d007      	beq.n	80062ec <TIM_Base_SetConfig+0x40>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a41      	ldr	r2, [pc, #260]	@ (80063e4 <TIM_Base_SetConfig+0x138>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_Base_SetConfig+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a40      	ldr	r2, [pc, #256]	@ (80063e8 <TIM_Base_SetConfig+0x13c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d108      	bne.n	80062fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a35      	ldr	r2, [pc, #212]	@ (80063d8 <TIM_Base_SetConfig+0x12c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02b      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630c:	d027      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a32      	ldr	r2, [pc, #200]	@ (80063dc <TIM_Base_SetConfig+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d023      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a31      	ldr	r2, [pc, #196]	@ (80063e0 <TIM_Base_SetConfig+0x134>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01f      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a30      	ldr	r2, [pc, #192]	@ (80063e4 <TIM_Base_SetConfig+0x138>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01b      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2f      	ldr	r2, [pc, #188]	@ (80063e8 <TIM_Base_SetConfig+0x13c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d017      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2e      	ldr	r2, [pc, #184]	@ (80063ec <TIM_Base_SetConfig+0x140>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2d      	ldr	r2, [pc, #180]	@ (80063f0 <TIM_Base_SetConfig+0x144>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00f      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2c      	ldr	r2, [pc, #176]	@ (80063f4 <TIM_Base_SetConfig+0x148>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2b      	ldr	r2, [pc, #172]	@ (80063f8 <TIM_Base_SetConfig+0x14c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2a      	ldr	r2, [pc, #168]	@ (80063fc <TIM_Base_SetConfig+0x150>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a29      	ldr	r2, [pc, #164]	@ (8006400 <TIM_Base_SetConfig+0x154>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d108      	bne.n	8006370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a10      	ldr	r2, [pc, #64]	@ (80063d8 <TIM_Base_SetConfig+0x12c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_Base_SetConfig+0xf8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a12      	ldr	r2, [pc, #72]	@ (80063e8 <TIM_Base_SetConfig+0x13c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d103      	bne.n	80063ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]
  }
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40001800 	.word	0x40001800
 80063fc:	40001c00 	.word	0x40001c00
 8006400:	40002000 	.word	0x40002000

08006404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 030a 	bic.w	r3, r3, #10
 8006440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006462:	b480      	push	{r7}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f023 0210 	bic.w	r2, r3, #16
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800648c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800649e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	f043 0307 	orr.w	r3, r3, #7
 80064e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	609a      	str	r2, [r3, #8]
}
 80064ec:	bf00      	nop
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	021a      	lsls	r2, r3, #8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	431a      	orrs	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4313      	orrs	r3, r2
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800654c:	2302      	movs	r3, #2
 800654e:	e05a      	b.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d022      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659c:	d01d      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d018      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a18      	ldr	r2, [pc, #96]	@ (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a17      	ldr	r2, [pc, #92]	@ (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a15      	ldr	r2, [pc, #84]	@ (800662c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10c      	bne.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40010400 	.word	0x40010400
 8006628:	40014000 	.word	0x40014000
 800662c:	40001800 	.word	0x40001800

08006630 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e042      	b.n	80066f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc fd78 	bl	8003174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2224      	movs	r2, #36	@ 0x24
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800669a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f8a3 	bl	80077e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	@ 0x28
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b20      	cmp	r3, #32
 8006716:	d175      	bne.n	8006804 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_UART_Transmit+0x2c>
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e06e      	b.n	8006806 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2221      	movs	r2, #33	@ 0x21
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006736:	f7fc ff9d 	bl	8003674 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	88fa      	ldrh	r2, [r7, #6]
 8006746:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006750:	d108      	bne.n	8006764 <HAL_UART_Transmit+0x6c>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d104      	bne.n	8006764 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	e003      	b.n	800676c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800676c:	e02e      	b.n	80067cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2200      	movs	r2, #0
 8006776:	2180      	movs	r1, #128	@ 0x80
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 fd7c 	bl	8007276 <UART_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e03a      	b.n	8006806 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	3302      	adds	r3, #2
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	e007      	b.n	80067be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	3301      	adds	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1cb      	bne.n	800676e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	2140      	movs	r1, #64	@ 0x40
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fd48 	bl	8007276 <UART_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e006      	b.n	8006806 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	e000      	b.n	8006806 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006804:	2302      	movs	r3, #2
  }
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	@ 0x30
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b20      	cmp	r3, #32
 8006828:	d156      	bne.n	80068d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_UART_Transmit_DMA+0x26>
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e04f      	b.n	80068da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2221      	movs	r2, #33	@ 0x21
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	4a21      	ldr	r2, [pc, #132]	@ (80068e4 <HAL_UART_Transmit_DMA+0xd4>)
 8006860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006866:	4a20      	ldr	r2, [pc, #128]	@ (80068e8 <HAL_UART_Transmit_DMA+0xd8>)
 8006868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <HAL_UART_Transmit_DMA+0xdc>)
 8006870:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	2200      	movs	r2, #0
 8006878:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800687a:	f107 0308 	add.w	r3, r7, #8
 800687e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3304      	adds	r3, #4
 800688e:	461a      	mov	r2, r3
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	f7fd f8df 	bl	8003a54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800689e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	617b      	str	r3, [r7, #20]
   return(result);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3314      	adds	r3, #20
 80068be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80068c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6a39      	ldr	r1, [r7, #32]
 80068c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e000      	b.n	80068da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80068d8:	2302      	movs	r3, #2
  }
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3730      	adds	r7, #48	@ 0x30
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	08006fc5 	.word	0x08006fc5
 80068e8:	0800705f 	.word	0x0800705f
 80068ec:	080071e3 	.word	0x080071e3

080068f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b20      	cmp	r3, #32
 8006908:	d112      	bne.n	8006930 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_UART_Receive_DMA+0x26>
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e00b      	b.n	8006932 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	461a      	mov	r2, r3
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fcfe 	bl	8007328 <UART_Start_Receive_DMA>
 800692c:	4603      	mov	r3, r0
 800692e:	e000      	b.n	8006932 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b090      	sub	sp, #64	@ 0x40
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b21      	cmp	r3, #33	@ 0x21
 8006966:	d128      	bne.n	80069ba <HAL_UART_DMAStop+0x80>
 8006968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d025      	beq.n	80069ba <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	623b      	str	r3, [r7, #32]
   return(result);
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800698e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e5      	bne.n	800696e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fd f8a8 	bl	8003b04 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fd51 	bl	800745c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b40      	cmp	r3, #64	@ 0x40
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b22      	cmp	r3, #34	@ 0x22
 80069da:	d128      	bne.n	8006a2e <HAL_UART_DMAStop+0xf4>
 80069dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d025      	beq.n	8006a2e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3314      	adds	r3, #20
 80069e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a02:	61fa      	str	r2, [r7, #28]
 8006a04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	69b9      	ldr	r1, [r7, #24]
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e5      	bne.n	80069e2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd f86e 	bl	8003b04 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fd3f 	bl	80074ac <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3740      	adds	r7, #64	@ 0x40
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10f      	bne.n	8006a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_UART_IRQHandler+0x66>
 8006a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fde7 	bl	800766a <UART_Receive_IT>
      return;
 8006a9c:	e25b      	b.n	8006f56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 80de 	beq.w	8006c64 <HAL_UART_IRQHandler+0x22c>
 8006aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d106      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80d1 	beq.w	8006c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xae>
 8006ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	f043 0201 	orr.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <HAL_UART_IRQHandler+0xd2>
 8006af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <HAL_UART_IRQHandler+0xf6>
 8006b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b26:	f043 0204 	orr.w	r2, r3, #4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d011      	beq.n	8006b5e <HAL_UART_IRQHandler+0x126>
 8006b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	f043 0208 	orr.w	r2, r3, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 81f2 	beq.w	8006f4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <HAL_UART_IRQHandler+0x14e>
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fd72 	bl	800766a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b40      	cmp	r3, #64	@ 0x40
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x17a>
 8006baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d04f      	beq.n	8006c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fc7a 	bl	80074ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d141      	bne.n	8006c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1d9      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d013      	beq.n	8006c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e18 <HAL_UART_IRQHandler+0x3e0>)
 8006c20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fc ffdc 	bl	8003be4 <HAL_DMA_Abort_IT>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d016      	beq.n	8006c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	e00e      	b.n	8006c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9a8 	bl	8006f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c48:	e00a      	b.n	8006c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9a4 	bl	8006f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c50:	e006      	b.n	8006c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9a0 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c5e:	e175      	b.n	8006f4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	bf00      	nop
    return;
 8006c62:	e173      	b.n	8006f4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	f040 814f 	bne.w	8006f0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8148 	beq.w	8006f0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8141 	beq.w	8006f0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006caa:	2b40      	cmp	r3, #64	@ 0x40
 8006cac:	f040 80b6 	bne.w	8006e1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8145 	beq.w	8006f50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	f080 813e 	bcs.w	8006f50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce6:	f000 8088 	beq.w	8006dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1d9      	bne.n	8006cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3314      	adds	r3, #20
 8006d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e1      	bne.n	8006d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e3      	bne.n	8006d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dca:	f023 0310 	bic.w	r3, r3, #16
 8006dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ddc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e3      	bne.n	8006db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fc fe85 	bl	8003b04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f8cb 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e16:	e09b      	b.n	8006f50 <HAL_UART_IRQHandler+0x518>
 8006e18:	08007573 	.word	0x08007573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 808e 	beq.w	8006f54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8089 	beq.w	8006f54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e66:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e3      	bne.n	8006e42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3314      	adds	r3, #20
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	623b      	str	r3, [r7, #32]
   return(result);
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e3      	bne.n	8006e7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0310 	bic.w	r3, r3, #16
 8006ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e3      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f851 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f0a:	e023      	b.n	8006f54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <HAL_UART_IRQHandler+0x4f4>
 8006f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fb38 	bl	800759a <UART_Transmit_IT>
    return;
 8006f2a:	e014      	b.n	8006f56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <HAL_UART_IRQHandler+0x51e>
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fb78 	bl	800763a <UART_EndTransmit_IT>
    return;
 8006f4a:	e004      	b.n	8006f56 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f54:	bf00      	nop
  }
}
 8006f56:	37e8      	adds	r7, #232	@ 0xe8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b090      	sub	sp, #64	@ 0x40
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d137      	bne.n	8007050 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3314      	adds	r3, #20
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007006:	633a      	str	r2, [r7, #48]	@ 0x30
 8007008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800701a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	330c      	adds	r3, #12
 8007020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	60fb      	str	r3, [r7, #12]
   return(result);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800703a:	61fa      	str	r2, [r7, #28]
 800703c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	617b      	str	r3, [r7, #20]
   return(result);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e5      	bne.n	800701a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800704e:	e002      	b.n	8007056 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007050:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007052:	f7fb ff5d 	bl	8002f10 <HAL_UART_TxCpltCallback>
}
 8007056:	bf00      	nop
 8007058:	3740      	adds	r7, #64	@ 0x40
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff75 	bl	8006f5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b09c      	sub	sp, #112	@ 0x70
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d172      	bne.n	800717c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007098:	2200      	movs	r2, #0
 800709a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80070bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e5      	bne.n	800709c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3314      	adds	r3, #20
 80070d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80070e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3314      	adds	r3, #20
 80070ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070f0:	647a      	str	r2, [r7, #68]	@ 0x44
 80070f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	623b      	str	r3, [r7, #32]
   return(result);
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711a:	663b      	str	r3, [r7, #96]	@ 0x60
 800711c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3314      	adds	r3, #20
 8007122:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007124:	633a      	str	r2, [r7, #48]	@ 0x30
 8007126:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e5      	bne.n	8007104 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d119      	bne.n	800717c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60fb      	str	r3, [r7, #12]
   return(result);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007168:	61fa      	str	r2, [r7, #28]
 800716a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	69b9      	ldr	r1, [r7, #24]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	617b      	str	r3, [r7, #20]
   return(result);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800717c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800717e:	2200      	movs	r2, #0
 8007180:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	2b01      	cmp	r3, #1
 8007188:	d106      	bne.n	8007198 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800718c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800718e:	4619      	mov	r1, r3
 8007190:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007192:	f7ff ff0b 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007196:	e002      	b.n	800719e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007198:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800719a:	f7ff fee9 	bl	8006f70 <HAL_UART_RxCpltCallback>
}
 800719e:	bf00      	nop
 80071a0:	3770      	adds	r7, #112	@ 0x70
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d108      	bne.n	80071d4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff feed 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071d2:	e002      	b.n	80071da <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff fed5 	bl	8006f84 <HAL_UART_RxHalfCpltCallback>
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b21      	cmp	r3, #33	@ 0x21
 8007214:	d108      	bne.n	8007228 <UART_DMAError+0x46>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007222:	68b8      	ldr	r0, [r7, #8]
 8007224:	f000 f91a 	bl	800745c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007232:	2b40      	cmp	r3, #64	@ 0x40
 8007234:	bf0c      	ite	eq
 8007236:	2301      	moveq	r3, #1
 8007238:	2300      	movne	r3, #0
 800723a:	b2db      	uxtb	r3, r3
 800723c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b22      	cmp	r3, #34	@ 0x22
 8007248:	d108      	bne.n	800725c <UART_DMAError+0x7a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2200      	movs	r2, #0
 8007254:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007256:	68b8      	ldr	r0, [r7, #8]
 8007258:	f000 f928 	bl	80074ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007260:	f043 0210 	orr.w	r2, r3, #16
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007268:	68b8      	ldr	r0, [r7, #8]
 800726a:	f7ff fe95 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007286:	e03b      	b.n	8007300 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d037      	beq.n	8007300 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007290:	f7fc f9f0 	bl	8003674 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	429a      	cmp	r2, r3
 800729e:	d302      	bcc.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e03a      	b.n	8007320 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d023      	beq.n	8007300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b80      	cmp	r3, #128	@ 0x80
 80072bc:	d020      	beq.n	8007300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d01d      	beq.n	8007300 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d116      	bne.n	8007300 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f8df 	bl	80074ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2208      	movs	r2, #8
 80072f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e00f      	b.n	8007320 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4013      	ands	r3, r2
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	429a      	cmp	r2, r3
 800730e:	bf0c      	ite	eq
 8007310:	2301      	moveq	r3, #1
 8007312:	2300      	movne	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	429a      	cmp	r2, r3
 800731c:	d0b4      	beq.n	8007288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b098      	sub	sp, #96	@ 0x60
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2222      	movs	r2, #34	@ 0x22
 800734c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007354:	4a3e      	ldr	r2, [pc, #248]	@ (8007450 <UART_Start_Receive_DMA+0x128>)
 8007356:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735c:	4a3d      	ldr	r2, [pc, #244]	@ (8007454 <UART_Start_Receive_DMA+0x12c>)
 800735e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007364:	4a3c      	ldr	r2, [pc, #240]	@ (8007458 <UART_Start_Receive_DMA+0x130>)
 8007366:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736c:	2200      	movs	r2, #0
 800736e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007370:	f107 0308 	add.w	r3, r7, #8
 8007374:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	f7fc fb64 	bl	8003a54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d019      	beq.n	80073de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80073cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80073d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3314      	adds	r3, #20
 80073e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007404:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e5      	bne.n	80073de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	617b      	str	r3, [r7, #20]
   return(result);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007428:	653b      	str	r3, [r7, #80]	@ 0x50
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3314      	adds	r3, #20
 8007430:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007432:	627a      	str	r2, [r7, #36]	@ 0x24
 8007434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6a39      	ldr	r1, [r7, #32]
 8007438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e5      	bne.n	8007412 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3760      	adds	r7, #96	@ 0x60
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	0800707b 	.word	0x0800707b
 8007454:	080071a7 	.word	0x080071a7
 8007458:	080071e3 	.word	0x080071e3

0800745c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	@ 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	330c      	adds	r3, #12
 800746a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60bb      	str	r3, [r7, #8]
   return(result);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800747a:	61fb      	str	r3, [r7, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	330c      	adds	r3, #12
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	61ba      	str	r2, [r7, #24]
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e5      	bne.n	8007464 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80074a0:	bf00      	nop
 80074a2:	3724      	adds	r7, #36	@ 0x24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b095      	sub	sp, #84	@ 0x54
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e5      	bne.n	80074b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3314      	adds	r3, #20
 80074ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f023 0301 	bic.w	r3, r3, #1
 80074fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3314      	adds	r3, #20
 8007506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800750a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800750e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	2b01      	cmp	r3, #1
 8007522:	d119      	bne.n	8007558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60bb      	str	r3, [r7, #8]
   return(result);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	647b      	str	r3, [r7, #68]	@ 0x44
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007544:	61ba      	str	r2, [r7, #24]
 8007546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6979      	ldr	r1, [r7, #20]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	613b      	str	r3, [r7, #16]
   return(result);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e5      	bne.n	8007524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007566:	bf00      	nop
 8007568:	3754      	adds	r7, #84	@ 0x54
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fd03 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b21      	cmp	r3, #33	@ 0x21
 80075ac:	d13e      	bne.n	800762c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b6:	d114      	bne.n	80075e2 <UART_Transmit_IT+0x48>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d110      	bne.n	80075e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	1c9a      	adds	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	621a      	str	r2, [r3, #32]
 80075e0:	e008      	b.n	80075f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	1c59      	adds	r1, r3, #1
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6211      	str	r1, [r2, #32]
 80075ec:	781a      	ldrb	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	4619      	mov	r1, r3
 8007602:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10f      	bne.n	8007628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fb fc58 	bl	8002f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b08c      	sub	sp, #48	@ 0x30
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b22      	cmp	r3, #34	@ 0x22
 800767c:	f040 80ae 	bne.w	80077dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007688:	d117      	bne.n	80076ba <UART_Receive_IT+0x50>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d113      	bne.n	80076ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80076b8:	e026      	b.n	8007708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076cc:	d007      	beq.n	80076de <UART_Receive_IT+0x74>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <UART_Receive_IT+0x82>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e008      	b.n	80076fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29b      	uxth	r3, r3
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4619      	mov	r1, r3
 8007716:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007718:	2b00      	cmp	r3, #0
 800771a:	d15d      	bne.n	80077d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0220 	bic.w	r2, r2, #32
 800772a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800773a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695a      	ldr	r2, [r3, #20]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775e:	2b01      	cmp	r3, #1
 8007760:	d135      	bne.n	80077ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	613b      	str	r3, [r7, #16]
   return(result);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007788:	623a      	str	r2, [r7, #32]
 800778a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	69f9      	ldr	r1, [r7, #28]
 800778e:	6a3a      	ldr	r2, [r7, #32]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	61bb      	str	r3, [r7, #24]
   return(result);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b10      	cmp	r3, #16
 80077a8:	d10a      	bne.n	80077c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fbf0 	bl	8006fac <HAL_UARTEx_RxEventCallback>
 80077cc:	e002      	b.n	80077d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff fbce 	bl	8006f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e002      	b.n	80077de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
  }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3730      	adds	r7, #48	@ 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077ec:	b0c0      	sub	sp, #256	@ 0x100
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007804:	68d9      	ldr	r1, [r3, #12]
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	ea40 0301 	orr.w	r3, r0, r1
 8007810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	431a      	orrs	r2, r3
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	431a      	orrs	r2, r3
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	4313      	orrs	r3, r2
 8007830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007840:	f021 010c 	bic.w	r1, r1, #12
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800784e:	430b      	orrs	r3, r1
 8007850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800785e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007862:	6999      	ldr	r1, [r3, #24]
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	ea40 0301 	orr.w	r3, r0, r1
 800786e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	4b8f      	ldr	r3, [pc, #572]	@ (8007ab4 <UART_SetConfig+0x2cc>)
 8007878:	429a      	cmp	r2, r3
 800787a:	d005      	beq.n	8007888 <UART_SetConfig+0xa0>
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	4b8d      	ldr	r3, [pc, #564]	@ (8007ab8 <UART_SetConfig+0x2d0>)
 8007884:	429a      	cmp	r2, r3
 8007886:	d104      	bne.n	8007892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007888:	f7fc ff54 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 800788c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007890:	e003      	b.n	800789a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007892:	f7fc ff3b 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8007896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a4:	f040 810c 	bne.w	8007ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078ba:	4622      	mov	r2, r4
 80078bc:	462b      	mov	r3, r5
 80078be:	1891      	adds	r1, r2, r2
 80078c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078c2:	415b      	adcs	r3, r3
 80078c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078ca:	4621      	mov	r1, r4
 80078cc:	eb12 0801 	adds.w	r8, r2, r1
 80078d0:	4629      	mov	r1, r5
 80078d2:	eb43 0901 	adc.w	r9, r3, r1
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078ea:	4690      	mov	r8, r2
 80078ec:	4699      	mov	r9, r3
 80078ee:	4623      	mov	r3, r4
 80078f0:	eb18 0303 	adds.w	r3, r8, r3
 80078f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078f8:	462b      	mov	r3, r5
 80078fa:	eb49 0303 	adc.w	r3, r9, r3
 80078fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800790e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007916:	460b      	mov	r3, r1
 8007918:	18db      	adds	r3, r3, r3
 800791a:	653b      	str	r3, [r7, #80]	@ 0x50
 800791c:	4613      	mov	r3, r2
 800791e:	eb42 0303 	adc.w	r3, r2, r3
 8007922:	657b      	str	r3, [r7, #84]	@ 0x54
 8007924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800792c:	f7f9 fa7a 	bl	8000e24 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4b61      	ldr	r3, [pc, #388]	@ (8007abc <UART_SetConfig+0x2d4>)
 8007936:	fba3 2302 	umull	r2, r3, r3, r2
 800793a:	095b      	lsrs	r3, r3, #5
 800793c:	011c      	lsls	r4, r3, #4
 800793e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007942:	2200      	movs	r2, #0
 8007944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800794c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007950:	4642      	mov	r2, r8
 8007952:	464b      	mov	r3, r9
 8007954:	1891      	adds	r1, r2, r2
 8007956:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007958:	415b      	adcs	r3, r3
 800795a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800795c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007960:	4641      	mov	r1, r8
 8007962:	eb12 0a01 	adds.w	sl, r2, r1
 8007966:	4649      	mov	r1, r9
 8007968:	eb43 0b01 	adc.w	fp, r3, r1
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	f04f 0300 	mov.w	r3, #0
 8007974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800797c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007980:	4692      	mov	sl, r2
 8007982:	469b      	mov	fp, r3
 8007984:	4643      	mov	r3, r8
 8007986:	eb1a 0303 	adds.w	r3, sl, r3
 800798a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800798e:	464b      	mov	r3, r9
 8007990:	eb4b 0303 	adc.w	r3, fp, r3
 8007994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079ac:	460b      	mov	r3, r1
 80079ae:	18db      	adds	r3, r3, r3
 80079b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b2:	4613      	mov	r3, r2
 80079b4:	eb42 0303 	adc.w	r3, r2, r3
 80079b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079c2:	f7f9 fa2f 	bl	8000e24 <__aeabi_uldivmod>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	4b3b      	ldr	r3, [pc, #236]	@ (8007abc <UART_SetConfig+0x2d4>)
 80079ce:	fba3 2301 	umull	r2, r3, r3, r1
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	2264      	movs	r2, #100	@ 0x64
 80079d6:	fb02 f303 	mul.w	r3, r2, r3
 80079da:	1acb      	subs	r3, r1, r3
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80079e2:	4b36      	ldr	r3, [pc, #216]	@ (8007abc <UART_SetConfig+0x2d4>)
 80079e4:	fba3 2302 	umull	r2, r3, r3, r2
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80079f0:	441c      	add	r4, r3
 80079f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a04:	4642      	mov	r2, r8
 8007a06:	464b      	mov	r3, r9
 8007a08:	1891      	adds	r1, r2, r2
 8007a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a0c:	415b      	adcs	r3, r3
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a14:	4641      	mov	r1, r8
 8007a16:	1851      	adds	r1, r2, r1
 8007a18:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	414b      	adcs	r3, r1
 8007a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	00cb      	lsls	r3, r1, #3
 8007a30:	4651      	mov	r1, sl
 8007a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a36:	4651      	mov	r1, sl
 8007a38:	00ca      	lsls	r2, r1, #3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4642      	mov	r2, r8
 8007a42:	189b      	adds	r3, r3, r2
 8007a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a48:	464b      	mov	r3, r9
 8007a4a:	460a      	mov	r2, r1
 8007a4c:	eb42 0303 	adc.w	r3, r2, r3
 8007a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a68:	460b      	mov	r3, r1
 8007a6a:	18db      	adds	r3, r3, r3
 8007a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a6e:	4613      	mov	r3, r2
 8007a70:	eb42 0303 	adc.w	r3, r2, r3
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a7e:	f7f9 f9d1 	bl	8000e24 <__aeabi_uldivmod>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <UART_SetConfig+0x2d4>)
 8007a88:	fba3 1302 	umull	r1, r3, r3, r2
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	2164      	movs	r1, #100	@ 0x64
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	3332      	adds	r3, #50	@ 0x32
 8007a9a:	4a08      	ldr	r2, [pc, #32]	@ (8007abc <UART_SetConfig+0x2d4>)
 8007a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	f003 0207 	and.w	r2, r3, #7
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4422      	add	r2, r4
 8007aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ab0:	e106      	b.n	8007cc0 <UART_SetConfig+0x4d8>
 8007ab2:	bf00      	nop
 8007ab4:	40011000 	.word	0x40011000
 8007ab8:	40011400 	.word	0x40011400
 8007abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007aca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ad2:	4642      	mov	r2, r8
 8007ad4:	464b      	mov	r3, r9
 8007ad6:	1891      	adds	r1, r2, r2
 8007ad8:	6239      	str	r1, [r7, #32]
 8007ada:	415b      	adcs	r3, r3
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ae2:	4641      	mov	r1, r8
 8007ae4:	1854      	adds	r4, r2, r1
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	eb43 0501 	adc.w	r5, r3, r1
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	00eb      	lsls	r3, r5, #3
 8007af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007afa:	00e2      	lsls	r2, r4, #3
 8007afc:	4614      	mov	r4, r2
 8007afe:	461d      	mov	r5, r3
 8007b00:	4643      	mov	r3, r8
 8007b02:	18e3      	adds	r3, r4, r3
 8007b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b08:	464b      	mov	r3, r9
 8007b0a:	eb45 0303 	adc.w	r3, r5, r3
 8007b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b2e:	4629      	mov	r1, r5
 8007b30:	008b      	lsls	r3, r1, #2
 8007b32:	4621      	mov	r1, r4
 8007b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b38:	4621      	mov	r1, r4
 8007b3a:	008a      	lsls	r2, r1, #2
 8007b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b40:	f7f9 f970 	bl	8000e24 <__aeabi_uldivmod>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4b60      	ldr	r3, [pc, #384]	@ (8007ccc <UART_SetConfig+0x4e4>)
 8007b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	011c      	lsls	r4, r3, #4
 8007b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	1891      	adds	r1, r2, r2
 8007b6a:	61b9      	str	r1, [r7, #24]
 8007b6c:	415b      	adcs	r3, r3
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b74:	4641      	mov	r1, r8
 8007b76:	1851      	adds	r1, r2, r1
 8007b78:	6139      	str	r1, [r7, #16]
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	414b      	adcs	r3, r1
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	00cb      	lsls	r3, r1, #3
 8007b90:	4651      	mov	r1, sl
 8007b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b96:	4651      	mov	r1, sl
 8007b98:	00ca      	lsls	r2, r1, #3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	189b      	adds	r3, r3, r2
 8007ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ba8:	464b      	mov	r3, r9
 8007baa:	460a      	mov	r2, r1
 8007bac:	eb42 0303 	adc.w	r3, r2, r3
 8007bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bcc:	4649      	mov	r1, r9
 8007bce:	008b      	lsls	r3, r1, #2
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bd6:	4641      	mov	r1, r8
 8007bd8:	008a      	lsls	r2, r1, #2
 8007bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007bde:	f7f9 f921 	bl	8000e24 <__aeabi_uldivmod>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	4b38      	ldr	r3, [pc, #224]	@ (8007ccc <UART_SetConfig+0x4e4>)
 8007bea:	fba3 2301 	umull	r2, r3, r3, r1
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	2264      	movs	r2, #100	@ 0x64
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	1acb      	subs	r3, r1, r3
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	3332      	adds	r3, #50	@ 0x32
 8007bfc:	4a33      	ldr	r2, [pc, #204]	@ (8007ccc <UART_SetConfig+0x4e4>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c08:	441c      	add	r4, r3
 8007c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c0e:	2200      	movs	r2, #0
 8007c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c12:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	1891      	adds	r1, r2, r2
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	415b      	adcs	r3, r3
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c28:	4641      	mov	r1, r8
 8007c2a:	1851      	adds	r1, r2, r1
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	4649      	mov	r1, r9
 8007c30:	414b      	adcs	r3, r1
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c40:	4659      	mov	r1, fp
 8007c42:	00cb      	lsls	r3, r1, #3
 8007c44:	4651      	mov	r1, sl
 8007c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c4a:	4651      	mov	r1, sl
 8007c4c:	00ca      	lsls	r2, r1, #3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	4642      	mov	r2, r8
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	460a      	mov	r2, r1
 8007c5e:	eb42 0303 	adc.w	r3, r2, r3
 8007c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	008b      	lsls	r3, r1, #2
 8007c80:	4641      	mov	r1, r8
 8007c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c86:	4641      	mov	r1, r8
 8007c88:	008a      	lsls	r2, r1, #2
 8007c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c8e:	f7f9 f8c9 	bl	8000e24 <__aeabi_uldivmod>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ccc <UART_SetConfig+0x4e4>)
 8007c98:	fba3 1302 	umull	r1, r3, r3, r2
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	2164      	movs	r1, #100	@ 0x64
 8007ca0:	fb01 f303 	mul.w	r3, r1, r3
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	3332      	adds	r3, #50	@ 0x32
 8007caa:	4a08      	ldr	r2, [pc, #32]	@ (8007ccc <UART_SetConfig+0x4e4>)
 8007cac:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb0:	095b      	lsrs	r3, r3, #5
 8007cb2:	f003 020f 	and.w	r2, r3, #15
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4422      	add	r2, r4
 8007cbe:	609a      	str	r2, [r3, #8]
}
 8007cc0:	bf00      	nop
 8007cc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ccc:	51eb851f 	.word	0x51eb851f

08007cd0 <malloc>:
 8007cd0:	4b02      	ldr	r3, [pc, #8]	@ (8007cdc <malloc+0xc>)
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f000 b82d 	b.w	8007d34 <_malloc_r>
 8007cda:	bf00      	nop
 8007cdc:	200002b4 	.word	0x200002b4

08007ce0 <free>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	@ (8007cec <free+0xc>)
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f001 bdc7 	b.w	8009878 <_free_r>
 8007cea:	bf00      	nop
 8007cec:	200002b4 	.word	0x200002b4

08007cf0 <sbrk_aligned>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8007d30 <sbrk_aligned+0x40>)
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	6831      	ldr	r1, [r6, #0]
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	b911      	cbnz	r1, 8007d02 <sbrk_aligned+0x12>
 8007cfc:	f000 ff12 	bl	8008b24 <_sbrk_r>
 8007d00:	6030      	str	r0, [r6, #0]
 8007d02:	4621      	mov	r1, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 ff0d 	bl	8008b24 <_sbrk_r>
 8007d0a:	1c43      	adds	r3, r0, #1
 8007d0c:	d103      	bne.n	8007d16 <sbrk_aligned+0x26>
 8007d0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d12:	4620      	mov	r0, r4
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
 8007d16:	1cc4      	adds	r4, r0, #3
 8007d18:	f024 0403 	bic.w	r4, r4, #3
 8007d1c:	42a0      	cmp	r0, r4
 8007d1e:	d0f8      	beq.n	8007d12 <sbrk_aligned+0x22>
 8007d20:	1a21      	subs	r1, r4, r0
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 fefe 	bl	8008b24 <_sbrk_r>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d1f2      	bne.n	8007d12 <sbrk_aligned+0x22>
 8007d2c:	e7ef      	b.n	8007d0e <sbrk_aligned+0x1e>
 8007d2e:	bf00      	nop
 8007d30:	2001e67c 	.word	0x2001e67c

08007d34 <_malloc_r>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	1ccd      	adds	r5, r1, #3
 8007d3a:	f025 0503 	bic.w	r5, r5, #3
 8007d3e:	3508      	adds	r5, #8
 8007d40:	2d0c      	cmp	r5, #12
 8007d42:	bf38      	it	cc
 8007d44:	250c      	movcc	r5, #12
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	4606      	mov	r6, r0
 8007d4a:	db01      	blt.n	8007d50 <_malloc_r+0x1c>
 8007d4c:	42a9      	cmp	r1, r5
 8007d4e:	d904      	bls.n	8007d5a <_malloc_r+0x26>
 8007d50:	230c      	movs	r3, #12
 8007d52:	6033      	str	r3, [r6, #0]
 8007d54:	2000      	movs	r0, #0
 8007d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e30 <_malloc_r+0xfc>
 8007d5e:	f000 f869 	bl	8007e34 <__malloc_lock>
 8007d62:	f8d8 3000 	ldr.w	r3, [r8]
 8007d66:	461c      	mov	r4, r3
 8007d68:	bb44      	cbnz	r4, 8007dbc <_malloc_r+0x88>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff ffbf 	bl	8007cf0 <sbrk_aligned>
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	4604      	mov	r4, r0
 8007d76:	d158      	bne.n	8007e2a <_malloc_r+0xf6>
 8007d78:	f8d8 4000 	ldr.w	r4, [r8]
 8007d7c:	4627      	mov	r7, r4
 8007d7e:	2f00      	cmp	r7, #0
 8007d80:	d143      	bne.n	8007e0a <_malloc_r+0xd6>
 8007d82:	2c00      	cmp	r4, #0
 8007d84:	d04b      	beq.n	8007e1e <_malloc_r+0xea>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	4639      	mov	r1, r7
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	eb04 0903 	add.w	r9, r4, r3
 8007d90:	f000 fec8 	bl	8008b24 <_sbrk_r>
 8007d94:	4581      	cmp	r9, r0
 8007d96:	d142      	bne.n	8007e1e <_malloc_r+0xea>
 8007d98:	6821      	ldr	r1, [r4, #0]
 8007d9a:	1a6d      	subs	r5, r5, r1
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7ff ffa6 	bl	8007cf0 <sbrk_aligned>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d03a      	beq.n	8007e1e <_malloc_r+0xea>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	442b      	add	r3, r5
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	f8d8 3000 	ldr.w	r3, [r8]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	bb62      	cbnz	r2, 8007e10 <_malloc_r+0xdc>
 8007db6:	f8c8 7000 	str.w	r7, [r8]
 8007dba:	e00f      	b.n	8007ddc <_malloc_r+0xa8>
 8007dbc:	6822      	ldr	r2, [r4, #0]
 8007dbe:	1b52      	subs	r2, r2, r5
 8007dc0:	d420      	bmi.n	8007e04 <_malloc_r+0xd0>
 8007dc2:	2a0b      	cmp	r2, #11
 8007dc4:	d917      	bls.n	8007df6 <_malloc_r+0xc2>
 8007dc6:	1961      	adds	r1, r4, r5
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	6025      	str	r5, [r4, #0]
 8007dcc:	bf18      	it	ne
 8007dce:	6059      	strne	r1, [r3, #4]
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	bf08      	it	eq
 8007dd4:	f8c8 1000 	streq.w	r1, [r8]
 8007dd8:	5162      	str	r2, [r4, r5]
 8007dda:	604b      	str	r3, [r1, #4]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f82f 	bl	8007e40 <__malloc_unlock>
 8007de2:	f104 000b 	add.w	r0, r4, #11
 8007de6:	1d23      	adds	r3, r4, #4
 8007de8:	f020 0007 	bic.w	r0, r0, #7
 8007dec:	1ac2      	subs	r2, r0, r3
 8007dee:	bf1c      	itt	ne
 8007df0:	1a1b      	subne	r3, r3, r0
 8007df2:	50a3      	strne	r3, [r4, r2]
 8007df4:	e7af      	b.n	8007d56 <_malloc_r+0x22>
 8007df6:	6862      	ldr	r2, [r4, #4]
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	bf0c      	ite	eq
 8007dfc:	f8c8 2000 	streq.w	r2, [r8]
 8007e00:	605a      	strne	r2, [r3, #4]
 8007e02:	e7eb      	b.n	8007ddc <_malloc_r+0xa8>
 8007e04:	4623      	mov	r3, r4
 8007e06:	6864      	ldr	r4, [r4, #4]
 8007e08:	e7ae      	b.n	8007d68 <_malloc_r+0x34>
 8007e0a:	463c      	mov	r4, r7
 8007e0c:	687f      	ldr	r7, [r7, #4]
 8007e0e:	e7b6      	b.n	8007d7e <_malloc_r+0x4a>
 8007e10:	461a      	mov	r2, r3
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d1fb      	bne.n	8007e10 <_malloc_r+0xdc>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6053      	str	r3, [r2, #4]
 8007e1c:	e7de      	b.n	8007ddc <_malloc_r+0xa8>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	4630      	mov	r0, r6
 8007e24:	f000 f80c 	bl	8007e40 <__malloc_unlock>
 8007e28:	e794      	b.n	8007d54 <_malloc_r+0x20>
 8007e2a:	6005      	str	r5, [r0, #0]
 8007e2c:	e7d6      	b.n	8007ddc <_malloc_r+0xa8>
 8007e2e:	bf00      	nop
 8007e30:	2001e680 	.word	0x2001e680

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	@ (8007e3c <__malloc_lock+0x8>)
 8007e36:	f000 bec2 	b.w	8008bbe <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	2001e7c4 	.word	0x2001e7c4

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	@ (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f000 bebd 	b.w	8008bc0 <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	2001e7c4 	.word	0x2001e7c4

08007e4c <_strtoul_l.constprop.0>:
 8007e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e50:	4e34      	ldr	r6, [pc, #208]	@ (8007f24 <_strtoul_l.constprop.0+0xd8>)
 8007e52:	4686      	mov	lr, r0
 8007e54:	460d      	mov	r5, r1
 8007e56:	4628      	mov	r0, r5
 8007e58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e5c:	5d37      	ldrb	r7, [r6, r4]
 8007e5e:	f017 0708 	ands.w	r7, r7, #8
 8007e62:	d1f8      	bne.n	8007e56 <_strtoul_l.constprop.0+0xa>
 8007e64:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e66:	d12f      	bne.n	8007ec8 <_strtoul_l.constprop.0+0x7c>
 8007e68:	782c      	ldrb	r4, [r5, #0]
 8007e6a:	2701      	movs	r7, #1
 8007e6c:	1c85      	adds	r5, r0, #2
 8007e6e:	f033 0010 	bics.w	r0, r3, #16
 8007e72:	d109      	bne.n	8007e88 <_strtoul_l.constprop.0+0x3c>
 8007e74:	2c30      	cmp	r4, #48	@ 0x30
 8007e76:	d12c      	bne.n	8007ed2 <_strtoul_l.constprop.0+0x86>
 8007e78:	7828      	ldrb	r0, [r5, #0]
 8007e7a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007e7e:	2858      	cmp	r0, #88	@ 0x58
 8007e80:	d127      	bne.n	8007ed2 <_strtoul_l.constprop.0+0x86>
 8007e82:	786c      	ldrb	r4, [r5, #1]
 8007e84:	2310      	movs	r3, #16
 8007e86:	3502      	adds	r5, #2
 8007e88:	f04f 38ff 	mov.w	r8, #4294967295
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007e92:	fb03 f908 	mul.w	r9, r3, r8
 8007e96:	ea6f 0909 	mvn.w	r9, r9
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007ea0:	f1bc 0f09 	cmp.w	ip, #9
 8007ea4:	d81c      	bhi.n	8007ee0 <_strtoul_l.constprop.0+0x94>
 8007ea6:	4664      	mov	r4, ip
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	dd2a      	ble.n	8007f02 <_strtoul_l.constprop.0+0xb6>
 8007eac:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007eb0:	d007      	beq.n	8007ec2 <_strtoul_l.constprop.0+0x76>
 8007eb2:	4580      	cmp	r8, r0
 8007eb4:	d322      	bcc.n	8007efc <_strtoul_l.constprop.0+0xb0>
 8007eb6:	d101      	bne.n	8007ebc <_strtoul_l.constprop.0+0x70>
 8007eb8:	45a1      	cmp	r9, r4
 8007eba:	db1f      	blt.n	8007efc <_strtoul_l.constprop.0+0xb0>
 8007ebc:	fb00 4003 	mla	r0, r0, r3, r4
 8007ec0:	2601      	movs	r6, #1
 8007ec2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ec6:	e7e9      	b.n	8007e9c <_strtoul_l.constprop.0+0x50>
 8007ec8:	2c2b      	cmp	r4, #43	@ 0x2b
 8007eca:	bf04      	itt	eq
 8007ecc:	782c      	ldrbeq	r4, [r5, #0]
 8007ece:	1c85      	addeq	r5, r0, #2
 8007ed0:	e7cd      	b.n	8007e6e <_strtoul_l.constprop.0+0x22>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1d8      	bne.n	8007e88 <_strtoul_l.constprop.0+0x3c>
 8007ed6:	2c30      	cmp	r4, #48	@ 0x30
 8007ed8:	bf0c      	ite	eq
 8007eda:	2308      	moveq	r3, #8
 8007edc:	230a      	movne	r3, #10
 8007ede:	e7d3      	b.n	8007e88 <_strtoul_l.constprop.0+0x3c>
 8007ee0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007ee4:	f1bc 0f19 	cmp.w	ip, #25
 8007ee8:	d801      	bhi.n	8007eee <_strtoul_l.constprop.0+0xa2>
 8007eea:	3c37      	subs	r4, #55	@ 0x37
 8007eec:	e7dc      	b.n	8007ea8 <_strtoul_l.constprop.0+0x5c>
 8007eee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007ef2:	f1bc 0f19 	cmp.w	ip, #25
 8007ef6:	d804      	bhi.n	8007f02 <_strtoul_l.constprop.0+0xb6>
 8007ef8:	3c57      	subs	r4, #87	@ 0x57
 8007efa:	e7d5      	b.n	8007ea8 <_strtoul_l.constprop.0+0x5c>
 8007efc:	f04f 36ff 	mov.w	r6, #4294967295
 8007f00:	e7df      	b.n	8007ec2 <_strtoul_l.constprop.0+0x76>
 8007f02:	1c73      	adds	r3, r6, #1
 8007f04:	d106      	bne.n	8007f14 <_strtoul_l.constprop.0+0xc8>
 8007f06:	2322      	movs	r3, #34	@ 0x22
 8007f08:	f8ce 3000 	str.w	r3, [lr]
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	b932      	cbnz	r2, 8007f1e <_strtoul_l.constprop.0+0xd2>
 8007f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f14:	b107      	cbz	r7, 8007f18 <_strtoul_l.constprop.0+0xcc>
 8007f16:	4240      	negs	r0, r0
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	d0f9      	beq.n	8007f10 <_strtoul_l.constprop.0+0xc4>
 8007f1c:	b106      	cbz	r6, 8007f20 <_strtoul_l.constprop.0+0xd4>
 8007f1e:	1e69      	subs	r1, r5, #1
 8007f20:	6011      	str	r1, [r2, #0]
 8007f22:	e7f5      	b.n	8007f10 <_strtoul_l.constprop.0+0xc4>
 8007f24:	0800ace5 	.word	0x0800ace5

08007f28 <strtoul>:
 8007f28:	4613      	mov	r3, r2
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	4802      	ldr	r0, [pc, #8]	@ (8007f38 <strtoul+0x10>)
 8007f30:	6800      	ldr	r0, [r0, #0]
 8007f32:	f7ff bf8b 	b.w	8007e4c <_strtoul_l.constprop.0>
 8007f36:	bf00      	nop
 8007f38:	200002b4 	.word	0x200002b4

08007f3c <__cvt>:
 8007f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	ec57 6b10 	vmov	r6, r7, d0
 8007f44:	2f00      	cmp	r7, #0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4619      	mov	r1, r3
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	bfbb      	ittet	lt
 8007f4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f52:	461f      	movlt	r7, r3
 8007f54:	2300      	movge	r3, #0
 8007f56:	232d      	movlt	r3, #45	@ 0x2d
 8007f58:	700b      	strb	r3, [r1, #0]
 8007f5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f60:	4691      	mov	r9, r2
 8007f62:	f023 0820 	bic.w	r8, r3, #32
 8007f66:	bfbc      	itt	lt
 8007f68:	4632      	movlt	r2, r6
 8007f6a:	4616      	movlt	r6, r2
 8007f6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f70:	d005      	beq.n	8007f7e <__cvt+0x42>
 8007f72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f76:	d100      	bne.n	8007f7a <__cvt+0x3e>
 8007f78:	3401      	adds	r4, #1
 8007f7a:	2102      	movs	r1, #2
 8007f7c:	e000      	b.n	8007f80 <__cvt+0x44>
 8007f7e:	2103      	movs	r1, #3
 8007f80:	ab03      	add	r3, sp, #12
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	ab02      	add	r3, sp, #8
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	ec47 6b10 	vmov	d0, r6, r7
 8007f8c:	4653      	mov	r3, sl
 8007f8e:	4622      	mov	r2, r4
 8007f90:	f000 feae 	bl	8008cf0 <_dtoa_r>
 8007f94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f98:	4605      	mov	r5, r0
 8007f9a:	d119      	bne.n	8007fd0 <__cvt+0x94>
 8007f9c:	f019 0f01 	tst.w	r9, #1
 8007fa0:	d00e      	beq.n	8007fc0 <__cvt+0x84>
 8007fa2:	eb00 0904 	add.w	r9, r0, r4
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4630      	mov	r0, r6
 8007fac:	4639      	mov	r1, r7
 8007fae:	f7f8 fdbb 	bl	8000b28 <__aeabi_dcmpeq>
 8007fb2:	b108      	cbz	r0, 8007fb8 <__cvt+0x7c>
 8007fb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fb8:	2230      	movs	r2, #48	@ 0x30
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	454b      	cmp	r3, r9
 8007fbe:	d31e      	bcc.n	8007ffe <__cvt+0xc2>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fc4:	1b5b      	subs	r3, r3, r5
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	b004      	add	sp, #16
 8007fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fd4:	eb00 0904 	add.w	r9, r0, r4
 8007fd8:	d1e5      	bne.n	8007fa6 <__cvt+0x6a>
 8007fda:	7803      	ldrb	r3, [r0, #0]
 8007fdc:	2b30      	cmp	r3, #48	@ 0x30
 8007fde:	d10a      	bne.n	8007ff6 <__cvt+0xba>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fd9e 	bl	8000b28 <__aeabi_dcmpeq>
 8007fec:	b918      	cbnz	r0, 8007ff6 <__cvt+0xba>
 8007fee:	f1c4 0401 	rsb	r4, r4, #1
 8007ff2:	f8ca 4000 	str.w	r4, [sl]
 8007ff6:	f8da 3000 	ldr.w	r3, [sl]
 8007ffa:	4499      	add	r9, r3
 8007ffc:	e7d3      	b.n	8007fa6 <__cvt+0x6a>
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	9103      	str	r1, [sp, #12]
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e7d9      	b.n	8007fba <__cvt+0x7e>

08008006 <__exponent>:
 8008006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008008:	2900      	cmp	r1, #0
 800800a:	bfba      	itte	lt
 800800c:	4249      	neglt	r1, r1
 800800e:	232d      	movlt	r3, #45	@ 0x2d
 8008010:	232b      	movge	r3, #43	@ 0x2b
 8008012:	2909      	cmp	r1, #9
 8008014:	7002      	strb	r2, [r0, #0]
 8008016:	7043      	strb	r3, [r0, #1]
 8008018:	dd29      	ble.n	800806e <__exponent+0x68>
 800801a:	f10d 0307 	add.w	r3, sp, #7
 800801e:	461d      	mov	r5, r3
 8008020:	270a      	movs	r7, #10
 8008022:	461a      	mov	r2, r3
 8008024:	fbb1 f6f7 	udiv	r6, r1, r7
 8008028:	fb07 1416 	mls	r4, r7, r6, r1
 800802c:	3430      	adds	r4, #48	@ 0x30
 800802e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008032:	460c      	mov	r4, r1
 8008034:	2c63      	cmp	r4, #99	@ 0x63
 8008036:	f103 33ff 	add.w	r3, r3, #4294967295
 800803a:	4631      	mov	r1, r6
 800803c:	dcf1      	bgt.n	8008022 <__exponent+0x1c>
 800803e:	3130      	adds	r1, #48	@ 0x30
 8008040:	1e94      	subs	r4, r2, #2
 8008042:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008046:	1c41      	adds	r1, r0, #1
 8008048:	4623      	mov	r3, r4
 800804a:	42ab      	cmp	r3, r5
 800804c:	d30a      	bcc.n	8008064 <__exponent+0x5e>
 800804e:	f10d 0309 	add.w	r3, sp, #9
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	42ac      	cmp	r4, r5
 8008056:	bf88      	it	hi
 8008058:	2300      	movhi	r3, #0
 800805a:	3302      	adds	r3, #2
 800805c:	4403      	add	r3, r0
 800805e:	1a18      	subs	r0, r3, r0
 8008060:	b003      	add	sp, #12
 8008062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008064:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008068:	f801 6f01 	strb.w	r6, [r1, #1]!
 800806c:	e7ed      	b.n	800804a <__exponent+0x44>
 800806e:	2330      	movs	r3, #48	@ 0x30
 8008070:	3130      	adds	r1, #48	@ 0x30
 8008072:	7083      	strb	r3, [r0, #2]
 8008074:	70c1      	strb	r1, [r0, #3]
 8008076:	1d03      	adds	r3, r0, #4
 8008078:	e7f1      	b.n	800805e <__exponent+0x58>
	...

0800807c <_printf_float>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	b08d      	sub	sp, #52	@ 0x34
 8008082:	460c      	mov	r4, r1
 8008084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008088:	4616      	mov	r6, r2
 800808a:	461f      	mov	r7, r3
 800808c:	4605      	mov	r5, r0
 800808e:	f000 fd11 	bl	8008ab4 <_localeconv_r>
 8008092:	6803      	ldr	r3, [r0, #0]
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	4618      	mov	r0, r3
 8008098:	f7f8 f91a 	bl	80002d0 <strlen>
 800809c:	2300      	movs	r3, #0
 800809e:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a0:	f8d8 3000 	ldr.w	r3, [r8]
 80080a4:	9005      	str	r0, [sp, #20]
 80080a6:	3307      	adds	r3, #7
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	f103 0208 	add.w	r2, r3, #8
 80080b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080b4:	f8d4 b000 	ldr.w	fp, [r4]
 80080b8:	f8c8 2000 	str.w	r2, [r8]
 80080bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080c4:	9307      	str	r3, [sp, #28]
 80080c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80080ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008344 <_printf_float+0x2c8>)
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	f7f8 fd58 	bl	8000b8c <__aeabi_dcmpun>
 80080dc:	bb70      	cbnz	r0, 800813c <_printf_float+0xc0>
 80080de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080e2:	4b98      	ldr	r3, [pc, #608]	@ (8008344 <_printf_float+0x2c8>)
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	f7f8 fd32 	bl	8000b50 <__aeabi_dcmple>
 80080ec:	bb30      	cbnz	r0, 800813c <_printf_float+0xc0>
 80080ee:	2200      	movs	r2, #0
 80080f0:	2300      	movs	r3, #0
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 fd21 	bl	8000b3c <__aeabi_dcmplt>
 80080fa:	b110      	cbz	r0, 8008102 <_printf_float+0x86>
 80080fc:	232d      	movs	r3, #45	@ 0x2d
 80080fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008102:	4a91      	ldr	r2, [pc, #580]	@ (8008348 <_printf_float+0x2cc>)
 8008104:	4b91      	ldr	r3, [pc, #580]	@ (800834c <_printf_float+0x2d0>)
 8008106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800810a:	bf94      	ite	ls
 800810c:	4690      	movls	r8, r2
 800810e:	4698      	movhi	r8, r3
 8008110:	2303      	movs	r3, #3
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	f02b 0304 	bic.w	r3, fp, #4
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	f04f 0900 	mov.w	r9, #0
 800811e:	9700      	str	r7, [sp, #0]
 8008120:	4633      	mov	r3, r6
 8008122:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f9d2 	bl	80084d0 <_printf_common>
 800812c:	3001      	adds	r0, #1
 800812e:	f040 808d 	bne.w	800824c <_printf_float+0x1d0>
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	b00d      	add	sp, #52	@ 0x34
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	4642      	mov	r2, r8
 800813e:	464b      	mov	r3, r9
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 fd22 	bl	8000b8c <__aeabi_dcmpun>
 8008148:	b140      	cbz	r0, 800815c <_printf_float+0xe0>
 800814a:	464b      	mov	r3, r9
 800814c:	2b00      	cmp	r3, #0
 800814e:	bfbc      	itt	lt
 8008150:	232d      	movlt	r3, #45	@ 0x2d
 8008152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008156:	4a7e      	ldr	r2, [pc, #504]	@ (8008350 <_printf_float+0x2d4>)
 8008158:	4b7e      	ldr	r3, [pc, #504]	@ (8008354 <_printf_float+0x2d8>)
 800815a:	e7d4      	b.n	8008106 <_printf_float+0x8a>
 800815c:	6863      	ldr	r3, [r4, #4]
 800815e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008162:	9206      	str	r2, [sp, #24]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	d13b      	bne.n	80081e0 <_printf_float+0x164>
 8008168:	2306      	movs	r3, #6
 800816a:	6063      	str	r3, [r4, #4]
 800816c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008170:	2300      	movs	r3, #0
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	ab0a      	add	r3, sp, #40	@ 0x28
 8008178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800817c:	ab09      	add	r3, sp, #36	@ 0x24
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	ec49 8b10 	vmov	d0, r8, r9
 8008186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800818a:	4628      	mov	r0, r5
 800818c:	f7ff fed6 	bl	8007f3c <__cvt>
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008194:	2b47      	cmp	r3, #71	@ 0x47
 8008196:	4680      	mov	r8, r0
 8008198:	d129      	bne.n	80081ee <_printf_float+0x172>
 800819a:	1cc8      	adds	r0, r1, #3
 800819c:	db02      	blt.n	80081a4 <_printf_float+0x128>
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	4299      	cmp	r1, r3
 80081a2:	dd41      	ble.n	8008228 <_printf_float+0x1ac>
 80081a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80081a8:	fa5f fa8a 	uxtb.w	sl, sl
 80081ac:	3901      	subs	r1, #1
 80081ae:	4652      	mov	r2, sl
 80081b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80081b6:	f7ff ff26 	bl	8008006 <__exponent>
 80081ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081bc:	1813      	adds	r3, r2, r0
 80081be:	2a01      	cmp	r2, #1
 80081c0:	4681      	mov	r9, r0
 80081c2:	6123      	str	r3, [r4, #16]
 80081c4:	dc02      	bgt.n	80081cc <_printf_float+0x150>
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	07d2      	lsls	r2, r2, #31
 80081ca:	d501      	bpl.n	80081d0 <_printf_float+0x154>
 80081cc:	3301      	adds	r3, #1
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0a2      	beq.n	800811e <_printf_float+0xa2>
 80081d8:	232d      	movs	r3, #45	@ 0x2d
 80081da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081de:	e79e      	b.n	800811e <_printf_float+0xa2>
 80081e0:	9a06      	ldr	r2, [sp, #24]
 80081e2:	2a47      	cmp	r2, #71	@ 0x47
 80081e4:	d1c2      	bne.n	800816c <_printf_float+0xf0>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1c0      	bne.n	800816c <_printf_float+0xf0>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7bd      	b.n	800816a <_printf_float+0xee>
 80081ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081f2:	d9db      	bls.n	80081ac <_printf_float+0x130>
 80081f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80081f8:	d118      	bne.n	800822c <_printf_float+0x1b0>
 80081fa:	2900      	cmp	r1, #0
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	dd0b      	ble.n	8008218 <_printf_float+0x19c>
 8008200:	6121      	str	r1, [r4, #16]
 8008202:	b913      	cbnz	r3, 800820a <_printf_float+0x18e>
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	07d0      	lsls	r0, r2, #31
 8008208:	d502      	bpl.n	8008210 <_printf_float+0x194>
 800820a:	3301      	adds	r3, #1
 800820c:	440b      	add	r3, r1
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008212:	f04f 0900 	mov.w	r9, #0
 8008216:	e7db      	b.n	80081d0 <_printf_float+0x154>
 8008218:	b913      	cbnz	r3, 8008220 <_printf_float+0x1a4>
 800821a:	6822      	ldr	r2, [r4, #0]
 800821c:	07d2      	lsls	r2, r2, #31
 800821e:	d501      	bpl.n	8008224 <_printf_float+0x1a8>
 8008220:	3302      	adds	r3, #2
 8008222:	e7f4      	b.n	800820e <_printf_float+0x192>
 8008224:	2301      	movs	r3, #1
 8008226:	e7f2      	b.n	800820e <_printf_float+0x192>
 8008228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800822c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822e:	4299      	cmp	r1, r3
 8008230:	db05      	blt.n	800823e <_printf_float+0x1c2>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	6121      	str	r1, [r4, #16]
 8008236:	07d8      	lsls	r0, r3, #31
 8008238:	d5ea      	bpl.n	8008210 <_printf_float+0x194>
 800823a:	1c4b      	adds	r3, r1, #1
 800823c:	e7e7      	b.n	800820e <_printf_float+0x192>
 800823e:	2900      	cmp	r1, #0
 8008240:	bfd4      	ite	le
 8008242:	f1c1 0202 	rsble	r2, r1, #2
 8008246:	2201      	movgt	r2, #1
 8008248:	4413      	add	r3, r2
 800824a:	e7e0      	b.n	800820e <_printf_float+0x192>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	055a      	lsls	r2, r3, #21
 8008250:	d407      	bmi.n	8008262 <_printf_float+0x1e6>
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	4642      	mov	r2, r8
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	d12b      	bne.n	80082b8 <_printf_float+0x23c>
 8008260:	e767      	b.n	8008132 <_printf_float+0xb6>
 8008262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008266:	f240 80dd 	bls.w	8008424 <_printf_float+0x3a8>
 800826a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800826e:	2200      	movs	r2, #0
 8008270:	2300      	movs	r3, #0
 8008272:	f7f8 fc59 	bl	8000b28 <__aeabi_dcmpeq>
 8008276:	2800      	cmp	r0, #0
 8008278:	d033      	beq.n	80082e2 <_printf_float+0x266>
 800827a:	4a37      	ldr	r2, [pc, #220]	@ (8008358 <_printf_float+0x2dc>)
 800827c:	2301      	movs	r3, #1
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	47b8      	blx	r7
 8008284:	3001      	adds	r0, #1
 8008286:	f43f af54 	beq.w	8008132 <_printf_float+0xb6>
 800828a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800828e:	4543      	cmp	r3, r8
 8008290:	db02      	blt.n	8008298 <_printf_float+0x21c>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	07d8      	lsls	r0, r3, #31
 8008296:	d50f      	bpl.n	80082b8 <_printf_float+0x23c>
 8008298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af45 	beq.w	8008132 <_printf_float+0xb6>
 80082a8:	f04f 0900 	mov.w	r9, #0
 80082ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80082b0:	f104 0a1a 	add.w	sl, r4, #26
 80082b4:	45c8      	cmp	r8, r9
 80082b6:	dc09      	bgt.n	80082cc <_printf_float+0x250>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	079b      	lsls	r3, r3, #30
 80082bc:	f100 8103 	bmi.w	80084c6 <_printf_float+0x44a>
 80082c0:	68e0      	ldr	r0, [r4, #12]
 80082c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c4:	4298      	cmp	r0, r3
 80082c6:	bfb8      	it	lt
 80082c8:	4618      	movlt	r0, r3
 80082ca:	e734      	b.n	8008136 <_printf_float+0xba>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4652      	mov	r2, sl
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f af2b 	beq.w	8008132 <_printf_float+0xb6>
 80082dc:	f109 0901 	add.w	r9, r9, #1
 80082e0:	e7e8      	b.n	80082b4 <_printf_float+0x238>
 80082e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dc39      	bgt.n	800835c <_printf_float+0x2e0>
 80082e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008358 <_printf_float+0x2dc>)
 80082ea:	2301      	movs	r3, #1
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af1d 	beq.w	8008132 <_printf_float+0xb6>
 80082f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80082fc:	ea59 0303 	orrs.w	r3, r9, r3
 8008300:	d102      	bne.n	8008308 <_printf_float+0x28c>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	07d9      	lsls	r1, r3, #31
 8008306:	d5d7      	bpl.n	80082b8 <_printf_float+0x23c>
 8008308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af0d 	beq.w	8008132 <_printf_float+0xb6>
 8008318:	f04f 0a00 	mov.w	sl, #0
 800831c:	f104 0b1a 	add.w	fp, r4, #26
 8008320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008322:	425b      	negs	r3, r3
 8008324:	4553      	cmp	r3, sl
 8008326:	dc01      	bgt.n	800832c <_printf_float+0x2b0>
 8008328:	464b      	mov	r3, r9
 800832a:	e793      	b.n	8008254 <_printf_float+0x1d8>
 800832c:	2301      	movs	r3, #1
 800832e:	465a      	mov	r2, fp
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f aefb 	beq.w	8008132 <_printf_float+0xb6>
 800833c:	f10a 0a01 	add.w	sl, sl, #1
 8008340:	e7ee      	b.n	8008320 <_printf_float+0x2a4>
 8008342:	bf00      	nop
 8008344:	7fefffff 	.word	0x7fefffff
 8008348:	0800ade5 	.word	0x0800ade5
 800834c:	0800ade9 	.word	0x0800ade9
 8008350:	0800aded 	.word	0x0800aded
 8008354:	0800adf1 	.word	0x0800adf1
 8008358:	0800adf5 	.word	0x0800adf5
 800835c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800835e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008362:	4553      	cmp	r3, sl
 8008364:	bfa8      	it	ge
 8008366:	4653      	movge	r3, sl
 8008368:	2b00      	cmp	r3, #0
 800836a:	4699      	mov	r9, r3
 800836c:	dc36      	bgt.n	80083dc <_printf_float+0x360>
 800836e:	f04f 0b00 	mov.w	fp, #0
 8008372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008376:	f104 021a 	add.w	r2, r4, #26
 800837a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800837c:	9306      	str	r3, [sp, #24]
 800837e:	eba3 0309 	sub.w	r3, r3, r9
 8008382:	455b      	cmp	r3, fp
 8008384:	dc31      	bgt.n	80083ea <_printf_float+0x36e>
 8008386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008388:	459a      	cmp	sl, r3
 800838a:	dc3a      	bgt.n	8008402 <_printf_float+0x386>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	07da      	lsls	r2, r3, #31
 8008390:	d437      	bmi.n	8008402 <_printf_float+0x386>
 8008392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008394:	ebaa 0903 	sub.w	r9, sl, r3
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	ebaa 0303 	sub.w	r3, sl, r3
 800839e:	4599      	cmp	r9, r3
 80083a0:	bfa8      	it	ge
 80083a2:	4699      	movge	r9, r3
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	dc33      	bgt.n	8008412 <_printf_float+0x396>
 80083aa:	f04f 0800 	mov.w	r8, #0
 80083ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083b2:	f104 0b1a 	add.w	fp, r4, #26
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	ebaa 0303 	sub.w	r3, sl, r3
 80083bc:	eba3 0309 	sub.w	r3, r3, r9
 80083c0:	4543      	cmp	r3, r8
 80083c2:	f77f af79 	ble.w	80082b8 <_printf_float+0x23c>
 80083c6:	2301      	movs	r3, #1
 80083c8:	465a      	mov	r2, fp
 80083ca:	4631      	mov	r1, r6
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b8      	blx	r7
 80083d0:	3001      	adds	r0, #1
 80083d2:	f43f aeae 	beq.w	8008132 <_printf_float+0xb6>
 80083d6:	f108 0801 	add.w	r8, r8, #1
 80083da:	e7ec      	b.n	80083b6 <_printf_float+0x33a>
 80083dc:	4642      	mov	r2, r8
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	d1c2      	bne.n	800836e <_printf_float+0x2f2>
 80083e8:	e6a3      	b.n	8008132 <_printf_float+0xb6>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	9206      	str	r2, [sp, #24]
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f ae9c 	beq.w	8008132 <_printf_float+0xb6>
 80083fa:	9a06      	ldr	r2, [sp, #24]
 80083fc:	f10b 0b01 	add.w	fp, fp, #1
 8008400:	e7bb      	b.n	800837a <_printf_float+0x2fe>
 8008402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	47b8      	blx	r7
 800840c:	3001      	adds	r0, #1
 800840e:	d1c0      	bne.n	8008392 <_printf_float+0x316>
 8008410:	e68f      	b.n	8008132 <_printf_float+0xb6>
 8008412:	9a06      	ldr	r2, [sp, #24]
 8008414:	464b      	mov	r3, r9
 8008416:	4442      	add	r2, r8
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	d1c3      	bne.n	80083aa <_printf_float+0x32e>
 8008422:	e686      	b.n	8008132 <_printf_float+0xb6>
 8008424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008428:	f1ba 0f01 	cmp.w	sl, #1
 800842c:	dc01      	bgt.n	8008432 <_printf_float+0x3b6>
 800842e:	07db      	lsls	r3, r3, #31
 8008430:	d536      	bpl.n	80084a0 <_printf_float+0x424>
 8008432:	2301      	movs	r3, #1
 8008434:	4642      	mov	r2, r8
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f ae78 	beq.w	8008132 <_printf_float+0xb6>
 8008442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	f43f ae70 	beq.w	8008132 <_printf_float+0xb6>
 8008452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800845e:	f7f8 fb63 	bl	8000b28 <__aeabi_dcmpeq>
 8008462:	b9c0      	cbnz	r0, 8008496 <_printf_float+0x41a>
 8008464:	4653      	mov	r3, sl
 8008466:	f108 0201 	add.w	r2, r8, #1
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	47b8      	blx	r7
 8008470:	3001      	adds	r0, #1
 8008472:	d10c      	bne.n	800848e <_printf_float+0x412>
 8008474:	e65d      	b.n	8008132 <_printf_float+0xb6>
 8008476:	2301      	movs	r3, #1
 8008478:	465a      	mov	r2, fp
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	47b8      	blx	r7
 8008480:	3001      	adds	r0, #1
 8008482:	f43f ae56 	beq.w	8008132 <_printf_float+0xb6>
 8008486:	f108 0801 	add.w	r8, r8, #1
 800848a:	45d0      	cmp	r8, sl
 800848c:	dbf3      	blt.n	8008476 <_printf_float+0x3fa>
 800848e:	464b      	mov	r3, r9
 8008490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008494:	e6df      	b.n	8008256 <_printf_float+0x1da>
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	f104 0b1a 	add.w	fp, r4, #26
 800849e:	e7f4      	b.n	800848a <_printf_float+0x40e>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4642      	mov	r2, r8
 80084a4:	e7e1      	b.n	800846a <_printf_float+0x3ee>
 80084a6:	2301      	movs	r3, #1
 80084a8:	464a      	mov	r2, r9
 80084aa:	4631      	mov	r1, r6
 80084ac:	4628      	mov	r0, r5
 80084ae:	47b8      	blx	r7
 80084b0:	3001      	adds	r0, #1
 80084b2:	f43f ae3e 	beq.w	8008132 <_printf_float+0xb6>
 80084b6:	f108 0801 	add.w	r8, r8, #1
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084be:	1a5b      	subs	r3, r3, r1
 80084c0:	4543      	cmp	r3, r8
 80084c2:	dcf0      	bgt.n	80084a6 <_printf_float+0x42a>
 80084c4:	e6fc      	b.n	80082c0 <_printf_float+0x244>
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	f104 0919 	add.w	r9, r4, #25
 80084ce:	e7f4      	b.n	80084ba <_printf_float+0x43e>

080084d0 <_printf_common>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	4616      	mov	r6, r2
 80084d6:	4698      	mov	r8, r3
 80084d8:	688a      	ldr	r2, [r1, #8]
 80084da:	690b      	ldr	r3, [r1, #16]
 80084dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bfb8      	it	lt
 80084e4:	4613      	movlt	r3, r2
 80084e6:	6033      	str	r3, [r6, #0]
 80084e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084ec:	4607      	mov	r7, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	b10a      	cbz	r2, 80084f6 <_printf_common+0x26>
 80084f2:	3301      	adds	r3, #1
 80084f4:	6033      	str	r3, [r6, #0]
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	0699      	lsls	r1, r3, #26
 80084fa:	bf42      	ittt	mi
 80084fc:	6833      	ldrmi	r3, [r6, #0]
 80084fe:	3302      	addmi	r3, #2
 8008500:	6033      	strmi	r3, [r6, #0]
 8008502:	6825      	ldr	r5, [r4, #0]
 8008504:	f015 0506 	ands.w	r5, r5, #6
 8008508:	d106      	bne.n	8008518 <_printf_common+0x48>
 800850a:	f104 0a19 	add.w	sl, r4, #25
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	6832      	ldr	r2, [r6, #0]
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	42ab      	cmp	r3, r5
 8008516:	dc26      	bgt.n	8008566 <_printf_common+0x96>
 8008518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	3b00      	subs	r3, #0
 8008520:	bf18      	it	ne
 8008522:	2301      	movne	r3, #1
 8008524:	0692      	lsls	r2, r2, #26
 8008526:	d42b      	bmi.n	8008580 <_printf_common+0xb0>
 8008528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800852c:	4641      	mov	r1, r8
 800852e:	4638      	mov	r0, r7
 8008530:	47c8      	blx	r9
 8008532:	3001      	adds	r0, #1
 8008534:	d01e      	beq.n	8008574 <_printf_common+0xa4>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	6922      	ldr	r2, [r4, #16]
 800853a:	f003 0306 	and.w	r3, r3, #6
 800853e:	2b04      	cmp	r3, #4
 8008540:	bf02      	ittt	eq
 8008542:	68e5      	ldreq	r5, [r4, #12]
 8008544:	6833      	ldreq	r3, [r6, #0]
 8008546:	1aed      	subeq	r5, r5, r3
 8008548:	68a3      	ldr	r3, [r4, #8]
 800854a:	bf0c      	ite	eq
 800854c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008550:	2500      	movne	r5, #0
 8008552:	4293      	cmp	r3, r2
 8008554:	bfc4      	itt	gt
 8008556:	1a9b      	subgt	r3, r3, r2
 8008558:	18ed      	addgt	r5, r5, r3
 800855a:	2600      	movs	r6, #0
 800855c:	341a      	adds	r4, #26
 800855e:	42b5      	cmp	r5, r6
 8008560:	d11a      	bne.n	8008598 <_printf_common+0xc8>
 8008562:	2000      	movs	r0, #0
 8008564:	e008      	b.n	8008578 <_printf_common+0xa8>
 8008566:	2301      	movs	r3, #1
 8008568:	4652      	mov	r2, sl
 800856a:	4641      	mov	r1, r8
 800856c:	4638      	mov	r0, r7
 800856e:	47c8      	blx	r9
 8008570:	3001      	adds	r0, #1
 8008572:	d103      	bne.n	800857c <_printf_common+0xac>
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857c:	3501      	adds	r5, #1
 800857e:	e7c6      	b.n	800850e <_printf_common+0x3e>
 8008580:	18e1      	adds	r1, r4, r3
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	2030      	movs	r0, #48	@ 0x30
 8008586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800858a:	4422      	add	r2, r4
 800858c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008594:	3302      	adds	r3, #2
 8008596:	e7c7      	b.n	8008528 <_printf_common+0x58>
 8008598:	2301      	movs	r3, #1
 800859a:	4622      	mov	r2, r4
 800859c:	4641      	mov	r1, r8
 800859e:	4638      	mov	r0, r7
 80085a0:	47c8      	blx	r9
 80085a2:	3001      	adds	r0, #1
 80085a4:	d0e6      	beq.n	8008574 <_printf_common+0xa4>
 80085a6:	3601      	adds	r6, #1
 80085a8:	e7d9      	b.n	800855e <_printf_common+0x8e>
	...

080085ac <_printf_i>:
 80085ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	7e0f      	ldrb	r7, [r1, #24]
 80085b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085b4:	2f78      	cmp	r7, #120	@ 0x78
 80085b6:	4691      	mov	r9, r2
 80085b8:	4680      	mov	r8, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	469a      	mov	sl, r3
 80085be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085c2:	d807      	bhi.n	80085d4 <_printf_i+0x28>
 80085c4:	2f62      	cmp	r7, #98	@ 0x62
 80085c6:	d80a      	bhi.n	80085de <_printf_i+0x32>
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	f000 80d2 	beq.w	8008772 <_printf_i+0x1c6>
 80085ce:	2f58      	cmp	r7, #88	@ 0x58
 80085d0:	f000 80b9 	beq.w	8008746 <_printf_i+0x19a>
 80085d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085dc:	e03a      	b.n	8008654 <_printf_i+0xa8>
 80085de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085e2:	2b15      	cmp	r3, #21
 80085e4:	d8f6      	bhi.n	80085d4 <_printf_i+0x28>
 80085e6:	a101      	add	r1, pc, #4	@ (adr r1, 80085ec <_printf_i+0x40>)
 80085e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085ec:	08008645 	.word	0x08008645
 80085f0:	08008659 	.word	0x08008659
 80085f4:	080085d5 	.word	0x080085d5
 80085f8:	080085d5 	.word	0x080085d5
 80085fc:	080085d5 	.word	0x080085d5
 8008600:	080085d5 	.word	0x080085d5
 8008604:	08008659 	.word	0x08008659
 8008608:	080085d5 	.word	0x080085d5
 800860c:	080085d5 	.word	0x080085d5
 8008610:	080085d5 	.word	0x080085d5
 8008614:	080085d5 	.word	0x080085d5
 8008618:	08008759 	.word	0x08008759
 800861c:	08008683 	.word	0x08008683
 8008620:	08008713 	.word	0x08008713
 8008624:	080085d5 	.word	0x080085d5
 8008628:	080085d5 	.word	0x080085d5
 800862c:	0800877b 	.word	0x0800877b
 8008630:	080085d5 	.word	0x080085d5
 8008634:	08008683 	.word	0x08008683
 8008638:	080085d5 	.word	0x080085d5
 800863c:	080085d5 	.word	0x080085d5
 8008640:	0800871b 	.word	0x0800871b
 8008644:	6833      	ldr	r3, [r6, #0]
 8008646:	1d1a      	adds	r2, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6032      	str	r2, [r6, #0]
 800864c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008654:	2301      	movs	r3, #1
 8008656:	e09d      	b.n	8008794 <_printf_i+0x1e8>
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	1d19      	adds	r1, r3, #4
 800865e:	6031      	str	r1, [r6, #0]
 8008660:	0606      	lsls	r6, r0, #24
 8008662:	d501      	bpl.n	8008668 <_printf_i+0xbc>
 8008664:	681d      	ldr	r5, [r3, #0]
 8008666:	e003      	b.n	8008670 <_printf_i+0xc4>
 8008668:	0645      	lsls	r5, r0, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0xb8>
 800866c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008670:	2d00      	cmp	r5, #0
 8008672:	da03      	bge.n	800867c <_printf_i+0xd0>
 8008674:	232d      	movs	r3, #45	@ 0x2d
 8008676:	426d      	negs	r5, r5
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800867c:	4859      	ldr	r0, [pc, #356]	@ (80087e4 <_printf_i+0x238>)
 800867e:	230a      	movs	r3, #10
 8008680:	e011      	b.n	80086a6 <_printf_i+0xfa>
 8008682:	6821      	ldr	r1, [r4, #0]
 8008684:	6833      	ldr	r3, [r6, #0]
 8008686:	0608      	lsls	r0, r1, #24
 8008688:	f853 5b04 	ldr.w	r5, [r3], #4
 800868c:	d402      	bmi.n	8008694 <_printf_i+0xe8>
 800868e:	0649      	lsls	r1, r1, #25
 8008690:	bf48      	it	mi
 8008692:	b2ad      	uxthmi	r5, r5
 8008694:	2f6f      	cmp	r7, #111	@ 0x6f
 8008696:	4853      	ldr	r0, [pc, #332]	@ (80087e4 <_printf_i+0x238>)
 8008698:	6033      	str	r3, [r6, #0]
 800869a:	bf14      	ite	ne
 800869c:	230a      	movne	r3, #10
 800869e:	2308      	moveq	r3, #8
 80086a0:	2100      	movs	r1, #0
 80086a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086a6:	6866      	ldr	r6, [r4, #4]
 80086a8:	60a6      	str	r6, [r4, #8]
 80086aa:	2e00      	cmp	r6, #0
 80086ac:	bfa2      	ittt	ge
 80086ae:	6821      	ldrge	r1, [r4, #0]
 80086b0:	f021 0104 	bicge.w	r1, r1, #4
 80086b4:	6021      	strge	r1, [r4, #0]
 80086b6:	b90d      	cbnz	r5, 80086bc <_printf_i+0x110>
 80086b8:	2e00      	cmp	r6, #0
 80086ba:	d04b      	beq.n	8008754 <_printf_i+0x1a8>
 80086bc:	4616      	mov	r6, r2
 80086be:	fbb5 f1f3 	udiv	r1, r5, r3
 80086c2:	fb03 5711 	mls	r7, r3, r1, r5
 80086c6:	5dc7      	ldrb	r7, [r0, r7]
 80086c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086cc:	462f      	mov	r7, r5
 80086ce:	42bb      	cmp	r3, r7
 80086d0:	460d      	mov	r5, r1
 80086d2:	d9f4      	bls.n	80086be <_printf_i+0x112>
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d10b      	bne.n	80086f0 <_printf_i+0x144>
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	07df      	lsls	r7, r3, #31
 80086dc:	d508      	bpl.n	80086f0 <_printf_i+0x144>
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	6861      	ldr	r1, [r4, #4]
 80086e2:	4299      	cmp	r1, r3
 80086e4:	bfde      	ittt	le
 80086e6:	2330      	movle	r3, #48	@ 0x30
 80086e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086f0:	1b92      	subs	r2, r2, r6
 80086f2:	6122      	str	r2, [r4, #16]
 80086f4:	f8cd a000 	str.w	sl, [sp]
 80086f8:	464b      	mov	r3, r9
 80086fa:	aa03      	add	r2, sp, #12
 80086fc:	4621      	mov	r1, r4
 80086fe:	4640      	mov	r0, r8
 8008700:	f7ff fee6 	bl	80084d0 <_printf_common>
 8008704:	3001      	adds	r0, #1
 8008706:	d14a      	bne.n	800879e <_printf_i+0x1f2>
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	b004      	add	sp, #16
 800870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	f043 0320 	orr.w	r3, r3, #32
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	4833      	ldr	r0, [pc, #204]	@ (80087e8 <_printf_i+0x23c>)
 800871c:	2778      	movs	r7, #120	@ 0x78
 800871e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	6831      	ldr	r1, [r6, #0]
 8008726:	061f      	lsls	r7, r3, #24
 8008728:	f851 5b04 	ldr.w	r5, [r1], #4
 800872c:	d402      	bmi.n	8008734 <_printf_i+0x188>
 800872e:	065f      	lsls	r7, r3, #25
 8008730:	bf48      	it	mi
 8008732:	b2ad      	uxthmi	r5, r5
 8008734:	6031      	str	r1, [r6, #0]
 8008736:	07d9      	lsls	r1, r3, #31
 8008738:	bf44      	itt	mi
 800873a:	f043 0320 	orrmi.w	r3, r3, #32
 800873e:	6023      	strmi	r3, [r4, #0]
 8008740:	b11d      	cbz	r5, 800874a <_printf_i+0x19e>
 8008742:	2310      	movs	r3, #16
 8008744:	e7ac      	b.n	80086a0 <_printf_i+0xf4>
 8008746:	4827      	ldr	r0, [pc, #156]	@ (80087e4 <_printf_i+0x238>)
 8008748:	e7e9      	b.n	800871e <_printf_i+0x172>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	f023 0320 	bic.w	r3, r3, #32
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	e7f6      	b.n	8008742 <_printf_i+0x196>
 8008754:	4616      	mov	r6, r2
 8008756:	e7bd      	b.n	80086d4 <_printf_i+0x128>
 8008758:	6833      	ldr	r3, [r6, #0]
 800875a:	6825      	ldr	r5, [r4, #0]
 800875c:	6961      	ldr	r1, [r4, #20]
 800875e:	1d18      	adds	r0, r3, #4
 8008760:	6030      	str	r0, [r6, #0]
 8008762:	062e      	lsls	r6, r5, #24
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	d501      	bpl.n	800876c <_printf_i+0x1c0>
 8008768:	6019      	str	r1, [r3, #0]
 800876a:	e002      	b.n	8008772 <_printf_i+0x1c6>
 800876c:	0668      	lsls	r0, r5, #25
 800876e:	d5fb      	bpl.n	8008768 <_printf_i+0x1bc>
 8008770:	8019      	strh	r1, [r3, #0]
 8008772:	2300      	movs	r3, #0
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	4616      	mov	r6, r2
 8008778:	e7bc      	b.n	80086f4 <_printf_i+0x148>
 800877a:	6833      	ldr	r3, [r6, #0]
 800877c:	1d1a      	adds	r2, r3, #4
 800877e:	6032      	str	r2, [r6, #0]
 8008780:	681e      	ldr	r6, [r3, #0]
 8008782:	6862      	ldr	r2, [r4, #4]
 8008784:	2100      	movs	r1, #0
 8008786:	4630      	mov	r0, r6
 8008788:	f7f7 fd52 	bl	8000230 <memchr>
 800878c:	b108      	cbz	r0, 8008792 <_printf_i+0x1e6>
 800878e:	1b80      	subs	r0, r0, r6
 8008790:	6060      	str	r0, [r4, #4]
 8008792:	6863      	ldr	r3, [r4, #4]
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	2300      	movs	r3, #0
 8008798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800879c:	e7aa      	b.n	80086f4 <_printf_i+0x148>
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	4632      	mov	r2, r6
 80087a2:	4649      	mov	r1, r9
 80087a4:	4640      	mov	r0, r8
 80087a6:	47d0      	blx	sl
 80087a8:	3001      	adds	r0, #1
 80087aa:	d0ad      	beq.n	8008708 <_printf_i+0x15c>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	079b      	lsls	r3, r3, #30
 80087b0:	d413      	bmi.n	80087da <_printf_i+0x22e>
 80087b2:	68e0      	ldr	r0, [r4, #12]
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	4298      	cmp	r0, r3
 80087b8:	bfb8      	it	lt
 80087ba:	4618      	movlt	r0, r3
 80087bc:	e7a6      	b.n	800870c <_printf_i+0x160>
 80087be:	2301      	movs	r3, #1
 80087c0:	4632      	mov	r2, r6
 80087c2:	4649      	mov	r1, r9
 80087c4:	4640      	mov	r0, r8
 80087c6:	47d0      	blx	sl
 80087c8:	3001      	adds	r0, #1
 80087ca:	d09d      	beq.n	8008708 <_printf_i+0x15c>
 80087cc:	3501      	adds	r5, #1
 80087ce:	68e3      	ldr	r3, [r4, #12]
 80087d0:	9903      	ldr	r1, [sp, #12]
 80087d2:	1a5b      	subs	r3, r3, r1
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	dcf2      	bgt.n	80087be <_printf_i+0x212>
 80087d8:	e7eb      	b.n	80087b2 <_printf_i+0x206>
 80087da:	2500      	movs	r5, #0
 80087dc:	f104 0619 	add.w	r6, r4, #25
 80087e0:	e7f5      	b.n	80087ce <_printf_i+0x222>
 80087e2:	bf00      	nop
 80087e4:	0800adf7 	.word	0x0800adf7
 80087e8:	0800ae08 	.word	0x0800ae08

080087ec <std>:
 80087ec:	2300      	movs	r3, #0
 80087ee:	b510      	push	{r4, lr}
 80087f0:	4604      	mov	r4, r0
 80087f2:	e9c0 3300 	strd	r3, r3, [r0]
 80087f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087fa:	6083      	str	r3, [r0, #8]
 80087fc:	8181      	strh	r1, [r0, #12]
 80087fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008800:	81c2      	strh	r2, [r0, #14]
 8008802:	6183      	str	r3, [r0, #24]
 8008804:	4619      	mov	r1, r3
 8008806:	2208      	movs	r2, #8
 8008808:	305c      	adds	r0, #92	@ 0x5c
 800880a:	f000 f914 	bl	8008a36 <memset>
 800880e:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <std+0x58>)
 8008810:	6263      	str	r3, [r4, #36]	@ 0x24
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <std+0x5c>)
 8008814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008816:	4b0d      	ldr	r3, [pc, #52]	@ (800884c <std+0x60>)
 8008818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800881a:	4b0d      	ldr	r3, [pc, #52]	@ (8008850 <std+0x64>)
 800881c:	6323      	str	r3, [r4, #48]	@ 0x30
 800881e:	4b0d      	ldr	r3, [pc, #52]	@ (8008854 <std+0x68>)
 8008820:	6224      	str	r4, [r4, #32]
 8008822:	429c      	cmp	r4, r3
 8008824:	d006      	beq.n	8008834 <std+0x48>
 8008826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800882a:	4294      	cmp	r4, r2
 800882c:	d002      	beq.n	8008834 <std+0x48>
 800882e:	33d0      	adds	r3, #208	@ 0xd0
 8008830:	429c      	cmp	r4, r3
 8008832:	d105      	bne.n	8008840 <std+0x54>
 8008834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800883c:	f000 b9be 	b.w	8008bbc <__retarget_lock_init_recursive>
 8008840:	bd10      	pop	{r4, pc}
 8008842:	bf00      	nop
 8008844:	080089b1 	.word	0x080089b1
 8008848:	080089d3 	.word	0x080089d3
 800884c:	08008a0b 	.word	0x08008a0b
 8008850:	08008a2f 	.word	0x08008a2f
 8008854:	2001e684 	.word	0x2001e684

08008858 <stdio_exit_handler>:
 8008858:	4a02      	ldr	r2, [pc, #8]	@ (8008864 <stdio_exit_handler+0xc>)
 800885a:	4903      	ldr	r1, [pc, #12]	@ (8008868 <stdio_exit_handler+0x10>)
 800885c:	4803      	ldr	r0, [pc, #12]	@ (800886c <stdio_exit_handler+0x14>)
 800885e:	f000 b869 	b.w	8008934 <_fwalk_sglue>
 8008862:	bf00      	nop
 8008864:	200002a8 	.word	0x200002a8
 8008868:	0800a3c9 	.word	0x0800a3c9
 800886c:	200002b8 	.word	0x200002b8

08008870 <cleanup_stdio>:
 8008870:	6841      	ldr	r1, [r0, #4]
 8008872:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <cleanup_stdio+0x34>)
 8008874:	4299      	cmp	r1, r3
 8008876:	b510      	push	{r4, lr}
 8008878:	4604      	mov	r4, r0
 800887a:	d001      	beq.n	8008880 <cleanup_stdio+0x10>
 800887c:	f001 fda4 	bl	800a3c8 <_fflush_r>
 8008880:	68a1      	ldr	r1, [r4, #8]
 8008882:	4b09      	ldr	r3, [pc, #36]	@ (80088a8 <cleanup_stdio+0x38>)
 8008884:	4299      	cmp	r1, r3
 8008886:	d002      	beq.n	800888e <cleanup_stdio+0x1e>
 8008888:	4620      	mov	r0, r4
 800888a:	f001 fd9d 	bl	800a3c8 <_fflush_r>
 800888e:	68e1      	ldr	r1, [r4, #12]
 8008890:	4b06      	ldr	r3, [pc, #24]	@ (80088ac <cleanup_stdio+0x3c>)
 8008892:	4299      	cmp	r1, r3
 8008894:	d004      	beq.n	80088a0 <cleanup_stdio+0x30>
 8008896:	4620      	mov	r0, r4
 8008898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800889c:	f001 bd94 	b.w	800a3c8 <_fflush_r>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	bf00      	nop
 80088a4:	2001e684 	.word	0x2001e684
 80088a8:	2001e6ec 	.word	0x2001e6ec
 80088ac:	2001e754 	.word	0x2001e754

080088b0 <global_stdio_init.part.0>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	4b0b      	ldr	r3, [pc, #44]	@ (80088e0 <global_stdio_init.part.0+0x30>)
 80088b4:	4c0b      	ldr	r4, [pc, #44]	@ (80088e4 <global_stdio_init.part.0+0x34>)
 80088b6:	4a0c      	ldr	r2, [pc, #48]	@ (80088e8 <global_stdio_init.part.0+0x38>)
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	4620      	mov	r0, r4
 80088bc:	2200      	movs	r2, #0
 80088be:	2104      	movs	r1, #4
 80088c0:	f7ff ff94 	bl	80087ec <std>
 80088c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088c8:	2201      	movs	r2, #1
 80088ca:	2109      	movs	r1, #9
 80088cc:	f7ff ff8e 	bl	80087ec <std>
 80088d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088d4:	2202      	movs	r2, #2
 80088d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088da:	2112      	movs	r1, #18
 80088dc:	f7ff bf86 	b.w	80087ec <std>
 80088e0:	2001e7bc 	.word	0x2001e7bc
 80088e4:	2001e684 	.word	0x2001e684
 80088e8:	08008859 	.word	0x08008859

080088ec <__sfp_lock_acquire>:
 80088ec:	4801      	ldr	r0, [pc, #4]	@ (80088f4 <__sfp_lock_acquire+0x8>)
 80088ee:	f000 b966 	b.w	8008bbe <__retarget_lock_acquire_recursive>
 80088f2:	bf00      	nop
 80088f4:	2001e7c5 	.word	0x2001e7c5

080088f8 <__sfp_lock_release>:
 80088f8:	4801      	ldr	r0, [pc, #4]	@ (8008900 <__sfp_lock_release+0x8>)
 80088fa:	f000 b961 	b.w	8008bc0 <__retarget_lock_release_recursive>
 80088fe:	bf00      	nop
 8008900:	2001e7c5 	.word	0x2001e7c5

08008904 <__sinit>:
 8008904:	b510      	push	{r4, lr}
 8008906:	4604      	mov	r4, r0
 8008908:	f7ff fff0 	bl	80088ec <__sfp_lock_acquire>
 800890c:	6a23      	ldr	r3, [r4, #32]
 800890e:	b11b      	cbz	r3, 8008918 <__sinit+0x14>
 8008910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008914:	f7ff bff0 	b.w	80088f8 <__sfp_lock_release>
 8008918:	4b04      	ldr	r3, [pc, #16]	@ (800892c <__sinit+0x28>)
 800891a:	6223      	str	r3, [r4, #32]
 800891c:	4b04      	ldr	r3, [pc, #16]	@ (8008930 <__sinit+0x2c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f5      	bne.n	8008910 <__sinit+0xc>
 8008924:	f7ff ffc4 	bl	80088b0 <global_stdio_init.part.0>
 8008928:	e7f2      	b.n	8008910 <__sinit+0xc>
 800892a:	bf00      	nop
 800892c:	08008871 	.word	0x08008871
 8008930:	2001e7bc 	.word	0x2001e7bc

08008934 <_fwalk_sglue>:
 8008934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008938:	4607      	mov	r7, r0
 800893a:	4688      	mov	r8, r1
 800893c:	4614      	mov	r4, r2
 800893e:	2600      	movs	r6, #0
 8008940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008944:	f1b9 0901 	subs.w	r9, r9, #1
 8008948:	d505      	bpl.n	8008956 <_fwalk_sglue+0x22>
 800894a:	6824      	ldr	r4, [r4, #0]
 800894c:	2c00      	cmp	r4, #0
 800894e:	d1f7      	bne.n	8008940 <_fwalk_sglue+0xc>
 8008950:	4630      	mov	r0, r6
 8008952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d907      	bls.n	800896c <_fwalk_sglue+0x38>
 800895c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008960:	3301      	adds	r3, #1
 8008962:	d003      	beq.n	800896c <_fwalk_sglue+0x38>
 8008964:	4629      	mov	r1, r5
 8008966:	4638      	mov	r0, r7
 8008968:	47c0      	blx	r8
 800896a:	4306      	orrs	r6, r0
 800896c:	3568      	adds	r5, #104	@ 0x68
 800896e:	e7e9      	b.n	8008944 <_fwalk_sglue+0x10>

08008970 <siprintf>:
 8008970:	b40e      	push	{r1, r2, r3}
 8008972:	b500      	push	{lr}
 8008974:	b09c      	sub	sp, #112	@ 0x70
 8008976:	ab1d      	add	r3, sp, #116	@ 0x74
 8008978:	9002      	str	r0, [sp, #8]
 800897a:	9006      	str	r0, [sp, #24]
 800897c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008980:	4809      	ldr	r0, [pc, #36]	@ (80089a8 <siprintf+0x38>)
 8008982:	9107      	str	r1, [sp, #28]
 8008984:	9104      	str	r1, [sp, #16]
 8008986:	4909      	ldr	r1, [pc, #36]	@ (80089ac <siprintf+0x3c>)
 8008988:	f853 2b04 	ldr.w	r2, [r3], #4
 800898c:	9105      	str	r1, [sp, #20]
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	a902      	add	r1, sp, #8
 8008994:	f001 fb98 	bl	800a0c8 <_svfiprintf_r>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	b01c      	add	sp, #112	@ 0x70
 80089a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a4:	b003      	add	sp, #12
 80089a6:	4770      	bx	lr
 80089a8:	200002b4 	.word	0x200002b4
 80089ac:	ffff0208 	.word	0xffff0208

080089b0 <__sread>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b8:	f000 f8a2 	bl	8008b00 <_read_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	bfab      	itete	ge
 80089c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089c2:	89a3      	ldrhlt	r3, [r4, #12]
 80089c4:	181b      	addge	r3, r3, r0
 80089c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089ca:	bfac      	ite	ge
 80089cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089ce:	81a3      	strhlt	r3, [r4, #12]
 80089d0:	bd10      	pop	{r4, pc}

080089d2 <__swrite>:
 80089d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d6:	461f      	mov	r7, r3
 80089d8:	898b      	ldrh	r3, [r1, #12]
 80089da:	05db      	lsls	r3, r3, #23
 80089dc:	4605      	mov	r5, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	4616      	mov	r6, r2
 80089e2:	d505      	bpl.n	80089f0 <__swrite+0x1e>
 80089e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e8:	2302      	movs	r3, #2
 80089ea:	2200      	movs	r2, #0
 80089ec:	f000 f876 	bl	8008adc <_lseek_r>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	4632      	mov	r2, r6
 80089fe:	463b      	mov	r3, r7
 8008a00:	4628      	mov	r0, r5
 8008a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	f000 b89d 	b.w	8008b44 <_write_r>

08008a0a <__sseek>:
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a12:	f000 f863 	bl	8008adc <_lseek_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	bf15      	itete	ne
 8008a1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a26:	81a3      	strheq	r3, [r4, #12]
 8008a28:	bf18      	it	ne
 8008a2a:	81a3      	strhne	r3, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <__sclose>:
 8008a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a32:	f000 b843 	b.w	8008abc <_close_r>

08008a36 <memset>:
 8008a36:	4402      	add	r2, r0
 8008a38:	4603      	mov	r3, r0
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d100      	bne.n	8008a40 <memset+0xa>
 8008a3e:	4770      	bx	lr
 8008a40:	f803 1b01 	strb.w	r1, [r3], #1
 8008a44:	e7f9      	b.n	8008a3a <memset+0x4>

08008a46 <strchr>:
 8008a46:	b2c9      	uxtb	r1, r1
 8008a48:	4603      	mov	r3, r0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a50:	b112      	cbz	r2, 8008a58 <strchr+0x12>
 8008a52:	428a      	cmp	r2, r1
 8008a54:	d1f9      	bne.n	8008a4a <strchr+0x4>
 8008a56:	4770      	bx	lr
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	bf18      	it	ne
 8008a5c:	2000      	movne	r0, #0
 8008a5e:	4770      	bx	lr

08008a60 <strncpy>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	3901      	subs	r1, #1
 8008a64:	4603      	mov	r3, r0
 8008a66:	b132      	cbz	r2, 8008a76 <strncpy+0x16>
 8008a68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a6c:	f803 4b01 	strb.w	r4, [r3], #1
 8008a70:	3a01      	subs	r2, #1
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	d1f7      	bne.n	8008a66 <strncpy+0x6>
 8008a76:	441a      	add	r2, r3
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d100      	bne.n	8008a80 <strncpy+0x20>
 8008a7e:	bd10      	pop	{r4, pc}
 8008a80:	f803 1b01 	strb.w	r1, [r3], #1
 8008a84:	e7f9      	b.n	8008a7a <strncpy+0x1a>

08008a86 <strstr>:
 8008a86:	780a      	ldrb	r2, [r1, #0]
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	b96a      	cbnz	r2, 8008aa8 <strstr+0x22>
 8008a8c:	bd70      	pop	{r4, r5, r6, pc}
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d109      	bne.n	8008aa6 <strstr+0x20>
 8008a92:	460c      	mov	r4, r1
 8008a94:	4605      	mov	r5, r0
 8008a96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f6      	beq.n	8008a8c <strstr+0x6>
 8008a9e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008aa2:	429e      	cmp	r6, r3
 8008aa4:	d0f7      	beq.n	8008a96 <strstr+0x10>
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	7803      	ldrb	r3, [r0, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1ef      	bne.n	8008a8e <strstr+0x8>
 8008aae:	4618      	mov	r0, r3
 8008ab0:	e7ec      	b.n	8008a8c <strstr+0x6>
	...

08008ab4 <_localeconv_r>:
 8008ab4:	4800      	ldr	r0, [pc, #0]	@ (8008ab8 <_localeconv_r+0x4>)
 8008ab6:	4770      	bx	lr
 8008ab8:	200003f4 	.word	0x200003f4

08008abc <_close_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d06      	ldr	r5, [pc, #24]	@ (8008ad8 <_close_r+0x1c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	f7fa fcce 	bl	8003468 <_close>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_close_r+0x1a>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_close_r+0x1a>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	2001e7c0 	.word	0x2001e7c0

08008adc <_lseek_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d07      	ldr	r5, [pc, #28]	@ (8008afc <_lseek_r+0x20>)
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7fa fce3 	bl	80034b6 <_lseek>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_lseek_r+0x1e>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_lseek_r+0x1e>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	2001e7c0 	.word	0x2001e7c0

08008b00 <_read_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d07      	ldr	r5, [pc, #28]	@ (8008b20 <_read_r+0x20>)
 8008b04:	4604      	mov	r4, r0
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f7fa fc71 	bl	80033f6 <_read>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_read_r+0x1e>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_read_r+0x1e>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	2001e7c0 	.word	0x2001e7c0

08008b24 <_sbrk_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d06      	ldr	r5, [pc, #24]	@ (8008b40 <_sbrk_r+0x1c>)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7fa fcce 	bl	80034d0 <_sbrk>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_sbrk_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_sbrk_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	2001e7c0 	.word	0x2001e7c0

08008b44 <_write_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	@ (8008b64 <_write_r+0x20>)
 8008b48:	4604      	mov	r4, r0
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	602a      	str	r2, [r5, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f7fa fc6c 	bl	8003430 <_write>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_write_r+0x1e>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_write_r+0x1e>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	2001e7c0 	.word	0x2001e7c0

08008b68 <__errno>:
 8008b68:	4b01      	ldr	r3, [pc, #4]	@ (8008b70 <__errno+0x8>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	200002b4 	.word	0x200002b4

08008b74 <__libc_init_array>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4d0d      	ldr	r5, [pc, #52]	@ (8008bac <__libc_init_array+0x38>)
 8008b78:	4c0d      	ldr	r4, [pc, #52]	@ (8008bb0 <__libc_init_array+0x3c>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	2600      	movs	r6, #0
 8008b80:	42a6      	cmp	r6, r4
 8008b82:	d109      	bne.n	8008b98 <__libc_init_array+0x24>
 8008b84:	4d0b      	ldr	r5, [pc, #44]	@ (8008bb4 <__libc_init_array+0x40>)
 8008b86:	4c0c      	ldr	r4, [pc, #48]	@ (8008bb8 <__libc_init_array+0x44>)
 8008b88:	f001 ff9e 	bl	800aac8 <_init>
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	2600      	movs	r6, #0
 8008b92:	42a6      	cmp	r6, r4
 8008b94:	d105      	bne.n	8008ba2 <__libc_init_array+0x2e>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9c:	4798      	blx	r3
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7ee      	b.n	8008b80 <__libc_init_array+0xc>
 8008ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba6:	4798      	blx	r3
 8008ba8:	3601      	adds	r6, #1
 8008baa:	e7f2      	b.n	8008b92 <__libc_init_array+0x1e>
 8008bac:	0800b060 	.word	0x0800b060
 8008bb0:	0800b060 	.word	0x0800b060
 8008bb4:	0800b060 	.word	0x0800b060
 8008bb8:	0800b064 	.word	0x0800b064

08008bbc <__retarget_lock_init_recursive>:
 8008bbc:	4770      	bx	lr

08008bbe <__retarget_lock_acquire_recursive>:
 8008bbe:	4770      	bx	lr

08008bc0 <__retarget_lock_release_recursive>:
 8008bc0:	4770      	bx	lr

08008bc2 <memcpy>:
 8008bc2:	440a      	add	r2, r1
 8008bc4:	4291      	cmp	r1, r2
 8008bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bca:	d100      	bne.n	8008bce <memcpy+0xc>
 8008bcc:	4770      	bx	lr
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd8:	4291      	cmp	r1, r2
 8008bda:	d1f9      	bne.n	8008bd0 <memcpy+0xe>
 8008bdc:	bd10      	pop	{r4, pc}

08008bde <quorem>:
 8008bde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be2:	6903      	ldr	r3, [r0, #16]
 8008be4:	690c      	ldr	r4, [r1, #16]
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	4607      	mov	r7, r0
 8008bea:	db7e      	blt.n	8008cea <quorem+0x10c>
 8008bec:	3c01      	subs	r4, #1
 8008bee:	f101 0814 	add.w	r8, r1, #20
 8008bf2:	00a3      	lsls	r3, r4, #2
 8008bf4:	f100 0514 	add.w	r5, r0, #20
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c10:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c14:	d32e      	bcc.n	8008c74 <quorem+0x96>
 8008c16:	f04f 0a00 	mov.w	sl, #0
 8008c1a:	46c4      	mov	ip, r8
 8008c1c:	46ae      	mov	lr, r5
 8008c1e:	46d3      	mov	fp, sl
 8008c20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c24:	b298      	uxth	r0, r3
 8008c26:	fb06 a000 	mla	r0, r6, r0, sl
 8008c2a:	0c02      	lsrs	r2, r0, #16
 8008c2c:	0c1b      	lsrs	r3, r3, #16
 8008c2e:	fb06 2303 	mla	r3, r6, r3, r2
 8008c32:	f8de 2000 	ldr.w	r2, [lr]
 8008c36:	b280      	uxth	r0, r0
 8008c38:	b292      	uxth	r2, r2
 8008c3a:	1a12      	subs	r2, r2, r0
 8008c3c:	445a      	add	r2, fp
 8008c3e:	f8de 0000 	ldr.w	r0, [lr]
 8008c42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c50:	b292      	uxth	r2, r2
 8008c52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c56:	45e1      	cmp	r9, ip
 8008c58:	f84e 2b04 	str.w	r2, [lr], #4
 8008c5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c60:	d2de      	bcs.n	8008c20 <quorem+0x42>
 8008c62:	9b00      	ldr	r3, [sp, #0]
 8008c64:	58eb      	ldr	r3, [r5, r3]
 8008c66:	b92b      	cbnz	r3, 8008c74 <quorem+0x96>
 8008c68:	9b01      	ldr	r3, [sp, #4]
 8008c6a:	3b04      	subs	r3, #4
 8008c6c:	429d      	cmp	r5, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	d32f      	bcc.n	8008cd2 <quorem+0xf4>
 8008c72:	613c      	str	r4, [r7, #16]
 8008c74:	4638      	mov	r0, r7
 8008c76:	f001 f8c3 	bl	8009e00 <__mcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	db25      	blt.n	8008cca <quorem+0xec>
 8008c7e:	4629      	mov	r1, r5
 8008c80:	2000      	movs	r0, #0
 8008c82:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c86:	f8d1 c000 	ldr.w	ip, [r1]
 8008c8a:	fa1f fe82 	uxth.w	lr, r2
 8008c8e:	fa1f f38c 	uxth.w	r3, ip
 8008c92:	eba3 030e 	sub.w	r3, r3, lr
 8008c96:	4403      	add	r3, r0
 8008c98:	0c12      	lsrs	r2, r2, #16
 8008c9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ca8:	45c1      	cmp	r9, r8
 8008caa:	f841 3b04 	str.w	r3, [r1], #4
 8008cae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cb2:	d2e6      	bcs.n	8008c82 <quorem+0xa4>
 8008cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cbc:	b922      	cbnz	r2, 8008cc8 <quorem+0xea>
 8008cbe:	3b04      	subs	r3, #4
 8008cc0:	429d      	cmp	r5, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	d30b      	bcc.n	8008cde <quorem+0x100>
 8008cc6:	613c      	str	r4, [r7, #16]
 8008cc8:	3601      	adds	r6, #1
 8008cca:	4630      	mov	r0, r6
 8008ccc:	b003      	add	sp, #12
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	3b04      	subs	r3, #4
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	d1cb      	bne.n	8008c72 <quorem+0x94>
 8008cda:	3c01      	subs	r4, #1
 8008cdc:	e7c6      	b.n	8008c6c <quorem+0x8e>
 8008cde:	6812      	ldr	r2, [r2, #0]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d1ef      	bne.n	8008cc6 <quorem+0xe8>
 8008ce6:	3c01      	subs	r4, #1
 8008ce8:	e7ea      	b.n	8008cc0 <quorem+0xe2>
 8008cea:	2000      	movs	r0, #0
 8008cec:	e7ee      	b.n	8008ccc <quorem+0xee>
	...

08008cf0 <_dtoa_r>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	69c7      	ldr	r7, [r0, #28]
 8008cf6:	b099      	sub	sp, #100	@ 0x64
 8008cf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cfc:	ec55 4b10 	vmov	r4, r5, d0
 8008d00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d02:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d04:	4683      	mov	fp, r0
 8008d06:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d0a:	b97f      	cbnz	r7, 8008d2c <_dtoa_r+0x3c>
 8008d0c:	2010      	movs	r0, #16
 8008d0e:	f7fe ffdf 	bl	8007cd0 <malloc>
 8008d12:	4602      	mov	r2, r0
 8008d14:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d18:	b920      	cbnz	r0, 8008d24 <_dtoa_r+0x34>
 8008d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8008fb8 <_dtoa_r+0x2c8>)
 8008d1c:	21ef      	movs	r1, #239	@ 0xef
 8008d1e:	48a7      	ldr	r0, [pc, #668]	@ (8008fbc <_dtoa_r+0x2cc>)
 8008d20:	f001 fb94 	bl	800a44c <__assert_func>
 8008d24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d28:	6007      	str	r7, [r0, #0]
 8008d2a:	60c7      	str	r7, [r0, #12]
 8008d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	b159      	cbz	r1, 8008d4c <_dtoa_r+0x5c>
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	604a      	str	r2, [r1, #4]
 8008d38:	2301      	movs	r3, #1
 8008d3a:	4093      	lsls	r3, r2
 8008d3c:	608b      	str	r3, [r1, #8]
 8008d3e:	4658      	mov	r0, fp
 8008d40:	f000 fe24 	bl	800998c <_Bfree>
 8008d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	1e2b      	subs	r3, r5, #0
 8008d4e:	bfb9      	ittee	lt
 8008d50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d54:	9303      	strlt	r3, [sp, #12]
 8008d56:	2300      	movge	r3, #0
 8008d58:	6033      	strge	r3, [r6, #0]
 8008d5a:	9f03      	ldr	r7, [sp, #12]
 8008d5c:	4b98      	ldr	r3, [pc, #608]	@ (8008fc0 <_dtoa_r+0x2d0>)
 8008d5e:	bfbc      	itt	lt
 8008d60:	2201      	movlt	r2, #1
 8008d62:	6032      	strlt	r2, [r6, #0]
 8008d64:	43bb      	bics	r3, r7
 8008d66:	d112      	bne.n	8008d8e <_dtoa_r+0x9e>
 8008d68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d74:	4323      	orrs	r3, r4
 8008d76:	f000 854d 	beq.w	8009814 <_dtoa_r+0xb24>
 8008d7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008fd4 <_dtoa_r+0x2e4>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 854f 	beq.w	8009824 <_dtoa_r+0xb34>
 8008d86:	f10a 0303 	add.w	r3, sl, #3
 8008d8a:	f000 bd49 	b.w	8009820 <_dtoa_r+0xb30>
 8008d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d92:	2200      	movs	r2, #0
 8008d94:	ec51 0b17 	vmov	r0, r1, d7
 8008d98:	2300      	movs	r3, #0
 8008d9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008d9e:	f7f7 fec3 	bl	8000b28 <__aeabi_dcmpeq>
 8008da2:	4680      	mov	r8, r0
 8008da4:	b158      	cbz	r0, 8008dbe <_dtoa_r+0xce>
 8008da6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008da8:	2301      	movs	r3, #1
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dae:	b113      	cbz	r3, 8008db6 <_dtoa_r+0xc6>
 8008db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008db2:	4b84      	ldr	r3, [pc, #528]	@ (8008fc4 <_dtoa_r+0x2d4>)
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008fd8 <_dtoa_r+0x2e8>
 8008dba:	f000 bd33 	b.w	8009824 <_dtoa_r+0xb34>
 8008dbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008dc2:	aa16      	add	r2, sp, #88	@ 0x58
 8008dc4:	a917      	add	r1, sp, #92	@ 0x5c
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	f001 f8ca 	bl	8009f60 <__d2b>
 8008dcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008dd0:	4681      	mov	r9, r0
 8008dd2:	2e00      	cmp	r6, #0
 8008dd4:	d077      	beq.n	8008ec6 <_dtoa_r+0x1d6>
 8008dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008de4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008de8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008dec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008df0:	4619      	mov	r1, r3
 8008df2:	2200      	movs	r2, #0
 8008df4:	4b74      	ldr	r3, [pc, #464]	@ (8008fc8 <_dtoa_r+0x2d8>)
 8008df6:	f7f7 fa77 	bl	80002e8 <__aeabi_dsub>
 8008dfa:	a369      	add	r3, pc, #420	@ (adr r3, 8008fa0 <_dtoa_r+0x2b0>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fc2a 	bl	8000658 <__aeabi_dmul>
 8008e04:	a368      	add	r3, pc, #416	@ (adr r3, 8008fa8 <_dtoa_r+0x2b8>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fa6f 	bl	80002ec <__adddf3>
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4630      	mov	r0, r6
 8008e12:	460d      	mov	r5, r1
 8008e14:	f7f7 fbb6 	bl	8000584 <__aeabi_i2d>
 8008e18:	a365      	add	r3, pc, #404	@ (adr r3, 8008fb0 <_dtoa_r+0x2c0>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fc1b 	bl	8000658 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fa5f 	bl	80002ec <__adddf3>
 8008e2e:	4604      	mov	r4, r0
 8008e30:	460d      	mov	r5, r1
 8008e32:	f7f7 fec1 	bl	8000bb8 <__aeabi_d2iz>
 8008e36:	2200      	movs	r2, #0
 8008e38:	4607      	mov	r7, r0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7f7 fe7c 	bl	8000b3c <__aeabi_dcmplt>
 8008e44:	b140      	cbz	r0, 8008e58 <_dtoa_r+0x168>
 8008e46:	4638      	mov	r0, r7
 8008e48:	f7f7 fb9c 	bl	8000584 <__aeabi_i2d>
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f7f7 fe6a 	bl	8000b28 <__aeabi_dcmpeq>
 8008e54:	b900      	cbnz	r0, 8008e58 <_dtoa_r+0x168>
 8008e56:	3f01      	subs	r7, #1
 8008e58:	2f16      	cmp	r7, #22
 8008e5a:	d851      	bhi.n	8008f00 <_dtoa_r+0x210>
 8008e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8008fcc <_dtoa_r+0x2dc>)
 8008e5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e6a:	f7f7 fe67 	bl	8000b3c <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d048      	beq.n	8008f04 <_dtoa_r+0x214>
 8008e72:	3f01      	subs	r7, #1
 8008e74:	2300      	movs	r3, #0
 8008e76:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e7a:	1b9b      	subs	r3, r3, r6
 8008e7c:	1e5a      	subs	r2, r3, #1
 8008e7e:	bf44      	itt	mi
 8008e80:	f1c3 0801 	rsbmi	r8, r3, #1
 8008e84:	2300      	movmi	r3, #0
 8008e86:	9208      	str	r2, [sp, #32]
 8008e88:	bf54      	ite	pl
 8008e8a:	f04f 0800 	movpl.w	r8, #0
 8008e8e:	9308      	strmi	r3, [sp, #32]
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	db39      	blt.n	8008f08 <_dtoa_r+0x218>
 8008e94:	9b08      	ldr	r3, [sp, #32]
 8008e96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008e98:	443b      	add	r3, r7
 8008e9a:	9308      	str	r3, [sp, #32]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea2:	2b09      	cmp	r3, #9
 8008ea4:	d864      	bhi.n	8008f70 <_dtoa_r+0x280>
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	bfc4      	itt	gt
 8008eaa:	3b04      	subgt	r3, #4
 8008eac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb0:	f1a3 0302 	sub.w	r3, r3, #2
 8008eb4:	bfcc      	ite	gt
 8008eb6:	2400      	movgt	r4, #0
 8008eb8:	2401      	movle	r4, #1
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d863      	bhi.n	8008f86 <_dtoa_r+0x296>
 8008ebe:	e8df f003 	tbb	[pc, r3]
 8008ec2:	372a      	.short	0x372a
 8008ec4:	5535      	.short	0x5535
 8008ec6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008eca:	441e      	add	r6, r3
 8008ecc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	bfc1      	itttt	gt
 8008ed4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ed8:	409f      	lslgt	r7, r3
 8008eda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ede:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ee2:	bfd6      	itet	le
 8008ee4:	f1c3 0320 	rsble	r3, r3, #32
 8008ee8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008eec:	fa04 f003 	lslle.w	r0, r4, r3
 8008ef0:	f7f7 fb38 	bl	8000564 <__aeabi_ui2d>
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008efa:	3e01      	subs	r6, #1
 8008efc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008efe:	e777      	b.n	8008df0 <_dtoa_r+0x100>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e7b8      	b.n	8008e76 <_dtoa_r+0x186>
 8008f04:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f06:	e7b7      	b.n	8008e78 <_dtoa_r+0x188>
 8008f08:	427b      	negs	r3, r7
 8008f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	eba8 0807 	sub.w	r8, r8, r7
 8008f12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f14:	e7c4      	b.n	8008ea0 <_dtoa_r+0x1b0>
 8008f16:	2300      	movs	r3, #0
 8008f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dc35      	bgt.n	8008f8c <_dtoa_r+0x29c>
 8008f20:	2301      	movs	r3, #1
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	461a      	mov	r2, r3
 8008f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f2a:	e00b      	b.n	8008f44 <_dtoa_r+0x254>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7f3      	b.n	8008f18 <_dtoa_r+0x228>
 8008f30:	2300      	movs	r3, #0
 8008f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f36:	18fb      	adds	r3, r7, r3
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	bfb8      	it	lt
 8008f42:	2301      	movlt	r3, #1
 8008f44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	2204      	movs	r2, #4
 8008f4c:	f102 0514 	add.w	r5, r2, #20
 8008f50:	429d      	cmp	r5, r3
 8008f52:	d91f      	bls.n	8008f94 <_dtoa_r+0x2a4>
 8008f54:	6041      	str	r1, [r0, #4]
 8008f56:	4658      	mov	r0, fp
 8008f58:	f000 fcd8 	bl	800990c <_Balloc>
 8008f5c:	4682      	mov	sl, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d13c      	bne.n	8008fdc <_dtoa_r+0x2ec>
 8008f62:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd0 <_dtoa_r+0x2e0>)
 8008f64:	4602      	mov	r2, r0
 8008f66:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f6a:	e6d8      	b.n	8008d1e <_dtoa_r+0x2e>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e7e0      	b.n	8008f32 <_dtoa_r+0x242>
 8008f70:	2401      	movs	r4, #1
 8008f72:	2300      	movs	r3, #0
 8008f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	2200      	movs	r2, #0
 8008f82:	2312      	movs	r3, #18
 8008f84:	e7d0      	b.n	8008f28 <_dtoa_r+0x238>
 8008f86:	2301      	movs	r3, #1
 8008f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f8a:	e7f5      	b.n	8008f78 <_dtoa_r+0x288>
 8008f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	e7d7      	b.n	8008f44 <_dtoa_r+0x254>
 8008f94:	3101      	adds	r1, #1
 8008f96:	0052      	lsls	r2, r2, #1
 8008f98:	e7d8      	b.n	8008f4c <_dtoa_r+0x25c>
 8008f9a:	bf00      	nop
 8008f9c:	f3af 8000 	nop.w
 8008fa0:	636f4361 	.word	0x636f4361
 8008fa4:	3fd287a7 	.word	0x3fd287a7
 8008fa8:	8b60c8b3 	.word	0x8b60c8b3
 8008fac:	3fc68a28 	.word	0x3fc68a28
 8008fb0:	509f79fb 	.word	0x509f79fb
 8008fb4:	3fd34413 	.word	0x3fd34413
 8008fb8:	0800ae26 	.word	0x0800ae26
 8008fbc:	0800ae3d 	.word	0x0800ae3d
 8008fc0:	7ff00000 	.word	0x7ff00000
 8008fc4:	0800adf6 	.word	0x0800adf6
 8008fc8:	3ff80000 	.word	0x3ff80000
 8008fcc:	0800af38 	.word	0x0800af38
 8008fd0:	0800ae95 	.word	0x0800ae95
 8008fd4:	0800ae22 	.word	0x0800ae22
 8008fd8:	0800adf5 	.word	0x0800adf5
 8008fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fe0:	6018      	str	r0, [r3, #0]
 8008fe2:	9b07      	ldr	r3, [sp, #28]
 8008fe4:	2b0e      	cmp	r3, #14
 8008fe6:	f200 80a4 	bhi.w	8009132 <_dtoa_r+0x442>
 8008fea:	2c00      	cmp	r4, #0
 8008fec:	f000 80a1 	beq.w	8009132 <_dtoa_r+0x442>
 8008ff0:	2f00      	cmp	r7, #0
 8008ff2:	dd33      	ble.n	800905c <_dtoa_r+0x36c>
 8008ff4:	4bad      	ldr	r3, [pc, #692]	@ (80092ac <_dtoa_r+0x5bc>)
 8008ff6:	f007 020f 	and.w	r2, r7, #15
 8008ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ffe:	ed93 7b00 	vldr	d7, [r3]
 8009002:	05f8      	lsls	r0, r7, #23
 8009004:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800900c:	d516      	bpl.n	800903c <_dtoa_r+0x34c>
 800900e:	4ba8      	ldr	r3, [pc, #672]	@ (80092b0 <_dtoa_r+0x5c0>)
 8009010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009018:	f7f7 fc48 	bl	80008ac <__aeabi_ddiv>
 800901c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009020:	f004 040f 	and.w	r4, r4, #15
 8009024:	2603      	movs	r6, #3
 8009026:	4da2      	ldr	r5, [pc, #648]	@ (80092b0 <_dtoa_r+0x5c0>)
 8009028:	b954      	cbnz	r4, 8009040 <_dtoa_r+0x350>
 800902a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800902e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009032:	f7f7 fc3b 	bl	80008ac <__aeabi_ddiv>
 8009036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800903a:	e028      	b.n	800908e <_dtoa_r+0x39e>
 800903c:	2602      	movs	r6, #2
 800903e:	e7f2      	b.n	8009026 <_dtoa_r+0x336>
 8009040:	07e1      	lsls	r1, r4, #31
 8009042:	d508      	bpl.n	8009056 <_dtoa_r+0x366>
 8009044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800904c:	f7f7 fb04 	bl	8000658 <__aeabi_dmul>
 8009050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009054:	3601      	adds	r6, #1
 8009056:	1064      	asrs	r4, r4, #1
 8009058:	3508      	adds	r5, #8
 800905a:	e7e5      	b.n	8009028 <_dtoa_r+0x338>
 800905c:	f000 80d2 	beq.w	8009204 <_dtoa_r+0x514>
 8009060:	427c      	negs	r4, r7
 8009062:	4b92      	ldr	r3, [pc, #584]	@ (80092ac <_dtoa_r+0x5bc>)
 8009064:	4d92      	ldr	r5, [pc, #584]	@ (80092b0 <_dtoa_r+0x5c0>)
 8009066:	f004 020f 	and.w	r2, r4, #15
 800906a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009076:	f7f7 faef 	bl	8000658 <__aeabi_dmul>
 800907a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800907e:	1124      	asrs	r4, r4, #4
 8009080:	2300      	movs	r3, #0
 8009082:	2602      	movs	r6, #2
 8009084:	2c00      	cmp	r4, #0
 8009086:	f040 80b2 	bne.w	80091ee <_dtoa_r+0x4fe>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1d3      	bne.n	8009036 <_dtoa_r+0x346>
 800908e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009090:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80b7 	beq.w	8009208 <_dtoa_r+0x518>
 800909a:	4b86      	ldr	r3, [pc, #536]	@ (80092b4 <_dtoa_r+0x5c4>)
 800909c:	2200      	movs	r2, #0
 800909e:	4620      	mov	r0, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7f7 fd4b 	bl	8000b3c <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f000 80ae 	beq.w	8009208 <_dtoa_r+0x518>
 80090ac:	9b07      	ldr	r3, [sp, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 80aa 	beq.w	8009208 <_dtoa_r+0x518>
 80090b4:	9b00      	ldr	r3, [sp, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dd37      	ble.n	800912a <_dtoa_r+0x43a>
 80090ba:	1e7b      	subs	r3, r7, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	4620      	mov	r0, r4
 80090c0:	4b7d      	ldr	r3, [pc, #500]	@ (80092b8 <_dtoa_r+0x5c8>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 fac7 	bl	8000658 <__aeabi_dmul>
 80090ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ce:	9c00      	ldr	r4, [sp, #0]
 80090d0:	3601      	adds	r6, #1
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7f7 fa56 	bl	8000584 <__aeabi_i2d>
 80090d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090dc:	f7f7 fabc 	bl	8000658 <__aeabi_dmul>
 80090e0:	4b76      	ldr	r3, [pc, #472]	@ (80092bc <_dtoa_r+0x5cc>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	f7f7 f902 	bl	80002ec <__adddf3>
 80090e8:	4605      	mov	r5, r0
 80090ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	f040 808d 	bne.w	800920e <_dtoa_r+0x51e>
 80090f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f8:	4b71      	ldr	r3, [pc, #452]	@ (80092c0 <_dtoa_r+0x5d0>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	f7f7 f8f4 	bl	80002e8 <__aeabi_dsub>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009108:	462a      	mov	r2, r5
 800910a:	4633      	mov	r3, r6
 800910c:	f7f7 fd34 	bl	8000b78 <__aeabi_dcmpgt>
 8009110:	2800      	cmp	r0, #0
 8009112:	f040 828b 	bne.w	800962c <_dtoa_r+0x93c>
 8009116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911a:	462a      	mov	r2, r5
 800911c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009120:	f7f7 fd0c 	bl	8000b3c <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	f040 8128 	bne.w	800937a <_dtoa_r+0x68a>
 800912a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800912e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009134:	2b00      	cmp	r3, #0
 8009136:	f2c0 815a 	blt.w	80093ee <_dtoa_r+0x6fe>
 800913a:	2f0e      	cmp	r7, #14
 800913c:	f300 8157 	bgt.w	80093ee <_dtoa_r+0x6fe>
 8009140:	4b5a      	ldr	r3, [pc, #360]	@ (80092ac <_dtoa_r+0x5bc>)
 8009142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009146:	ed93 7b00 	vldr	d7, [r3]
 800914a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	ed8d 7b00 	vstr	d7, [sp]
 8009152:	da03      	bge.n	800915c <_dtoa_r+0x46c>
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f340 8101 	ble.w	800935e <_dtoa_r+0x66e>
 800915c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009160:	4656      	mov	r6, sl
 8009162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fb9f 	bl	80008ac <__aeabi_ddiv>
 800916e:	f7f7 fd23 	bl	8000bb8 <__aeabi_d2iz>
 8009172:	4680      	mov	r8, r0
 8009174:	f7f7 fa06 	bl	8000584 <__aeabi_i2d>
 8009178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800917c:	f7f7 fa6c 	bl	8000658 <__aeabi_dmul>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4620      	mov	r0, r4
 8009186:	4629      	mov	r1, r5
 8009188:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800918c:	f7f7 f8ac 	bl	80002e8 <__aeabi_dsub>
 8009190:	f806 4b01 	strb.w	r4, [r6], #1
 8009194:	9d07      	ldr	r5, [sp, #28]
 8009196:	eba6 040a 	sub.w	r4, r6, sl
 800919a:	42a5      	cmp	r5, r4
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	f040 8117 	bne.w	80093d2 <_dtoa_r+0x6e2>
 80091a4:	f7f7 f8a2 	bl	80002ec <__adddf3>
 80091a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	f7f7 fce2 	bl	8000b78 <__aeabi_dcmpgt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f040 80f9 	bne.w	80093ac <_dtoa_r+0x6bc>
 80091ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091be:	4620      	mov	r0, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7f7 fcb1 	bl	8000b28 <__aeabi_dcmpeq>
 80091c6:	b118      	cbz	r0, 80091d0 <_dtoa_r+0x4e0>
 80091c8:	f018 0f01 	tst.w	r8, #1
 80091cc:	f040 80ee 	bne.w	80093ac <_dtoa_r+0x6bc>
 80091d0:	4649      	mov	r1, r9
 80091d2:	4658      	mov	r0, fp
 80091d4:	f000 fbda 	bl	800998c <_Bfree>
 80091d8:	2300      	movs	r3, #0
 80091da:	7033      	strb	r3, [r6, #0]
 80091dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091de:	3701      	adds	r7, #1
 80091e0:	601f      	str	r7, [r3, #0]
 80091e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 831d 	beq.w	8009824 <_dtoa_r+0xb34>
 80091ea:	601e      	str	r6, [r3, #0]
 80091ec:	e31a      	b.n	8009824 <_dtoa_r+0xb34>
 80091ee:	07e2      	lsls	r2, r4, #31
 80091f0:	d505      	bpl.n	80091fe <_dtoa_r+0x50e>
 80091f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091f6:	f7f7 fa2f 	bl	8000658 <__aeabi_dmul>
 80091fa:	3601      	adds	r6, #1
 80091fc:	2301      	movs	r3, #1
 80091fe:	1064      	asrs	r4, r4, #1
 8009200:	3508      	adds	r5, #8
 8009202:	e73f      	b.n	8009084 <_dtoa_r+0x394>
 8009204:	2602      	movs	r6, #2
 8009206:	e742      	b.n	800908e <_dtoa_r+0x39e>
 8009208:	9c07      	ldr	r4, [sp, #28]
 800920a:	9704      	str	r7, [sp, #16]
 800920c:	e761      	b.n	80090d2 <_dtoa_r+0x3e2>
 800920e:	4b27      	ldr	r3, [pc, #156]	@ (80092ac <_dtoa_r+0x5bc>)
 8009210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800921a:	4454      	add	r4, sl
 800921c:	2900      	cmp	r1, #0
 800921e:	d053      	beq.n	80092c8 <_dtoa_r+0x5d8>
 8009220:	4928      	ldr	r1, [pc, #160]	@ (80092c4 <_dtoa_r+0x5d4>)
 8009222:	2000      	movs	r0, #0
 8009224:	f7f7 fb42 	bl	80008ac <__aeabi_ddiv>
 8009228:	4633      	mov	r3, r6
 800922a:	462a      	mov	r2, r5
 800922c:	f7f7 f85c 	bl	80002e8 <__aeabi_dsub>
 8009230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009234:	4656      	mov	r6, sl
 8009236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800923a:	f7f7 fcbd 	bl	8000bb8 <__aeabi_d2iz>
 800923e:	4605      	mov	r5, r0
 8009240:	f7f7 f9a0 	bl	8000584 <__aeabi_i2d>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800924c:	f7f7 f84c 	bl	80002e8 <__aeabi_dsub>
 8009250:	3530      	adds	r5, #48	@ 0x30
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800925a:	f806 5b01 	strb.w	r5, [r6], #1
 800925e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009262:	f7f7 fc6b 	bl	8000b3c <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	d171      	bne.n	800934e <_dtoa_r+0x65e>
 800926a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800926e:	4911      	ldr	r1, [pc, #68]	@ (80092b4 <_dtoa_r+0x5c4>)
 8009270:	2000      	movs	r0, #0
 8009272:	f7f7 f839 	bl	80002e8 <__aeabi_dsub>
 8009276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800927a:	f7f7 fc5f 	bl	8000b3c <__aeabi_dcmplt>
 800927e:	2800      	cmp	r0, #0
 8009280:	f040 8095 	bne.w	80093ae <_dtoa_r+0x6be>
 8009284:	42a6      	cmp	r6, r4
 8009286:	f43f af50 	beq.w	800912a <_dtoa_r+0x43a>
 800928a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800928e:	4b0a      	ldr	r3, [pc, #40]	@ (80092b8 <_dtoa_r+0x5c8>)
 8009290:	2200      	movs	r2, #0
 8009292:	f7f7 f9e1 	bl	8000658 <__aeabi_dmul>
 8009296:	4b08      	ldr	r3, [pc, #32]	@ (80092b8 <_dtoa_r+0x5c8>)
 8009298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800929c:	2200      	movs	r2, #0
 800929e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a2:	f7f7 f9d9 	bl	8000658 <__aeabi_dmul>
 80092a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092aa:	e7c4      	b.n	8009236 <_dtoa_r+0x546>
 80092ac:	0800af38 	.word	0x0800af38
 80092b0:	0800af10 	.word	0x0800af10
 80092b4:	3ff00000 	.word	0x3ff00000
 80092b8:	40240000 	.word	0x40240000
 80092bc:	401c0000 	.word	0x401c0000
 80092c0:	40140000 	.word	0x40140000
 80092c4:	3fe00000 	.word	0x3fe00000
 80092c8:	4631      	mov	r1, r6
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7f7 f9c4 	bl	8000658 <__aeabi_dmul>
 80092d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80092d6:	4656      	mov	r6, sl
 80092d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092dc:	f7f7 fc6c 	bl	8000bb8 <__aeabi_d2iz>
 80092e0:	4605      	mov	r5, r0
 80092e2:	f7f7 f94f 	bl	8000584 <__aeabi_i2d>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ee:	f7f6 fffb 	bl	80002e8 <__aeabi_dsub>
 80092f2:	3530      	adds	r5, #48	@ 0x30
 80092f4:	f806 5b01 	strb.w	r5, [r6], #1
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	d124      	bne.n	8009352 <_dtoa_r+0x662>
 8009308:	4bac      	ldr	r3, [pc, #688]	@ (80095bc <_dtoa_r+0x8cc>)
 800930a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800930e:	f7f6 ffed 	bl	80002ec <__adddf3>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931a:	f7f7 fc2d 	bl	8000b78 <__aeabi_dcmpgt>
 800931e:	2800      	cmp	r0, #0
 8009320:	d145      	bne.n	80093ae <_dtoa_r+0x6be>
 8009322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009326:	49a5      	ldr	r1, [pc, #660]	@ (80095bc <_dtoa_r+0x8cc>)
 8009328:	2000      	movs	r0, #0
 800932a:	f7f6 ffdd 	bl	80002e8 <__aeabi_dsub>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009336:	f7f7 fc01 	bl	8000b3c <__aeabi_dcmplt>
 800933a:	2800      	cmp	r0, #0
 800933c:	f43f aef5 	beq.w	800912a <_dtoa_r+0x43a>
 8009340:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009342:	1e73      	subs	r3, r6, #1
 8009344:	9315      	str	r3, [sp, #84]	@ 0x54
 8009346:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800934a:	2b30      	cmp	r3, #48	@ 0x30
 800934c:	d0f8      	beq.n	8009340 <_dtoa_r+0x650>
 800934e:	9f04      	ldr	r7, [sp, #16]
 8009350:	e73e      	b.n	80091d0 <_dtoa_r+0x4e0>
 8009352:	4b9b      	ldr	r3, [pc, #620]	@ (80095c0 <_dtoa_r+0x8d0>)
 8009354:	f7f7 f980 	bl	8000658 <__aeabi_dmul>
 8009358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935c:	e7bc      	b.n	80092d8 <_dtoa_r+0x5e8>
 800935e:	d10c      	bne.n	800937a <_dtoa_r+0x68a>
 8009360:	4b98      	ldr	r3, [pc, #608]	@ (80095c4 <_dtoa_r+0x8d4>)
 8009362:	2200      	movs	r2, #0
 8009364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009368:	f7f7 f976 	bl	8000658 <__aeabi_dmul>
 800936c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009370:	f7f7 fbf8 	bl	8000b64 <__aeabi_dcmpge>
 8009374:	2800      	cmp	r0, #0
 8009376:	f000 8157 	beq.w	8009628 <_dtoa_r+0x938>
 800937a:	2400      	movs	r4, #0
 800937c:	4625      	mov	r5, r4
 800937e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009380:	43db      	mvns	r3, r3
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	4656      	mov	r6, sl
 8009386:	2700      	movs	r7, #0
 8009388:	4621      	mov	r1, r4
 800938a:	4658      	mov	r0, fp
 800938c:	f000 fafe 	bl	800998c <_Bfree>
 8009390:	2d00      	cmp	r5, #0
 8009392:	d0dc      	beq.n	800934e <_dtoa_r+0x65e>
 8009394:	b12f      	cbz	r7, 80093a2 <_dtoa_r+0x6b2>
 8009396:	42af      	cmp	r7, r5
 8009398:	d003      	beq.n	80093a2 <_dtoa_r+0x6b2>
 800939a:	4639      	mov	r1, r7
 800939c:	4658      	mov	r0, fp
 800939e:	f000 faf5 	bl	800998c <_Bfree>
 80093a2:	4629      	mov	r1, r5
 80093a4:	4658      	mov	r0, fp
 80093a6:	f000 faf1 	bl	800998c <_Bfree>
 80093aa:	e7d0      	b.n	800934e <_dtoa_r+0x65e>
 80093ac:	9704      	str	r7, [sp, #16]
 80093ae:	4633      	mov	r3, r6
 80093b0:	461e      	mov	r6, r3
 80093b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093b6:	2a39      	cmp	r2, #57	@ 0x39
 80093b8:	d107      	bne.n	80093ca <_dtoa_r+0x6da>
 80093ba:	459a      	cmp	sl, r3
 80093bc:	d1f8      	bne.n	80093b0 <_dtoa_r+0x6c0>
 80093be:	9a04      	ldr	r2, [sp, #16]
 80093c0:	3201      	adds	r2, #1
 80093c2:	9204      	str	r2, [sp, #16]
 80093c4:	2230      	movs	r2, #48	@ 0x30
 80093c6:	f88a 2000 	strb.w	r2, [sl]
 80093ca:	781a      	ldrb	r2, [r3, #0]
 80093cc:	3201      	adds	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	e7bd      	b.n	800934e <_dtoa_r+0x65e>
 80093d2:	4b7b      	ldr	r3, [pc, #492]	@ (80095c0 <_dtoa_r+0x8d0>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	f7f7 f93f 	bl	8000658 <__aeabi_dmul>
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	460d      	mov	r5, r1
 80093e2:	f7f7 fba1 	bl	8000b28 <__aeabi_dcmpeq>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f aebb 	beq.w	8009162 <_dtoa_r+0x472>
 80093ec:	e6f0      	b.n	80091d0 <_dtoa_r+0x4e0>
 80093ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	f000 80db 	beq.w	80095ac <_dtoa_r+0x8bc>
 80093f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093f8:	2a01      	cmp	r2, #1
 80093fa:	f300 80bf 	bgt.w	800957c <_dtoa_r+0x88c>
 80093fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009400:	2a00      	cmp	r2, #0
 8009402:	f000 80b7 	beq.w	8009574 <_dtoa_r+0x884>
 8009406:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800940a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800940c:	4646      	mov	r6, r8
 800940e:	9a08      	ldr	r2, [sp, #32]
 8009410:	2101      	movs	r1, #1
 8009412:	441a      	add	r2, r3
 8009414:	4658      	mov	r0, fp
 8009416:	4498      	add	r8, r3
 8009418:	9208      	str	r2, [sp, #32]
 800941a:	f000 fb6b 	bl	8009af4 <__i2b>
 800941e:	4605      	mov	r5, r0
 8009420:	b15e      	cbz	r6, 800943a <_dtoa_r+0x74a>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	2b00      	cmp	r3, #0
 8009426:	dd08      	ble.n	800943a <_dtoa_r+0x74a>
 8009428:	42b3      	cmp	r3, r6
 800942a:	9a08      	ldr	r2, [sp, #32]
 800942c:	bfa8      	it	ge
 800942e:	4633      	movge	r3, r6
 8009430:	eba8 0803 	sub.w	r8, r8, r3
 8009434:	1af6      	subs	r6, r6, r3
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	9308      	str	r3, [sp, #32]
 800943a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800943c:	b1f3      	cbz	r3, 800947c <_dtoa_r+0x78c>
 800943e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 80b7 	beq.w	80095b4 <_dtoa_r+0x8c4>
 8009446:	b18c      	cbz	r4, 800946c <_dtoa_r+0x77c>
 8009448:	4629      	mov	r1, r5
 800944a:	4622      	mov	r2, r4
 800944c:	4658      	mov	r0, fp
 800944e:	f000 fc11 	bl	8009c74 <__pow5mult>
 8009452:	464a      	mov	r2, r9
 8009454:	4601      	mov	r1, r0
 8009456:	4605      	mov	r5, r0
 8009458:	4658      	mov	r0, fp
 800945a:	f000 fb61 	bl	8009b20 <__multiply>
 800945e:	4649      	mov	r1, r9
 8009460:	9004      	str	r0, [sp, #16]
 8009462:	4658      	mov	r0, fp
 8009464:	f000 fa92 	bl	800998c <_Bfree>
 8009468:	9b04      	ldr	r3, [sp, #16]
 800946a:	4699      	mov	r9, r3
 800946c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946e:	1b1a      	subs	r2, r3, r4
 8009470:	d004      	beq.n	800947c <_dtoa_r+0x78c>
 8009472:	4649      	mov	r1, r9
 8009474:	4658      	mov	r0, fp
 8009476:	f000 fbfd 	bl	8009c74 <__pow5mult>
 800947a:	4681      	mov	r9, r0
 800947c:	2101      	movs	r1, #1
 800947e:	4658      	mov	r0, fp
 8009480:	f000 fb38 	bl	8009af4 <__i2b>
 8009484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009486:	4604      	mov	r4, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 81cf 	beq.w	800982c <_dtoa_r+0xb3c>
 800948e:	461a      	mov	r2, r3
 8009490:	4601      	mov	r1, r0
 8009492:	4658      	mov	r0, fp
 8009494:	f000 fbee 	bl	8009c74 <__pow5mult>
 8009498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949a:	2b01      	cmp	r3, #1
 800949c:	4604      	mov	r4, r0
 800949e:	f300 8095 	bgt.w	80095cc <_dtoa_r+0x8dc>
 80094a2:	9b02      	ldr	r3, [sp, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 8087 	bne.w	80095b8 <_dtoa_r+0x8c8>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 8089 	bne.w	80095c8 <_dtoa_r+0x8d8>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094bc:	0d1b      	lsrs	r3, r3, #20
 80094be:	051b      	lsls	r3, r3, #20
 80094c0:	b12b      	cbz	r3, 80094ce <_dtoa_r+0x7de>
 80094c2:	9b08      	ldr	r3, [sp, #32]
 80094c4:	3301      	adds	r3, #1
 80094c6:	9308      	str	r3, [sp, #32]
 80094c8:	f108 0801 	add.w	r8, r8, #1
 80094cc:	2301      	movs	r3, #1
 80094ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 81b0 	beq.w	8009838 <_dtoa_r+0xb48>
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094de:	6918      	ldr	r0, [r3, #16]
 80094e0:	f000 fabc 	bl	8009a5c <__hi0bits>
 80094e4:	f1c0 0020 	rsb	r0, r0, #32
 80094e8:	9b08      	ldr	r3, [sp, #32]
 80094ea:	4418      	add	r0, r3
 80094ec:	f010 001f 	ands.w	r0, r0, #31
 80094f0:	d077      	beq.n	80095e2 <_dtoa_r+0x8f2>
 80094f2:	f1c0 0320 	rsb	r3, r0, #32
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	dd6b      	ble.n	80095d2 <_dtoa_r+0x8e2>
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	f1c0 001c 	rsb	r0, r0, #28
 8009500:	4403      	add	r3, r0
 8009502:	4480      	add	r8, r0
 8009504:	4406      	add	r6, r0
 8009506:	9308      	str	r3, [sp, #32]
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	dd05      	ble.n	800951a <_dtoa_r+0x82a>
 800950e:	4649      	mov	r1, r9
 8009510:	4642      	mov	r2, r8
 8009512:	4658      	mov	r0, fp
 8009514:	f000 fc08 	bl	8009d28 <__lshift>
 8009518:	4681      	mov	r9, r0
 800951a:	9b08      	ldr	r3, [sp, #32]
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd05      	ble.n	800952c <_dtoa_r+0x83c>
 8009520:	4621      	mov	r1, r4
 8009522:	461a      	mov	r2, r3
 8009524:	4658      	mov	r0, fp
 8009526:	f000 fbff 	bl	8009d28 <__lshift>
 800952a:	4604      	mov	r4, r0
 800952c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800952e:	2b00      	cmp	r3, #0
 8009530:	d059      	beq.n	80095e6 <_dtoa_r+0x8f6>
 8009532:	4621      	mov	r1, r4
 8009534:	4648      	mov	r0, r9
 8009536:	f000 fc63 	bl	8009e00 <__mcmp>
 800953a:	2800      	cmp	r0, #0
 800953c:	da53      	bge.n	80095e6 <_dtoa_r+0x8f6>
 800953e:	1e7b      	subs	r3, r7, #1
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	4649      	mov	r1, r9
 8009544:	2300      	movs	r3, #0
 8009546:	220a      	movs	r2, #10
 8009548:	4658      	mov	r0, fp
 800954a:	f000 fa41 	bl	80099d0 <__multadd>
 800954e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009550:	4681      	mov	r9, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 8172 	beq.w	800983c <_dtoa_r+0xb4c>
 8009558:	2300      	movs	r3, #0
 800955a:	4629      	mov	r1, r5
 800955c:	220a      	movs	r2, #10
 800955e:	4658      	mov	r0, fp
 8009560:	f000 fa36 	bl	80099d0 <__multadd>
 8009564:	9b00      	ldr	r3, [sp, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	4605      	mov	r5, r0
 800956a:	dc67      	bgt.n	800963c <_dtoa_r+0x94c>
 800956c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956e:	2b02      	cmp	r3, #2
 8009570:	dc41      	bgt.n	80095f6 <_dtoa_r+0x906>
 8009572:	e063      	b.n	800963c <_dtoa_r+0x94c>
 8009574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800957a:	e746      	b.n	800940a <_dtoa_r+0x71a>
 800957c:	9b07      	ldr	r3, [sp, #28]
 800957e:	1e5c      	subs	r4, r3, #1
 8009580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009582:	42a3      	cmp	r3, r4
 8009584:	bfbf      	itttt	lt
 8009586:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009588:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800958a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800958c:	1ae3      	sublt	r3, r4, r3
 800958e:	bfb4      	ite	lt
 8009590:	18d2      	addlt	r2, r2, r3
 8009592:	1b1c      	subge	r4, r3, r4
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	bfbc      	itt	lt
 8009598:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800959a:	2400      	movlt	r4, #0
 800959c:	2b00      	cmp	r3, #0
 800959e:	bfb5      	itete	lt
 80095a0:	eba8 0603 	sublt.w	r6, r8, r3
 80095a4:	9b07      	ldrge	r3, [sp, #28]
 80095a6:	2300      	movlt	r3, #0
 80095a8:	4646      	movge	r6, r8
 80095aa:	e730      	b.n	800940e <_dtoa_r+0x71e>
 80095ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80095ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80095b0:	4646      	mov	r6, r8
 80095b2:	e735      	b.n	8009420 <_dtoa_r+0x730>
 80095b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095b6:	e75c      	b.n	8009472 <_dtoa_r+0x782>
 80095b8:	2300      	movs	r3, #0
 80095ba:	e788      	b.n	80094ce <_dtoa_r+0x7de>
 80095bc:	3fe00000 	.word	0x3fe00000
 80095c0:	40240000 	.word	0x40240000
 80095c4:	40140000 	.word	0x40140000
 80095c8:	9b02      	ldr	r3, [sp, #8]
 80095ca:	e780      	b.n	80094ce <_dtoa_r+0x7de>
 80095cc:	2300      	movs	r3, #0
 80095ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d0:	e782      	b.n	80094d8 <_dtoa_r+0x7e8>
 80095d2:	d099      	beq.n	8009508 <_dtoa_r+0x818>
 80095d4:	9a08      	ldr	r2, [sp, #32]
 80095d6:	331c      	adds	r3, #28
 80095d8:	441a      	add	r2, r3
 80095da:	4498      	add	r8, r3
 80095dc:	441e      	add	r6, r3
 80095de:	9208      	str	r2, [sp, #32]
 80095e0:	e792      	b.n	8009508 <_dtoa_r+0x818>
 80095e2:	4603      	mov	r3, r0
 80095e4:	e7f6      	b.n	80095d4 <_dtoa_r+0x8e4>
 80095e6:	9b07      	ldr	r3, [sp, #28]
 80095e8:	9704      	str	r7, [sp, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	dc20      	bgt.n	8009630 <_dtoa_r+0x940>
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	dd1e      	ble.n	8009634 <_dtoa_r+0x944>
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f47f aec0 	bne.w	800937e <_dtoa_r+0x68e>
 80095fe:	4621      	mov	r1, r4
 8009600:	2205      	movs	r2, #5
 8009602:	4658      	mov	r0, fp
 8009604:	f000 f9e4 	bl	80099d0 <__multadd>
 8009608:	4601      	mov	r1, r0
 800960a:	4604      	mov	r4, r0
 800960c:	4648      	mov	r0, r9
 800960e:	f000 fbf7 	bl	8009e00 <__mcmp>
 8009612:	2800      	cmp	r0, #0
 8009614:	f77f aeb3 	ble.w	800937e <_dtoa_r+0x68e>
 8009618:	4656      	mov	r6, sl
 800961a:	2331      	movs	r3, #49	@ 0x31
 800961c:	f806 3b01 	strb.w	r3, [r6], #1
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	3301      	adds	r3, #1
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	e6ae      	b.n	8009386 <_dtoa_r+0x696>
 8009628:	9c07      	ldr	r4, [sp, #28]
 800962a:	9704      	str	r7, [sp, #16]
 800962c:	4625      	mov	r5, r4
 800962e:	e7f3      	b.n	8009618 <_dtoa_r+0x928>
 8009630:	9b07      	ldr	r3, [sp, #28]
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8104 	beq.w	8009844 <_dtoa_r+0xb54>
 800963c:	2e00      	cmp	r6, #0
 800963e:	dd05      	ble.n	800964c <_dtoa_r+0x95c>
 8009640:	4629      	mov	r1, r5
 8009642:	4632      	mov	r2, r6
 8009644:	4658      	mov	r0, fp
 8009646:	f000 fb6f 	bl	8009d28 <__lshift>
 800964a:	4605      	mov	r5, r0
 800964c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05a      	beq.n	8009708 <_dtoa_r+0xa18>
 8009652:	6869      	ldr	r1, [r5, #4]
 8009654:	4658      	mov	r0, fp
 8009656:	f000 f959 	bl	800990c <_Balloc>
 800965a:	4606      	mov	r6, r0
 800965c:	b928      	cbnz	r0, 800966a <_dtoa_r+0x97a>
 800965e:	4b84      	ldr	r3, [pc, #528]	@ (8009870 <_dtoa_r+0xb80>)
 8009660:	4602      	mov	r2, r0
 8009662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009666:	f7ff bb5a 	b.w	8008d1e <_dtoa_r+0x2e>
 800966a:	692a      	ldr	r2, [r5, #16]
 800966c:	3202      	adds	r2, #2
 800966e:	0092      	lsls	r2, r2, #2
 8009670:	f105 010c 	add.w	r1, r5, #12
 8009674:	300c      	adds	r0, #12
 8009676:	f7ff faa4 	bl	8008bc2 <memcpy>
 800967a:	2201      	movs	r2, #1
 800967c:	4631      	mov	r1, r6
 800967e:	4658      	mov	r0, fp
 8009680:	f000 fb52 	bl	8009d28 <__lshift>
 8009684:	f10a 0301 	add.w	r3, sl, #1
 8009688:	9307      	str	r3, [sp, #28]
 800968a:	9b00      	ldr	r3, [sp, #0]
 800968c:	4453      	add	r3, sl
 800968e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	462f      	mov	r7, r5
 8009698:	930a      	str	r3, [sp, #40]	@ 0x28
 800969a:	4605      	mov	r5, r0
 800969c:	9b07      	ldr	r3, [sp, #28]
 800969e:	4621      	mov	r1, r4
 80096a0:	3b01      	subs	r3, #1
 80096a2:	4648      	mov	r0, r9
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	f7ff fa9a 	bl	8008bde <quorem>
 80096aa:	4639      	mov	r1, r7
 80096ac:	9002      	str	r0, [sp, #8]
 80096ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80096b2:	4648      	mov	r0, r9
 80096b4:	f000 fba4 	bl	8009e00 <__mcmp>
 80096b8:	462a      	mov	r2, r5
 80096ba:	9008      	str	r0, [sp, #32]
 80096bc:	4621      	mov	r1, r4
 80096be:	4658      	mov	r0, fp
 80096c0:	f000 fbba 	bl	8009e38 <__mdiff>
 80096c4:	68c2      	ldr	r2, [r0, #12]
 80096c6:	4606      	mov	r6, r0
 80096c8:	bb02      	cbnz	r2, 800970c <_dtoa_r+0xa1c>
 80096ca:	4601      	mov	r1, r0
 80096cc:	4648      	mov	r0, r9
 80096ce:	f000 fb97 	bl	8009e00 <__mcmp>
 80096d2:	4602      	mov	r2, r0
 80096d4:	4631      	mov	r1, r6
 80096d6:	4658      	mov	r0, fp
 80096d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80096da:	f000 f957 	bl	800998c <_Bfree>
 80096de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096e2:	9e07      	ldr	r6, [sp, #28]
 80096e4:	ea43 0102 	orr.w	r1, r3, r2
 80096e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ea:	4319      	orrs	r1, r3
 80096ec:	d110      	bne.n	8009710 <_dtoa_r+0xa20>
 80096ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096f2:	d029      	beq.n	8009748 <_dtoa_r+0xa58>
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	dd02      	ble.n	8009700 <_dtoa_r+0xa10>
 80096fa:	9b02      	ldr	r3, [sp, #8]
 80096fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009700:	9b00      	ldr	r3, [sp, #0]
 8009702:	f883 8000 	strb.w	r8, [r3]
 8009706:	e63f      	b.n	8009388 <_dtoa_r+0x698>
 8009708:	4628      	mov	r0, r5
 800970a:	e7bb      	b.n	8009684 <_dtoa_r+0x994>
 800970c:	2201      	movs	r2, #1
 800970e:	e7e1      	b.n	80096d4 <_dtoa_r+0x9e4>
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	2b00      	cmp	r3, #0
 8009714:	db04      	blt.n	8009720 <_dtoa_r+0xa30>
 8009716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009718:	430b      	orrs	r3, r1
 800971a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800971c:	430b      	orrs	r3, r1
 800971e:	d120      	bne.n	8009762 <_dtoa_r+0xa72>
 8009720:	2a00      	cmp	r2, #0
 8009722:	dded      	ble.n	8009700 <_dtoa_r+0xa10>
 8009724:	4649      	mov	r1, r9
 8009726:	2201      	movs	r2, #1
 8009728:	4658      	mov	r0, fp
 800972a:	f000 fafd 	bl	8009d28 <__lshift>
 800972e:	4621      	mov	r1, r4
 8009730:	4681      	mov	r9, r0
 8009732:	f000 fb65 	bl	8009e00 <__mcmp>
 8009736:	2800      	cmp	r0, #0
 8009738:	dc03      	bgt.n	8009742 <_dtoa_r+0xa52>
 800973a:	d1e1      	bne.n	8009700 <_dtoa_r+0xa10>
 800973c:	f018 0f01 	tst.w	r8, #1
 8009740:	d0de      	beq.n	8009700 <_dtoa_r+0xa10>
 8009742:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009746:	d1d8      	bne.n	80096fa <_dtoa_r+0xa0a>
 8009748:	9a00      	ldr	r2, [sp, #0]
 800974a:	2339      	movs	r3, #57	@ 0x39
 800974c:	7013      	strb	r3, [r2, #0]
 800974e:	4633      	mov	r3, r6
 8009750:	461e      	mov	r6, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009758:	2a39      	cmp	r2, #57	@ 0x39
 800975a:	d052      	beq.n	8009802 <_dtoa_r+0xb12>
 800975c:	3201      	adds	r2, #1
 800975e:	701a      	strb	r2, [r3, #0]
 8009760:	e612      	b.n	8009388 <_dtoa_r+0x698>
 8009762:	2a00      	cmp	r2, #0
 8009764:	dd07      	ble.n	8009776 <_dtoa_r+0xa86>
 8009766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800976a:	d0ed      	beq.n	8009748 <_dtoa_r+0xa58>
 800976c:	9a00      	ldr	r2, [sp, #0]
 800976e:	f108 0301 	add.w	r3, r8, #1
 8009772:	7013      	strb	r3, [r2, #0]
 8009774:	e608      	b.n	8009388 <_dtoa_r+0x698>
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	9a07      	ldr	r2, [sp, #28]
 800977a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800977e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009780:	4293      	cmp	r3, r2
 8009782:	d028      	beq.n	80097d6 <_dtoa_r+0xae6>
 8009784:	4649      	mov	r1, r9
 8009786:	2300      	movs	r3, #0
 8009788:	220a      	movs	r2, #10
 800978a:	4658      	mov	r0, fp
 800978c:	f000 f920 	bl	80099d0 <__multadd>
 8009790:	42af      	cmp	r7, r5
 8009792:	4681      	mov	r9, r0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	f04f 020a 	mov.w	r2, #10
 800979c:	4639      	mov	r1, r7
 800979e:	4658      	mov	r0, fp
 80097a0:	d107      	bne.n	80097b2 <_dtoa_r+0xac2>
 80097a2:	f000 f915 	bl	80099d0 <__multadd>
 80097a6:	4607      	mov	r7, r0
 80097a8:	4605      	mov	r5, r0
 80097aa:	9b07      	ldr	r3, [sp, #28]
 80097ac:	3301      	adds	r3, #1
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	e774      	b.n	800969c <_dtoa_r+0x9ac>
 80097b2:	f000 f90d 	bl	80099d0 <__multadd>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4607      	mov	r7, r0
 80097ba:	2300      	movs	r3, #0
 80097bc:	220a      	movs	r2, #10
 80097be:	4658      	mov	r0, fp
 80097c0:	f000 f906 	bl	80099d0 <__multadd>
 80097c4:	4605      	mov	r5, r0
 80097c6:	e7f0      	b.n	80097aa <_dtoa_r+0xaba>
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfcc      	ite	gt
 80097ce:	461e      	movgt	r6, r3
 80097d0:	2601      	movle	r6, #1
 80097d2:	4456      	add	r6, sl
 80097d4:	2700      	movs	r7, #0
 80097d6:	4649      	mov	r1, r9
 80097d8:	2201      	movs	r2, #1
 80097da:	4658      	mov	r0, fp
 80097dc:	f000 faa4 	bl	8009d28 <__lshift>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4681      	mov	r9, r0
 80097e4:	f000 fb0c 	bl	8009e00 <__mcmp>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	dcb0      	bgt.n	800974e <_dtoa_r+0xa5e>
 80097ec:	d102      	bne.n	80097f4 <_dtoa_r+0xb04>
 80097ee:	f018 0f01 	tst.w	r8, #1
 80097f2:	d1ac      	bne.n	800974e <_dtoa_r+0xa5e>
 80097f4:	4633      	mov	r3, r6
 80097f6:	461e      	mov	r6, r3
 80097f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097fc:	2a30      	cmp	r2, #48	@ 0x30
 80097fe:	d0fa      	beq.n	80097f6 <_dtoa_r+0xb06>
 8009800:	e5c2      	b.n	8009388 <_dtoa_r+0x698>
 8009802:	459a      	cmp	sl, r3
 8009804:	d1a4      	bne.n	8009750 <_dtoa_r+0xa60>
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	3301      	adds	r3, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	2331      	movs	r3, #49	@ 0x31
 800980e:	f88a 3000 	strb.w	r3, [sl]
 8009812:	e5b9      	b.n	8009388 <_dtoa_r+0x698>
 8009814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009816:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009874 <_dtoa_r+0xb84>
 800981a:	b11b      	cbz	r3, 8009824 <_dtoa_r+0xb34>
 800981c:	f10a 0308 	add.w	r3, sl, #8
 8009820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	4650      	mov	r0, sl
 8009826:	b019      	add	sp, #100	@ 0x64
 8009828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982e:	2b01      	cmp	r3, #1
 8009830:	f77f ae37 	ble.w	80094a2 <_dtoa_r+0x7b2>
 8009834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009836:	930a      	str	r3, [sp, #40]	@ 0x28
 8009838:	2001      	movs	r0, #1
 800983a:	e655      	b.n	80094e8 <_dtoa_r+0x7f8>
 800983c:	9b00      	ldr	r3, [sp, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f77f aed6 	ble.w	80095f0 <_dtoa_r+0x900>
 8009844:	4656      	mov	r6, sl
 8009846:	4621      	mov	r1, r4
 8009848:	4648      	mov	r0, r9
 800984a:	f7ff f9c8 	bl	8008bde <quorem>
 800984e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009852:	f806 8b01 	strb.w	r8, [r6], #1
 8009856:	9b00      	ldr	r3, [sp, #0]
 8009858:	eba6 020a 	sub.w	r2, r6, sl
 800985c:	4293      	cmp	r3, r2
 800985e:	ddb3      	ble.n	80097c8 <_dtoa_r+0xad8>
 8009860:	4649      	mov	r1, r9
 8009862:	2300      	movs	r3, #0
 8009864:	220a      	movs	r2, #10
 8009866:	4658      	mov	r0, fp
 8009868:	f000 f8b2 	bl	80099d0 <__multadd>
 800986c:	4681      	mov	r9, r0
 800986e:	e7ea      	b.n	8009846 <_dtoa_r+0xb56>
 8009870:	0800ae95 	.word	0x0800ae95
 8009874:	0800ae19 	.word	0x0800ae19

08009878 <_free_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4605      	mov	r5, r0
 800987c:	2900      	cmp	r1, #0
 800987e:	d041      	beq.n	8009904 <_free_r+0x8c>
 8009880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009884:	1f0c      	subs	r4, r1, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfb8      	it	lt
 800988a:	18e4      	addlt	r4, r4, r3
 800988c:	f7fe fad2 	bl	8007e34 <__malloc_lock>
 8009890:	4a1d      	ldr	r2, [pc, #116]	@ (8009908 <_free_r+0x90>)
 8009892:	6813      	ldr	r3, [r2, #0]
 8009894:	b933      	cbnz	r3, 80098a4 <_free_r+0x2c>
 8009896:	6063      	str	r3, [r4, #4]
 8009898:	6014      	str	r4, [r2, #0]
 800989a:	4628      	mov	r0, r5
 800989c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a0:	f7fe bace 	b.w	8007e40 <__malloc_unlock>
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	d908      	bls.n	80098ba <_free_r+0x42>
 80098a8:	6820      	ldr	r0, [r4, #0]
 80098aa:	1821      	adds	r1, r4, r0
 80098ac:	428b      	cmp	r3, r1
 80098ae:	bf01      	itttt	eq
 80098b0:	6819      	ldreq	r1, [r3, #0]
 80098b2:	685b      	ldreq	r3, [r3, #4]
 80098b4:	1809      	addeq	r1, r1, r0
 80098b6:	6021      	streq	r1, [r4, #0]
 80098b8:	e7ed      	b.n	8009896 <_free_r+0x1e>
 80098ba:	461a      	mov	r2, r3
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	b10b      	cbz	r3, 80098c4 <_free_r+0x4c>
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	d9fa      	bls.n	80098ba <_free_r+0x42>
 80098c4:	6811      	ldr	r1, [r2, #0]
 80098c6:	1850      	adds	r0, r2, r1
 80098c8:	42a0      	cmp	r0, r4
 80098ca:	d10b      	bne.n	80098e4 <_free_r+0x6c>
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	4401      	add	r1, r0
 80098d0:	1850      	adds	r0, r2, r1
 80098d2:	4283      	cmp	r3, r0
 80098d4:	6011      	str	r1, [r2, #0]
 80098d6:	d1e0      	bne.n	800989a <_free_r+0x22>
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	6053      	str	r3, [r2, #4]
 80098de:	4408      	add	r0, r1
 80098e0:	6010      	str	r0, [r2, #0]
 80098e2:	e7da      	b.n	800989a <_free_r+0x22>
 80098e4:	d902      	bls.n	80098ec <_free_r+0x74>
 80098e6:	230c      	movs	r3, #12
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	e7d6      	b.n	800989a <_free_r+0x22>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	1821      	adds	r1, r4, r0
 80098f0:	428b      	cmp	r3, r1
 80098f2:	bf04      	itt	eq
 80098f4:	6819      	ldreq	r1, [r3, #0]
 80098f6:	685b      	ldreq	r3, [r3, #4]
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	bf04      	itt	eq
 80098fc:	1809      	addeq	r1, r1, r0
 80098fe:	6021      	streq	r1, [r4, #0]
 8009900:	6054      	str	r4, [r2, #4]
 8009902:	e7ca      	b.n	800989a <_free_r+0x22>
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	2001e680 	.word	0x2001e680

0800990c <_Balloc>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	69c6      	ldr	r6, [r0, #28]
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	b976      	cbnz	r6, 8009934 <_Balloc+0x28>
 8009916:	2010      	movs	r0, #16
 8009918:	f7fe f9da 	bl	8007cd0 <malloc>
 800991c:	4602      	mov	r2, r0
 800991e:	61e0      	str	r0, [r4, #28]
 8009920:	b920      	cbnz	r0, 800992c <_Balloc+0x20>
 8009922:	4b18      	ldr	r3, [pc, #96]	@ (8009984 <_Balloc+0x78>)
 8009924:	4818      	ldr	r0, [pc, #96]	@ (8009988 <_Balloc+0x7c>)
 8009926:	216b      	movs	r1, #107	@ 0x6b
 8009928:	f000 fd90 	bl	800a44c <__assert_func>
 800992c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009930:	6006      	str	r6, [r0, #0]
 8009932:	60c6      	str	r6, [r0, #12]
 8009934:	69e6      	ldr	r6, [r4, #28]
 8009936:	68f3      	ldr	r3, [r6, #12]
 8009938:	b183      	cbz	r3, 800995c <_Balloc+0x50>
 800993a:	69e3      	ldr	r3, [r4, #28]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009942:	b9b8      	cbnz	r0, 8009974 <_Balloc+0x68>
 8009944:	2101      	movs	r1, #1
 8009946:	fa01 f605 	lsl.w	r6, r1, r5
 800994a:	1d72      	adds	r2, r6, #5
 800994c:	0092      	lsls	r2, r2, #2
 800994e:	4620      	mov	r0, r4
 8009950:	f000 fd9a 	bl	800a488 <_calloc_r>
 8009954:	b160      	cbz	r0, 8009970 <_Balloc+0x64>
 8009956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800995a:	e00e      	b.n	800997a <_Balloc+0x6e>
 800995c:	2221      	movs	r2, #33	@ 0x21
 800995e:	2104      	movs	r1, #4
 8009960:	4620      	mov	r0, r4
 8009962:	f000 fd91 	bl	800a488 <_calloc_r>
 8009966:	69e3      	ldr	r3, [r4, #28]
 8009968:	60f0      	str	r0, [r6, #12]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e4      	bne.n	800993a <_Balloc+0x2e>
 8009970:	2000      	movs	r0, #0
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	6802      	ldr	r2, [r0, #0]
 8009976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800997a:	2300      	movs	r3, #0
 800997c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009980:	e7f7      	b.n	8009972 <_Balloc+0x66>
 8009982:	bf00      	nop
 8009984:	0800ae26 	.word	0x0800ae26
 8009988:	0800aea6 	.word	0x0800aea6

0800998c <_Bfree>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	69c6      	ldr	r6, [r0, #28]
 8009990:	4605      	mov	r5, r0
 8009992:	460c      	mov	r4, r1
 8009994:	b976      	cbnz	r6, 80099b4 <_Bfree+0x28>
 8009996:	2010      	movs	r0, #16
 8009998:	f7fe f99a 	bl	8007cd0 <malloc>
 800999c:	4602      	mov	r2, r0
 800999e:	61e8      	str	r0, [r5, #28]
 80099a0:	b920      	cbnz	r0, 80099ac <_Bfree+0x20>
 80099a2:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <_Bfree+0x3c>)
 80099a4:	4809      	ldr	r0, [pc, #36]	@ (80099cc <_Bfree+0x40>)
 80099a6:	218f      	movs	r1, #143	@ 0x8f
 80099a8:	f000 fd50 	bl	800a44c <__assert_func>
 80099ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099b0:	6006      	str	r6, [r0, #0]
 80099b2:	60c6      	str	r6, [r0, #12]
 80099b4:	b13c      	cbz	r4, 80099c6 <_Bfree+0x3a>
 80099b6:	69eb      	ldr	r3, [r5, #28]
 80099b8:	6862      	ldr	r2, [r4, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099c0:	6021      	str	r1, [r4, #0]
 80099c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	0800ae26 	.word	0x0800ae26
 80099cc:	0800aea6 	.word	0x0800aea6

080099d0 <__multadd>:
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	690d      	ldr	r5, [r1, #16]
 80099d6:	4607      	mov	r7, r0
 80099d8:	460c      	mov	r4, r1
 80099da:	461e      	mov	r6, r3
 80099dc:	f101 0c14 	add.w	ip, r1, #20
 80099e0:	2000      	movs	r0, #0
 80099e2:	f8dc 3000 	ldr.w	r3, [ip]
 80099e6:	b299      	uxth	r1, r3
 80099e8:	fb02 6101 	mla	r1, r2, r1, r6
 80099ec:	0c1e      	lsrs	r6, r3, #16
 80099ee:	0c0b      	lsrs	r3, r1, #16
 80099f0:	fb02 3306 	mla	r3, r2, r6, r3
 80099f4:	b289      	uxth	r1, r1
 80099f6:	3001      	adds	r0, #1
 80099f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099fc:	4285      	cmp	r5, r0
 80099fe:	f84c 1b04 	str.w	r1, [ip], #4
 8009a02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a06:	dcec      	bgt.n	80099e2 <__multadd+0x12>
 8009a08:	b30e      	cbz	r6, 8009a4e <__multadd+0x7e>
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	42ab      	cmp	r3, r5
 8009a0e:	dc19      	bgt.n	8009a44 <__multadd+0x74>
 8009a10:	6861      	ldr	r1, [r4, #4]
 8009a12:	4638      	mov	r0, r7
 8009a14:	3101      	adds	r1, #1
 8009a16:	f7ff ff79 	bl	800990c <_Balloc>
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	b928      	cbnz	r0, 8009a2a <__multadd+0x5a>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <__multadd+0x84>)
 8009a22:	480d      	ldr	r0, [pc, #52]	@ (8009a58 <__multadd+0x88>)
 8009a24:	21ba      	movs	r1, #186	@ 0xba
 8009a26:	f000 fd11 	bl	800a44c <__assert_func>
 8009a2a:	6922      	ldr	r2, [r4, #16]
 8009a2c:	3202      	adds	r2, #2
 8009a2e:	f104 010c 	add.w	r1, r4, #12
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	300c      	adds	r0, #12
 8009a36:	f7ff f8c4 	bl	8008bc2 <memcpy>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff ffa5 	bl	800998c <_Bfree>
 8009a42:	4644      	mov	r4, r8
 8009a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a48:	3501      	adds	r5, #1
 8009a4a:	615e      	str	r6, [r3, #20]
 8009a4c:	6125      	str	r5, [r4, #16]
 8009a4e:	4620      	mov	r0, r4
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	0800ae95 	.word	0x0800ae95
 8009a58:	0800aea6 	.word	0x0800aea6

08009a5c <__hi0bits>:
 8009a5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a60:	4603      	mov	r3, r0
 8009a62:	bf36      	itet	cc
 8009a64:	0403      	lslcc	r3, r0, #16
 8009a66:	2000      	movcs	r0, #0
 8009a68:	2010      	movcc	r0, #16
 8009a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a6e:	bf3c      	itt	cc
 8009a70:	021b      	lslcc	r3, r3, #8
 8009a72:	3008      	addcc	r0, #8
 8009a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a78:	bf3c      	itt	cc
 8009a7a:	011b      	lslcc	r3, r3, #4
 8009a7c:	3004      	addcc	r0, #4
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a82:	bf3c      	itt	cc
 8009a84:	009b      	lslcc	r3, r3, #2
 8009a86:	3002      	addcc	r0, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	db05      	blt.n	8009a98 <__hi0bits+0x3c>
 8009a8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a90:	f100 0001 	add.w	r0, r0, #1
 8009a94:	bf08      	it	eq
 8009a96:	2020      	moveq	r0, #32
 8009a98:	4770      	bx	lr

08009a9a <__lo0bits>:
 8009a9a:	6803      	ldr	r3, [r0, #0]
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f013 0007 	ands.w	r0, r3, #7
 8009aa2:	d00b      	beq.n	8009abc <__lo0bits+0x22>
 8009aa4:	07d9      	lsls	r1, r3, #31
 8009aa6:	d421      	bmi.n	8009aec <__lo0bits+0x52>
 8009aa8:	0798      	lsls	r0, r3, #30
 8009aaa:	bf49      	itett	mi
 8009aac:	085b      	lsrmi	r3, r3, #1
 8009aae:	089b      	lsrpl	r3, r3, #2
 8009ab0:	2001      	movmi	r0, #1
 8009ab2:	6013      	strmi	r3, [r2, #0]
 8009ab4:	bf5c      	itt	pl
 8009ab6:	6013      	strpl	r3, [r2, #0]
 8009ab8:	2002      	movpl	r0, #2
 8009aba:	4770      	bx	lr
 8009abc:	b299      	uxth	r1, r3
 8009abe:	b909      	cbnz	r1, 8009ac4 <__lo0bits+0x2a>
 8009ac0:	0c1b      	lsrs	r3, r3, #16
 8009ac2:	2010      	movs	r0, #16
 8009ac4:	b2d9      	uxtb	r1, r3
 8009ac6:	b909      	cbnz	r1, 8009acc <__lo0bits+0x32>
 8009ac8:	3008      	adds	r0, #8
 8009aca:	0a1b      	lsrs	r3, r3, #8
 8009acc:	0719      	lsls	r1, r3, #28
 8009ace:	bf04      	itt	eq
 8009ad0:	091b      	lsreq	r3, r3, #4
 8009ad2:	3004      	addeq	r0, #4
 8009ad4:	0799      	lsls	r1, r3, #30
 8009ad6:	bf04      	itt	eq
 8009ad8:	089b      	lsreq	r3, r3, #2
 8009ada:	3002      	addeq	r0, #2
 8009adc:	07d9      	lsls	r1, r3, #31
 8009ade:	d403      	bmi.n	8009ae8 <__lo0bits+0x4e>
 8009ae0:	085b      	lsrs	r3, r3, #1
 8009ae2:	f100 0001 	add.w	r0, r0, #1
 8009ae6:	d003      	beq.n	8009af0 <__lo0bits+0x56>
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	4770      	bx	lr
 8009aec:	2000      	movs	r0, #0
 8009aee:	4770      	bx	lr
 8009af0:	2020      	movs	r0, #32
 8009af2:	4770      	bx	lr

08009af4 <__i2b>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	460c      	mov	r4, r1
 8009af8:	2101      	movs	r1, #1
 8009afa:	f7ff ff07 	bl	800990c <_Balloc>
 8009afe:	4602      	mov	r2, r0
 8009b00:	b928      	cbnz	r0, 8009b0e <__i2b+0x1a>
 8009b02:	4b05      	ldr	r3, [pc, #20]	@ (8009b18 <__i2b+0x24>)
 8009b04:	4805      	ldr	r0, [pc, #20]	@ (8009b1c <__i2b+0x28>)
 8009b06:	f240 1145 	movw	r1, #325	@ 0x145
 8009b0a:	f000 fc9f 	bl	800a44c <__assert_func>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	6144      	str	r4, [r0, #20]
 8009b12:	6103      	str	r3, [r0, #16]
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	bf00      	nop
 8009b18:	0800ae95 	.word	0x0800ae95
 8009b1c:	0800aea6 	.word	0x0800aea6

08009b20 <__multiply>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4614      	mov	r4, r2
 8009b26:	690a      	ldr	r2, [r1, #16]
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	bfa8      	it	ge
 8009b2e:	4623      	movge	r3, r4
 8009b30:	460f      	mov	r7, r1
 8009b32:	bfa4      	itt	ge
 8009b34:	460c      	movge	r4, r1
 8009b36:	461f      	movge	r7, r3
 8009b38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	6861      	ldr	r1, [r4, #4]
 8009b44:	eb0a 0609 	add.w	r6, sl, r9
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	bfb8      	it	lt
 8009b4e:	3101      	addlt	r1, #1
 8009b50:	f7ff fedc 	bl	800990c <_Balloc>
 8009b54:	b930      	cbnz	r0, 8009b64 <__multiply+0x44>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b44      	ldr	r3, [pc, #272]	@ (8009c6c <__multiply+0x14c>)
 8009b5a:	4845      	ldr	r0, [pc, #276]	@ (8009c70 <__multiply+0x150>)
 8009b5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b60:	f000 fc74 	bl	800a44c <__assert_func>
 8009b64:	f100 0514 	add.w	r5, r0, #20
 8009b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4543      	cmp	r3, r8
 8009b72:	d321      	bcc.n	8009bb8 <__multiply+0x98>
 8009b74:	f107 0114 	add.w	r1, r7, #20
 8009b78:	f104 0214 	add.w	r2, r4, #20
 8009b7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b84:	9302      	str	r3, [sp, #8]
 8009b86:	1b13      	subs	r3, r2, r4
 8009b88:	3b15      	subs	r3, #21
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	3304      	adds	r3, #4
 8009b90:	f104 0715 	add.w	r7, r4, #21
 8009b94:	42ba      	cmp	r2, r7
 8009b96:	bf38      	it	cc
 8009b98:	2304      	movcc	r3, #4
 8009b9a:	9301      	str	r3, [sp, #4]
 8009b9c:	9b02      	ldr	r3, [sp, #8]
 8009b9e:	9103      	str	r1, [sp, #12]
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	d80c      	bhi.n	8009bbe <__multiply+0x9e>
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	dd03      	ble.n	8009bb0 <__multiply+0x90>
 8009ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d05b      	beq.n	8009c68 <__multiply+0x148>
 8009bb0:	6106      	str	r6, [r0, #16]
 8009bb2:	b005      	add	sp, #20
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	f843 2b04 	str.w	r2, [r3], #4
 8009bbc:	e7d8      	b.n	8009b70 <__multiply+0x50>
 8009bbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bc2:	f1ba 0f00 	cmp.w	sl, #0
 8009bc6:	d024      	beq.n	8009c12 <__multiply+0xf2>
 8009bc8:	f104 0e14 	add.w	lr, r4, #20
 8009bcc:	46a9      	mov	r9, r5
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8009bda:	fa1f fb87 	uxth.w	fp, r7
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	fb0a 330b 	mla	r3, sl, fp, r3
 8009be4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009be8:	f8d9 7000 	ldr.w	r7, [r9]
 8009bec:	4463      	add	r3, ip
 8009bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bf2:	fb0a c70b 	mla	r7, sl, fp, ip
 8009bf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c00:	4572      	cmp	r2, lr
 8009c02:	f849 3b04 	str.w	r3, [r9], #4
 8009c06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c0a:	d8e2      	bhi.n	8009bd2 <__multiply+0xb2>
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	f845 c003 	str.w	ip, [r5, r3]
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c18:	3104      	adds	r1, #4
 8009c1a:	f1b9 0f00 	cmp.w	r9, #0
 8009c1e:	d021      	beq.n	8009c64 <__multiply+0x144>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	f104 0c14 	add.w	ip, r4, #20
 8009c26:	46ae      	mov	lr, r5
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8009c30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c34:	fb09 770b 	mla	r7, r9, fp, r7
 8009c38:	4457      	add	r7, sl
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c40:	f84e 3b04 	str.w	r3, [lr], #4
 8009c44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c4c:	f8be 3000 	ldrh.w	r3, [lr]
 8009c50:	fb09 330a 	mla	r3, r9, sl, r3
 8009c54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c58:	4562      	cmp	r2, ip
 8009c5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5e:	d8e5      	bhi.n	8009c2c <__multiply+0x10c>
 8009c60:	9f01      	ldr	r7, [sp, #4]
 8009c62:	51eb      	str	r3, [r5, r7]
 8009c64:	3504      	adds	r5, #4
 8009c66:	e799      	b.n	8009b9c <__multiply+0x7c>
 8009c68:	3e01      	subs	r6, #1
 8009c6a:	e79b      	b.n	8009ba4 <__multiply+0x84>
 8009c6c:	0800ae95 	.word	0x0800ae95
 8009c70:	0800aea6 	.word	0x0800aea6

08009c74 <__pow5mult>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4615      	mov	r5, r2
 8009c7a:	f012 0203 	ands.w	r2, r2, #3
 8009c7e:	4607      	mov	r7, r0
 8009c80:	460e      	mov	r6, r1
 8009c82:	d007      	beq.n	8009c94 <__pow5mult+0x20>
 8009c84:	4c25      	ldr	r4, [pc, #148]	@ (8009d1c <__pow5mult+0xa8>)
 8009c86:	3a01      	subs	r2, #1
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c8e:	f7ff fe9f 	bl	80099d0 <__multadd>
 8009c92:	4606      	mov	r6, r0
 8009c94:	10ad      	asrs	r5, r5, #2
 8009c96:	d03d      	beq.n	8009d14 <__pow5mult+0xa0>
 8009c98:	69fc      	ldr	r4, [r7, #28]
 8009c9a:	b97c      	cbnz	r4, 8009cbc <__pow5mult+0x48>
 8009c9c:	2010      	movs	r0, #16
 8009c9e:	f7fe f817 	bl	8007cd0 <malloc>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	61f8      	str	r0, [r7, #28]
 8009ca6:	b928      	cbnz	r0, 8009cb4 <__pow5mult+0x40>
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d20 <__pow5mult+0xac>)
 8009caa:	481e      	ldr	r0, [pc, #120]	@ (8009d24 <__pow5mult+0xb0>)
 8009cac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009cb0:	f000 fbcc 	bl	800a44c <__assert_func>
 8009cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cb8:	6004      	str	r4, [r0, #0]
 8009cba:	60c4      	str	r4, [r0, #12]
 8009cbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cc4:	b94c      	cbnz	r4, 8009cda <__pow5mult+0x66>
 8009cc6:	f240 2171 	movw	r1, #625	@ 0x271
 8009cca:	4638      	mov	r0, r7
 8009ccc:	f7ff ff12 	bl	8009af4 <__i2b>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	6003      	str	r3, [r0, #0]
 8009cda:	f04f 0900 	mov.w	r9, #0
 8009cde:	07eb      	lsls	r3, r5, #31
 8009ce0:	d50a      	bpl.n	8009cf8 <__pow5mult+0x84>
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f7ff ff1a 	bl	8009b20 <__multiply>
 8009cec:	4631      	mov	r1, r6
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff fe4b 	bl	800998c <_Bfree>
 8009cf6:	4646      	mov	r6, r8
 8009cf8:	106d      	asrs	r5, r5, #1
 8009cfa:	d00b      	beq.n	8009d14 <__pow5mult+0xa0>
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	b938      	cbnz	r0, 8009d10 <__pow5mult+0x9c>
 8009d00:	4622      	mov	r2, r4
 8009d02:	4621      	mov	r1, r4
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ff0b 	bl	8009b20 <__multiply>
 8009d0a:	6020      	str	r0, [r4, #0]
 8009d0c:	f8c0 9000 	str.w	r9, [r0]
 8009d10:	4604      	mov	r4, r0
 8009d12:	e7e4      	b.n	8009cde <__pow5mult+0x6a>
 8009d14:	4630      	mov	r0, r6
 8009d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1a:	bf00      	nop
 8009d1c:	0800af00 	.word	0x0800af00
 8009d20:	0800ae26 	.word	0x0800ae26
 8009d24:	0800aea6 	.word	0x0800aea6

08009d28 <__lshift>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	6849      	ldr	r1, [r1, #4]
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	4607      	mov	r7, r0
 8009d3a:	4691      	mov	r9, r2
 8009d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d40:	f108 0601 	add.w	r6, r8, #1
 8009d44:	42b3      	cmp	r3, r6
 8009d46:	db0b      	blt.n	8009d60 <__lshift+0x38>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff fddf 	bl	800990c <_Balloc>
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b948      	cbnz	r0, 8009d66 <__lshift+0x3e>
 8009d52:	4602      	mov	r2, r0
 8009d54:	4b28      	ldr	r3, [pc, #160]	@ (8009df8 <__lshift+0xd0>)
 8009d56:	4829      	ldr	r0, [pc, #164]	@ (8009dfc <__lshift+0xd4>)
 8009d58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d5c:	f000 fb76 	bl	800a44c <__assert_func>
 8009d60:	3101      	adds	r1, #1
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	e7ee      	b.n	8009d44 <__lshift+0x1c>
 8009d66:	2300      	movs	r3, #0
 8009d68:	f100 0114 	add.w	r1, r0, #20
 8009d6c:	f100 0210 	add.w	r2, r0, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	4553      	cmp	r3, sl
 8009d74:	db33      	blt.n	8009dde <__lshift+0xb6>
 8009d76:	6920      	ldr	r0, [r4, #16]
 8009d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d7c:	f104 0314 	add.w	r3, r4, #20
 8009d80:	f019 091f 	ands.w	r9, r9, #31
 8009d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d8c:	d02b      	beq.n	8009de6 <__lshift+0xbe>
 8009d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d92:	468a      	mov	sl, r1
 8009d94:	2200      	movs	r2, #0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	fa00 f009 	lsl.w	r0, r0, r9
 8009d9c:	4310      	orrs	r0, r2
 8009d9e:	f84a 0b04 	str.w	r0, [sl], #4
 8009da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da6:	459c      	cmp	ip, r3
 8009da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dac:	d8f3      	bhi.n	8009d96 <__lshift+0x6e>
 8009dae:	ebac 0304 	sub.w	r3, ip, r4
 8009db2:	3b15      	subs	r3, #21
 8009db4:	f023 0303 	bic.w	r3, r3, #3
 8009db8:	3304      	adds	r3, #4
 8009dba:	f104 0015 	add.w	r0, r4, #21
 8009dbe:	4584      	cmp	ip, r0
 8009dc0:	bf38      	it	cc
 8009dc2:	2304      	movcc	r3, #4
 8009dc4:	50ca      	str	r2, [r1, r3]
 8009dc6:	b10a      	cbz	r2, 8009dcc <__lshift+0xa4>
 8009dc8:	f108 0602 	add.w	r6, r8, #2
 8009dcc:	3e01      	subs	r6, #1
 8009dce:	4638      	mov	r0, r7
 8009dd0:	612e      	str	r6, [r5, #16]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	f7ff fdda 	bl	800998c <_Bfree>
 8009dd8:	4628      	mov	r0, r5
 8009dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8009de2:	3301      	adds	r3, #1
 8009de4:	e7c5      	b.n	8009d72 <__lshift+0x4a>
 8009de6:	3904      	subs	r1, #4
 8009de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8009df0:	459c      	cmp	ip, r3
 8009df2:	d8f9      	bhi.n	8009de8 <__lshift+0xc0>
 8009df4:	e7ea      	b.n	8009dcc <__lshift+0xa4>
 8009df6:	bf00      	nop
 8009df8:	0800ae95 	.word	0x0800ae95
 8009dfc:	0800aea6 	.word	0x0800aea6

08009e00 <__mcmp>:
 8009e00:	690a      	ldr	r2, [r1, #16]
 8009e02:	4603      	mov	r3, r0
 8009e04:	6900      	ldr	r0, [r0, #16]
 8009e06:	1a80      	subs	r0, r0, r2
 8009e08:	b530      	push	{r4, r5, lr}
 8009e0a:	d10e      	bne.n	8009e2a <__mcmp+0x2a>
 8009e0c:	3314      	adds	r3, #20
 8009e0e:	3114      	adds	r1, #20
 8009e10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e20:	4295      	cmp	r5, r2
 8009e22:	d003      	beq.n	8009e2c <__mcmp+0x2c>
 8009e24:	d205      	bcs.n	8009e32 <__mcmp+0x32>
 8009e26:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2a:	bd30      	pop	{r4, r5, pc}
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	d3f3      	bcc.n	8009e18 <__mcmp+0x18>
 8009e30:	e7fb      	b.n	8009e2a <__mcmp+0x2a>
 8009e32:	2001      	movs	r0, #1
 8009e34:	e7f9      	b.n	8009e2a <__mcmp+0x2a>
	...

08009e38 <__mdiff>:
 8009e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	4689      	mov	r9, r1
 8009e3e:	4606      	mov	r6, r0
 8009e40:	4611      	mov	r1, r2
 8009e42:	4648      	mov	r0, r9
 8009e44:	4614      	mov	r4, r2
 8009e46:	f7ff ffdb 	bl	8009e00 <__mcmp>
 8009e4a:	1e05      	subs	r5, r0, #0
 8009e4c:	d112      	bne.n	8009e74 <__mdiff+0x3c>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7ff fd5b 	bl	800990c <_Balloc>
 8009e56:	4602      	mov	r2, r0
 8009e58:	b928      	cbnz	r0, 8009e66 <__mdiff+0x2e>
 8009e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8009f58 <__mdiff+0x120>)
 8009e5c:	f240 2137 	movw	r1, #567	@ 0x237
 8009e60:	483e      	ldr	r0, [pc, #248]	@ (8009f5c <__mdiff+0x124>)
 8009e62:	f000 faf3 	bl	800a44c <__assert_func>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	b003      	add	sp, #12
 8009e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e74:	bfbc      	itt	lt
 8009e76:	464b      	movlt	r3, r9
 8009e78:	46a1      	movlt	r9, r4
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e80:	bfba      	itte	lt
 8009e82:	461c      	movlt	r4, r3
 8009e84:	2501      	movlt	r5, #1
 8009e86:	2500      	movge	r5, #0
 8009e88:	f7ff fd40 	bl	800990c <_Balloc>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	b918      	cbnz	r0, 8009e98 <__mdiff+0x60>
 8009e90:	4b31      	ldr	r3, [pc, #196]	@ (8009f58 <__mdiff+0x120>)
 8009e92:	f240 2145 	movw	r1, #581	@ 0x245
 8009e96:	e7e3      	b.n	8009e60 <__mdiff+0x28>
 8009e98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e9c:	6926      	ldr	r6, [r4, #16]
 8009e9e:	60c5      	str	r5, [r0, #12]
 8009ea0:	f109 0310 	add.w	r3, r9, #16
 8009ea4:	f109 0514 	add.w	r5, r9, #20
 8009ea8:	f104 0e14 	add.w	lr, r4, #20
 8009eac:	f100 0b14 	add.w	fp, r0, #20
 8009eb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009eb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	46d9      	mov	r9, fp
 8009ebc:	f04f 0c00 	mov.w	ip, #0
 8009ec0:	9b01      	ldr	r3, [sp, #4]
 8009ec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	fa1f f38a 	uxth.w	r3, sl
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	b283      	uxth	r3, r0
 8009ed4:	1acb      	subs	r3, r1, r3
 8009ed6:	0c00      	lsrs	r0, r0, #16
 8009ed8:	4463      	add	r3, ip
 8009eda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ee8:	4576      	cmp	r6, lr
 8009eea:	f849 3b04 	str.w	r3, [r9], #4
 8009eee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ef2:	d8e5      	bhi.n	8009ec0 <__mdiff+0x88>
 8009ef4:	1b33      	subs	r3, r6, r4
 8009ef6:	3b15      	subs	r3, #21
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	3415      	adds	r4, #21
 8009efe:	3304      	adds	r3, #4
 8009f00:	42a6      	cmp	r6, r4
 8009f02:	bf38      	it	cc
 8009f04:	2304      	movcc	r3, #4
 8009f06:	441d      	add	r5, r3
 8009f08:	445b      	add	r3, fp
 8009f0a:	461e      	mov	r6, r3
 8009f0c:	462c      	mov	r4, r5
 8009f0e:	4544      	cmp	r4, r8
 8009f10:	d30e      	bcc.n	8009f30 <__mdiff+0xf8>
 8009f12:	f108 0103 	add.w	r1, r8, #3
 8009f16:	1b49      	subs	r1, r1, r5
 8009f18:	f021 0103 	bic.w	r1, r1, #3
 8009f1c:	3d03      	subs	r5, #3
 8009f1e:	45a8      	cmp	r8, r5
 8009f20:	bf38      	it	cc
 8009f22:	2100      	movcc	r1, #0
 8009f24:	440b      	add	r3, r1
 8009f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f2a:	b191      	cbz	r1, 8009f52 <__mdiff+0x11a>
 8009f2c:	6117      	str	r7, [r2, #16]
 8009f2e:	e79d      	b.n	8009e6c <__mdiff+0x34>
 8009f30:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f34:	46e6      	mov	lr, ip
 8009f36:	0c08      	lsrs	r0, r1, #16
 8009f38:	fa1c fc81 	uxtah	ip, ip, r1
 8009f3c:	4471      	add	r1, lr
 8009f3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f42:	b289      	uxth	r1, r1
 8009f44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f48:	f846 1b04 	str.w	r1, [r6], #4
 8009f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f50:	e7dd      	b.n	8009f0e <__mdiff+0xd6>
 8009f52:	3f01      	subs	r7, #1
 8009f54:	e7e7      	b.n	8009f26 <__mdiff+0xee>
 8009f56:	bf00      	nop
 8009f58:	0800ae95 	.word	0x0800ae95
 8009f5c:	0800aea6 	.word	0x0800aea6

08009f60 <__d2b>:
 8009f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	460f      	mov	r7, r1
 8009f66:	2101      	movs	r1, #1
 8009f68:	ec59 8b10 	vmov	r8, r9, d0
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	f7ff fccd 	bl	800990c <_Balloc>
 8009f72:	4604      	mov	r4, r0
 8009f74:	b930      	cbnz	r0, 8009f84 <__d2b+0x24>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b23      	ldr	r3, [pc, #140]	@ (800a008 <__d2b+0xa8>)
 8009f7a:	4824      	ldr	r0, [pc, #144]	@ (800a00c <__d2b+0xac>)
 8009f7c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f80:	f000 fa64 	bl	800a44c <__assert_func>
 8009f84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f8c:	b10d      	cbz	r5, 8009f92 <__d2b+0x32>
 8009f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	f1b8 0300 	subs.w	r3, r8, #0
 8009f98:	d023      	beq.n	8009fe2 <__d2b+0x82>
 8009f9a:	4668      	mov	r0, sp
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	f7ff fd7c 	bl	8009a9a <__lo0bits>
 8009fa2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fa6:	b1d0      	cbz	r0, 8009fde <__d2b+0x7e>
 8009fa8:	f1c0 0320 	rsb	r3, r0, #32
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	40c2      	lsrs	r2, r0
 8009fb4:	6163      	str	r3, [r4, #20]
 8009fb6:	9201      	str	r2, [sp, #4]
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	61a3      	str	r3, [r4, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2201      	moveq	r2, #1
 8009fc2:	2202      	movne	r2, #2
 8009fc4:	6122      	str	r2, [r4, #16]
 8009fc6:	b1a5      	cbz	r5, 8009ff2 <__d2b+0x92>
 8009fc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fcc:	4405      	add	r5, r0
 8009fce:	603d      	str	r5, [r7, #0]
 8009fd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fd4:	6030      	str	r0, [r6, #0]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	b003      	add	sp, #12
 8009fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fde:	6161      	str	r1, [r4, #20]
 8009fe0:	e7ea      	b.n	8009fb8 <__d2b+0x58>
 8009fe2:	a801      	add	r0, sp, #4
 8009fe4:	f7ff fd59 	bl	8009a9a <__lo0bits>
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	6163      	str	r3, [r4, #20]
 8009fec:	3020      	adds	r0, #32
 8009fee:	2201      	movs	r2, #1
 8009ff0:	e7e8      	b.n	8009fc4 <__d2b+0x64>
 8009ff2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ff6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ffa:	6038      	str	r0, [r7, #0]
 8009ffc:	6918      	ldr	r0, [r3, #16]
 8009ffe:	f7ff fd2d 	bl	8009a5c <__hi0bits>
 800a002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a006:	e7e5      	b.n	8009fd4 <__d2b+0x74>
 800a008:	0800ae95 	.word	0x0800ae95
 800a00c:	0800aea6 	.word	0x0800aea6

0800a010 <__ssputs_r>:
 800a010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	688e      	ldr	r6, [r1, #8]
 800a016:	461f      	mov	r7, r3
 800a018:	42be      	cmp	r6, r7
 800a01a:	680b      	ldr	r3, [r1, #0]
 800a01c:	4682      	mov	sl, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	4690      	mov	r8, r2
 800a022:	d82d      	bhi.n	800a080 <__ssputs_r+0x70>
 800a024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a02c:	d026      	beq.n	800a07c <__ssputs_r+0x6c>
 800a02e:	6965      	ldr	r5, [r4, #20]
 800a030:	6909      	ldr	r1, [r1, #16]
 800a032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a036:	eba3 0901 	sub.w	r9, r3, r1
 800a03a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a03e:	1c7b      	adds	r3, r7, #1
 800a040:	444b      	add	r3, r9
 800a042:	106d      	asrs	r5, r5, #1
 800a044:	429d      	cmp	r5, r3
 800a046:	bf38      	it	cc
 800a048:	461d      	movcc	r5, r3
 800a04a:	0553      	lsls	r3, r2, #21
 800a04c:	d527      	bpl.n	800a09e <__ssputs_r+0x8e>
 800a04e:	4629      	mov	r1, r5
 800a050:	f7fd fe70 	bl	8007d34 <_malloc_r>
 800a054:	4606      	mov	r6, r0
 800a056:	b360      	cbz	r0, 800a0b2 <__ssputs_r+0xa2>
 800a058:	6921      	ldr	r1, [r4, #16]
 800a05a:	464a      	mov	r2, r9
 800a05c:	f7fe fdb1 	bl	8008bc2 <memcpy>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a06a:	81a3      	strh	r3, [r4, #12]
 800a06c:	6126      	str	r6, [r4, #16]
 800a06e:	6165      	str	r5, [r4, #20]
 800a070:	444e      	add	r6, r9
 800a072:	eba5 0509 	sub.w	r5, r5, r9
 800a076:	6026      	str	r6, [r4, #0]
 800a078:	60a5      	str	r5, [r4, #8]
 800a07a:	463e      	mov	r6, r7
 800a07c:	42be      	cmp	r6, r7
 800a07e:	d900      	bls.n	800a082 <__ssputs_r+0x72>
 800a080:	463e      	mov	r6, r7
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	4632      	mov	r2, r6
 800a086:	4641      	mov	r1, r8
 800a088:	f000 f9c6 	bl	800a418 <memmove>
 800a08c:	68a3      	ldr	r3, [r4, #8]
 800a08e:	1b9b      	subs	r3, r3, r6
 800a090:	60a3      	str	r3, [r4, #8]
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	4433      	add	r3, r6
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	2000      	movs	r0, #0
 800a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09e:	462a      	mov	r2, r5
 800a0a0:	f000 fa18 	bl	800a4d4 <_realloc_r>
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1e0      	bne.n	800a06c <__ssputs_r+0x5c>
 800a0aa:	6921      	ldr	r1, [r4, #16]
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	f7ff fbe3 	bl	8009878 <_free_r>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	f8ca 3000 	str.w	r3, [sl]
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c4:	e7e9      	b.n	800a09a <__ssputs_r+0x8a>
	...

0800a0c8 <_svfiprintf_r>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	898b      	ldrh	r3, [r1, #12]
 800a0d0:	061b      	lsls	r3, r3, #24
 800a0d2:	b09d      	sub	sp, #116	@ 0x74
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	4614      	mov	r4, r2
 800a0da:	d510      	bpl.n	800a0fe <_svfiprintf_r+0x36>
 800a0dc:	690b      	ldr	r3, [r1, #16]
 800a0de:	b973      	cbnz	r3, 800a0fe <_svfiprintf_r+0x36>
 800a0e0:	2140      	movs	r1, #64	@ 0x40
 800a0e2:	f7fd fe27 	bl	8007d34 <_malloc_r>
 800a0e6:	6028      	str	r0, [r5, #0]
 800a0e8:	6128      	str	r0, [r5, #16]
 800a0ea:	b930      	cbnz	r0, 800a0fa <_svfiprintf_r+0x32>
 800a0ec:	230c      	movs	r3, #12
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f4:	b01d      	add	sp, #116	@ 0x74
 800a0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fa:	2340      	movs	r3, #64	@ 0x40
 800a0fc:	616b      	str	r3, [r5, #20]
 800a0fe:	2300      	movs	r3, #0
 800a100:	9309      	str	r3, [sp, #36]	@ 0x24
 800a102:	2320      	movs	r3, #32
 800a104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a108:	f8cd 800c 	str.w	r8, [sp, #12]
 800a10c:	2330      	movs	r3, #48	@ 0x30
 800a10e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2ac <_svfiprintf_r+0x1e4>
 800a112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a116:	f04f 0901 	mov.w	r9, #1
 800a11a:	4623      	mov	r3, r4
 800a11c:	469a      	mov	sl, r3
 800a11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a122:	b10a      	cbz	r2, 800a128 <_svfiprintf_r+0x60>
 800a124:	2a25      	cmp	r2, #37	@ 0x25
 800a126:	d1f9      	bne.n	800a11c <_svfiprintf_r+0x54>
 800a128:	ebba 0b04 	subs.w	fp, sl, r4
 800a12c:	d00b      	beq.n	800a146 <_svfiprintf_r+0x7e>
 800a12e:	465b      	mov	r3, fp
 800a130:	4622      	mov	r2, r4
 800a132:	4629      	mov	r1, r5
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff ff6b 	bl	800a010 <__ssputs_r>
 800a13a:	3001      	adds	r0, #1
 800a13c:	f000 80a7 	beq.w	800a28e <_svfiprintf_r+0x1c6>
 800a140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a142:	445a      	add	r2, fp
 800a144:	9209      	str	r2, [sp, #36]	@ 0x24
 800a146:	f89a 3000 	ldrb.w	r3, [sl]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 809f 	beq.w	800a28e <_svfiprintf_r+0x1c6>
 800a150:	2300      	movs	r3, #0
 800a152:	f04f 32ff 	mov.w	r2, #4294967295
 800a156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15a:	f10a 0a01 	add.w	sl, sl, #1
 800a15e:	9304      	str	r3, [sp, #16]
 800a160:	9307      	str	r3, [sp, #28]
 800a162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a166:	931a      	str	r3, [sp, #104]	@ 0x68
 800a168:	4654      	mov	r4, sl
 800a16a:	2205      	movs	r2, #5
 800a16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a170:	484e      	ldr	r0, [pc, #312]	@ (800a2ac <_svfiprintf_r+0x1e4>)
 800a172:	f7f6 f85d 	bl	8000230 <memchr>
 800a176:	9a04      	ldr	r2, [sp, #16]
 800a178:	b9d8      	cbnz	r0, 800a1b2 <_svfiprintf_r+0xea>
 800a17a:	06d0      	lsls	r0, r2, #27
 800a17c:	bf44      	itt	mi
 800a17e:	2320      	movmi	r3, #32
 800a180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a184:	0711      	lsls	r1, r2, #28
 800a186:	bf44      	itt	mi
 800a188:	232b      	movmi	r3, #43	@ 0x2b
 800a18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a18e:	f89a 3000 	ldrb.w	r3, [sl]
 800a192:	2b2a      	cmp	r3, #42	@ 0x2a
 800a194:	d015      	beq.n	800a1c2 <_svfiprintf_r+0xfa>
 800a196:	9a07      	ldr	r2, [sp, #28]
 800a198:	4654      	mov	r4, sl
 800a19a:	2000      	movs	r0, #0
 800a19c:	f04f 0c0a 	mov.w	ip, #10
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a6:	3b30      	subs	r3, #48	@ 0x30
 800a1a8:	2b09      	cmp	r3, #9
 800a1aa:	d94b      	bls.n	800a244 <_svfiprintf_r+0x17c>
 800a1ac:	b1b0      	cbz	r0, 800a1dc <_svfiprintf_r+0x114>
 800a1ae:	9207      	str	r2, [sp, #28]
 800a1b0:	e014      	b.n	800a1dc <_svfiprintf_r+0x114>
 800a1b2:	eba0 0308 	sub.w	r3, r0, r8
 800a1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	46a2      	mov	sl, r4
 800a1c0:	e7d2      	b.n	800a168 <_svfiprintf_r+0xa0>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	1d19      	adds	r1, r3, #4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	9103      	str	r1, [sp, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bfbb      	ittet	lt
 800a1ce:	425b      	neglt	r3, r3
 800a1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d4:	9307      	strge	r3, [sp, #28]
 800a1d6:	9307      	strlt	r3, [sp, #28]
 800a1d8:	bfb8      	it	lt
 800a1da:	9204      	strlt	r2, [sp, #16]
 800a1dc:	7823      	ldrb	r3, [r4, #0]
 800a1de:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e0:	d10a      	bne.n	800a1f8 <_svfiprintf_r+0x130>
 800a1e2:	7863      	ldrb	r3, [r4, #1]
 800a1e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1e6:	d132      	bne.n	800a24e <_svfiprintf_r+0x186>
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	1d1a      	adds	r2, r3, #4
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	9203      	str	r2, [sp, #12]
 800a1f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1f4:	3402      	adds	r4, #2
 800a1f6:	9305      	str	r3, [sp, #20]
 800a1f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2bc <_svfiprintf_r+0x1f4>
 800a1fc:	7821      	ldrb	r1, [r4, #0]
 800a1fe:	2203      	movs	r2, #3
 800a200:	4650      	mov	r0, sl
 800a202:	f7f6 f815 	bl	8000230 <memchr>
 800a206:	b138      	cbz	r0, 800a218 <_svfiprintf_r+0x150>
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	eba0 000a 	sub.w	r0, r0, sl
 800a20e:	2240      	movs	r2, #64	@ 0x40
 800a210:	4082      	lsls	r2, r0
 800a212:	4313      	orrs	r3, r2
 800a214:	3401      	adds	r4, #1
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21c:	4824      	ldr	r0, [pc, #144]	@ (800a2b0 <_svfiprintf_r+0x1e8>)
 800a21e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a222:	2206      	movs	r2, #6
 800a224:	f7f6 f804 	bl	8000230 <memchr>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d036      	beq.n	800a29a <_svfiprintf_r+0x1d2>
 800a22c:	4b21      	ldr	r3, [pc, #132]	@ (800a2b4 <_svfiprintf_r+0x1ec>)
 800a22e:	bb1b      	cbnz	r3, 800a278 <_svfiprintf_r+0x1b0>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	3307      	adds	r3, #7
 800a234:	f023 0307 	bic.w	r3, r3, #7
 800a238:	3308      	adds	r3, #8
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23e:	4433      	add	r3, r6
 800a240:	9309      	str	r3, [sp, #36]	@ 0x24
 800a242:	e76a      	b.n	800a11a <_svfiprintf_r+0x52>
 800a244:	fb0c 3202 	mla	r2, ip, r2, r3
 800a248:	460c      	mov	r4, r1
 800a24a:	2001      	movs	r0, #1
 800a24c:	e7a8      	b.n	800a1a0 <_svfiprintf_r+0xd8>
 800a24e:	2300      	movs	r3, #0
 800a250:	3401      	adds	r4, #1
 800a252:	9305      	str	r3, [sp, #20]
 800a254:	4619      	mov	r1, r3
 800a256:	f04f 0c0a 	mov.w	ip, #10
 800a25a:	4620      	mov	r0, r4
 800a25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a260:	3a30      	subs	r2, #48	@ 0x30
 800a262:	2a09      	cmp	r2, #9
 800a264:	d903      	bls.n	800a26e <_svfiprintf_r+0x1a6>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0c6      	beq.n	800a1f8 <_svfiprintf_r+0x130>
 800a26a:	9105      	str	r1, [sp, #20]
 800a26c:	e7c4      	b.n	800a1f8 <_svfiprintf_r+0x130>
 800a26e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a272:	4604      	mov	r4, r0
 800a274:	2301      	movs	r3, #1
 800a276:	e7f0      	b.n	800a25a <_svfiprintf_r+0x192>
 800a278:	ab03      	add	r3, sp, #12
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	462a      	mov	r2, r5
 800a27e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <_svfiprintf_r+0x1f0>)
 800a280:	a904      	add	r1, sp, #16
 800a282:	4638      	mov	r0, r7
 800a284:	f7fd fefa 	bl	800807c <_printf_float>
 800a288:	1c42      	adds	r2, r0, #1
 800a28a:	4606      	mov	r6, r0
 800a28c:	d1d6      	bne.n	800a23c <_svfiprintf_r+0x174>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	065b      	lsls	r3, r3, #25
 800a292:	f53f af2d 	bmi.w	800a0f0 <_svfiprintf_r+0x28>
 800a296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a298:	e72c      	b.n	800a0f4 <_svfiprintf_r+0x2c>
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4b05      	ldr	r3, [pc, #20]	@ (800a2b8 <_svfiprintf_r+0x1f0>)
 800a2a2:	a904      	add	r1, sp, #16
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f7fe f981 	bl	80085ac <_printf_i>
 800a2aa:	e7ed      	b.n	800a288 <_svfiprintf_r+0x1c0>
 800a2ac:	0800b000 	.word	0x0800b000
 800a2b0:	0800b00a 	.word	0x0800b00a
 800a2b4:	0800807d 	.word	0x0800807d
 800a2b8:	0800a011 	.word	0x0800a011
 800a2bc:	0800b006 	.word	0x0800b006

0800a2c0 <__sflush_r>:
 800a2c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c8:	0716      	lsls	r6, r2, #28
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	d454      	bmi.n	800a37a <__sflush_r+0xba>
 800a2d0:	684b      	ldr	r3, [r1, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	dc02      	bgt.n	800a2dc <__sflush_r+0x1c>
 800a2d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dd48      	ble.n	800a36e <__sflush_r+0xae>
 800a2dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2de:	2e00      	cmp	r6, #0
 800a2e0:	d045      	beq.n	800a36e <__sflush_r+0xae>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2e8:	682f      	ldr	r7, [r5, #0]
 800a2ea:	6a21      	ldr	r1, [r4, #32]
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	d030      	beq.n	800a352 <__sflush_r+0x92>
 800a2f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	0759      	lsls	r1, r3, #29
 800a2f6:	d505      	bpl.n	800a304 <__sflush_r+0x44>
 800a2f8:	6863      	ldr	r3, [r4, #4]
 800a2fa:	1ad2      	subs	r2, r2, r3
 800a2fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2fe:	b10b      	cbz	r3, 800a304 <__sflush_r+0x44>
 800a300:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a302:	1ad2      	subs	r2, r2, r3
 800a304:	2300      	movs	r3, #0
 800a306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a308:	6a21      	ldr	r1, [r4, #32]
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b0      	blx	r6
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	d106      	bne.n	800a322 <__sflush_r+0x62>
 800a314:	6829      	ldr	r1, [r5, #0]
 800a316:	291d      	cmp	r1, #29
 800a318:	d82b      	bhi.n	800a372 <__sflush_r+0xb2>
 800a31a:	4a2a      	ldr	r2, [pc, #168]	@ (800a3c4 <__sflush_r+0x104>)
 800a31c:	410a      	asrs	r2, r1
 800a31e:	07d6      	lsls	r6, r2, #31
 800a320:	d427      	bmi.n	800a372 <__sflush_r+0xb2>
 800a322:	2200      	movs	r2, #0
 800a324:	6062      	str	r2, [r4, #4]
 800a326:	04d9      	lsls	r1, r3, #19
 800a328:	6922      	ldr	r2, [r4, #16]
 800a32a:	6022      	str	r2, [r4, #0]
 800a32c:	d504      	bpl.n	800a338 <__sflush_r+0x78>
 800a32e:	1c42      	adds	r2, r0, #1
 800a330:	d101      	bne.n	800a336 <__sflush_r+0x76>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b903      	cbnz	r3, 800a338 <__sflush_r+0x78>
 800a336:	6560      	str	r0, [r4, #84]	@ 0x54
 800a338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a33a:	602f      	str	r7, [r5, #0]
 800a33c:	b1b9      	cbz	r1, 800a36e <__sflush_r+0xae>
 800a33e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a342:	4299      	cmp	r1, r3
 800a344:	d002      	beq.n	800a34c <__sflush_r+0x8c>
 800a346:	4628      	mov	r0, r5
 800a348:	f7ff fa96 	bl	8009878 <_free_r>
 800a34c:	2300      	movs	r3, #0
 800a34e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a350:	e00d      	b.n	800a36e <__sflush_r+0xae>
 800a352:	2301      	movs	r3, #1
 800a354:	4628      	mov	r0, r5
 800a356:	47b0      	blx	r6
 800a358:	4602      	mov	r2, r0
 800a35a:	1c50      	adds	r0, r2, #1
 800a35c:	d1c9      	bne.n	800a2f2 <__sflush_r+0x32>
 800a35e:	682b      	ldr	r3, [r5, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d0c6      	beq.n	800a2f2 <__sflush_r+0x32>
 800a364:	2b1d      	cmp	r3, #29
 800a366:	d001      	beq.n	800a36c <__sflush_r+0xac>
 800a368:	2b16      	cmp	r3, #22
 800a36a:	d11e      	bne.n	800a3aa <__sflush_r+0xea>
 800a36c:	602f      	str	r7, [r5, #0]
 800a36e:	2000      	movs	r0, #0
 800a370:	e022      	b.n	800a3b8 <__sflush_r+0xf8>
 800a372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a376:	b21b      	sxth	r3, r3
 800a378:	e01b      	b.n	800a3b2 <__sflush_r+0xf2>
 800a37a:	690f      	ldr	r7, [r1, #16]
 800a37c:	2f00      	cmp	r7, #0
 800a37e:	d0f6      	beq.n	800a36e <__sflush_r+0xae>
 800a380:	0793      	lsls	r3, r2, #30
 800a382:	680e      	ldr	r6, [r1, #0]
 800a384:	bf08      	it	eq
 800a386:	694b      	ldreq	r3, [r1, #20]
 800a388:	600f      	str	r7, [r1, #0]
 800a38a:	bf18      	it	ne
 800a38c:	2300      	movne	r3, #0
 800a38e:	eba6 0807 	sub.w	r8, r6, r7
 800a392:	608b      	str	r3, [r1, #8]
 800a394:	f1b8 0f00 	cmp.w	r8, #0
 800a398:	dde9      	ble.n	800a36e <__sflush_r+0xae>
 800a39a:	6a21      	ldr	r1, [r4, #32]
 800a39c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a39e:	4643      	mov	r3, r8
 800a3a0:	463a      	mov	r2, r7
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b0      	blx	r6
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	dc08      	bgt.n	800a3bc <__sflush_r+0xfc>
 800a3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3bc:	4407      	add	r7, r0
 800a3be:	eba8 0800 	sub.w	r8, r8, r0
 800a3c2:	e7e7      	b.n	800a394 <__sflush_r+0xd4>
 800a3c4:	dfbffffe 	.word	0xdfbffffe

0800a3c8 <_fflush_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	690b      	ldr	r3, [r1, #16]
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	b913      	cbnz	r3, 800a3d8 <_fflush_r+0x10>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	b118      	cbz	r0, 800a3e2 <_fflush_r+0x1a>
 800a3da:	6a03      	ldr	r3, [r0, #32]
 800a3dc:	b90b      	cbnz	r3, 800a3e2 <_fflush_r+0x1a>
 800a3de:	f7fe fa91 	bl	8008904 <__sinit>
 800a3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0f3      	beq.n	800a3d2 <_fflush_r+0xa>
 800a3ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3ec:	07d0      	lsls	r0, r2, #31
 800a3ee:	d404      	bmi.n	800a3fa <_fflush_r+0x32>
 800a3f0:	0599      	lsls	r1, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_fflush_r+0x32>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f6:	f7fe fbe2 	bl	8008bbe <__retarget_lock_acquire_recursive>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	f7ff ff5f 	bl	800a2c0 <__sflush_r>
 800a402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a404:	07da      	lsls	r2, r3, #31
 800a406:	4605      	mov	r5, r0
 800a408:	d4e4      	bmi.n	800a3d4 <_fflush_r+0xc>
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	059b      	lsls	r3, r3, #22
 800a40e:	d4e1      	bmi.n	800a3d4 <_fflush_r+0xc>
 800a410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a412:	f7fe fbd5 	bl	8008bc0 <__retarget_lock_release_recursive>
 800a416:	e7dd      	b.n	800a3d4 <_fflush_r+0xc>

0800a418 <memmove>:
 800a418:	4288      	cmp	r0, r1
 800a41a:	b510      	push	{r4, lr}
 800a41c:	eb01 0402 	add.w	r4, r1, r2
 800a420:	d902      	bls.n	800a428 <memmove+0x10>
 800a422:	4284      	cmp	r4, r0
 800a424:	4623      	mov	r3, r4
 800a426:	d807      	bhi.n	800a438 <memmove+0x20>
 800a428:	1e43      	subs	r3, r0, #1
 800a42a:	42a1      	cmp	r1, r4
 800a42c:	d008      	beq.n	800a440 <memmove+0x28>
 800a42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a436:	e7f8      	b.n	800a42a <memmove+0x12>
 800a438:	4402      	add	r2, r0
 800a43a:	4601      	mov	r1, r0
 800a43c:	428a      	cmp	r2, r1
 800a43e:	d100      	bne.n	800a442 <memmove+0x2a>
 800a440:	bd10      	pop	{r4, pc}
 800a442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a44a:	e7f7      	b.n	800a43c <memmove+0x24>

0800a44c <__assert_func>:
 800a44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a44e:	4614      	mov	r4, r2
 800a450:	461a      	mov	r2, r3
 800a452:	4b09      	ldr	r3, [pc, #36]	@ (800a478 <__assert_func+0x2c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4605      	mov	r5, r0
 800a458:	68d8      	ldr	r0, [r3, #12]
 800a45a:	b954      	cbnz	r4, 800a472 <__assert_func+0x26>
 800a45c:	4b07      	ldr	r3, [pc, #28]	@ (800a47c <__assert_func+0x30>)
 800a45e:	461c      	mov	r4, r3
 800a460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a464:	9100      	str	r1, [sp, #0]
 800a466:	462b      	mov	r3, r5
 800a468:	4905      	ldr	r1, [pc, #20]	@ (800a480 <__assert_func+0x34>)
 800a46a:	f000 f86f 	bl	800a54c <fiprintf>
 800a46e:	f000 f87f 	bl	800a570 <abort>
 800a472:	4b04      	ldr	r3, [pc, #16]	@ (800a484 <__assert_func+0x38>)
 800a474:	e7f4      	b.n	800a460 <__assert_func+0x14>
 800a476:	bf00      	nop
 800a478:	200002b4 	.word	0x200002b4
 800a47c:	0800b056 	.word	0x0800b056
 800a480:	0800b028 	.word	0x0800b028
 800a484:	0800b01b 	.word	0x0800b01b

0800a488 <_calloc_r>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	fba1 5402 	umull	r5, r4, r1, r2
 800a48e:	b93c      	cbnz	r4, 800a4a0 <_calloc_r+0x18>
 800a490:	4629      	mov	r1, r5
 800a492:	f7fd fc4f 	bl	8007d34 <_malloc_r>
 800a496:	4606      	mov	r6, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <_calloc_r+0x1e>
 800a49a:	2600      	movs	r6, #0
 800a49c:	4630      	mov	r0, r6
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	220c      	movs	r2, #12
 800a4a2:	6002      	str	r2, [r0, #0]
 800a4a4:	e7f9      	b.n	800a49a <_calloc_r+0x12>
 800a4a6:	462a      	mov	r2, r5
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	f7fe fac4 	bl	8008a36 <memset>
 800a4ae:	e7f5      	b.n	800a49c <_calloc_r+0x14>

0800a4b0 <__ascii_mbtowc>:
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	b901      	cbnz	r1, 800a4b6 <__ascii_mbtowc+0x6>
 800a4b4:	a901      	add	r1, sp, #4
 800a4b6:	b142      	cbz	r2, 800a4ca <__ascii_mbtowc+0x1a>
 800a4b8:	b14b      	cbz	r3, 800a4ce <__ascii_mbtowc+0x1e>
 800a4ba:	7813      	ldrb	r3, [r2, #0]
 800a4bc:	600b      	str	r3, [r1, #0]
 800a4be:	7812      	ldrb	r2, [r2, #0]
 800a4c0:	1e10      	subs	r0, r2, #0
 800a4c2:	bf18      	it	ne
 800a4c4:	2001      	movne	r0, #1
 800a4c6:	b002      	add	sp, #8
 800a4c8:	4770      	bx	lr
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	e7fb      	b.n	800a4c6 <__ascii_mbtowc+0x16>
 800a4ce:	f06f 0001 	mvn.w	r0, #1
 800a4d2:	e7f8      	b.n	800a4c6 <__ascii_mbtowc+0x16>

0800a4d4 <_realloc_r>:
 800a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4615      	mov	r5, r2
 800a4dc:	460c      	mov	r4, r1
 800a4de:	b921      	cbnz	r1, 800a4ea <_realloc_r+0x16>
 800a4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	f7fd bc25 	b.w	8007d34 <_malloc_r>
 800a4ea:	b92a      	cbnz	r2, 800a4f8 <_realloc_r+0x24>
 800a4ec:	f7ff f9c4 	bl	8009878 <_free_r>
 800a4f0:	2400      	movs	r4, #0
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	f000 f841 	bl	800a57e <_malloc_usable_size_r>
 800a4fc:	4285      	cmp	r5, r0
 800a4fe:	4606      	mov	r6, r0
 800a500:	d802      	bhi.n	800a508 <_realloc_r+0x34>
 800a502:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a506:	d8f4      	bhi.n	800a4f2 <_realloc_r+0x1e>
 800a508:	4629      	mov	r1, r5
 800a50a:	4640      	mov	r0, r8
 800a50c:	f7fd fc12 	bl	8007d34 <_malloc_r>
 800a510:	4607      	mov	r7, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d0ec      	beq.n	800a4f0 <_realloc_r+0x1c>
 800a516:	42b5      	cmp	r5, r6
 800a518:	462a      	mov	r2, r5
 800a51a:	4621      	mov	r1, r4
 800a51c:	bf28      	it	cs
 800a51e:	4632      	movcs	r2, r6
 800a520:	f7fe fb4f 	bl	8008bc2 <memcpy>
 800a524:	4621      	mov	r1, r4
 800a526:	4640      	mov	r0, r8
 800a528:	f7ff f9a6 	bl	8009878 <_free_r>
 800a52c:	463c      	mov	r4, r7
 800a52e:	e7e0      	b.n	800a4f2 <_realloc_r+0x1e>

0800a530 <__ascii_wctomb>:
 800a530:	4603      	mov	r3, r0
 800a532:	4608      	mov	r0, r1
 800a534:	b141      	cbz	r1, 800a548 <__ascii_wctomb+0x18>
 800a536:	2aff      	cmp	r2, #255	@ 0xff
 800a538:	d904      	bls.n	800a544 <__ascii_wctomb+0x14>
 800a53a:	228a      	movs	r2, #138	@ 0x8a
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295
 800a542:	4770      	bx	lr
 800a544:	700a      	strb	r2, [r1, #0]
 800a546:	2001      	movs	r0, #1
 800a548:	4770      	bx	lr
	...

0800a54c <fiprintf>:
 800a54c:	b40e      	push	{r1, r2, r3}
 800a54e:	b503      	push	{r0, r1, lr}
 800a550:	4601      	mov	r1, r0
 800a552:	ab03      	add	r3, sp, #12
 800a554:	4805      	ldr	r0, [pc, #20]	@ (800a56c <fiprintf+0x20>)
 800a556:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	f000 f83f 	bl	800a5e0 <_vfiprintf_r>
 800a562:	b002      	add	sp, #8
 800a564:	f85d eb04 	ldr.w	lr, [sp], #4
 800a568:	b003      	add	sp, #12
 800a56a:	4770      	bx	lr
 800a56c:	200002b4 	.word	0x200002b4

0800a570 <abort>:
 800a570:	b508      	push	{r3, lr}
 800a572:	2006      	movs	r0, #6
 800a574:	f000 fa08 	bl	800a988 <raise>
 800a578:	2001      	movs	r0, #1
 800a57a:	f7f8 ff31 	bl	80033e0 <_exit>

0800a57e <_malloc_usable_size_r>:
 800a57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a582:	1f18      	subs	r0, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	bfbc      	itt	lt
 800a588:	580b      	ldrlt	r3, [r1, r0]
 800a58a:	18c0      	addlt	r0, r0, r3
 800a58c:	4770      	bx	lr

0800a58e <__sfputc_r>:
 800a58e:	6893      	ldr	r3, [r2, #8]
 800a590:	3b01      	subs	r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	b410      	push	{r4}
 800a596:	6093      	str	r3, [r2, #8]
 800a598:	da08      	bge.n	800a5ac <__sfputc_r+0x1e>
 800a59a:	6994      	ldr	r4, [r2, #24]
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	db01      	blt.n	800a5a4 <__sfputc_r+0x16>
 800a5a0:	290a      	cmp	r1, #10
 800a5a2:	d103      	bne.n	800a5ac <__sfputc_r+0x1e>
 800a5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a8:	f000 b932 	b.w	800a810 <__swbuf_r>
 800a5ac:	6813      	ldr	r3, [r2, #0]
 800a5ae:	1c58      	adds	r0, r3, #1
 800a5b0:	6010      	str	r0, [r2, #0]
 800a5b2:	7019      	strb	r1, [r3, #0]
 800a5b4:	4608      	mov	r0, r1
 800a5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <__sfputs_r>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	18d5      	adds	r5, r2, r3
 800a5c6:	42ac      	cmp	r4, r5
 800a5c8:	d101      	bne.n	800a5ce <__sfputs_r+0x12>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e007      	b.n	800a5de <__sfputs_r+0x22>
 800a5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff ffda 	bl	800a58e <__sfputc_r>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	d1f3      	bne.n	800a5c6 <__sfputs_r+0xa>
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5e0 <_vfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	b09d      	sub	sp, #116	@ 0x74
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	4698      	mov	r8, r3
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	b118      	cbz	r0, 800a5f8 <_vfiprintf_r+0x18>
 800a5f0:	6a03      	ldr	r3, [r0, #32]
 800a5f2:	b90b      	cbnz	r3, 800a5f8 <_vfiprintf_r+0x18>
 800a5f4:	f7fe f986 	bl	8008904 <__sinit>
 800a5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d405      	bmi.n	800a60a <_vfiprintf_r+0x2a>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	059a      	lsls	r2, r3, #22
 800a602:	d402      	bmi.n	800a60a <_vfiprintf_r+0x2a>
 800a604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a606:	f7fe fada 	bl	8008bbe <__retarget_lock_acquire_recursive>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	071b      	lsls	r3, r3, #28
 800a60e:	d501      	bpl.n	800a614 <_vfiprintf_r+0x34>
 800a610:	692b      	ldr	r3, [r5, #16]
 800a612:	b99b      	cbnz	r3, 800a63c <_vfiprintf_r+0x5c>
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f000 f938 	bl	800a88c <__swsetup_r>
 800a61c:	b170      	cbz	r0, 800a63c <_vfiprintf_r+0x5c>
 800a61e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a620:	07dc      	lsls	r4, r3, #31
 800a622:	d504      	bpl.n	800a62e <_vfiprintf_r+0x4e>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b01d      	add	sp, #116	@ 0x74
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	0598      	lsls	r0, r3, #22
 800a632:	d4f7      	bmi.n	800a624 <_vfiprintf_r+0x44>
 800a634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a636:	f7fe fac3 	bl	8008bc0 <__retarget_lock_release_recursive>
 800a63a:	e7f3      	b.n	800a624 <_vfiprintf_r+0x44>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a640:	2320      	movs	r3, #32
 800a642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a646:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64a:	2330      	movs	r3, #48	@ 0x30
 800a64c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7fc <_vfiprintf_r+0x21c>
 800a650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a654:	f04f 0901 	mov.w	r9, #1
 800a658:	4623      	mov	r3, r4
 800a65a:	469a      	mov	sl, r3
 800a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a660:	b10a      	cbz	r2, 800a666 <_vfiprintf_r+0x86>
 800a662:	2a25      	cmp	r2, #37	@ 0x25
 800a664:	d1f9      	bne.n	800a65a <_vfiprintf_r+0x7a>
 800a666:	ebba 0b04 	subs.w	fp, sl, r4
 800a66a:	d00b      	beq.n	800a684 <_vfiprintf_r+0xa4>
 800a66c:	465b      	mov	r3, fp
 800a66e:	4622      	mov	r2, r4
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ffa2 	bl	800a5bc <__sfputs_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	f000 80a7 	beq.w	800a7cc <_vfiprintf_r+0x1ec>
 800a67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a680:	445a      	add	r2, fp
 800a682:	9209      	str	r2, [sp, #36]	@ 0x24
 800a684:	f89a 3000 	ldrb.w	r3, [sl]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 809f 	beq.w	800a7cc <_vfiprintf_r+0x1ec>
 800a68e:	2300      	movs	r3, #0
 800a690:	f04f 32ff 	mov.w	r2, #4294967295
 800a694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a698:	f10a 0a01 	add.w	sl, sl, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a6:	4654      	mov	r4, sl
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	4853      	ldr	r0, [pc, #332]	@ (800a7fc <_vfiprintf_r+0x21c>)
 800a6b0:	f7f5 fdbe 	bl	8000230 <memchr>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	b9d8      	cbnz	r0, 800a6f0 <_vfiprintf_r+0x110>
 800a6b8:	06d1      	lsls	r1, r2, #27
 800a6ba:	bf44      	itt	mi
 800a6bc:	2320      	movmi	r3, #32
 800a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c2:	0713      	lsls	r3, r2, #28
 800a6c4:	bf44      	itt	mi
 800a6c6:	232b      	movmi	r3, #43	@ 0x2b
 800a6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d2:	d015      	beq.n	800a700 <_vfiprintf_r+0x120>
 800a6d4:	9a07      	ldr	r2, [sp, #28]
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4621      	mov	r1, r4
 800a6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e4:	3b30      	subs	r3, #48	@ 0x30
 800a6e6:	2b09      	cmp	r3, #9
 800a6e8:	d94b      	bls.n	800a782 <_vfiprintf_r+0x1a2>
 800a6ea:	b1b0      	cbz	r0, 800a71a <_vfiprintf_r+0x13a>
 800a6ec:	9207      	str	r2, [sp, #28]
 800a6ee:	e014      	b.n	800a71a <_vfiprintf_r+0x13a>
 800a6f0:	eba0 0308 	sub.w	r3, r0, r8
 800a6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	46a2      	mov	sl, r4
 800a6fe:	e7d2      	b.n	800a6a6 <_vfiprintf_r+0xc6>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	1d19      	adds	r1, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfbb      	ittet	lt
 800a70c:	425b      	neglt	r3, r3
 800a70e:	f042 0202 	orrlt.w	r2, r2, #2
 800a712:	9307      	strge	r3, [sp, #28]
 800a714:	9307      	strlt	r3, [sp, #28]
 800a716:	bfb8      	it	lt
 800a718:	9204      	strlt	r2, [sp, #16]
 800a71a:	7823      	ldrb	r3, [r4, #0]
 800a71c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a71e:	d10a      	bne.n	800a736 <_vfiprintf_r+0x156>
 800a720:	7863      	ldrb	r3, [r4, #1]
 800a722:	2b2a      	cmp	r3, #42	@ 0x2a
 800a724:	d132      	bne.n	800a78c <_vfiprintf_r+0x1ac>
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	9203      	str	r2, [sp, #12]
 800a72e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a732:	3402      	adds	r4, #2
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a80c <_vfiprintf_r+0x22c>
 800a73a:	7821      	ldrb	r1, [r4, #0]
 800a73c:	2203      	movs	r2, #3
 800a73e:	4650      	mov	r0, sl
 800a740:	f7f5 fd76 	bl	8000230 <memchr>
 800a744:	b138      	cbz	r0, 800a756 <_vfiprintf_r+0x176>
 800a746:	9b04      	ldr	r3, [sp, #16]
 800a748:	eba0 000a 	sub.w	r0, r0, sl
 800a74c:	2240      	movs	r2, #64	@ 0x40
 800a74e:	4082      	lsls	r2, r0
 800a750:	4313      	orrs	r3, r2
 800a752:	3401      	adds	r4, #1
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75a:	4829      	ldr	r0, [pc, #164]	@ (800a800 <_vfiprintf_r+0x220>)
 800a75c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a760:	2206      	movs	r2, #6
 800a762:	f7f5 fd65 	bl	8000230 <memchr>
 800a766:	2800      	cmp	r0, #0
 800a768:	d03f      	beq.n	800a7ea <_vfiprintf_r+0x20a>
 800a76a:	4b26      	ldr	r3, [pc, #152]	@ (800a804 <_vfiprintf_r+0x224>)
 800a76c:	bb1b      	cbnz	r3, 800a7b6 <_vfiprintf_r+0x1d6>
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	3307      	adds	r3, #7
 800a772:	f023 0307 	bic.w	r3, r3, #7
 800a776:	3308      	adds	r3, #8
 800a778:	9303      	str	r3, [sp, #12]
 800a77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77c:	443b      	add	r3, r7
 800a77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a780:	e76a      	b.n	800a658 <_vfiprintf_r+0x78>
 800a782:	fb0c 3202 	mla	r2, ip, r2, r3
 800a786:	460c      	mov	r4, r1
 800a788:	2001      	movs	r0, #1
 800a78a:	e7a8      	b.n	800a6de <_vfiprintf_r+0xfe>
 800a78c:	2300      	movs	r3, #0
 800a78e:	3401      	adds	r4, #1
 800a790:	9305      	str	r3, [sp, #20]
 800a792:	4619      	mov	r1, r3
 800a794:	f04f 0c0a 	mov.w	ip, #10
 800a798:	4620      	mov	r0, r4
 800a79a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79e:	3a30      	subs	r2, #48	@ 0x30
 800a7a0:	2a09      	cmp	r2, #9
 800a7a2:	d903      	bls.n	800a7ac <_vfiprintf_r+0x1cc>
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0c6      	beq.n	800a736 <_vfiprintf_r+0x156>
 800a7a8:	9105      	str	r1, [sp, #20]
 800a7aa:	e7c4      	b.n	800a736 <_vfiprintf_r+0x156>
 800a7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e7f0      	b.n	800a798 <_vfiprintf_r+0x1b8>
 800a7b6:	ab03      	add	r3, sp, #12
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4b12      	ldr	r3, [pc, #72]	@ (800a808 <_vfiprintf_r+0x228>)
 800a7be:	a904      	add	r1, sp, #16
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7fd fc5b 	bl	800807c <_printf_float>
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	1c78      	adds	r0, r7, #1
 800a7ca:	d1d6      	bne.n	800a77a <_vfiprintf_r+0x19a>
 800a7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7ce:	07d9      	lsls	r1, r3, #31
 800a7d0:	d405      	bmi.n	800a7de <_vfiprintf_r+0x1fe>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	059a      	lsls	r2, r3, #22
 800a7d6:	d402      	bmi.n	800a7de <_vfiprintf_r+0x1fe>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7da:	f7fe f9f1 	bl	8008bc0 <__retarget_lock_release_recursive>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	065b      	lsls	r3, r3, #25
 800a7e2:	f53f af1f 	bmi.w	800a624 <_vfiprintf_r+0x44>
 800a7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7e8:	e71e      	b.n	800a628 <_vfiprintf_r+0x48>
 800a7ea:	ab03      	add	r3, sp, #12
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	4b05      	ldr	r3, [pc, #20]	@ (800a808 <_vfiprintf_r+0x228>)
 800a7f2:	a904      	add	r1, sp, #16
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7fd fed9 	bl	80085ac <_printf_i>
 800a7fa:	e7e4      	b.n	800a7c6 <_vfiprintf_r+0x1e6>
 800a7fc:	0800b000 	.word	0x0800b000
 800a800:	0800b00a 	.word	0x0800b00a
 800a804:	0800807d 	.word	0x0800807d
 800a808:	0800a5bd 	.word	0x0800a5bd
 800a80c:	0800b006 	.word	0x0800b006

0800a810 <__swbuf_r>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	460e      	mov	r6, r1
 800a814:	4614      	mov	r4, r2
 800a816:	4605      	mov	r5, r0
 800a818:	b118      	cbz	r0, 800a822 <__swbuf_r+0x12>
 800a81a:	6a03      	ldr	r3, [r0, #32]
 800a81c:	b90b      	cbnz	r3, 800a822 <__swbuf_r+0x12>
 800a81e:	f7fe f871 	bl	8008904 <__sinit>
 800a822:	69a3      	ldr	r3, [r4, #24]
 800a824:	60a3      	str	r3, [r4, #8]
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	071a      	lsls	r2, r3, #28
 800a82a:	d501      	bpl.n	800a830 <__swbuf_r+0x20>
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	b943      	cbnz	r3, 800a842 <__swbuf_r+0x32>
 800a830:	4621      	mov	r1, r4
 800a832:	4628      	mov	r0, r5
 800a834:	f000 f82a 	bl	800a88c <__swsetup_r>
 800a838:	b118      	cbz	r0, 800a842 <__swbuf_r+0x32>
 800a83a:	f04f 37ff 	mov.w	r7, #4294967295
 800a83e:	4638      	mov	r0, r7
 800a840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	1a98      	subs	r0, r3, r2
 800a848:	6963      	ldr	r3, [r4, #20]
 800a84a:	b2f6      	uxtb	r6, r6
 800a84c:	4283      	cmp	r3, r0
 800a84e:	4637      	mov	r7, r6
 800a850:	dc05      	bgt.n	800a85e <__swbuf_r+0x4e>
 800a852:	4621      	mov	r1, r4
 800a854:	4628      	mov	r0, r5
 800a856:	f7ff fdb7 	bl	800a3c8 <_fflush_r>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d1ed      	bne.n	800a83a <__swbuf_r+0x2a>
 800a85e:	68a3      	ldr	r3, [r4, #8]
 800a860:	3b01      	subs	r3, #1
 800a862:	60a3      	str	r3, [r4, #8]
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	6022      	str	r2, [r4, #0]
 800a86a:	701e      	strb	r6, [r3, #0]
 800a86c:	6962      	ldr	r2, [r4, #20]
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	429a      	cmp	r2, r3
 800a872:	d004      	beq.n	800a87e <__swbuf_r+0x6e>
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	07db      	lsls	r3, r3, #31
 800a878:	d5e1      	bpl.n	800a83e <__swbuf_r+0x2e>
 800a87a:	2e0a      	cmp	r6, #10
 800a87c:	d1df      	bne.n	800a83e <__swbuf_r+0x2e>
 800a87e:	4621      	mov	r1, r4
 800a880:	4628      	mov	r0, r5
 800a882:	f7ff fda1 	bl	800a3c8 <_fflush_r>
 800a886:	2800      	cmp	r0, #0
 800a888:	d0d9      	beq.n	800a83e <__swbuf_r+0x2e>
 800a88a:	e7d6      	b.n	800a83a <__swbuf_r+0x2a>

0800a88c <__swsetup_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4b29      	ldr	r3, [pc, #164]	@ (800a934 <__swsetup_r+0xa8>)
 800a890:	4605      	mov	r5, r0
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	460c      	mov	r4, r1
 800a896:	b118      	cbz	r0, 800a8a0 <__swsetup_r+0x14>
 800a898:	6a03      	ldr	r3, [r0, #32]
 800a89a:	b90b      	cbnz	r3, 800a8a0 <__swsetup_r+0x14>
 800a89c:	f7fe f832 	bl	8008904 <__sinit>
 800a8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a4:	0719      	lsls	r1, r3, #28
 800a8a6:	d422      	bmi.n	800a8ee <__swsetup_r+0x62>
 800a8a8:	06da      	lsls	r2, r3, #27
 800a8aa:	d407      	bmi.n	800a8bc <__swsetup_r+0x30>
 800a8ac:	2209      	movs	r2, #9
 800a8ae:	602a      	str	r2, [r5, #0]
 800a8b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ba:	e033      	b.n	800a924 <__swsetup_r+0x98>
 800a8bc:	0758      	lsls	r0, r3, #29
 800a8be:	d512      	bpl.n	800a8e6 <__swsetup_r+0x5a>
 800a8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c2:	b141      	cbz	r1, 800a8d6 <__swsetup_r+0x4a>
 800a8c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	d002      	beq.n	800a8d2 <__swsetup_r+0x46>
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f7fe ffd3 	bl	8009878 <_free_r>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6063      	str	r3, [r4, #4]
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	f043 0308 	orr.w	r3, r3, #8
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	b94b      	cbnz	r3, 800a906 <__swsetup_r+0x7a>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8fc:	d003      	beq.n	800a906 <__swsetup_r+0x7a>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4628      	mov	r0, r5
 800a902:	f000 f883 	bl	800aa0c <__smakebuf_r>
 800a906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90a:	f013 0201 	ands.w	r2, r3, #1
 800a90e:	d00a      	beq.n	800a926 <__swsetup_r+0x9a>
 800a910:	2200      	movs	r2, #0
 800a912:	60a2      	str	r2, [r4, #8]
 800a914:	6962      	ldr	r2, [r4, #20]
 800a916:	4252      	negs	r2, r2
 800a918:	61a2      	str	r2, [r4, #24]
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	b942      	cbnz	r2, 800a930 <__swsetup_r+0xa4>
 800a91e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a922:	d1c5      	bne.n	800a8b0 <__swsetup_r+0x24>
 800a924:	bd38      	pop	{r3, r4, r5, pc}
 800a926:	0799      	lsls	r1, r3, #30
 800a928:	bf58      	it	pl
 800a92a:	6962      	ldrpl	r2, [r4, #20]
 800a92c:	60a2      	str	r2, [r4, #8]
 800a92e:	e7f4      	b.n	800a91a <__swsetup_r+0x8e>
 800a930:	2000      	movs	r0, #0
 800a932:	e7f7      	b.n	800a924 <__swsetup_r+0x98>
 800a934:	200002b4 	.word	0x200002b4

0800a938 <_raise_r>:
 800a938:	291f      	cmp	r1, #31
 800a93a:	b538      	push	{r3, r4, r5, lr}
 800a93c:	4605      	mov	r5, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	d904      	bls.n	800a94c <_raise_r+0x14>
 800a942:	2316      	movs	r3, #22
 800a944:	6003      	str	r3, [r0, #0]
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a94e:	b112      	cbz	r2, 800a956 <_raise_r+0x1e>
 800a950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a954:	b94b      	cbnz	r3, 800a96a <_raise_r+0x32>
 800a956:	4628      	mov	r0, r5
 800a958:	f000 f830 	bl	800a9bc <_getpid_r>
 800a95c:	4622      	mov	r2, r4
 800a95e:	4601      	mov	r1, r0
 800a960:	4628      	mov	r0, r5
 800a962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a966:	f000 b817 	b.w	800a998 <_kill_r>
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d00a      	beq.n	800a984 <_raise_r+0x4c>
 800a96e:	1c59      	adds	r1, r3, #1
 800a970:	d103      	bne.n	800a97a <_raise_r+0x42>
 800a972:	2316      	movs	r3, #22
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	2001      	movs	r0, #1
 800a978:	e7e7      	b.n	800a94a <_raise_r+0x12>
 800a97a:	2100      	movs	r1, #0
 800a97c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a980:	4620      	mov	r0, r4
 800a982:	4798      	blx	r3
 800a984:	2000      	movs	r0, #0
 800a986:	e7e0      	b.n	800a94a <_raise_r+0x12>

0800a988 <raise>:
 800a988:	4b02      	ldr	r3, [pc, #8]	@ (800a994 <raise+0xc>)
 800a98a:	4601      	mov	r1, r0
 800a98c:	6818      	ldr	r0, [r3, #0]
 800a98e:	f7ff bfd3 	b.w	800a938 <_raise_r>
 800a992:	bf00      	nop
 800a994:	200002b4 	.word	0x200002b4

0800a998 <_kill_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	@ (800a9b8 <_kill_r+0x20>)
 800a99c:	2300      	movs	r3, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	f7f8 fd0b 	bl	80033c0 <_kill>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	d102      	bne.n	800a9b4 <_kill_r+0x1c>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	b103      	cbz	r3, 800a9b4 <_kill_r+0x1c>
 800a9b2:	6023      	str	r3, [r4, #0]
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	bf00      	nop
 800a9b8:	2001e7c0 	.word	0x2001e7c0

0800a9bc <_getpid_r>:
 800a9bc:	f7f8 bcf8 	b.w	80033b0 <_getpid>

0800a9c0 <__swhatbuf_r>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	b096      	sub	sp, #88	@ 0x58
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	461e      	mov	r6, r3
 800a9d0:	da0d      	bge.n	800a9ee <__swhatbuf_r+0x2e>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9d8:	f04f 0100 	mov.w	r1, #0
 800a9dc:	bf14      	ite	ne
 800a9de:	2340      	movne	r3, #64	@ 0x40
 800a9e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	6031      	str	r1, [r6, #0]
 800a9e8:	602b      	str	r3, [r5, #0]
 800a9ea:	b016      	add	sp, #88	@ 0x58
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	466a      	mov	r2, sp
 800a9f0:	f000 f848 	bl	800aa84 <_fstat_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	dbec      	blt.n	800a9d2 <__swhatbuf_r+0x12>
 800a9f8:	9901      	ldr	r1, [sp, #4]
 800a9fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa02:	4259      	negs	r1, r3
 800aa04:	4159      	adcs	r1, r3
 800aa06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa0a:	e7eb      	b.n	800a9e4 <__swhatbuf_r+0x24>

0800aa0c <__smakebuf_r>:
 800aa0c:	898b      	ldrh	r3, [r1, #12]
 800aa0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa10:	079d      	lsls	r5, r3, #30
 800aa12:	4606      	mov	r6, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	d507      	bpl.n	800aa28 <__smakebuf_r+0x1c>
 800aa18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	2301      	movs	r3, #1
 800aa22:	6163      	str	r3, [r4, #20]
 800aa24:	b003      	add	sp, #12
 800aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa28:	ab01      	add	r3, sp, #4
 800aa2a:	466a      	mov	r2, sp
 800aa2c:	f7ff ffc8 	bl	800a9c0 <__swhatbuf_r>
 800aa30:	9f00      	ldr	r7, [sp, #0]
 800aa32:	4605      	mov	r5, r0
 800aa34:	4639      	mov	r1, r7
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7fd f97c 	bl	8007d34 <_malloc_r>
 800aa3c:	b948      	cbnz	r0, 800aa52 <__smakebuf_r+0x46>
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	059a      	lsls	r2, r3, #22
 800aa44:	d4ee      	bmi.n	800aa24 <__smakebuf_r+0x18>
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	f043 0302 	orr.w	r3, r3, #2
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	e7e2      	b.n	800aa18 <__smakebuf_r+0xc>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	6020      	str	r0, [r4, #0]
 800aa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa62:	b15b      	cbz	r3, 800aa7c <__smakebuf_r+0x70>
 800aa64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f000 f81d 	bl	800aaa8 <_isatty_r>
 800aa6e:	b128      	cbz	r0, 800aa7c <__smakebuf_r+0x70>
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	f023 0303 	bic.w	r3, r3, #3
 800aa76:	f043 0301 	orr.w	r3, r3, #1
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	431d      	orrs	r5, r3
 800aa80:	81a5      	strh	r5, [r4, #12]
 800aa82:	e7cf      	b.n	800aa24 <__smakebuf_r+0x18>

0800aa84 <_fstat_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	@ (800aaa4 <_fstat_r+0x20>)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	f7f8 fcf5 	bl	8003480 <_fstat>
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	d102      	bne.n	800aaa0 <_fstat_r+0x1c>
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	b103      	cbz	r3, 800aaa0 <_fstat_r+0x1c>
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	bf00      	nop
 800aaa4:	2001e7c0 	.word	0x2001e7c0

0800aaa8 <_isatty_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d06      	ldr	r5, [pc, #24]	@ (800aac4 <_isatty_r+0x1c>)
 800aaac:	2300      	movs	r3, #0
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	602b      	str	r3, [r5, #0]
 800aab4:	f7f8 fcf4 	bl	80034a0 <_isatty>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_isatty_r+0x1a>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_isatty_r+0x1a>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	2001e7c0 	.word	0x2001e7c0

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
